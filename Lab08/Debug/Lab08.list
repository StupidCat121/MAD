
Lab08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a79c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  0800a9a0  0800a9a0  0000b9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b084  0800b084  0000d1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b084  0800b084  0000c084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b08c  0800b08c  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b08c  0800b08c  0000c08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b090  0800b090  0000c090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800b094  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  200001e0  0800b274  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  0800b274  0000d574  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017029  00000000  00000000  0000d20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003598  00000000  00000000  00024237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  000277d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fcf  00000000  00000000  00028c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002accc  00000000  00000000  00029bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc41  00000000  00000000  000548bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010174f  00000000  00000000  000704fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00171c4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067dc  00000000  00000000  00171c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0017846c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a984 	.word	0x0800a984

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800a984 	.word	0x0800a984

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9c0 	b.w	8000a00 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	468e      	mov	lr, r1
 8000710:	4604      	mov	r4, r0
 8000712:	4688      	mov	r8, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d962      	bls.n	80007e4 <__udivmoddi4+0xdc>
 800071e:	fab2 f682 	clz	r6, r2
 8000722:	b14e      	cbz	r6, 8000738 <__udivmoddi4+0x30>
 8000724:	f1c6 0320 	rsb	r3, r6, #32
 8000728:	fa01 f806 	lsl.w	r8, r1, r6
 800072c:	fa20 f303 	lsr.w	r3, r0, r3
 8000730:	40b7      	lsls	r7, r6
 8000732:	ea43 0808 	orr.w	r8, r3, r8
 8000736:	40b4      	lsls	r4, r6
 8000738:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800073c:	fa1f fc87 	uxth.w	ip, r7
 8000740:	fbb8 f1fe 	udiv	r1, r8, lr
 8000744:	0c23      	lsrs	r3, r4, #16
 8000746:	fb0e 8811 	mls	r8, lr, r1, r8
 800074a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800074e:	fb01 f20c 	mul.w	r2, r1, ip
 8000752:	429a      	cmp	r2, r3
 8000754:	d909      	bls.n	800076a <__udivmoddi4+0x62>
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	f101 30ff 	add.w	r0, r1, #4294967295
 800075c:	f080 80ea 	bcs.w	8000934 <__udivmoddi4+0x22c>
 8000760:	429a      	cmp	r2, r3
 8000762:	f240 80e7 	bls.w	8000934 <__udivmoddi4+0x22c>
 8000766:	3902      	subs	r1, #2
 8000768:	443b      	add	r3, r7
 800076a:	1a9a      	subs	r2, r3, r2
 800076c:	b2a3      	uxth	r3, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800077a:	fb00 fc0c 	mul.w	ip, r0, ip
 800077e:	459c      	cmp	ip, r3
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x8e>
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	f100 32ff 	add.w	r2, r0, #4294967295
 8000788:	f080 80d6 	bcs.w	8000938 <__udivmoddi4+0x230>
 800078c:	459c      	cmp	ip, r3
 800078e:	f240 80d3 	bls.w	8000938 <__udivmoddi4+0x230>
 8000792:	443b      	add	r3, r7
 8000794:	3802      	subs	r0, #2
 8000796:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079a:	eba3 030c 	sub.w	r3, r3, ip
 800079e:	2100      	movs	r1, #0
 80007a0:	b11d      	cbz	r5, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40f3      	lsrs	r3, r6
 80007a4:	2200      	movs	r2, #0
 80007a6:	e9c5 3200 	strd	r3, r2, [r5]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d905      	bls.n	80007be <__udivmoddi4+0xb6>
 80007b2:	b10d      	cbz	r5, 80007b8 <__udivmoddi4+0xb0>
 80007b4:	e9c5 0100 	strd	r0, r1, [r5]
 80007b8:	2100      	movs	r1, #0
 80007ba:	4608      	mov	r0, r1
 80007bc:	e7f5      	b.n	80007aa <__udivmoddi4+0xa2>
 80007be:	fab3 f183 	clz	r1, r3
 80007c2:	2900      	cmp	r1, #0
 80007c4:	d146      	bne.n	8000854 <__udivmoddi4+0x14c>
 80007c6:	4573      	cmp	r3, lr
 80007c8:	d302      	bcc.n	80007d0 <__udivmoddi4+0xc8>
 80007ca:	4282      	cmp	r2, r0
 80007cc:	f200 8105 	bhi.w	80009da <__udivmoddi4+0x2d2>
 80007d0:	1a84      	subs	r4, r0, r2
 80007d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007d6:	2001      	movs	r0, #1
 80007d8:	4690      	mov	r8, r2
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d0e5      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007de:	e9c5 4800 	strd	r4, r8, [r5]
 80007e2:	e7e2      	b.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f000 8090 	beq.w	800090a <__udivmoddi4+0x202>
 80007ea:	fab2 f682 	clz	r6, r2
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	f040 80a4 	bne.w	800093c <__udivmoddi4+0x234>
 80007f4:	1a8a      	subs	r2, r1, r2
 80007f6:	0c03      	lsrs	r3, r0, #16
 80007f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fc:	b280      	uxth	r0, r0
 80007fe:	b2bc      	uxth	r4, r7
 8000800:	2101      	movs	r1, #1
 8000802:	fbb2 fcfe 	udiv	ip, r2, lr
 8000806:	fb0e 221c 	mls	r2, lr, ip, r2
 800080a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800080e:	fb04 f20c 	mul.w	r2, r4, ip
 8000812:	429a      	cmp	r2, r3
 8000814:	d907      	bls.n	8000826 <__udivmoddi4+0x11e>
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	f10c 38ff 	add.w	r8, ip, #4294967295
 800081c:	d202      	bcs.n	8000824 <__udivmoddi4+0x11c>
 800081e:	429a      	cmp	r2, r3
 8000820:	f200 80e0 	bhi.w	80009e4 <__udivmoddi4+0x2dc>
 8000824:	46c4      	mov	ip, r8
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	fbb3 f2fe 	udiv	r2, r3, lr
 800082c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000830:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000834:	fb02 f404 	mul.w	r4, r2, r4
 8000838:	429c      	cmp	r4, r3
 800083a:	d907      	bls.n	800084c <__udivmoddi4+0x144>
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x142>
 8000844:	429c      	cmp	r4, r3
 8000846:	f200 80ca 	bhi.w	80009de <__udivmoddi4+0x2d6>
 800084a:	4602      	mov	r2, r0
 800084c:	1b1b      	subs	r3, r3, r4
 800084e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000852:	e7a5      	b.n	80007a0 <__udivmoddi4+0x98>
 8000854:	f1c1 0620 	rsb	r6, r1, #32
 8000858:	408b      	lsls	r3, r1
 800085a:	fa22 f706 	lsr.w	r7, r2, r6
 800085e:	431f      	orrs	r7, r3
 8000860:	fa0e f401 	lsl.w	r4, lr, r1
 8000864:	fa20 f306 	lsr.w	r3, r0, r6
 8000868:	fa2e fe06 	lsr.w	lr, lr, r6
 800086c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000870:	4323      	orrs	r3, r4
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	fa1f fc87 	uxth.w	ip, r7
 800087a:	fbbe f0f9 	udiv	r0, lr, r9
 800087e:	0c1c      	lsrs	r4, r3, #16
 8000880:	fb09 ee10 	mls	lr, r9, r0, lr
 8000884:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000888:	fb00 fe0c 	mul.w	lr, r0, ip
 800088c:	45a6      	cmp	lr, r4
 800088e:	fa02 f201 	lsl.w	r2, r2, r1
 8000892:	d909      	bls.n	80008a8 <__udivmoddi4+0x1a0>
 8000894:	193c      	adds	r4, r7, r4
 8000896:	f100 3aff 	add.w	sl, r0, #4294967295
 800089a:	f080 809c 	bcs.w	80009d6 <__udivmoddi4+0x2ce>
 800089e:	45a6      	cmp	lr, r4
 80008a0:	f240 8099 	bls.w	80009d6 <__udivmoddi4+0x2ce>
 80008a4:	3802      	subs	r0, #2
 80008a6:	443c      	add	r4, r7
 80008a8:	eba4 040e 	sub.w	r4, r4, lr
 80008ac:	fa1f fe83 	uxth.w	lr, r3
 80008b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b4:	fb09 4413 	mls	r4, r9, r3, r4
 80008b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c0:	45a4      	cmp	ip, r4
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x1ce>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008ca:	f080 8082 	bcs.w	80009d2 <__udivmoddi4+0x2ca>
 80008ce:	45a4      	cmp	ip, r4
 80008d0:	d97f      	bls.n	80009d2 <__udivmoddi4+0x2ca>
 80008d2:	3b02      	subs	r3, #2
 80008d4:	443c      	add	r4, r7
 80008d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008da:	eba4 040c 	sub.w	r4, r4, ip
 80008de:	fba0 ec02 	umull	lr, ip, r0, r2
 80008e2:	4564      	cmp	r4, ip
 80008e4:	4673      	mov	r3, lr
 80008e6:	46e1      	mov	r9, ip
 80008e8:	d362      	bcc.n	80009b0 <__udivmoddi4+0x2a8>
 80008ea:	d05f      	beq.n	80009ac <__udivmoddi4+0x2a4>
 80008ec:	b15d      	cbz	r5, 8000906 <__udivmoddi4+0x1fe>
 80008ee:	ebb8 0203 	subs.w	r2, r8, r3
 80008f2:	eb64 0409 	sbc.w	r4, r4, r9
 80008f6:	fa04 f606 	lsl.w	r6, r4, r6
 80008fa:	fa22 f301 	lsr.w	r3, r2, r1
 80008fe:	431e      	orrs	r6, r3
 8000900:	40cc      	lsrs	r4, r1
 8000902:	e9c5 6400 	strd	r6, r4, [r5]
 8000906:	2100      	movs	r1, #0
 8000908:	e74f      	b.n	80007aa <__udivmoddi4+0xa2>
 800090a:	fbb1 fcf2 	udiv	ip, r1, r2
 800090e:	0c01      	lsrs	r1, r0, #16
 8000910:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000914:	b280      	uxth	r0, r0
 8000916:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800091a:	463b      	mov	r3, r7
 800091c:	4638      	mov	r0, r7
 800091e:	463c      	mov	r4, r7
 8000920:	46b8      	mov	r8, r7
 8000922:	46be      	mov	lr, r7
 8000924:	2620      	movs	r6, #32
 8000926:	fbb1 f1f7 	udiv	r1, r1, r7
 800092a:	eba2 0208 	sub.w	r2, r2, r8
 800092e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000932:	e766      	b.n	8000802 <__udivmoddi4+0xfa>
 8000934:	4601      	mov	r1, r0
 8000936:	e718      	b.n	800076a <__udivmoddi4+0x62>
 8000938:	4610      	mov	r0, r2
 800093a:	e72c      	b.n	8000796 <__udivmoddi4+0x8e>
 800093c:	f1c6 0220 	rsb	r2, r6, #32
 8000940:	fa2e f302 	lsr.w	r3, lr, r2
 8000944:	40b7      	lsls	r7, r6
 8000946:	40b1      	lsls	r1, r6
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000950:	430a      	orrs	r2, r1
 8000952:	fbb3 f8fe 	udiv	r8, r3, lr
 8000956:	b2bc      	uxth	r4, r7
 8000958:	fb0e 3318 	mls	r3, lr, r8, r3
 800095c:	0c11      	lsrs	r1, r2, #16
 800095e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000962:	fb08 f904 	mul.w	r9, r8, r4
 8000966:	40b0      	lsls	r0, r6
 8000968:	4589      	cmp	r9, r1
 800096a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800096e:	b280      	uxth	r0, r0
 8000970:	d93e      	bls.n	80009f0 <__udivmoddi4+0x2e8>
 8000972:	1879      	adds	r1, r7, r1
 8000974:	f108 3cff 	add.w	ip, r8, #4294967295
 8000978:	d201      	bcs.n	800097e <__udivmoddi4+0x276>
 800097a:	4589      	cmp	r9, r1
 800097c:	d81f      	bhi.n	80009be <__udivmoddi4+0x2b6>
 800097e:	eba1 0109 	sub.w	r1, r1, r9
 8000982:	fbb1 f9fe 	udiv	r9, r1, lr
 8000986:	fb09 f804 	mul.w	r8, r9, r4
 800098a:	fb0e 1119 	mls	r1, lr, r9, r1
 800098e:	b292      	uxth	r2, r2
 8000990:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000994:	4542      	cmp	r2, r8
 8000996:	d229      	bcs.n	80009ec <__udivmoddi4+0x2e4>
 8000998:	18ba      	adds	r2, r7, r2
 800099a:	f109 31ff 	add.w	r1, r9, #4294967295
 800099e:	d2c4      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a0:	4542      	cmp	r2, r8
 80009a2:	d2c2      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a4:	f1a9 0102 	sub.w	r1, r9, #2
 80009a8:	443a      	add	r2, r7
 80009aa:	e7be      	b.n	800092a <__udivmoddi4+0x222>
 80009ac:	45f0      	cmp	r8, lr
 80009ae:	d29d      	bcs.n	80008ec <__udivmoddi4+0x1e4>
 80009b0:	ebbe 0302 	subs.w	r3, lr, r2
 80009b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009b8:	3801      	subs	r0, #1
 80009ba:	46e1      	mov	r9, ip
 80009bc:	e796      	b.n	80008ec <__udivmoddi4+0x1e4>
 80009be:	eba7 0909 	sub.w	r9, r7, r9
 80009c2:	4449      	add	r1, r9
 80009c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009cc:	fb09 f804 	mul.w	r8, r9, r4
 80009d0:	e7db      	b.n	800098a <__udivmoddi4+0x282>
 80009d2:	4673      	mov	r3, lr
 80009d4:	e77f      	b.n	80008d6 <__udivmoddi4+0x1ce>
 80009d6:	4650      	mov	r0, sl
 80009d8:	e766      	b.n	80008a8 <__udivmoddi4+0x1a0>
 80009da:	4608      	mov	r0, r1
 80009dc:	e6fd      	b.n	80007da <__udivmoddi4+0xd2>
 80009de:	443b      	add	r3, r7
 80009e0:	3a02      	subs	r2, #2
 80009e2:	e733      	b.n	800084c <__udivmoddi4+0x144>
 80009e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e8:	443b      	add	r3, r7
 80009ea:	e71c      	b.n	8000826 <__udivmoddi4+0x11e>
 80009ec:	4649      	mov	r1, r9
 80009ee:	e79c      	b.n	800092a <__udivmoddi4+0x222>
 80009f0:	eba1 0109 	sub.w	r1, r1, r9
 80009f4:	46c4      	mov	ip, r8
 80009f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fa:	fb09 f804 	mul.w	r8, r9, r4
 80009fe:	e7c4      	b.n	800098a <__udivmoddi4+0x282>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b08b      	sub	sp, #44	@ 0x2c
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	4611      	mov	r1, r2
 8000a10:	461a      	mov	r2, r3
 8000a12:	4623      	mov	r3, r4
 8000a14:	80fb      	strh	r3, [r7, #6]
 8000a16:	4603      	mov	r3, r0
 8000a18:	80bb      	strh	r3, [r7, #4]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	807b      	strh	r3, [r7, #2]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8000a22:	887b      	ldrh	r3, [r7, #2]
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
    int y = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8000a2a:	887b      	ldrh	r3, [r7, #2]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	f1c3 0301 	rsb	r3, r3, #1
 8000a32:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8000a3c:	e061      	b.n	8000b02 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8000a3e:	88fa      	ldrh	r2, [r7, #6]
 8000a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	e018      	b.n	8000a7a <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	b298      	uxth	r0, r3
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	88bb      	ldrh	r3, [r7, #4]
 8000a52:	4413      	add	r3, r2
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	883a      	ldrh	r2, [r7, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f000 fc25 	bl	80012a8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	b298      	uxth	r0, r3
 8000a62:	6a3b      	ldr	r3, [r7, #32]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	88ba      	ldrh	r2, [r7, #4]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	883a      	ldrh	r2, [r7, #0]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f000 fc1a 	bl	80012a8 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	3301      	adds	r3, #1
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	88fa      	ldrh	r2, [r7, #6]
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7e:	4413      	add	r3, r2
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	dde0      	ble.n	8000a48 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000a86:	88fa      	ldrh	r2, [r7, #6]
 8000a88:	6a3b      	ldr	r3, [r7, #32]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	e018      	b.n	8000ac2 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	b298      	uxth	r0, r3
 8000a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	883a      	ldrh	r2, [r7, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f000 fc01 	bl	80012a8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	b298      	uxth	r0, r3
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	88ba      	ldrh	r2, [r7, #4]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	883a      	ldrh	r2, [r7, #0]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f000 fbf6 	bl	80012a8 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	88fa      	ldrh	r2, [r7, #6]
 8000ac4:	6a3b      	ldr	r3, [r7, #32]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	dde0      	ble.n	8000a90 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8000ace:	6a3b      	ldr	r3, [r7, #32]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	4413      	add	r3, r2
 8000ada:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	3302      	adds	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005a      	lsls	r2, r3, #1
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	4413      	add	r3, r2
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	dd09      	ble.n	8000b02 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8000aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af0:	3b01      	subs	r3, #1
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
            radiusError += xChange;
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	4413      	add	r3, r2
 8000afa:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	3302      	adds	r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8000b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	da99      	bge.n	8000a3e <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	372c      	adds	r7, #44	@ 0x2c
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd90      	pop	{r4, r7, pc}

08000b14 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b089      	sub	sp, #36	@ 0x24
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	4608      	mov	r0, r1
 8000b1e:	4611      	mov	r1, r2
 8000b20:	461a      	mov	r2, r3
 8000b22:	4623      	mov	r3, r4
 8000b24:	71fb      	strb	r3, [r7, #7]
 8000b26:	4603      	mov	r3, r0
 8000b28:	71bb      	strb	r3, [r7, #6]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	717b      	strb	r3, [r7, #5]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000b36:	7dfb      	ldrb	r3, [r7, #23]
 8000b38:	2b1f      	cmp	r3, #31
 8000b3a:	d802      	bhi.n	8000b42 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	e002      	b.n	8000b48 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	3b20      	subs	r3, #32
 8000b46:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	753b      	strb	r3, [r7, #20]
 8000b4c:	e012      	b.n	8000b74 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8000b4e:	7dfa      	ldrb	r2, [r7, #23]
 8000b50:	7d38      	ldrb	r0, [r7, #20]
 8000b52:	7d39      	ldrb	r1, [r7, #20]
 8000b54:	4c3b      	ldr	r4, [pc, #236]	@ (8000c44 <ILI9341_Draw_Char+0x130>)
 8000b56:	4613      	mov	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4423      	add	r3, r4
 8000b60:	4403      	add	r3, r0
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	f101 0318 	add.w	r3, r1, #24
 8000b68:	443b      	add	r3, r7
 8000b6a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000b6e:	7d3b      	ldrb	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	753b      	strb	r3, [r7, #20]
 8000b74:	7d3b      	ldrb	r3, [r7, #20]
 8000b76:	2b05      	cmp	r3, #5
 8000b78:	d9e9      	bls.n	8000b4e <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000b7a:	79bb      	ldrb	r3, [r7, #6]
 8000b7c:	b298      	uxth	r0, r3
 8000b7e:	797b      	ldrb	r3, [r7, #5]
 8000b80:	b299      	uxth	r1, r3
 8000b82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b84:	461a      	mov	r2, r3
 8000b86:	0052      	lsls	r2, r2, #1
 8000b88:	4413      	add	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	b29c      	uxth	r4, r3
 8000b94:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	4623      	mov	r3, r4
 8000b9a:	f000 fc5f 	bl	800145c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	757b      	strb	r3, [r7, #21]
 8000ba2:	e047      	b.n	8000c34 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75bb      	strb	r3, [r7, #22]
 8000ba8:	e03e      	b.n	8000c28 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8000baa:	7d7b      	ldrb	r3, [r7, #21]
 8000bac:	3318      	adds	r3, #24
 8000bae:	443b      	add	r3, r7
 8000bb0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	7dbb      	ldrb	r3, [r7, #22]
 8000bb8:	fa42 f303 	asr.w	r3, r2, r3
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d02e      	beq.n	8000c22 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8000bc4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d110      	bne.n	8000bec <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000bca:	79bb      	ldrb	r3, [r7, #6]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	7d7b      	ldrb	r3, [r7, #21]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b298      	uxth	r0, r3
 8000bd6:	797b      	ldrb	r3, [r7, #5]
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	7dbb      	ldrb	r3, [r7, #22]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	4413      	add	r3, r2
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	887a      	ldrh	r2, [r7, #2]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f000 fb5f 	bl	80012a8 <ILI9341_Draw_Pixel>
 8000bea:	e01a      	b.n	8000c22 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	7d7b      	ldrb	r3, [r7, #21]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000bf6:	fb11 f303 	smulbb	r3, r1, r3
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b298      	uxth	r0, r3
 8000c00:	797b      	ldrb	r3, [r7, #5]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	7dbb      	ldrb	r3, [r7, #22]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000c0a:	fb11 f303 	smulbb	r3, r1, r3
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	4413      	add	r3, r2
 8000c12:	b299      	uxth	r1, r3
 8000c14:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000c16:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000c18:	887b      	ldrh	r3, [r7, #2]
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	4623      	mov	r3, r4
 8000c1e:	f000 fc1d 	bl	800145c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000c22:	7dbb      	ldrb	r3, [r7, #22]
 8000c24:	3301      	adds	r3, #1
 8000c26:	75bb      	strb	r3, [r7, #22]
 8000c28:	7dbb      	ldrb	r3, [r7, #22]
 8000c2a:	2b07      	cmp	r3, #7
 8000c2c:	d9bd      	bls.n	8000baa <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000c2e:	7d7b      	ldrb	r3, [r7, #21]
 8000c30:	3301      	adds	r3, #1
 8000c32:	757b      	strb	r3, [r7, #21]
 8000c34:	7d7b      	ldrb	r3, [r7, #21]
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	d9b4      	bls.n	8000ba4 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	371c      	adds	r7, #28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	0800aa00 	.word	0x0800aa00

08000c48 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	4608      	mov	r0, r1
 8000c52:	4611      	mov	r1, r2
 8000c54:	461a      	mov	r2, r3
 8000c56:	4603      	mov	r3, r0
 8000c58:	70fb      	strb	r3, [r7, #3]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	70bb      	strb	r3, [r7, #2]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000c62:	e017      	b.n	8000c94 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	7818      	ldrb	r0, [r3, #0]
 8000c6c:	883c      	ldrh	r4, [r7, #0]
 8000c6e:	78ba      	ldrb	r2, [r7, #2]
 8000c70:	78f9      	ldrb	r1, [r7, #3]
 8000c72:	8bbb      	ldrh	r3, [r7, #28]
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	8b3b      	ldrh	r3, [r7, #24]
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	4623      	mov	r3, r4
 8000c7c:	f7ff ff4a 	bl	8000b14 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000c80:	8b3b      	ldrh	r3, [r7, #24]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	461a      	mov	r2, r3
 8000c86:	0052      	lsls	r2, r2, #1
 8000c88:	4413      	add	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	78fb      	ldrb	r3, [r7, #3]
 8000c90:	4413      	add	r3, r2
 8000c92:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1e3      	bne.n	8000c64 <ILI9341_Draw_Text+0x1c>
    }
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd90      	pop	{r4, r7, pc}
	...

08000ca8 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8000cac:	f001 fafe 	bl	80022ac <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8000cb0:	f000 fd64 	bl	800177c <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cba:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <ILI9341_SPI_Init+0x1c>)
 8000cbc:	f002 f90c 	bl	8002ed8 <HAL_GPIO_WritePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40020800 	.word	0x40020800

08000cc8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000cd2:	1df9      	adds	r1, r7, #7
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4803      	ldr	r0, [pc, #12]	@ (8000ce8 <ILI9341_SPI_Send+0x20>)
 8000cda:	f004 f890 	bl	8004dfe <HAL_SPI_Transmit>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200002e8 	.word	0x200002e8

08000cec <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cfc:	480b      	ldr	r0, [pc, #44]	@ (8000d2c <ILI9341_Write_Command+0x40>)
 8000cfe:	f002 f8eb 	bl	8002ed8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d08:	4808      	ldr	r0, [pc, #32]	@ (8000d2c <ILI9341_Write_Command+0x40>)
 8000d0a:	f002 f8e5 	bl	8002ed8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ffd9 	bl	8000cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <ILI9341_Write_Command+0x40>)
 8000d1e:	f002 f8db 	bl	8002ed8 <HAL_GPIO_WritePin>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40020800 	.word	0x40020800

08000d30 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d40:	480b      	ldr	r0, [pc, #44]	@ (8000d70 <ILI9341_Write_Data+0x40>)
 8000d42:	f002 f8c9 	bl	8002ed8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d4c:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <ILI9341_Write_Data+0x40>)
 8000d4e:	f002 f8c3 	bl	8002ed8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ffb7 	bl	8000cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d60:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <ILI9341_Write_Data+0x40>)
 8000d62:	f002 f8b9 	bl	8002ed8 <HAL_GPIO_WritePin>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40020800 	.word	0x40020800

08000d74 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	4611      	mov	r1, r2
 8000d80:	461a      	mov	r2, r3
 8000d82:	4623      	mov	r3, r4
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	4603      	mov	r3, r0
 8000d88:	80bb      	strh	r3, [r7, #4]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	807b      	strh	r3, [r7, #2]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000d92:	202a      	movs	r0, #42	@ 0x2a
 8000d94:	f7ff ffaa 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffc5 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ffc0 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000db0:	887b      	ldrh	r3, [r7, #2]
 8000db2:	0a1b      	lsrs	r3, r3, #8
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ffb9 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ffb4 	bl	8000d30 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000dc8:	202b      	movs	r0, #43	@ 0x2b
 8000dca:	f7ff ff8f 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000dce:	88bb      	ldrh	r3, [r7, #4]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ffaa 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000ddc:	88bb      	ldrh	r3, [r7, #4]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ffa5 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000de6:	883b      	ldrh	r3, [r7, #0]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff9e 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000df4:	883b      	ldrh	r3, [r7, #0]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff99 	bl	8000d30 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000dfe:	202c      	movs	r0, #44	@ 0x2c
 8000e00:	f7ff ff74 	bl	8000cec <ILI9341_Write_Command>
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd90      	pop	{r4, r7, pc}

08000e0c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e16:	480b      	ldr	r0, [pc, #44]	@ (8000e44 <ILI9341_Reset+0x38>)
 8000e18:	f002 f85e 	bl	8002ed8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000e1c:	20c8      	movs	r0, #200	@ 0xc8
 8000e1e:	f001 fd8d 	bl	800293c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e28:	4806      	ldr	r0, [pc, #24]	@ (8000e44 <ILI9341_Reset+0x38>)
 8000e2a:	f002 f855 	bl	8002ed8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000e2e:	20c8      	movs	r0, #200	@ 0xc8
 8000e30:	f001 fd84 	bl	800293c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e3a:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <ILI9341_Reset+0x38>)
 8000e3c:	f002 f84c 	bl	8002ed8 <HAL_GPIO_WritePin>
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40020800 	.word	0x40020800

08000e48 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000e56:	2036      	movs	r0, #54	@ 0x36
 8000e58:	f7ff ff48 	bl	8000cec <ILI9341_Write_Command>
HAL_Delay(1);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f001 fd6d 	bl	800293c <HAL_Delay>
	
switch(screen_rotation) 
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d837      	bhi.n	8000ed8 <ILI9341_Set_Rotation+0x90>
 8000e68:	a201      	add	r2, pc, #4	@ (adr r2, 8000e70 <ILI9341_Set_Rotation+0x28>)
 8000e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6e:	bf00      	nop
 8000e70:	08000e81 	.word	0x08000e81
 8000e74:	08000e97 	.word	0x08000e97
 8000e78:	08000ead 	.word	0x08000ead
 8000e7c:	08000ec3 	.word	0x08000ec3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000e80:	2048      	movs	r0, #72	@ 0x48
 8000e82:	f7ff ff55 	bl	8000d30 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <ILI9341_Set_Rotation+0x9c>)
 8000e88:	22f0      	movs	r2, #240	@ 0xf0
 8000e8a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <ILI9341_Set_Rotation+0xa0>)
 8000e8e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000e92:	801a      	strh	r2, [r3, #0]
			break;
 8000e94:	e021      	b.n	8000eda <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000e96:	2028      	movs	r0, #40	@ 0x28
 8000e98:	f7ff ff4a 	bl	8000d30 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <ILI9341_Set_Rotation+0x9c>)
 8000e9e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ea2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <ILI9341_Set_Rotation+0xa0>)
 8000ea6:	22f0      	movs	r2, #240	@ 0xf0
 8000ea8:	801a      	strh	r2, [r3, #0]
			break;
 8000eaa:	e016      	b.n	8000eda <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000eac:	2088      	movs	r0, #136	@ 0x88
 8000eae:	f7ff ff3f 	bl	8000d30 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <ILI9341_Set_Rotation+0x9c>)
 8000eb4:	22f0      	movs	r2, #240	@ 0xf0
 8000eb6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <ILI9341_Set_Rotation+0xa0>)
 8000eba:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ebe:	801a      	strh	r2, [r3, #0]
			break;
 8000ec0:	e00b      	b.n	8000eda <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000ec2:	20e8      	movs	r0, #232	@ 0xe8
 8000ec4:	f7ff ff34 	bl	8000d30 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <ILI9341_Set_Rotation+0x9c>)
 8000eca:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ece:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <ILI9341_Set_Rotation+0xa0>)
 8000ed2:	22f0      	movs	r2, #240	@ 0xf0
 8000ed4:	801a      	strh	r2, [r3, #0]
			break;
 8000ed6:	e000      	b.n	8000eda <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000ed8:	bf00      	nop
	}
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000002 	.word	0x20000002
 8000ee8:	20000000 	.word	0x20000000

08000eec <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ef6:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <ILI9341_Enable+0x14>)
 8000ef8:	f001 ffee 	bl	8002ed8 <HAL_GPIO_WritePin>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40020800 	.word	0x40020800

08000f04 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000f08:	f7ff fff0 	bl	8000eec <ILI9341_Enable>
ILI9341_SPI_Init();
 8000f0c:	f7ff fecc 	bl	8000ca8 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000f10:	f7ff ff7c 	bl	8000e0c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff fee9 	bl	8000cec <ILI9341_Write_Command>
HAL_Delay(1000);
 8000f1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f1e:	f001 fd0d 	bl	800293c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000f22:	20cb      	movs	r0, #203	@ 0xcb
 8000f24:	f7ff fee2 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000f28:	2039      	movs	r0, #57	@ 0x39
 8000f2a:	f7ff ff01 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000f2e:	202c      	movs	r0, #44	@ 0x2c
 8000f30:	f7ff fefe 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fefb 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000f3a:	2034      	movs	r0, #52	@ 0x34
 8000f3c:	f7ff fef8 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000f40:	2002      	movs	r0, #2
 8000f42:	f7ff fef5 	bl	8000d30 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000f46:	20cf      	movs	r0, #207	@ 0xcf
 8000f48:	f7ff fed0 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff feef 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000f52:	20c1      	movs	r0, #193	@ 0xc1
 8000f54:	f7ff feec 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000f58:	2030      	movs	r0, #48	@ 0x30
 8000f5a:	f7ff fee9 	bl	8000d30 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000f5e:	20e8      	movs	r0, #232	@ 0xe8
 8000f60:	f7ff fec4 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000f64:	2085      	movs	r0, #133	@ 0x85
 8000f66:	f7ff fee3 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff fee0 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000f70:	2078      	movs	r0, #120	@ 0x78
 8000f72:	f7ff fedd 	bl	8000d30 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000f76:	20ea      	movs	r0, #234	@ 0xea
 8000f78:	f7ff feb8 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fed7 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff fed4 	bl	8000d30 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000f88:	20ed      	movs	r0, #237	@ 0xed
 8000f8a:	f7ff feaf 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000f8e:	2064      	movs	r0, #100	@ 0x64
 8000f90:	f7ff fece 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f7ff fecb 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000f9a:	2012      	movs	r0, #18
 8000f9c:	f7ff fec8 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000fa0:	2081      	movs	r0, #129	@ 0x81
 8000fa2:	f7ff fec5 	bl	8000d30 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000fa6:	20f7      	movs	r0, #247	@ 0xf7
 8000fa8:	f7ff fea0 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000fac:	2020      	movs	r0, #32
 8000fae:	f7ff febf 	bl	8000d30 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000fb2:	20c0      	movs	r0, #192	@ 0xc0
 8000fb4:	f7ff fe9a 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000fb8:	2023      	movs	r0, #35	@ 0x23
 8000fba:	f7ff feb9 	bl	8000d30 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000fbe:	20c1      	movs	r0, #193	@ 0xc1
 8000fc0:	f7ff fe94 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000fc4:	2010      	movs	r0, #16
 8000fc6:	f7ff feb3 	bl	8000d30 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000fca:	20c5      	movs	r0, #197	@ 0xc5
 8000fcc:	f7ff fe8e 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000fd0:	203e      	movs	r0, #62	@ 0x3e
 8000fd2:	f7ff fead 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000fd6:	2028      	movs	r0, #40	@ 0x28
 8000fd8:	f7ff feaa 	bl	8000d30 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000fdc:	20c7      	movs	r0, #199	@ 0xc7
 8000fde:	f7ff fe85 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000fe2:	2086      	movs	r0, #134	@ 0x86
 8000fe4:	f7ff fea4 	bl	8000d30 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000fe8:	2036      	movs	r0, #54	@ 0x36
 8000fea:	f7ff fe7f 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000fee:	2048      	movs	r0, #72	@ 0x48
 8000ff0:	f7ff fe9e 	bl	8000d30 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000ff4:	203a      	movs	r0, #58	@ 0x3a
 8000ff6:	f7ff fe79 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000ffa:	2055      	movs	r0, #85	@ 0x55
 8000ffc:	f7ff fe98 	bl	8000d30 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001000:	20b1      	movs	r0, #177	@ 0xb1
 8001002:	f7ff fe73 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff fe92 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 800100c:	2018      	movs	r0, #24
 800100e:	f7ff fe8f 	bl	8000d30 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001012:	20b6      	movs	r0, #182	@ 0xb6
 8001014:	f7ff fe6a 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001018:	2008      	movs	r0, #8
 800101a:	f7ff fe89 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800101e:	2082      	movs	r0, #130	@ 0x82
 8001020:	f7ff fe86 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001024:	2027      	movs	r0, #39	@ 0x27
 8001026:	f7ff fe83 	bl	8000d30 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800102a:	20f2      	movs	r0, #242	@ 0xf2
 800102c:	f7ff fe5e 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff fe7d 	bl	8000d30 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001036:	2026      	movs	r0, #38	@ 0x26
 8001038:	f7ff fe58 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff fe77 	bl	8000d30 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001042:	20e0      	movs	r0, #224	@ 0xe0
 8001044:	f7ff fe52 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001048:	200f      	movs	r0, #15
 800104a:	f7ff fe71 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800104e:	2031      	movs	r0, #49	@ 0x31
 8001050:	f7ff fe6e 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001054:	202b      	movs	r0, #43	@ 0x2b
 8001056:	f7ff fe6b 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800105a:	200c      	movs	r0, #12
 800105c:	f7ff fe68 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001060:	200e      	movs	r0, #14
 8001062:	f7ff fe65 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001066:	2008      	movs	r0, #8
 8001068:	f7ff fe62 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800106c:	204e      	movs	r0, #78	@ 0x4e
 800106e:	f7ff fe5f 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001072:	20f1      	movs	r0, #241	@ 0xf1
 8001074:	f7ff fe5c 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001078:	2037      	movs	r0, #55	@ 0x37
 800107a:	f7ff fe59 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff fe56 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001084:	2010      	movs	r0, #16
 8001086:	f7ff fe53 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800108a:	2003      	movs	r0, #3
 800108c:	f7ff fe50 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001090:	200e      	movs	r0, #14
 8001092:	f7ff fe4d 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001096:	2009      	movs	r0, #9
 8001098:	f7ff fe4a 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fe47 	bl	8000d30 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80010a2:	20e1      	movs	r0, #225	@ 0xe1
 80010a4:	f7ff fe22 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff fe41 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80010ae:	200e      	movs	r0, #14
 80010b0:	f7ff fe3e 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80010b4:	2014      	movs	r0, #20
 80010b6:	f7ff fe3b 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f7ff fe38 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80010c0:	2011      	movs	r0, #17
 80010c2:	f7ff fe35 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80010c6:	2007      	movs	r0, #7
 80010c8:	f7ff fe32 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80010cc:	2031      	movs	r0, #49	@ 0x31
 80010ce:	f7ff fe2f 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80010d2:	20c1      	movs	r0, #193	@ 0xc1
 80010d4:	f7ff fe2c 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80010d8:	2048      	movs	r0, #72	@ 0x48
 80010da:	f7ff fe29 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80010de:	2008      	movs	r0, #8
 80010e0:	f7ff fe26 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80010e4:	200f      	movs	r0, #15
 80010e6:	f7ff fe23 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80010ea:	200c      	movs	r0, #12
 80010ec:	f7ff fe20 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80010f0:	2031      	movs	r0, #49	@ 0x31
 80010f2:	f7ff fe1d 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80010f6:	2036      	movs	r0, #54	@ 0x36
 80010f8:	f7ff fe1a 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80010fc:	200f      	movs	r0, #15
 80010fe:	f7ff fe17 	bl	8000d30 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001102:	2011      	movs	r0, #17
 8001104:	f7ff fdf2 	bl	8000cec <ILI9341_Write_Command>
HAL_Delay(120);
 8001108:	2078      	movs	r0, #120	@ 0x78
 800110a:	f001 fc17 	bl	800293c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800110e:	2029      	movs	r0, #41	@ 0x29
 8001110:	f7ff fdec 	bl	8000cec <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff fe97 	bl	8000e48 <ILI9341_Set_Rotation>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001124:	b08d      	sub	sp, #52	@ 0x34
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	6039      	str	r1, [r7, #0]
 800112c:	80fb      	strh	r3, [r7, #6]
 800112e:	466b      	mov	r3, sp
 8001130:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800113e:	d202      	bcs.n	8001146 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001144:	e002      	b.n	800114c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001146:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001152:	4840      	ldr	r0, [pc, #256]	@ (8001254 <ILI9341_Draw_Colour_Burst+0x134>)
 8001154:	f001 fec0 	bl	8002ed8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800115e:	483d      	ldr	r0, [pc, #244]	@ (8001254 <ILI9341_Draw_Colour_Burst+0x134>)
 8001160:	f001 feba 	bl	8002ed8 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	b29b      	uxth	r3, r3
 800116a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 800116e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001170:	460b      	mov	r3, r1
 8001172:	3b01      	subs	r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	2300      	movs	r3, #0
 8001178:	4688      	mov	r8, r1
 800117a:	4699      	mov	r9, r3
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001188:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800118c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001190:	2300      	movs	r3, #0
 8001192:	460c      	mov	r4, r1
 8001194:	461d      	mov	r5, r3
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	00eb      	lsls	r3, r5, #3
 80011a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011a4:	00e2      	lsls	r2, r4, #3
 80011a6:	1dcb      	adds	r3, r1, #7
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	ebad 0d03 	sub.w	sp, sp, r3
 80011b0:	466b      	mov	r3, sp
 80011b2:	3300      	adds	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011ba:	e00e      	b.n	80011da <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c0:	4413      	add	r3, r2
 80011c2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80011c6:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80011c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ca:	3301      	adds	r3, #1
 80011cc:	88fa      	ldrh	r2, [r7, #6]
 80011ce:	b2d1      	uxtb	r1, r2
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80011d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d6:	3302      	adds	r3, #2
 80011d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3ec      	bcc.n	80011bc <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f0:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80011fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80011fc:	fb01 f202 	mul.w	r2, r1, r2
 8001200:	1a9b      	subs	r3, r3, r2
 8001202:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d010      	beq.n	800122c <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
 800120e:	e009      	b.n	8001224 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001212:	b29a      	uxth	r2, r3
 8001214:	230a      	movs	r3, #10
 8001216:	69b9      	ldr	r1, [r7, #24]
 8001218:	480f      	ldr	r0, [pc, #60]	@ (8001258 <ILI9341_Draw_Colour_Burst+0x138>)
 800121a:	f003 fdf0 	bl	8004dfe <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	3301      	adds	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
 8001224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3f1      	bcc.n	8001210 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	b29a      	uxth	r2, r3
 8001230:	230a      	movs	r3, #10
 8001232:	69b9      	ldr	r1, [r7, #24]
 8001234:	4808      	ldr	r0, [pc, #32]	@ (8001258 <ILI9341_Draw_Colour_Burst+0x138>)
 8001236:	f003 fde2 	bl	8004dfe <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001240:	4804      	ldr	r0, [pc, #16]	@ (8001254 <ILI9341_Draw_Colour_Burst+0x134>)
 8001242:	f001 fe49 	bl	8002ed8 <HAL_GPIO_WritePin>
 8001246:	46b5      	mov	sp, r6
}
 8001248:	bf00      	nop
 800124a:	3734      	adds	r7, #52	@ 0x34
 800124c:	46bd      	mov	sp, r7
 800124e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001252:	bf00      	nop
 8001254:	40020800 	.word	0x40020800
 8001258:	200002e8 	.word	0x200002e8

0800125c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <ILI9341_Fill_Screen+0x44>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	b29a      	uxth	r2, r3
 800126c:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <ILI9341_Fill_Screen+0x48>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	2100      	movs	r1, #0
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fd7d 	bl	8000d74 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <ILI9341_Fill_Screen+0x44>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <ILI9341_Fill_Screen+0x48>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	fb02 f303 	mul.w	r3, r2, r3
 800128c:	461a      	mov	r2, r3
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff44 	bl	8001120 <ILI9341_Draw_Colour_Burst>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000002 	.word	0x20000002
 80012a4:	20000000 	.word	0x20000000

080012a8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
 80012b2:	460b      	mov	r3, r1
 80012b4:	80bb      	strh	r3, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80012ba:	4b64      	ldr	r3, [pc, #400]	@ (800144c <ILI9341_Draw_Pixel+0x1a4>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	88fa      	ldrh	r2, [r7, #6]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	f080 80be 	bcs.w	8001444 <ILI9341_Draw_Pixel+0x19c>
 80012c8:	4b61      	ldr	r3, [pc, #388]	@ (8001450 <ILI9341_Draw_Pixel+0x1a8>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	88ba      	ldrh	r2, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	f080 80b7 	bcs.w	8001444 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012dc:	485d      	ldr	r0, [pc, #372]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 80012de:	f001 fdfb 	bl	8002ed8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012e8:	485a      	ldr	r0, [pc, #360]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 80012ea:	f001 fdf5 	bl	8002ed8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80012ee:	202a      	movs	r0, #42	@ 0x2a
 80012f0:	f7ff fcea 	bl	8000cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012fa:	4856      	ldr	r0, [pc, #344]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 80012fc:	f001 fdec 	bl	8002ed8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001306:	4853      	ldr	r0, [pc, #332]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 8001308:	f001 fde6 	bl	8002ed8 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001312:	4850      	ldr	r0, [pc, #320]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 8001314:	f001 fde0 	bl	8002ed8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	b29b      	uxth	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	753b      	strb	r3, [r7, #20]
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	757b      	strb	r3, [r7, #21]
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	3301      	adds	r3, #1
 800132c:	121b      	asrs	r3, r3, #8
 800132e:	b2db      	uxtb	r3, r3
 8001330:	75bb      	strb	r3, [r7, #22]
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	3301      	adds	r3, #1
 8001338:	b2db      	uxtb	r3, r3
 800133a:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800133c:	f107 0114 	add.w	r1, r7, #20
 8001340:	2301      	movs	r3, #1
 8001342:	2204      	movs	r2, #4
 8001344:	4844      	ldr	r0, [pc, #272]	@ (8001458 <ILI9341_Draw_Pixel+0x1b0>)
 8001346:	f003 fd5a 	bl	8004dfe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001350:	4840      	ldr	r0, [pc, #256]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 8001352:	f001 fdc1 	bl	8002ed8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800135c:	483d      	ldr	r0, [pc, #244]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 800135e:	f001 fdbb 	bl	8002ed8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001368:	483a      	ldr	r0, [pc, #232]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 800136a:	f001 fdb5 	bl	8002ed8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800136e:	202b      	movs	r0, #43	@ 0x2b
 8001370:	f7ff fcaa 	bl	8000cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800137a:	4836      	ldr	r0, [pc, #216]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 800137c:	f001 fdac 	bl	8002ed8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001386:	4833      	ldr	r0, [pc, #204]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 8001388:	f001 fda6 	bl	8002ed8 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001392:	4830      	ldr	r0, [pc, #192]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 8001394:	f001 fda0 	bl	8002ed8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	b29b      	uxth	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	743b      	strb	r3, [r7, #16]
 80013a2:	88bb      	ldrh	r3, [r7, #4]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	747b      	strb	r3, [r7, #17]
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	3301      	adds	r3, #1
 80013ac:	121b      	asrs	r3, r3, #8
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	74bb      	strb	r3, [r7, #18]
 80013b2:	88bb      	ldrh	r3, [r7, #4]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	3301      	adds	r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80013bc:	f107 0110 	add.w	r1, r7, #16
 80013c0:	2301      	movs	r3, #1
 80013c2:	2204      	movs	r2, #4
 80013c4:	4824      	ldr	r0, [pc, #144]	@ (8001458 <ILI9341_Draw_Pixel+0x1b0>)
 80013c6:	f003 fd1a 	bl	8004dfe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013d0:	4820      	ldr	r0, [pc, #128]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 80013d2:	f001 fd81 	bl	8002ed8 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013dc:	481d      	ldr	r0, [pc, #116]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 80013de:	f001 fd7b 	bl	8002ed8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013e8:	481a      	ldr	r0, [pc, #104]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 80013ea:	f001 fd75 	bl	8002ed8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80013ee:	202c      	movs	r0, #44	@ 0x2c
 80013f0:	f7ff fc6a 	bl	8000cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013fa:	4816      	ldr	r0, [pc, #88]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 80013fc:	f001 fd6c 	bl	8002ed8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001406:	4813      	ldr	r0, [pc, #76]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 8001408:	f001 fd66 	bl	8002ed8 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001412:	4810      	ldr	r0, [pc, #64]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 8001414:	f001 fd60 	bl	8002ed8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001418:	887b      	ldrh	r3, [r7, #2]
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	b29b      	uxth	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	733b      	strb	r3, [r7, #12]
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001428:	f107 010c 	add.w	r1, r7, #12
 800142c:	2301      	movs	r3, #1
 800142e:	2202      	movs	r2, #2
 8001430:	4809      	ldr	r0, [pc, #36]	@ (8001458 <ILI9341_Draw_Pixel+0x1b0>)
 8001432:	f003 fce4 	bl	8004dfe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800143c:	4805      	ldr	r0, [pc, #20]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 800143e:	f001 fd4b 	bl	8002ed8 <HAL_GPIO_WritePin>
 8001442:	e000      	b.n	8001446 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001444:	bf00      	nop
	
}
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000002 	.word	0x20000002
 8001450:	20000000 	.word	0x20000000
 8001454:	40020800 	.word	0x40020800
 8001458:	200002e8 	.word	0x200002e8

0800145c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4604      	mov	r4, r0
 8001464:	4608      	mov	r0, r1
 8001466:	4611      	mov	r1, r2
 8001468:	461a      	mov	r2, r3
 800146a:	4623      	mov	r3, r4
 800146c:	80fb      	strh	r3, [r7, #6]
 800146e:	4603      	mov	r3, r0
 8001470:	80bb      	strh	r3, [r7, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	807b      	strh	r3, [r7, #2]
 8001476:	4613      	mov	r3, r2
 8001478:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800147a:	4b24      	ldr	r3, [pc, #144]	@ (800150c <ILI9341_Draw_Rectangle+0xb0>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	88fa      	ldrh	r2, [r7, #6]
 8001482:	429a      	cmp	r2, r3
 8001484:	d23d      	bcs.n	8001502 <ILI9341_Draw_Rectangle+0xa6>
 8001486:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <ILI9341_Draw_Rectangle+0xb4>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	88ba      	ldrh	r2, [r7, #4]
 800148e:	429a      	cmp	r2, r3
 8001490:	d237      	bcs.n	8001502 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001492:	88fa      	ldrh	r2, [r7, #6]
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	4413      	add	r3, r2
 8001498:	4a1c      	ldr	r2, [pc, #112]	@ (800150c <ILI9341_Draw_Rectangle+0xb0>)
 800149a:	8812      	ldrh	r2, [r2, #0]
 800149c:	b292      	uxth	r2, r2
 800149e:	4293      	cmp	r3, r2
 80014a0:	dd05      	ble.n	80014ae <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <ILI9341_Draw_Rectangle+0xb0>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	883b      	ldrh	r3, [r7, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a16      	ldr	r2, [pc, #88]	@ (8001510 <ILI9341_Draw_Rectangle+0xb4>)
 80014b6:	8812      	ldrh	r2, [r2, #0]
 80014b8:	b292      	uxth	r2, r2
 80014ba:	4293      	cmp	r3, r2
 80014bc:	dd05      	ble.n	80014ca <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <ILI9341_Draw_Rectangle+0xb4>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	88bb      	ldrh	r3, [r7, #4]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80014ca:	88fa      	ldrh	r2, [r7, #6]
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	4413      	add	r3, r2
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	3b01      	subs	r3, #1
 80014d4:	b29c      	uxth	r4, r3
 80014d6:	88ba      	ldrh	r2, [r7, #4]
 80014d8:	883b      	ldrh	r3, [r7, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	b29b      	uxth	r3, r3
 80014de:	3b01      	subs	r3, #1
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	88b9      	ldrh	r1, [r7, #4]
 80014e4:	88f8      	ldrh	r0, [r7, #6]
 80014e6:	4622      	mov	r2, r4
 80014e8:	f7ff fc44 	bl	8000d74 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80014ec:	883b      	ldrh	r3, [r7, #0]
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	fb02 f303 	mul.w	r3, r2, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	8b3b      	ldrh	r3, [r7, #24]
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fe10 	bl	8001120 <ILI9341_Draw_Colour_Burst>
 8001500:	e000      	b.n	8001504 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001502:	bf00      	nop
}
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bd90      	pop	{r4, r7, pc}
 800150a:	bf00      	nop
 800150c:	20000002 	.word	0x20000002
 8001510:	20000000 	.word	0x20000000

08001514 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 800151a:	2310      	movs	r3, #16
 800151c:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8001522:	e019      	b.n	8001558 <TP_Read+0x44>
    {
        value <<= 1;
 8001524:	88bb      	ldrh	r3, [r7, #4]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	2108      	movs	r1, #8
 800152e:	480e      	ldr	r0, [pc, #56]	@ (8001568 <TP_Read+0x54>)
 8001530:	f001 fcd2 	bl	8002ed8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	2108      	movs	r1, #8
 8001538:	480b      	ldr	r0, [pc, #44]	@ (8001568 <TP_Read+0x54>)
 800153a:	f001 fccd 	bl	8002ed8 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 800153e:	2110      	movs	r1, #16
 8001540:	4809      	ldr	r0, [pc, #36]	@ (8001568 <TP_Read+0x54>)
 8001542:	f001 fcb1 	bl	8002ea8 <HAL_GPIO_ReadPin>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <TP_Read+0x3e>
        {
            value++;
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	3301      	adds	r3, #1
 8001550:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	3b01      	subs	r3, #1
 8001556:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e2      	bne.n	8001524 <TP_Read+0x10>
    };

    return value;
 800155e:	88bb      	ldrh	r3, [r7, #4]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000

0800156c <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8001576:	2308      	movs	r3, #8
 8001578:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 800157a:	2200      	movs	r2, #0
 800157c:	2108      	movs	r1, #8
 800157e:	4815      	ldr	r0, [pc, #84]	@ (80015d4 <TP_Write+0x68>)
 8001580:	f001 fcaa 	bl	8002ed8 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8001584:	e01e      	b.n	80015c4 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	2b00      	cmp	r3, #0
 800158c:	da05      	bge.n	800159a <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	2120      	movs	r1, #32
 8001592:	4810      	ldr	r0, [pc, #64]	@ (80015d4 <TP_Write+0x68>)
 8001594:	f001 fca0 	bl	8002ed8 <HAL_GPIO_WritePin>
 8001598:	e004      	b.n	80015a4 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2120      	movs	r1, #32
 800159e:	480d      	ldr	r0, [pc, #52]	@ (80015d4 <TP_Write+0x68>)
 80015a0:	f001 fc9a 	bl	8002ed8 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2108      	movs	r1, #8
 80015ae:	4809      	ldr	r0, [pc, #36]	@ (80015d4 <TP_Write+0x68>)
 80015b0:	f001 fc92 	bl	8002ed8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 80015b4:	2200      	movs	r2, #0
 80015b6:	2108      	movs	r1, #8
 80015b8:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <TP_Write+0x68>)
 80015ba:	f001 fc8d 	bl	8002ed8 <HAL_GPIO_WritePin>
        i--;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1dd      	bne.n	8001586 <TP_Write+0x1a>
    };
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021000 	.word	0x40021000

080015d8 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 80015e0:	2201      	movs	r2, #1
 80015e2:	2108      	movs	r1, #8
 80015e4:	485a      	ldr	r0, [pc, #360]	@ (8001750 <TP_Read_Coordinates+0x178>)
 80015e6:	f001 fc77 	bl	8002ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 80015ea:	2201      	movs	r2, #1
 80015ec:	2120      	movs	r1, #32
 80015ee:	4858      	ldr	r0, [pc, #352]	@ (8001750 <TP_Read_Coordinates+0x178>)
 80015f0:	f001 fc72 	bl	8002ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 80015f4:	2201      	movs	r2, #1
 80015f6:	2140      	movs	r1, #64	@ 0x40
 80015f8:	4855      	ldr	r0, [pc, #340]	@ (8001750 <TP_Read_Coordinates+0x178>)
 80015fa:	f001 fc6d 	bl	8002ed8 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8001602:	2300      	movs	r3, #0
 8001604:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 800160a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160e:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2140      	movs	r1, #64	@ 0x40
 8001618:	484d      	ldr	r0, [pc, #308]	@ (8001750 <TP_Read_Coordinates+0x178>)
 800161a:	f001 fc5d 	bl	8002ed8 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 800161e:	e023      	b.n	8001668 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8001620:	2090      	movs	r0, #144	@ 0x90
 8001622:	f7ff ffa3 	bl	800156c <TP_Write>

				rawy = TP_Read();	
 8001626:	f7ff ff75 	bl	8001514 <TP_Read>
 800162a:	4603      	mov	r3, r0
 800162c:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 800162e:	89fb      	ldrh	r3, [r7, #14]
 8001630:	6a3a      	ldr	r2, [r7, #32]
 8001632:	4413      	add	r3, r2
 8001634:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8001636:	89fb      	ldrh	r3, [r7, #14]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4413      	add	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 800163e:	20d0      	movs	r0, #208	@ 0xd0
 8001640:	f7ff ff94 	bl	800156c <TP_Write>
        rawx = TP_Read();
 8001644:	f7ff ff66 	bl	8001514 <TP_Read>
 8001648:	4603      	mov	r3, r0
 800164a:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 800164c:	89bb      	ldrh	r3, [r7, #12]
 800164e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001650:	4413      	add	r3, r2
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
				calculating_x += rawx;
 8001654:	89bb      	ldrh	r3, [r7, #12]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	61fb      	str	r3, [r7, #28]
        samples--;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3b01      	subs	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	3301      	adds	r3, #1
 8001666:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <TP_Read_Coordinates+0xa4>
 800166e:	2104      	movs	r1, #4
 8001670:	4837      	ldr	r0, [pc, #220]	@ (8001750 <TP_Read_Coordinates+0x178>)
 8001672:	f001 fc19 	bl	8002ea8 <HAL_GPIO_ReadPin>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0d1      	beq.n	8001620 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2140      	movs	r1, #64	@ 0x40
 8001680:	4833      	ldr	r0, [pc, #204]	@ (8001750 <TP_Read_Coordinates+0x178>)
 8001682:	f001 fc29 	bl	8002ed8 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800168c:	d14d      	bne.n	800172a <TP_Read_Coordinates+0x152>
 800168e:	2104      	movs	r1, #4
 8001690:	482f      	ldr	r0, [pc, #188]	@ (8001750 <TP_Read_Coordinates+0x178>)
 8001692:	f001 fc09 	bl	8002ea8 <HAL_GPIO_ReadPin>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d146      	bne.n	800172a <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 80016b8:	89bb      	ldrh	r3, [r7, #12]
 80016ba:	425b      	negs	r3, r3
 80016bc:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 80016be:	89fb      	ldrh	r3, [r7, #14]
 80016c0:	425b      	negs	r3, r3
 80016c2:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 80016c4:	89ba      	ldrh	r2, [r7, #12]
 80016c6:	4b23      	ldr	r3, [pc, #140]	@ (8001754 <TP_Read_Coordinates+0x17c>)
 80016c8:	fba3 1302 	umull	r1, r3, r3, r2
 80016cc:	1ad2      	subs	r2, r2, r3
 80016ce:	0852      	lsrs	r2, r2, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	f1c3 03e3 	rsb	r3, r3, #227	@ 0xe3
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016e2:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8001748 <TP_Read_Coordinates+0x170>
 80016e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016ee:	ee17 3a90 	vmov	r3, s15
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 80016f8:	89fb      	ldrh	r3, [r7, #14]
 80016fa:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <TP_Read_Coordinates+0x180>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	09db      	lsrs	r3, r3, #7
 8001702:	b29b      	uxth	r3, r3
 8001704:	3b0f      	subs	r3, #15
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800170e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8001748 <TP_Read_Coordinates+0x170>
 8001712:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3302      	adds	r3, #2
 800171a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800171e:	ee17 2a90 	vmov	r2, s15
 8001722:	b292      	uxth	r2, r2
 8001724:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8001726:	2301      	movs	r3, #1
 8001728:	e007      	b.n	800173a <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3302      	adds	r3, #2
 8001734:	2200      	movs	r2, #0
 8001736:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8001738:	2300      	movs	r3, #0
		}
}
 800173a:	4618      	mov	r0, r3
 800173c:	3728      	adds	r7, #40	@ 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	f3af 8000 	nop.w
 8001748:	28f5c28f 	.word	0x28f5c28f
 800174c:	3ff28f5c 	.word	0x3ff28f5c
 8001750:	40021000 	.word	0x40021000
 8001754:	e01e01e1 	.word	0xe01e01e1
 8001758:	a0a0a0a1 	.word	0xa0a0a0a1

0800175c <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8001760:	2104      	movs	r1, #4
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <TP_Touchpad_Pressed+0x1c>)
 8001764:	f001 fba0 	bl	8002ea8 <HAL_GPIO_ReadPin>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8001772:	2300      	movs	r3, #0
	}
}
 8001774:	4618      	mov	r0, r3
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000

0800177c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	@ 0x30
 8001780:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001792:	4b62      	ldr	r3, [pc, #392]	@ (800191c <MX_GPIO_Init+0x1a0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a61      	ldr	r2, [pc, #388]	@ (800191c <MX_GPIO_Init+0x1a0>)
 8001798:	f043 0310 	orr.w	r3, r3, #16
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b5f      	ldr	r3, [pc, #380]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	4b5c      	ldr	r3, [pc, #368]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a5b      	ldr	r2, [pc, #364]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b59      	ldr	r3, [pc, #356]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c2:	4b56      	ldr	r3, [pc, #344]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a55      	ldr	r2, [pc, #340]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017c8:	f043 0320 	orr.w	r3, r3, #32
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b53      	ldr	r3, [pc, #332]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	4b50      	ldr	r3, [pc, #320]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a4f      	ldr	r2, [pc, #316]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b4d      	ldr	r3, [pc, #308]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f2:	4b4a      	ldr	r3, [pc, #296]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a49      	ldr	r2, [pc, #292]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b47      	ldr	r3, [pc, #284]	@ (800191c <MX_GPIO_Init+0x1a0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800180a:	4b44      	ldr	r3, [pc, #272]	@ (800191c <MX_GPIO_Init+0x1a0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a43      	ldr	r2, [pc, #268]	@ (800191c <MX_GPIO_Init+0x1a0>)
 8001810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b41      	ldr	r3, [pc, #260]	@ (800191c <MX_GPIO_Init+0x1a0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	2168      	movs	r1, #104	@ 0x68
 8001826:	483e      	ldr	r0, [pc, #248]	@ (8001920 <MX_GPIO_Init+0x1a4>)
 8001828:	f001 fb56 	bl	8002ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8001832:	483c      	ldr	r0, [pc, #240]	@ (8001924 <MX_GPIO_Init+0x1a8>)
 8001834:	f001 fb50 	bl	8002ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800183e:	483a      	ldr	r0, [pc, #232]	@ (8001928 <MX_GPIO_Init+0x1ac>)
 8001840:	f001 fb4a 	bl	8002ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	21c0      	movs	r1, #192	@ 0xc0
 8001848:	4838      	ldr	r0, [pc, #224]	@ (800192c <MX_GPIO_Init+0x1b0>)
 800184a:	f001 fb45 	bl	8002ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_IRQ_Pin T_MISO_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 800184e:	2314      	movs	r3, #20
 8001850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	482f      	ldr	r0, [pc, #188]	@ (8001920 <MX_GPIO_Init+0x1a4>)
 8001862:	f001 f975 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin;
 8001866:	2328      	movs	r3, #40	@ 0x28
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	4619      	mov	r1, r3
 800187c:	4828      	ldr	r0, [pc, #160]	@ (8001920 <MX_GPIO_Init+0x1a4>)
 800187e:	f001 f967 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_CS_Pin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 8001882:	2340      	movs	r3, #64	@ 0x40
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	4821      	ldr	r0, [pc, #132]	@ (8001920 <MX_GPIO_Init+0x1a4>)
 800189a:	f001 f959 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800189e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4619      	mov	r1, r3
 80018b6:	481b      	ldr	r0, [pc, #108]	@ (8001924 <MX_GPIO_Init+0x1a8>)
 80018b8:	f001 f94a 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80018bc:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	4814      	ldr	r0, [pc, #80]	@ (8001928 <MX_GPIO_Init+0x1ac>)
 80018d6:	f001 f93b 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018da:	23c0      	movs	r3, #192	@ 0xc0
 80018dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	480e      	ldr	r0, [pc, #56]	@ (800192c <MX_GPIO_Init+0x1b0>)
 80018f2:	f001 f92d 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80018f6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80018fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	4805      	ldr	r0, [pc, #20]	@ (8001924 <MX_GPIO_Init+0x1a8>)
 8001910:	f001 f91e 	bl	8002b50 <HAL_GPIO_Init>

}
 8001914:	bf00      	nop
 8001916:	3730      	adds	r7, #48	@ 0x30
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	40021000 	.word	0x40021000
 8001924:	40020800 	.word	0x40020800
 8001928:	40020400 	.word	0x40020400
 800192c:	40021800 	.word	0x40021800

08001930 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001934:	4b1b      	ldr	r3, [pc, #108]	@ (80019a4 <MX_I2C1_Init+0x74>)
 8001936:	4a1c      	ldr	r2, [pc, #112]	@ (80019a8 <MX_I2C1_Init+0x78>)
 8001938:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800193a:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <MX_I2C1_Init+0x74>)
 800193c:	4a1b      	ldr	r2, [pc, #108]	@ (80019ac <MX_I2C1_Init+0x7c>)
 800193e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001940:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <MX_I2C1_Init+0x74>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001946:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <MX_I2C1_Init+0x74>)
 8001948:	2201      	movs	r2, #1
 800194a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800194c:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <MX_I2C1_Init+0x74>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001952:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <MX_I2C1_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001958:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <MX_I2C1_Init+0x74>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800195e:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <MX_I2C1_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001964:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <MX_I2C1_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800196a:	480e      	ldr	r0, [pc, #56]	@ (80019a4 <MX_I2C1_Init+0x74>)
 800196c:	f001 face 	bl	8002f0c <HAL_I2C_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001976:	f000 fc4b 	bl	8002210 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800197a:	2100      	movs	r1, #0
 800197c:	4809      	ldr	r0, [pc, #36]	@ (80019a4 <MX_I2C1_Init+0x74>)
 800197e:	f002 f815 	bl	80039ac <HAL_I2CEx_ConfigAnalogFilter>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001988:	f000 fc42 	bl	8002210 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800198c:	2100      	movs	r1, #0
 800198e:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <MX_I2C1_Init+0x74>)
 8001990:	f002 f857 	bl	8003a42 <HAL_I2CEx_ConfigDigitalFilter>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800199a:	f000 fc39 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200001fc 	.word	0x200001fc
 80019a8:	40005400 	.word	0x40005400
 80019ac:	00303d5b 	.word	0x00303d5b

080019b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b0ae      	sub	sp, #184	@ 0xb8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2290      	movs	r2, #144	@ 0x90
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f005 fcbc 	bl	800734e <memset>
  if(i2cHandle->Instance==I2C1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a22      	ldr	r2, [pc, #136]	@ (8001a64 <HAL_I2C_MspInit+0xb4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d13c      	bne.n	8001a5a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019e6:	2300      	movs	r3, #0
 80019e8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 fd08 	bl	8004404 <HAL_RCCEx_PeriphCLKConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80019fa:	f000 fc09 	bl	8002210 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <HAL_I2C_MspInit+0xb8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a19      	ldr	r2, [pc, #100]	@ (8001a68 <HAL_I2C_MspInit+0xb8>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <HAL_I2C_MspInit+0xb8>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1e:	2312      	movs	r3, #18
 8001a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a30:	2304      	movs	r3, #4
 8001a32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480b      	ldr	r0, [pc, #44]	@ (8001a6c <HAL_I2C_MspInit+0xbc>)
 8001a3e:	f001 f887 	bl	8002b50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_I2C_MspInit+0xb8>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	4a08      	ldr	r2, [pc, #32]	@ (8001a68 <HAL_I2C_MspInit+0xb8>)
 8001a48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_I2C_MspInit+0xb8>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	37b8      	adds	r7, #184	@ 0xb8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40005400 	.word	0x40005400
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020400 	.word	0x40020400

08001a70 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a74:	f3bf 8f4f 	dsb	sy
}
 8001a78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a7a:	f3bf 8f6f 	isb	sy
}
 8001a7e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001a80:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <SCB_EnableICache+0x48>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001a88:	f3bf 8f4f 	dsb	sy
}
 8001a8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a8e:	f3bf 8f6f 	isb	sy
}
 8001a92:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001a94:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <SCB_EnableICache+0x48>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	4a07      	ldr	r2, [pc, #28]	@ (8001ab8 <SCB_EnableICache+0x48>)
 8001a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a9e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001aa0:	f3bf 8f4f 	dsb	sy
}
 8001aa4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001aa6:	f3bf 8f6f 	isb	sy
}
 8001aaa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <SCB_EnableDCache+0x84>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001aca:	f3bf 8f4f 	dsb	sy
}
 8001ace:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <SCB_EnableDCache+0x84>)
 8001ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ad6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0b5b      	lsrs	r3, r3, #13
 8001adc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ae0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	08db      	lsrs	r3, r3, #3
 8001ae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aea:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	015a      	lsls	r2, r3, #5
 8001af0:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001af4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001afa:	4911      	ldr	r1, [pc, #68]	@ (8001b40 <SCB_EnableDCache+0x84>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1e5a      	subs	r2, r3, #1
 8001b06:	60ba      	str	r2, [r7, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1ef      	bne.n	8001aec <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1e5a      	subs	r2, r3, #1
 8001b10:	60fa      	str	r2, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1e5      	bne.n	8001ae2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b16:	f3bf 8f4f 	dsb	sy
}
 8001b1a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001b1c:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <SCB_EnableDCache+0x84>)
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <SCB_EnableDCache+0x84>)
 8001b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b26:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b28:	f3bf 8f4f 	dsb	sy
}
 8001b2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b2e:	f3bf 8f6f 	isb	sy
}
 8001b32:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <CRC16_2>:
uint16_t CRC16_2(uint8_t *, uint8_t);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t CRC16_2(uint8_t *ptr, uint8_t length){
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]

	uint16_t crc = 0xFFFF;
 8001b50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b54:	81fb      	strh	r3, [r7, #14]
	uint8_t  s   = 0x00;
 8001b56:	2300      	movs	r3, #0
 8001b58:	737b      	strb	r3, [r7, #13]

	while(length--){
 8001b5a:	e023      	b.n	8001ba4 <CRC16_2+0x60>
		crc ^= *ptr++;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	89fb      	ldrh	r3, [r7, #14]
 8001b68:	4053      	eors	r3, r2
 8001b6a:	81fb      	strh	r3, [r7, #14]
		for(s = 0; s < 8; s++){
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	737b      	strb	r3, [r7, #13]
 8001b70:	e015      	b.n	8001b9e <CRC16_2+0x5a>
			if((crc & 0x01) != 0){
 8001b72:	89fb      	ldrh	r3, [r7, #14]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00a      	beq.n	8001b92 <CRC16_2+0x4e>
				crc >>= 1;
 8001b7c:	89fb      	ldrh	r3, [r7, #14]
 8001b7e:	085b      	lsrs	r3, r3, #1
 8001b80:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8001b82:	89fb      	ldrh	r3, [r7, #14]
 8001b84:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8001b88:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	81fb      	strh	r3, [r7, #14]
 8001b90:	e002      	b.n	8001b98 <CRC16_2+0x54>
			} else crc >>= 1;
 8001b92:	89fb      	ldrh	r3, [r7, #14]
 8001b94:	085b      	lsrs	r3, r3, #1
 8001b96:	81fb      	strh	r3, [r7, #14]
		for(s = 0; s < 8; s++){
 8001b98:	7b7b      	ldrb	r3, [r7, #13]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	737b      	strb	r3, [r7, #13]
 8001b9e:	7b7b      	ldrb	r3, [r7, #13]
 8001ba0:	2b07      	cmp	r3, #7
 8001ba2:	d9e6      	bls.n	8001b72 <CRC16_2+0x2e>
	while(length--){
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	1e5a      	subs	r2, r3, #1
 8001ba8:	70fa      	strb	r2, [r7, #3]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1d6      	bne.n	8001b5c <CRC16_2+0x18>
		}
	}
	return crc;
 8001bae:	89fb      	ldrh	r3, [r7, #14]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <mixColor>:
    int dx = tx - cx;
    int dy = ty - cy;
    return (dx*dx + dy*dy <= r*r);  // inside circle?
}

void mixColor() {
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
  redValue = 0b11111;
 8001bc2:	4b33      	ldr	r3, [pc, #204]	@ (8001c90 <mixColor+0xd4>)
 8001bc4:	221f      	movs	r2, #31
 8001bc6:	701a      	strb	r2, [r3, #0]
  greenValue = 0b111111;
 8001bc8:	4b32      	ldr	r3, [pc, #200]	@ (8001c94 <mixColor+0xd8>)
 8001bca:	223f      	movs	r2, #63	@ 0x3f
 8001bcc:	701a      	strb	r2, [r3, #0]
  blueValue = 0b11111;
 8001bce:	4b32      	ldr	r3, [pc, #200]	@ (8001c98 <mixColor+0xdc>)
 8001bd0:	221f      	movs	r2, #31
 8001bd2:	701a      	strb	r2, [r3, #0]

  redValue = (uint8_t)(redValue * Red_L);
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c90 <mixColor+0xd4>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <mixColor+0xe0>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bee:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bf2:	793b      	ldrb	r3, [r7, #4]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4b26      	ldr	r3, [pc, #152]	@ (8001c90 <mixColor+0xd4>)
 8001bf8:	701a      	strb	r2, [r3, #0]
  greenValue = (uint8_t)(greenValue * Green_L);
 8001bfa:	4b26      	ldr	r3, [pc, #152]	@ (8001c94 <mixColor+0xd8>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c06:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <mixColor+0xe4>)
 8001c08:	edd3 7a00 	vldr	s15, [r3]
 8001c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c14:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c18:	793b      	ldrb	r3, [r7, #4]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c94 <mixColor+0xd8>)
 8001c1e:	701a      	strb	r2, [r3, #0]
  blueValue = (uint8_t)(blueValue * Blue_L);
 8001c20:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <mixColor+0xdc>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <mixColor+0xe8>)
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c3a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c3e:	793b      	ldrb	r3, [r7, #4]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <mixColor+0xdc>)
 8001c44:	701a      	strb	r2, [r3, #0]

  mixedColor = (uint16_t)(blueValue);
 8001c46:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <mixColor+0xdc>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ca8 <mixColor+0xec>)
 8001c4e:	801a      	strh	r2, [r3, #0]
  mixedColor |= (greenValue << 5);
 8001c50:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <mixColor+0xd8>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	015b      	lsls	r3, r3, #5
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <mixColor+0xec>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <mixColor+0xec>)
 8001c68:	801a      	strh	r2, [r3, #0]
  mixedColor |= (redValue << 11);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <mixColor+0xd4>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b21b      	sxth	r3, r3
 8001c70:	02db      	lsls	r3, r3, #11
 8001c72:	b21a      	sxth	r2, r3
 8001c74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <mixColor+0xec>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <mixColor+0xec>)
 8001c82:	801a      	strh	r2, [r3, #0]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	200002d4 	.word	0x200002d4
 8001c94:	200002d5 	.word	0x200002d5
 8001c98:	200002d6 	.word	0x200002d6
 8001c9c:	200002c8 	.word	0x200002c8
 8001ca0:	200002cc 	.word	0x200002cc
 8001ca4:	200002d0 	.word	0x200002d0
 8001ca8:	200002c4 	.word	0x200002c4
 8001cac:	00000000 	.word	0x00000000

08001cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b08b      	sub	sp, #44	@ 0x2c
 8001cb4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001cb6:	f7ff fedb 	bl	8001a70 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001cba:	f7ff feff 	bl	8001abc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cbe:	f000 fdd1 	bl	8002864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc2:	f000 fa3d 	bl	8002140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc6:	f7ff fd59 	bl	800177c <MX_GPIO_Init>
  MX_RNG_Init();
 8001cca:	f000 faa7 	bl	800221c <MX_RNG_Init>
  MX_SPI5_Init();
 8001cce:	f000 faed 	bl	80022ac <MX_SPI5_Init>
  MX_TIM1_Init();
 8001cd2:	f000 fc99 	bl	8002608 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001cd6:	f000 fd0b 	bl	80026f0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001cda:	f7ff fe29 	bl	8001930 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	
  ILI9341_Init();//initial driver setup to drive ili9341
 8001cde:	f7ff f911 	bl	8000f04 <ILI9341_Init>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001ce2:	2003      	movs	r0, #3
 8001ce4:	f7ff f8b0 	bl	8000e48 <ILI9341_Set_Rotation>
  ILI9341_Fill_Screen(WHITE);
 8001ce8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001cec:	f7ff fab6 	bl	800125c <ILI9341_Fill_Screen>

  cmdBuffer[0] = 0x03;
 8001cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8001e20 <main+0x170>)
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	701a      	strb	r2, [r3, #0]
  cmdBuffer[1] = 0x00;
 8001cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8001e20 <main+0x170>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	705a      	strb	r2, [r3, #1]
  cmdBuffer[2] = 0x04;
 8001cfc:	4b48      	ldr	r3, [pc, #288]	@ (8001e20 <main+0x170>)
 8001cfe:	2204      	movs	r2, #4
 8001d00:	709a      	strb	r2, [r3, #2]

	ILI9341_Draw_Filled_Circle(150, 50, 30/2, BLACK);
 8001d02:	2300      	movs	r3, #0
 8001d04:	220f      	movs	r2, #15
 8001d06:	2132      	movs	r1, #50	@ 0x32
 8001d08:	2096      	movs	r0, #150	@ 0x96
 8001d0a:	f7fe fe7b 	bl	8000a04 <ILI9341_Draw_Filled_Circle>

	ILI9341_Draw_Filled_Circle(50, 100, 30/2, RED);
 8001d0e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d12:	220f      	movs	r2, #15
 8001d14:	2164      	movs	r1, #100	@ 0x64
 8001d16:	2032      	movs	r0, #50	@ 0x32
 8001d18:	f7fe fe74 	bl	8000a04 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Filled_Circle(50, 150, 30/2, GREEN);
 8001d1c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d20:	220f      	movs	r2, #15
 8001d22:	2196      	movs	r1, #150	@ 0x96
 8001d24:	2032      	movs	r0, #50	@ 0x32
 8001d26:	f7fe fe6d 	bl	8000a04 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Filled_Circle(50, 200, 30/2, BLUE);
 8001d2a:	231f      	movs	r3, #31
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	21c8      	movs	r1, #200	@ 0xc8
 8001d30:	2032      	movs	r0, #50	@ 0x32
 8001d32:	f7fe fe67 	bl	8000a04 <ILI9341_Draw_Filled_Circle>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(str, "Temperature = %4.1f\tHumidity = %4.1f\n\r", t, h);
 8001d36:	4b3b      	ldr	r3, [pc, #236]	@ (8001e24 <main+0x174>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001d40:	4b39      	ldr	r3, [pc, #228]	@ (8001e28 <main+0x178>)
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d4a:	ed8d 7b00 	vstr	d7, [sp]
 8001d4e:	ec53 2b16 	vmov	r2, r3, d6
 8001d52:	4936      	ldr	r1, [pc, #216]	@ (8001e2c <main+0x17c>)
 8001d54:	4836      	ldr	r0, [pc, #216]	@ (8001e30 <main+0x180>)
 8001d56:	f005 fa95 	bl	8007284 <siprintf>
	  while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET){}
 8001d5a:	bf00      	nop
 8001d5c:	4b35      	ldr	r3, [pc, #212]	@ (8001e34 <main+0x184>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d66:	2b40      	cmp	r3, #64	@ 0x40
 8001d68:	d1f8      	bne.n	8001d5c <main+0xac>
	  HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 200);
 8001d6a:	4831      	ldr	r0, [pc, #196]	@ (8001e30 <main+0x180>)
 8001d6c:	f7fe fab8 	bl	80002e0 <strlen>
 8001d70:	4603      	mov	r3, r0
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	23c8      	movs	r3, #200	@ 0xc8
 8001d76:	492e      	ldr	r1, [pc, #184]	@ (8001e30 <main+0x180>)
 8001d78:	482e      	ldr	r0, [pc, #184]	@ (8001e34 <main+0x184>)
 8001d7a:	f003 fe7d 	bl	8005a78 <HAL_UART_Transmit>

	  HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8001d7e:	23c8      	movs	r3, #200	@ 0xc8
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2303      	movs	r3, #3
 8001d84:	4a26      	ldr	r2, [pc, #152]	@ (8001e20 <main+0x170>)
 8001d86:	21b8      	movs	r1, #184	@ 0xb8
 8001d88:	482b      	ldr	r0, [pc, #172]	@ (8001e38 <main+0x188>)
 8001d8a:	f001 f95b 	bl	8003044 <HAL_I2C_Master_Transmit>

	  HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8001d8e:	23c8      	movs	r3, #200	@ 0xc8
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2303      	movs	r3, #3
 8001d94:	4a22      	ldr	r2, [pc, #136]	@ (8001e20 <main+0x170>)
 8001d96:	21b8      	movs	r1, #184	@ 0xb8
 8001d98:	4827      	ldr	r0, [pc, #156]	@ (8001e38 <main+0x188>)
 8001d9a:	f001 f953 	bl	8003044 <HAL_I2C_Master_Transmit>

	  HAL_Delay(1);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f000 fdcc 	bl	800293c <HAL_Delay>

	  HAL_I2C_Master_Receive(&hi2c1, 0x5c<<1, dataBuffer, 8, 200);
 8001da4:	23c8      	movs	r3, #200	@ 0xc8
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2308      	movs	r3, #8
 8001daa:	4a24      	ldr	r2, [pc, #144]	@ (8001e3c <main+0x18c>)
 8001dac:	21b8      	movs	r1, #184	@ 0xb8
 8001dae:	4822      	ldr	r0, [pc, #136]	@ (8001e38 <main+0x188>)
 8001db0:	f001 fa60 	bl	8003274 <HAL_I2C_Master_Receive>

	  uint8_t Rcrc = dataBuffer[7] << 8;
 8001db4:	2300      	movs	r3, #0
 8001db6:	77fb      	strb	r3, [r7, #31]
	  Rcrc += dataBuffer[6];
 8001db8:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <main+0x18c>)
 8001dba:	799a      	ldrb	r2, [r3, #6]
 8001dbc:	7ffb      	ldrb	r3, [r7, #31]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	77fb      	strb	r3, [r7, #31]

	  if (Rcrc == CRC16_2(dataBuffer, 6)) {
 8001dc2:	7ffb      	ldrb	r3, [r7, #31]
 8001dc4:	b29c      	uxth	r4, r3
 8001dc6:	2106      	movs	r1, #6
 8001dc8:	481c      	ldr	r0, [pc, #112]	@ (8001e3c <main+0x18c>)
 8001dca:	f7ff febb 	bl	8001b44 <CRC16_2>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	429c      	cmp	r4, r3
 8001dd2:	d151      	bne.n	8001e78 <main+0x1c8>
		  uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8001dd4:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <main+0x18c>)
 8001dd6:	791b      	ldrb	r3, [r3, #4]
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	4a16      	ldr	r2, [pc, #88]	@ (8001e3c <main+0x18c>)
 8001de4:	7952      	ldrb	r2, [r2, #5]
 8001de6:	4413      	add	r3, r2
 8001de8:	83bb      	strh	r3, [r7, #28]
		  t = temperature / 10.0;
 8001dea:	8bbb      	ldrh	r3, [r7, #28]
 8001dec:	ee07 3a90 	vmov	s15, r3
 8001df0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001df4:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8001df8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001dfc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e00:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <main+0x174>)
 8001e02:	edc3 7a00 	vstr	s15, [r3]
		  t = (((dataBuffer[4] & 0x80) >> 7) == 1) ? (t * (-1)) : t;
 8001e06:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <main+0x18c>)
 8001e08:	791b      	ldrb	r3, [r3, #4]
 8001e0a:	09db      	lsrs	r3, r3, #7
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d116      	bne.n	8001e40 <main+0x190>
 8001e12:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <main+0x174>)
 8001e14:	edd3 7a00 	vldr	s15, [r3]
 8001e18:	eef1 7a67 	vneg.f32	s15, s15
 8001e1c:	e013      	b.n	8001e46 <main+0x196>
 8001e1e:	bf00      	nop
 8001e20:	200002b8 	.word	0x200002b8
 8001e24:	20000008 	.word	0x20000008
 8001e28:	20000004 	.word	0x20000004
 8001e2c:	0800a9a0 	.word	0x0800a9a0
 8001e30:	20000250 	.word	0x20000250
 8001e34:	2000039c 	.word	0x2000039c
 8001e38:	200001fc 	.word	0x200001fc
 8001e3c:	200002bc 	.word	0x200002bc
 8001e40:	4bb1      	ldr	r3, [pc, #708]	@ (8002108 <main+0x458>)
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	4bb0      	ldr	r3, [pc, #704]	@ (8002108 <main+0x458>)
 8001e48:	edc3 7a00 	vstr	s15, [r3]

		  uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
 8001e4c:	4baf      	ldr	r3, [pc, #700]	@ (800210c <main+0x45c>)
 8001e4e:	789b      	ldrb	r3, [r3, #2]
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4aad      	ldr	r2, [pc, #692]	@ (800210c <main+0x45c>)
 8001e56:	78d2      	ldrb	r2, [r2, #3]
 8001e58:	4413      	add	r3, r2
 8001e5a:	837b      	strh	r3, [r7, #26]
		  h = humidity / 10.0;
 8001e5c:	8b7b      	ldrh	r3, [r7, #26]
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e66:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8001e6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e72:	4ba7      	ldr	r3, [pc, #668]	@ (8002110 <main+0x460>)
 8001e74:	edc3 7a00 	vstr	s15, [r3]

	  	uint8_t T_Buffer[8];
	  	uint8_t H_Buffer[8];


		sprintf(T_Buffer, "%4.1f C", t);
 8001e78:	4ba3      	ldr	r3, [pc, #652]	@ (8002108 <main+0x458>)
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e82:	f107 000c 	add.w	r0, r7, #12
 8001e86:	ec53 2b17 	vmov	r2, r3, d7
 8001e8a:	49a2      	ldr	r1, [pc, #648]	@ (8002114 <main+0x464>)
 8001e8c:	f005 f9fa 	bl	8007284 <siprintf>
		ILI9341_Draw_Text(T_Buffer, 60, 40, BLACK, 2, WHITE);
 8001e90:	f107 000c 	add.w	r0, r7, #12
 8001e94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	2228      	movs	r2, #40	@ 0x28
 8001ea2:	213c      	movs	r1, #60	@ 0x3c
 8001ea4:	f7fe fed0 	bl	8000c48 <ILI9341_Draw_Text>

		sprintf(H_Buffer, "%4.1f %%RH", h);
 8001ea8:	4b99      	ldr	r3, [pc, #612]	@ (8002110 <main+0x460>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001eb2:	1d38      	adds	r0, r7, #4
 8001eb4:	ec53 2b17 	vmov	r2, r3, d7
 8001eb8:	4997      	ldr	r1, [pc, #604]	@ (8002118 <main+0x468>)
 8001eba:	f005 f9e3 	bl	8007284 <siprintf>
		ILI9341_Draw_Text(H_Buffer, 170, 40, BLACK, 2, WHITE);
 8001ebe:	1d38      	adds	r0, r7, #4
 8001ec0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2228      	movs	r2, #40	@ 0x28
 8001ece:	21aa      	movs	r1, #170	@ 0xaa
 8001ed0:	f7fe feba 	bl	8000c48 <ILI9341_Draw_Text>
//		HAL_Delay(2000);
//		ILI9341_Fill_Screen(WHITE);



		ILI9341_Draw_Rectangle(70, 90, 170, 20, LIGHT_RED);
 8001ed4:	f64f 43d3 	movw	r3, #64723	@ 0xfcd3
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2314      	movs	r3, #20
 8001edc:	22aa      	movs	r2, #170	@ 0xaa
 8001ede:	215a      	movs	r1, #90	@ 0x5a
 8001ee0:	2046      	movs	r0, #70	@ 0x46
 8001ee2:	f7ff fabb 	bl	800145c <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Rectangle(70, 90,  (uint16_t)(170 * Red_L), 20, RED);
 8001ee6:	4b8d      	ldr	r3, [pc, #564]	@ (800211c <main+0x46c>)
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8002120 <main+0x470>
 8001ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ef8:	ee17 3a90 	vmov	r3, s15
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2314      	movs	r3, #20
 8001f06:	215a      	movs	r1, #90	@ 0x5a
 8001f08:	2046      	movs	r0, #70	@ 0x46
 8001f0a:	f7ff faa7 	bl	800145c <ILI9341_Draw_Rectangle>

		ILI9341_Draw_Rectangle(70, 140, 170, 20, LIGHT_GREEN);
 8001f0e:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2314      	movs	r3, #20
 8001f16:	22aa      	movs	r2, #170	@ 0xaa
 8001f18:	218c      	movs	r1, #140	@ 0x8c
 8001f1a:	2046      	movs	r0, #70	@ 0x46
 8001f1c:	f7ff fa9e 	bl	800145c <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Rectangle(70, 140, (uint16_t)(170 * Green_L), 20, GREEN);
 8001f20:	4b80      	ldr	r3, [pc, #512]	@ (8002124 <main+0x474>)
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8002120 <main+0x470>
 8001f2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f32:	ee17 3a90 	vmov	r3, s15
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2314      	movs	r3, #20
 8001f40:	218c      	movs	r1, #140	@ 0x8c
 8001f42:	2046      	movs	r0, #70	@ 0x46
 8001f44:	f7ff fa8a 	bl	800145c <ILI9341_Draw_Rectangle>

		ILI9341_Draw_Rectangle(70, 190, 170, 20, LIGHT_BLUE);
 8001f48:	f649 43df 	movw	r3, #40159	@ 0x9cdf
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2314      	movs	r3, #20
 8001f50:	22aa      	movs	r2, #170	@ 0xaa
 8001f52:	21be      	movs	r1, #190	@ 0xbe
 8001f54:	2046      	movs	r0, #70	@ 0x46
 8001f56:	f7ff fa81 	bl	800145c <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Rectangle(70, 190, (uint16_t)(170 * Blue_L), 20, BLUE);
 8001f5a:	4b73      	ldr	r3, [pc, #460]	@ (8002128 <main+0x478>)
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8002120 <main+0x470>
 8001f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f6c:	ee17 3a90 	vmov	r3, s15
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	231f      	movs	r3, #31
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2314      	movs	r3, #20
 8001f78:	21be      	movs	r1, #190	@ 0xbe
 8001f7a:	2046      	movs	r0, #70	@ 0x46
 8001f7c:	f7ff fa6e 	bl	800145c <ILI9341_Draw_Rectangle>

		ILI9341_Draw_Filled_Circle(150, 50, 30/2, mixedColor);
 8001f80:	4b6a      	ldr	r3, [pc, #424]	@ (800212c <main+0x47c>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	220f      	movs	r2, #15
 8001f86:	2132      	movs	r1, #50	@ 0x32
 8001f88:	2096      	movs	r0, #150	@ 0x96
 8001f8a:	f7fe fd3b 	bl	8000a04 <ILI9341_Draw_Filled_Circle>
		sprintf(debug, "Mixed Color = %d\n", mixedColor);
 8001f8e:	4b67      	ldr	r3, [pc, #412]	@ (800212c <main+0x47c>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	4966      	ldr	r1, [pc, #408]	@ (8002130 <main+0x480>)
 8001f96:	4867      	ldr	r0, [pc, #412]	@ (8002134 <main+0x484>)
 8001f98:	f005 f974 	bl	8007284 <siprintf>
//		HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);


		if (TP_Touchpad_Pressed()) {
 8001f9c:	f7ff fbde 	bl	800175c <TP_Touchpad_Pressed>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d073      	beq.n	800208e <main+0x3de>

			uint16_t coords[2];
			uint16_t tx = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	833b      	strh	r3, [r7, #24]
			uint16_t ty = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	82fb      	strh	r3, [r7, #22]

//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
//			HAL_Delay(100);
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);

			if (TP_Read_Coordinates(coords) == TOUCHPAD_DATA_OK) {
 8001fae:	463b      	mov	r3, r7
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fb11 	bl	80015d8 <TP_Read_Coordinates>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d168      	bne.n	800208e <main+0x3de>
				tx = coords[0];
 8001fbc:	883b      	ldrh	r3, [r7, #0]
 8001fbe:	833b      	strh	r3, [r7, #24]
				ty = coords[1];
 8001fc0:	887b      	ldrh	r3, [r7, #2]
 8001fc2:	82fb      	strh	r3, [r7, #22]

				sprintf(debug, "X = %d | Y = %d", coords[0], coords[1]);
 8001fc4:	883b      	ldrh	r3, [r7, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	887b      	ldrh	r3, [r7, #2]
 8001fca:	495b      	ldr	r1, [pc, #364]	@ (8002138 <main+0x488>)
 8001fcc:	4859      	ldr	r0, [pc, #356]	@ (8002134 <main+0x484>)
 8001fce:	f005 f959 	bl	8007284 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);
 8001fd2:	4858      	ldr	r0, [pc, #352]	@ (8002134 <main+0x484>)
 8001fd4:	f7fe f984 	bl	80002e0 <strlen>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	23c8      	movs	r3, #200	@ 0xc8
 8001fde:	4955      	ldr	r1, [pc, #340]	@ (8002134 <main+0x484>)
 8001fe0:	4856      	ldr	r0, [pc, #344]	@ (800213c <main+0x48c>)
 8001fe2:	f003 fd49 	bl	8005a78 <HAL_UART_Transmit>

				if ((tx >= 85 && tx <= 115) && (ty >= 265 && ty <= 295)) {
 8001fe6:	8b3b      	ldrh	r3, [r7, #24]
 8001fe8:	2b54      	cmp	r3, #84	@ 0x54
 8001fea:	d918      	bls.n	800201e <main+0x36e>
 8001fec:	8b3b      	ldrh	r3, [r7, #24]
 8001fee:	2b73      	cmp	r3, #115	@ 0x73
 8001ff0:	d815      	bhi.n	800201e <main+0x36e>
 8001ff2:	8afb      	ldrh	r3, [r7, #22]
 8001ff4:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8001ff8:	d911      	bls.n	800201e <main+0x36e>
 8001ffa:	8afb      	ldrh	r3, [r7, #22]
 8001ffc:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8002000:	d20d      	bcs.n	800201e <main+0x36e>
					Red_L += 0.1;
 8002002:	4b46      	ldr	r3, [pc, #280]	@ (800211c <main+0x46c>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800200c:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80020f8 <main+0x448>
 8002010:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002014:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002018:	4b40      	ldr	r3, [pc, #256]	@ (800211c <main+0x46c>)
 800201a:	edc3 7a00 	vstr	s15, [r3]
//					sprintf(debug, "Red_L = %.2f\r\n", Red_L);
//					HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);

				}

			    if ((tx >= 135 && tx <= 165) && (ty >= 265 && ty <= 295)) {
 800201e:	8b3b      	ldrh	r3, [r7, #24]
 8002020:	2b86      	cmp	r3, #134	@ 0x86
 8002022:	d918      	bls.n	8002056 <main+0x3a6>
 8002024:	8b3b      	ldrh	r3, [r7, #24]
 8002026:	2ba5      	cmp	r3, #165	@ 0xa5
 8002028:	d815      	bhi.n	8002056 <main+0x3a6>
 800202a:	8afb      	ldrh	r3, [r7, #22]
 800202c:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8002030:	d911      	bls.n	8002056 <main+0x3a6>
 8002032:	8afb      	ldrh	r3, [r7, #22]
 8002034:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8002038:	d20d      	bcs.n	8002056 <main+0x3a6>
					Green_L += 0.1;
 800203a:	4b3a      	ldr	r3, [pc, #232]	@ (8002124 <main+0x474>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002044:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 80020f8 <main+0x448>
 8002048:	ee37 7b06 	vadd.f64	d7, d7, d6
 800204c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002050:	4b34      	ldr	r3, [pc, #208]	@ (8002124 <main+0x474>)
 8002052:	edc3 7a00 	vstr	s15, [r3]
//					sprintf(debug, "Green_L = %.2f\r\n", Green_L);
//					HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);

				}

				if ((tx >= 185 && tx <= 215) && (ty >= 265 && ty <= 295)) {
 8002056:	8b3b      	ldrh	r3, [r7, #24]
 8002058:	2bb8      	cmp	r3, #184	@ 0xb8
 800205a:	d918      	bls.n	800208e <main+0x3de>
 800205c:	8b3b      	ldrh	r3, [r7, #24]
 800205e:	2bd7      	cmp	r3, #215	@ 0xd7
 8002060:	d815      	bhi.n	800208e <main+0x3de>
 8002062:	8afb      	ldrh	r3, [r7, #22]
 8002064:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8002068:	d911      	bls.n	800208e <main+0x3de>
 800206a:	8afb      	ldrh	r3, [r7, #22]
 800206c:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8002070:	d20d      	bcs.n	800208e <main+0x3de>
					Blue_L += 0.1;
 8002072:	4b2d      	ldr	r3, [pc, #180]	@ (8002128 <main+0x478>)
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800207c:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 80020f8 <main+0x448>
 8002080:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002084:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002088:	4b27      	ldr	r3, [pc, #156]	@ (8002128 <main+0x478>)
 800208a:	edc3 7a00 	vstr	s15, [r3]

				}
			}
		}

		if (Red_L > 1.01) {
 800208e:	4b23      	ldr	r3, [pc, #140]	@ (800211c <main+0x46c>)
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002098:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8002100 <main+0x450>
 800209c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80020a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a4:	dd03      	ble.n	80020ae <main+0x3fe>
			Red_L = 0;
 80020a6:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <main+0x46c>)
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
		}
		if (Green_L > 1.01) {
 80020ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002124 <main+0x474>)
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020b8:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8002100 <main+0x450>
 80020bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80020c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c4:	dd03      	ble.n	80020ce <main+0x41e>
			Green_L = 0;
 80020c6:	4b17      	ldr	r3, [pc, #92]	@ (8002124 <main+0x474>)
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
		}
		if (Blue_L > 1.01) {
 80020ce:	4b16      	ldr	r3, [pc, #88]	@ (8002128 <main+0x478>)
 80020d0:	edd3 7a00 	vldr	s15, [r3]
 80020d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020d8:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8002100 <main+0x450>
 80020dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80020e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e4:	dd03      	ble.n	80020ee <main+0x43e>
			Blue_L = 0;
 80020e6:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <main+0x478>)
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
		}

		mixColor();
 80020ee:	f7ff fd65 	bl	8001bbc <mixColor>
  {
 80020f2:	e620      	b.n	8001d36 <main+0x86>
 80020f4:	f3af 8000 	nop.w
 80020f8:	9999999a 	.word	0x9999999a
 80020fc:	3fb99999 	.word	0x3fb99999
 8002100:	c28f5c29 	.word	0xc28f5c29
 8002104:	3ff028f5 	.word	0x3ff028f5
 8002108:	20000008 	.word	0x20000008
 800210c:	200002bc 	.word	0x200002bc
 8002110:	20000004 	.word	0x20000004
 8002114:	0800a9c8 	.word	0x0800a9c8
 8002118:	0800a9d0 	.word	0x0800a9d0
 800211c:	200002c8 	.word	0x200002c8
 8002120:	432a0000 	.word	0x432a0000
 8002124:	200002cc 	.word	0x200002cc
 8002128:	200002d0 	.word	0x200002d0
 800212c:	200002c4 	.word	0x200002c4
 8002130:	0800a9dc 	.word	0x0800a9dc
 8002134:	20000284 	.word	0x20000284
 8002138:	0800a9f0 	.word	0x0800a9f0
 800213c:	2000039c 	.word	0x2000039c

08002140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b094      	sub	sp, #80	@ 0x50
 8002144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	2234      	movs	r2, #52	@ 0x34
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f005 f8fd 	bl	800734e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002154:	f107 0308 	add.w	r3, r7, #8
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002164:	4b28      	ldr	r3, [pc, #160]	@ (8002208 <SystemClock_Config+0xc8>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	4a27      	ldr	r2, [pc, #156]	@ (8002208 <SystemClock_Config+0xc8>)
 800216a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800216e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002170:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <SystemClock_Config+0xc8>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800217c:	4b23      	ldr	r3, [pc, #140]	@ (800220c <SystemClock_Config+0xcc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002184:	4a21      	ldr	r2, [pc, #132]	@ (800220c <SystemClock_Config+0xcc>)
 8002186:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b1f      	ldr	r3, [pc, #124]	@ (800220c <SystemClock_Config+0xcc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002198:	2302      	movs	r3, #2
 800219a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800219c:	2301      	movs	r3, #1
 800219e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021a0:	2310      	movs	r3, #16
 80021a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a4:	2302      	movs	r3, #2
 80021a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021a8:	2300      	movs	r3, #0
 80021aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80021ac:	2310      	movs	r3, #16
 80021ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80021b0:	23c0      	movs	r3, #192	@ 0xc0
 80021b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021b4:	2302      	movs	r3, #2
 80021b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80021b8:	2302      	movs	r3, #2
 80021ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021bc:	2302      	movs	r3, #2
 80021be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	4618      	mov	r0, r3
 80021c6:	f001 fc89 	bl	8003adc <HAL_RCC_OscConfig>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021d0:	f000 f81e 	bl	8002210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021d4:	230f      	movs	r3, #15
 80021d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021dc:	2300      	movs	r3, #0
 80021de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f001 ff22 	bl	8004038 <HAL_RCC_ClockConfig>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80021fa:	f000 f809 	bl	8002210 <Error_Handler>
  }
}
 80021fe:	bf00      	nop
 8002200:	3750      	adds	r7, #80	@ 0x50
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	40007000 	.word	0x40007000

08002210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002214:	b672      	cpsid	i
}
 8002216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <Error_Handler+0x8>

0800221c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <MX_RNG_Init+0x20>)
 8002222:	4a07      	ldr	r2, [pc, #28]	@ (8002240 <MX_RNG_Init+0x24>)
 8002224:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002226:	4805      	ldr	r0, [pc, #20]	@ (800223c <MX_RNG_Init+0x20>)
 8002228:	f002 fd14 	bl	8004c54 <HAL_RNG_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002232:	f7ff ffed 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200002d8 	.word	0x200002d8
 8002240:	50060800 	.word	0x50060800

08002244 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b0a8      	sub	sp, #160	@ 0xa0
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	2290      	movs	r2, #144	@ 0x90
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f005 f87a 	bl	800734e <memset>
  if(rngHandle->Instance==RNG)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a11      	ldr	r2, [pc, #68]	@ (80022a4 <HAL_RNG_MspInit+0x60>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d11b      	bne.n	800229c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002264:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002268:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	4618      	mov	r0, r3
 8002276:	f002 f8c5 	bl	8004404 <HAL_RCCEx_PeriphCLKConfig>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002280:	f7ff ffc6 	bl	8002210 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002284:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <HAL_RNG_MspInit+0x64>)
 8002286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002288:	4a07      	ldr	r2, [pc, #28]	@ (80022a8 <HAL_RNG_MspInit+0x64>)
 800228a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800228e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002290:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <HAL_RNG_MspInit+0x64>)
 8002292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800229c:	bf00      	nop
 800229e:	37a0      	adds	r7, #160	@ 0xa0
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	50060800 	.word	0x50060800
 80022a8:	40023800 	.word	0x40023800

080022ac <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80022b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <MX_SPI5_Init+0x74>)
 80022b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002324 <MX_SPI5_Init+0x78>)
 80022b4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80022b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <MX_SPI5_Init+0x74>)
 80022b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022bc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80022be:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <MX_SPI5_Init+0x74>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80022c4:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <MX_SPI5_Init+0x74>)
 80022c6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80022ca:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022cc:	4b14      	ldr	r3, [pc, #80]	@ (8002320 <MX_SPI5_Init+0x74>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022d2:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <MX_SPI5_Init+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <MX_SPI5_Init+0x74>)
 80022da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022de:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002320 <MX_SPI5_Init+0x74>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <MX_SPI5_Init+0x74>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80022ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <MX_SPI5_Init+0x74>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <MX_SPI5_Init+0x74>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 80022f8:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <MX_SPI5_Init+0x74>)
 80022fa:	2207      	movs	r2, #7
 80022fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022fe:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <MX_SPI5_Init+0x74>)
 8002300:	2200      	movs	r2, #0
 8002302:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <MX_SPI5_Init+0x74>)
 8002306:	2200      	movs	r2, #0
 8002308:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800230a:	4805      	ldr	r0, [pc, #20]	@ (8002320 <MX_SPI5_Init+0x74>)
 800230c:	f002 fccc 	bl	8004ca8 <HAL_SPI_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002316:	f7ff ff7b 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200002e8 	.word	0x200002e8
 8002324:	40015000 	.word	0x40015000

08002328 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a17      	ldr	r2, [pc, #92]	@ (80023a4 <HAL_SPI_MspInit+0x7c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d128      	bne.n	800239c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800234a:	4b17      	ldr	r3, [pc, #92]	@ (80023a8 <HAL_SPI_MspInit+0x80>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	4a16      	ldr	r2, [pc, #88]	@ (80023a8 <HAL_SPI_MspInit+0x80>)
 8002350:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002354:	6453      	str	r3, [r2, #68]	@ 0x44
 8002356:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <HAL_SPI_MspInit+0x80>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002362:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <HAL_SPI_MspInit+0x80>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a10      	ldr	r2, [pc, #64]	@ (80023a8 <HAL_SPI_MspInit+0x80>)
 8002368:	f043 0320 	orr.w	r3, r3, #32
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <HAL_SPI_MspInit+0x80>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800237a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800237e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800238c:	2305      	movs	r3, #5
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	4805      	ldr	r0, [pc, #20]	@ (80023ac <HAL_SPI_MspInit+0x84>)
 8002398:	f000 fbda 	bl	8002b50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800239c:	bf00      	nop
 800239e:	3728      	adds	r7, #40	@ 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40015000 	.word	0x40015000
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40021400 	.word	0x40021400

080023b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	4b0f      	ldr	r3, [pc, #60]	@ (80023f4 <HAL_MspInit+0x44>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	4a0e      	ldr	r2, [pc, #56]	@ (80023f4 <HAL_MspInit+0x44>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c2:	4b0c      	ldr	r3, [pc, #48]	@ (80023f4 <HAL_MspInit+0x44>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <HAL_MspInit+0x44>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	4a08      	ldr	r2, [pc, #32]	@ (80023f4 <HAL_MspInit+0x44>)
 80023d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023da:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <HAL_MspInit+0x44>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800

080023f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <NMI_Handler+0x4>

08002400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <HardFault_Handler+0x4>

08002408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800240c:	bf00      	nop
 800240e:	e7fd      	b.n	800240c <MemManage_Handler+0x4>

08002410 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <BusFault_Handler+0x4>

08002418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <UsageFault_Handler+0x4>

08002420 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800244e:	f000 fa55 	bl	80028fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}

08002456 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  return 1;
 800245a:	2301      	movs	r3, #1
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <_kill>:

int _kill(int pid, int sig)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002470:	f004 ffc0 	bl	80073f4 <__errno>
 8002474:	4603      	mov	r3, r0
 8002476:	2216      	movs	r2, #22
 8002478:	601a      	str	r2, [r3, #0]
  return -1;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <_exit>:

void _exit (int status)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800248e:	f04f 31ff 	mov.w	r1, #4294967295
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ffe7 	bl	8002466 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <_exit+0x12>

0800249c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e00a      	b.n	80024c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ae:	f3af 8000 	nop.w
 80024b2:	4601      	mov	r1, r0
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	60ba      	str	r2, [r7, #8]
 80024ba:	b2ca      	uxtb	r2, r1
 80024bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3301      	adds	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	dbf0      	blt.n	80024ae <_read+0x12>
  }

  return len;
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	e009      	b.n	80024fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	60ba      	str	r2, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	dbf1      	blt.n	80024e8 <_write+0x12>
  }
  return len;
 8002504:	687b      	ldr	r3, [r7, #4]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <_close>:

int _close(int file)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002536:	605a      	str	r2, [r3, #4]
  return 0;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_isatty>:

int _isatty(int file)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002580:	4a14      	ldr	r2, [pc, #80]	@ (80025d4 <_sbrk+0x5c>)
 8002582:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <_sbrk+0x60>)
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800258c:	4b13      	ldr	r3, [pc, #76]	@ (80025dc <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002594:	4b11      	ldr	r3, [pc, #68]	@ (80025dc <_sbrk+0x64>)
 8002596:	4a12      	ldr	r2, [pc, #72]	@ (80025e0 <_sbrk+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259a:	4b10      	ldr	r3, [pc, #64]	@ (80025dc <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d207      	bcs.n	80025b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a8:	f004 ff24 	bl	80073f4 <__errno>
 80025ac:	4603      	mov	r3, r0
 80025ae:	220c      	movs	r2, #12
 80025b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	e009      	b.n	80025cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b8:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025be:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a05      	ldr	r2, [pc, #20]	@ (80025dc <_sbrk+0x64>)
 80025c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20080000 	.word	0x20080000
 80025d8:	00000400 	.word	0x00000400
 80025dc:	2000034c 	.word	0x2000034c
 80025e0:	20000578 	.word	0x20000578

080025e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e8:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <SystemInit+0x20>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ee:	4a05      	ldr	r2, [pc, #20]	@ (8002604 <SystemInit+0x20>)
 80025f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800260e:	f107 0310 	add.w	r3, r7, #16
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002626:	4b20      	ldr	r3, [pc, #128]	@ (80026a8 <MX_TIM1_Init+0xa0>)
 8002628:	4a20      	ldr	r2, [pc, #128]	@ (80026ac <MX_TIM1_Init+0xa4>)
 800262a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 800262c:	4b1e      	ldr	r3, [pc, #120]	@ (80026a8 <MX_TIM1_Init+0xa0>)
 800262e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002632:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002634:	4b1c      	ldr	r3, [pc, #112]	@ (80026a8 <MX_TIM1_Init+0xa0>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800263a:	4b1b      	ldr	r3, [pc, #108]	@ (80026a8 <MX_TIM1_Init+0xa0>)
 800263c:	2200      	movs	r2, #0
 800263e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002640:	4b19      	ldr	r3, [pc, #100]	@ (80026a8 <MX_TIM1_Init+0xa0>)
 8002642:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002646:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002648:	4b17      	ldr	r3, [pc, #92]	@ (80026a8 <MX_TIM1_Init+0xa0>)
 800264a:	2200      	movs	r2, #0
 800264c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264e:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <MX_TIM1_Init+0xa0>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002654:	4814      	ldr	r0, [pc, #80]	@ (80026a8 <MX_TIM1_Init+0xa0>)
 8002656:	f002 fed1 	bl	80053fc <HAL_TIM_Base_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002660:	f7ff fdd6 	bl	8002210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002668:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800266a:	f107 0310 	add.w	r3, r7, #16
 800266e:	4619      	mov	r1, r3
 8002670:	480d      	ldr	r0, [pc, #52]	@ (80026a8 <MX_TIM1_Init+0xa0>)
 8002672:	f002 ff1b 	bl	80054ac <HAL_TIM_ConfigClockSource>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800267c:	f7ff fdc8 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002680:	2300      	movs	r3, #0
 8002682:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	4619      	mov	r1, r3
 8002690:	4805      	ldr	r0, [pc, #20]	@ (80026a8 <MX_TIM1_Init+0xa0>)
 8002692:	f003 f915 	bl	80058c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800269c:	f7ff fdb8 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026a0:	bf00      	nop
 80026a2:	3720      	adds	r7, #32
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000350 	.word	0x20000350
 80026ac:	40010000 	.word	0x40010000

080026b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <HAL_TIM_Base_MspInit+0x38>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d10b      	bne.n	80026da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026c2:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <HAL_TIM_Base_MspInit+0x3c>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	4a09      	ldr	r2, [pc, #36]	@ (80026ec <HAL_TIM_Base_MspInit+0x3c>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ce:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <HAL_TIM_Base_MspInit+0x3c>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40010000 	.word	0x40010000
 80026ec:	40023800 	.word	0x40023800

080026f0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026f4:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <MX_USART3_UART_Init+0x58>)
 80026f6:	4a15      	ldr	r2, [pc, #84]	@ (800274c <MX_USART3_UART_Init+0x5c>)
 80026f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026fa:	4b13      	ldr	r3, [pc, #76]	@ (8002748 <MX_USART3_UART_Init+0x58>)
 80026fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002700:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002702:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <MX_USART3_UART_Init+0x58>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002708:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <MX_USART3_UART_Init+0x58>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800270e:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <MX_USART3_UART_Init+0x58>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002714:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <MX_USART3_UART_Init+0x58>)
 8002716:	220c      	movs	r2, #12
 8002718:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271a:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <MX_USART3_UART_Init+0x58>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002720:	4b09      	ldr	r3, [pc, #36]	@ (8002748 <MX_USART3_UART_Init+0x58>)
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002726:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <MX_USART3_UART_Init+0x58>)
 8002728:	2200      	movs	r2, #0
 800272a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800272c:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <MX_USART3_UART_Init+0x58>)
 800272e:	2200      	movs	r2, #0
 8002730:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002732:	4805      	ldr	r0, [pc, #20]	@ (8002748 <MX_USART3_UART_Init+0x58>)
 8002734:	f003 f952 	bl	80059dc <HAL_UART_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800273e:	f7ff fd67 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2000039c 	.word	0x2000039c
 800274c:	40004800 	.word	0x40004800

08002750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b0ae      	sub	sp, #184	@ 0xb8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	2290      	movs	r2, #144	@ 0x90
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f004 fdec 	bl	800734e <memset>
  if(uartHandle->Instance==USART3)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a22      	ldr	r2, [pc, #136]	@ (8002804 <HAL_UART_MspInit+0xb4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d13c      	bne.n	80027fa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002780:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002784:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002786:	2300      	movs	r3, #0
 8002788:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4618      	mov	r0, r3
 8002790:	f001 fe38 	bl	8004404 <HAL_RCCEx_PeriphCLKConfig>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800279a:	f7ff fd39 	bl	8002210 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800279e:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <HAL_UART_MspInit+0xb8>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	4a19      	ldr	r2, [pc, #100]	@ (8002808 <HAL_UART_MspInit+0xb8>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027aa:	4b17      	ldr	r3, [pc, #92]	@ (8002808 <HAL_UART_MspInit+0xb8>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b6:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <HAL_UART_MspInit+0xb8>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	4a13      	ldr	r2, [pc, #76]	@ (8002808 <HAL_UART_MspInit+0xb8>)
 80027bc:	f043 0308 	orr.w	r3, r3, #8
 80027c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c2:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <HAL_UART_MspInit+0xb8>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027e8:	2307      	movs	r3, #7
 80027ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80027f2:	4619      	mov	r1, r3
 80027f4:	4805      	ldr	r0, [pc, #20]	@ (800280c <HAL_UART_MspInit+0xbc>)
 80027f6:	f000 f9ab 	bl	8002b50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80027fa:	bf00      	nop
 80027fc:	37b8      	adds	r7, #184	@ 0xb8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40004800 	.word	0x40004800
 8002808:	40023800 	.word	0x40023800
 800280c:	40020c00 	.word	0x40020c00

08002810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002810:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002848 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002814:	f7ff fee6 	bl	80025e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002818:	480c      	ldr	r0, [pc, #48]	@ (800284c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800281a:	490d      	ldr	r1, [pc, #52]	@ (8002850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800281c:	4a0d      	ldr	r2, [pc, #52]	@ (8002854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800281e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002820:	e002      	b.n	8002828 <LoopCopyDataInit>

08002822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002826:	3304      	adds	r3, #4

08002828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800282a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800282c:	d3f9      	bcc.n	8002822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282e:	4a0a      	ldr	r2, [pc, #40]	@ (8002858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002830:	4c0a      	ldr	r4, [pc, #40]	@ (800285c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002834:	e001      	b.n	800283a <LoopFillZerobss>

08002836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002838:	3204      	adds	r2, #4

0800283a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800283a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800283c:	d3fb      	bcc.n	8002836 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800283e:	f004 fddf 	bl	8007400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002842:	f7ff fa35 	bl	8001cb0 <main>
  bx  lr    
 8002846:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002848:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800284c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002850:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002854:	0800b094 	.word	0x0800b094
  ldr r2, =_sbss
 8002858:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800285c:	20000574 	.word	0x20000574

08002860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002860:	e7fe      	b.n	8002860 <ADC_IRQHandler>
	...

08002864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002868:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <HAL_Init+0x34>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <HAL_Init+0x34>)
 800286e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002872:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002874:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <HAL_Init+0x34>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a07      	ldr	r2, [pc, #28]	@ (8002898 <HAL_Init+0x34>)
 800287a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800287e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002880:	2003      	movs	r0, #3
 8002882:	f000 f931 	bl	8002ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002886:	200f      	movs	r0, #15
 8002888:	f000 f808 	bl	800289c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800288c:	f7ff fd90 	bl	80023b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023c00 	.word	0x40023c00

0800289c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a4:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <HAL_InitTick+0x54>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b12      	ldr	r3, [pc, #72]	@ (80028f4 <HAL_InitTick+0x58>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f93b 	bl	8002b36 <HAL_SYSTICK_Config>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00e      	b.n	80028e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d80a      	bhi.n	80028e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d0:	2200      	movs	r2, #0
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f000 f911 	bl	8002afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028dc:	4a06      	ldr	r2, [pc, #24]	@ (80028f8 <HAL_InitTick+0x5c>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e000      	b.n	80028e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	2000000c 	.word	0x2000000c
 80028f4:	20000014 	.word	0x20000014
 80028f8:	20000010 	.word	0x20000010

080028fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <HAL_IncTick+0x20>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <HAL_IncTick+0x24>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4413      	add	r3, r2
 800290c:	4a04      	ldr	r2, [pc, #16]	@ (8002920 <HAL_IncTick+0x24>)
 800290e:	6013      	str	r3, [r2, #0]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000014 	.word	0x20000014
 8002920:	20000424 	.word	0x20000424

08002924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return uwTick;
 8002928:	4b03      	ldr	r3, [pc, #12]	@ (8002938 <HAL_GetTick+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000424 	.word	0x20000424

0800293c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002944:	f7ff ffee 	bl	8002924 <HAL_GetTick>
 8002948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d005      	beq.n	8002962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002956:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <HAL_Delay+0x44>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002962:	bf00      	nop
 8002964:	f7ff ffde 	bl	8002924 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	429a      	cmp	r2, r3
 8002972:	d8f7      	bhi.n	8002964 <HAL_Delay+0x28>
  {
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000014 	.word	0x20000014

08002984 <__NVIC_SetPriorityGrouping>:
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002994:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029a0:	4013      	ands	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <__NVIC_SetPriorityGrouping+0x44>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b2:	4a04      	ldr	r2, [pc, #16]	@ (80029c4 <__NVIC_SetPriorityGrouping+0x40>)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	60d3      	str	r3, [r2, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00
 80029c8:	05fa0000 	.word	0x05fa0000

080029cc <__NVIC_GetPriorityGrouping>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d0:	4b04      	ldr	r3, [pc, #16]	@ (80029e4 <__NVIC_GetPriorityGrouping+0x18>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	f003 0307 	and.w	r3, r3, #7
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <__NVIC_SetPriority>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	db0a      	blt.n	8002a12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	490c      	ldr	r1, [pc, #48]	@ (8002a34 <__NVIC_SetPriority+0x4c>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	0112      	lsls	r2, r2, #4
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002a10:	e00a      	b.n	8002a28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4908      	ldr	r1, [pc, #32]	@ (8002a38 <__NVIC_SetPriority+0x50>)
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	0112      	lsls	r2, r2, #4
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	440b      	add	r3, r1
 8002a26:	761a      	strb	r2, [r3, #24]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000e100 	.word	0xe000e100
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <NVIC_EncodePriority>:
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	@ 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f1c3 0307 	rsb	r3, r3, #7
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	bf28      	it	cs
 8002a5a:	2304      	movcs	r3, #4
 8002a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d902      	bls.n	8002a6c <NVIC_EncodePriority+0x30>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3b03      	subs	r3, #3
 8002a6a:	e000      	b.n	8002a6e <NVIC_EncodePriority+0x32>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	f04f 32ff 	mov.w	r2, #4294967295
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	401a      	ands	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a84:	f04f 31ff 	mov.w	r1, #4294967295
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	4313      	orrs	r3, r2
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3724      	adds	r7, #36	@ 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ab4:	d301      	bcc.n	8002aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e00f      	b.n	8002ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae4 <SysTick_Config+0x40>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac2:	210f      	movs	r1, #15
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	f7ff ff8e 	bl	80029e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002acc:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <SysTick_Config+0x40>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ad2:	4b04      	ldr	r3, [pc, #16]	@ (8002ae4 <SysTick_Config+0x40>)
 8002ad4:	2207      	movs	r2, #7
 8002ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	e000e010 	.word	0xe000e010

08002ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ff47 	bl	8002984 <__NVIC_SetPriorityGrouping>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	4603      	mov	r3, r0
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b10:	f7ff ff5c 	bl	80029cc <__NVIC_GetPriorityGrouping>
 8002b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	6978      	ldr	r0, [r7, #20]
 8002b1c:	f7ff ff8e 	bl	8002a3c <NVIC_EncodePriority>
 8002b20:	4602      	mov	r2, r0
 8002b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff5d 	bl	80029e8 <__NVIC_SetPriority>
}
 8002b2e:	bf00      	nop
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ffb0 	bl	8002aa4 <SysTick_Config>
 8002b44:	4603      	mov	r3, r0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	@ 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	e175      	b.n	8002e5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	f040 8164 	bne.w	8002e56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d005      	beq.n	8002ba6 <HAL_GPIO_Init+0x56>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d130      	bne.n	8002c08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 0201 	and.w	r2, r3, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d017      	beq.n	8002c44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d123      	bne.n	8002c98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	08da      	lsrs	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3208      	adds	r2, #8
 8002c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	220f      	movs	r2, #15
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	08da      	lsrs	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3208      	adds	r2, #8
 8002c92:	69b9      	ldr	r1, [r7, #24]
 8002c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0203 	and.w	r2, r3, #3
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80be 	beq.w	8002e56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cda:	4b66      	ldr	r3, [pc, #408]	@ (8002e74 <HAL_GPIO_Init+0x324>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cde:	4a65      	ldr	r2, [pc, #404]	@ (8002e74 <HAL_GPIO_Init+0x324>)
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ce6:	4b63      	ldr	r3, [pc, #396]	@ (8002e74 <HAL_GPIO_Init+0x324>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cf2:	4a61      	ldr	r2, [pc, #388]	@ (8002e78 <HAL_GPIO_Init+0x328>)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	220f      	movs	r2, #15
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a58      	ldr	r2, [pc, #352]	@ (8002e7c <HAL_GPIO_Init+0x32c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d037      	beq.n	8002d8e <HAL_GPIO_Init+0x23e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a57      	ldr	r2, [pc, #348]	@ (8002e80 <HAL_GPIO_Init+0x330>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d031      	beq.n	8002d8a <HAL_GPIO_Init+0x23a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a56      	ldr	r2, [pc, #344]	@ (8002e84 <HAL_GPIO_Init+0x334>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d02b      	beq.n	8002d86 <HAL_GPIO_Init+0x236>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a55      	ldr	r2, [pc, #340]	@ (8002e88 <HAL_GPIO_Init+0x338>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d025      	beq.n	8002d82 <HAL_GPIO_Init+0x232>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a54      	ldr	r2, [pc, #336]	@ (8002e8c <HAL_GPIO_Init+0x33c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <HAL_GPIO_Init+0x22e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a53      	ldr	r2, [pc, #332]	@ (8002e90 <HAL_GPIO_Init+0x340>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d019      	beq.n	8002d7a <HAL_GPIO_Init+0x22a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a52      	ldr	r2, [pc, #328]	@ (8002e94 <HAL_GPIO_Init+0x344>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_GPIO_Init+0x226>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a51      	ldr	r2, [pc, #324]	@ (8002e98 <HAL_GPIO_Init+0x348>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00d      	beq.n	8002d72 <HAL_GPIO_Init+0x222>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a50      	ldr	r2, [pc, #320]	@ (8002e9c <HAL_GPIO_Init+0x34c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <HAL_GPIO_Init+0x21e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4f      	ldr	r2, [pc, #316]	@ (8002ea0 <HAL_GPIO_Init+0x350>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_GPIO_Init+0x21a>
 8002d66:	2309      	movs	r3, #9
 8002d68:	e012      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d6a:	230a      	movs	r3, #10
 8002d6c:	e010      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d6e:	2308      	movs	r3, #8
 8002d70:	e00e      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d72:	2307      	movs	r3, #7
 8002d74:	e00c      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d76:	2306      	movs	r3, #6
 8002d78:	e00a      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d7a:	2305      	movs	r3, #5
 8002d7c:	e008      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d7e:	2304      	movs	r3, #4
 8002d80:	e006      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d82:	2303      	movs	r3, #3
 8002d84:	e004      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e002      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	f002 0203 	and.w	r2, r2, #3
 8002d96:	0092      	lsls	r2, r2, #2
 8002d98:	4093      	lsls	r3, r2
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002da0:	4935      	ldr	r1, [pc, #212]	@ (8002e78 <HAL_GPIO_Init+0x328>)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	3302      	adds	r3, #2
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dae:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dd2:	4a34      	ldr	r2, [pc, #208]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd8:	4b32      	ldr	r3, [pc, #200]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dfc:	4a29      	ldr	r2, [pc, #164]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e02:	4b28      	ldr	r3, [pc, #160]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e26:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e50:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b0f      	cmp	r3, #15
 8002e60:	f67f ae86 	bls.w	8002b70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3724      	adds	r7, #36	@ 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40013800 	.word	0x40013800
 8002e7c:	40020000 	.word	0x40020000
 8002e80:	40020400 	.word	0x40020400
 8002e84:	40020800 	.word	0x40020800
 8002e88:	40020c00 	.word	0x40020c00
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40021400 	.word	0x40021400
 8002e94:	40021800 	.word	0x40021800
 8002e98:	40021c00 	.word	0x40021c00
 8002e9c:	40022000 	.word	0x40022000
 8002ea0:	40022400 	.word	0x40022400
 8002ea4:	40013c00 	.word	0x40013c00

08002ea8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	887b      	ldrh	r3, [r7, #2]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
 8002ec4:	e001      	b.n	8002eca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	807b      	strh	r3, [r7, #2]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee8:	787b      	ldrb	r3, [r7, #1]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ef4:	e003      	b.n	8002efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ef6:	887b      	ldrh	r3, [r7, #2]
 8002ef8:	041a      	lsls	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	619a      	str	r2, [r3, #24]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e08b      	b.n	8003036 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fe fd3c 	bl	80019b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	@ 0x24
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d107      	bne.n	8002f86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	e006      	b.n	8002f94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d108      	bne.n	8002fae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	e007      	b.n	8002fbe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003040 <HAL_I2C_Init+0x134>)
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69d9      	ldr	r1, [r3, #28]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1a      	ldr	r2, [r3, #32]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	02008000 	.word	0x02008000

08003044 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	461a      	mov	r2, r3
 8003050:	460b      	mov	r3, r1
 8003052:	817b      	strh	r3, [r7, #10]
 8003054:	4613      	mov	r3, r2
 8003056:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b20      	cmp	r3, #32
 8003062:	f040 80fd 	bne.w	8003260 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_I2C_Master_Transmit+0x30>
 8003070:	2302      	movs	r3, #2
 8003072:	e0f6      	b.n	8003262 <HAL_I2C_Master_Transmit+0x21e>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800307c:	f7ff fc52 	bl	8002924 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	2319      	movs	r3, #25
 8003088:	2201      	movs	r2, #1
 800308a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fa0a 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0e1      	b.n	8003262 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2221      	movs	r2, #33	@ 0x21
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2210      	movs	r2, #16
 80030aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	893a      	ldrh	r2, [r7, #8]
 80030be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2bff      	cmp	r3, #255	@ 0xff
 80030ce:	d906      	bls.n	80030de <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	22ff      	movs	r2, #255	@ 0xff
 80030d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80030d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	e007      	b.n	80030ee <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80030e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030ec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d024      	beq.n	8003140 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	781a      	ldrb	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312a:	b2db      	uxtb	r3, r3
 800312c:	3301      	adds	r3, #1
 800312e:	b2da      	uxtb	r2, r3
 8003130:	8979      	ldrh	r1, [r7, #10]
 8003132:	4b4e      	ldr	r3, [pc, #312]	@ (800326c <HAL_I2C_Master_Transmit+0x228>)
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fc05 	bl	8003948 <I2C_TransferConfig>
 800313e:	e066      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003144:	b2da      	uxtb	r2, r3
 8003146:	8979      	ldrh	r1, [r7, #10]
 8003148:	4b48      	ldr	r3, [pc, #288]	@ (800326c <HAL_I2C_Master_Transmit+0x228>)
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fbfa 	bl	8003948 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003154:	e05b      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	6a39      	ldr	r1, [r7, #32]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f9fd 	bl	800355a <I2C_WaitOnTXISFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e07b      	b.n	8003262 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	781a      	ldrb	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d034      	beq.n	800320e <HAL_I2C_Master_Transmit+0x1ca>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d130      	bne.n	800320e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	2200      	movs	r2, #0
 80031b4:	2180      	movs	r1, #128	@ 0x80
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f976 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e04d      	b.n	8003262 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2bff      	cmp	r3, #255	@ 0xff
 80031ce:	d90e      	bls.n	80031ee <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	22ff      	movs	r2, #255	@ 0xff
 80031d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	8979      	ldrh	r1, [r7, #10]
 80031de:	2300      	movs	r3, #0
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fbae 	bl	8003948 <I2C_TransferConfig>
 80031ec:	e00f      	b.n	800320e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	8979      	ldrh	r1, [r7, #10]
 8003200:	2300      	movs	r3, #0
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fb9d 	bl	8003948 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d19e      	bne.n	8003156 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	6a39      	ldr	r1, [r7, #32]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f9e3 	bl	80035e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e01a      	b.n	8003262 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2220      	movs	r2, #32
 8003232:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <HAL_I2C_Master_Transmit+0x22c>)
 8003240:	400b      	ands	r3, r1
 8003242:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	e000      	b.n	8003262 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003260:	2302      	movs	r3, #2
  }
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	80002000 	.word	0x80002000
 8003270:	fe00e800 	.word	0xfe00e800

08003274 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	461a      	mov	r2, r3
 8003280:	460b      	mov	r3, r1
 8003282:	817b      	strh	r3, [r7, #10]
 8003284:	4613      	mov	r3, r2
 8003286:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b20      	cmp	r3, #32
 8003292:	f040 80db 	bne.w	800344c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_I2C_Master_Receive+0x30>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e0d4      	b.n	800344e <HAL_I2C_Master_Receive+0x1da>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032ac:	f7ff fb3a 	bl	8002924 <HAL_GetTick>
 80032b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2319      	movs	r3, #25
 80032b8:	2201      	movs	r2, #1
 80032ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f8f2 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0bf      	b.n	800344e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2222      	movs	r2, #34	@ 0x22
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2210      	movs	r2, #16
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	893a      	ldrh	r2, [r7, #8]
 80032ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2bff      	cmp	r3, #255	@ 0xff
 80032fe:	d90e      	bls.n	800331e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330a:	b2da      	uxtb	r2, r3
 800330c:	8979      	ldrh	r1, [r7, #10]
 800330e:	4b52      	ldr	r3, [pc, #328]	@ (8003458 <HAL_I2C_Master_Receive+0x1e4>)
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fb16 	bl	8003948 <I2C_TransferConfig>
 800331c:	e06d      	b.n	80033fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332c:	b2da      	uxtb	r2, r3
 800332e:	8979      	ldrh	r1, [r7, #10]
 8003330:	4b49      	ldr	r3, [pc, #292]	@ (8003458 <HAL_I2C_Master_Receive+0x1e4>)
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fb05 	bl	8003948 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800333e:	e05c      	b.n	80033fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	6a39      	ldr	r1, [r7, #32]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f993 	bl	8003670 <I2C_WaitOnRXNEFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e07c      	b.n	800344e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d034      	beq.n	80033fa <HAL_I2C_Master_Receive+0x186>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d130      	bne.n	80033fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	2200      	movs	r2, #0
 80033a0:	2180      	movs	r1, #128	@ 0x80
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f880 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e04d      	b.n	800344e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2bff      	cmp	r3, #255	@ 0xff
 80033ba:	d90e      	bls.n	80033da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	22ff      	movs	r2, #255	@ 0xff
 80033c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	8979      	ldrh	r1, [r7, #10]
 80033ca:	2300      	movs	r3, #0
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fab8 	bl	8003948 <I2C_TransferConfig>
 80033d8:	e00f      	b.n	80033fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	8979      	ldrh	r1, [r7, #10]
 80033ec:	2300      	movs	r3, #0
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 faa7 	bl	8003948 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d19d      	bne.n	8003340 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	6a39      	ldr	r1, [r7, #32]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f8ed 	bl	80035e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e01a      	b.n	800344e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2220      	movs	r2, #32
 800341e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4b0c      	ldr	r3, [pc, #48]	@ (800345c <HAL_I2C_Master_Receive+0x1e8>)
 800342c:	400b      	ands	r3, r1
 800342e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	e000      	b.n	800344e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
  }
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	80002400 	.word	0x80002400
 800345c:	fe00e800 	.word	0xfe00e800

08003460 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b02      	cmp	r3, #2
 8003474:	d103      	bne.n	800347e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2200      	movs	r2, #0
 800347c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b01      	cmp	r3, #1
 800348a:	d007      	beq.n	800349c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	619a      	str	r2, [r3, #24]
  }
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b8:	e03b      	b.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	6839      	ldr	r1, [r7, #0]
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f962 	bl	8003788 <I2C_IsErrorOccurred>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e041      	b.n	8003552 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d4:	d02d      	beq.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d6:	f7ff fa25 	bl	8002924 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d302      	bcc.n	80034ec <I2C_WaitOnFlagUntilTimeout+0x44>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d122      	bne.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4013      	ands	r3, r2
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	429a      	cmp	r2, r3
 8003508:	d113      	bne.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e00f      	b.n	8003552 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699a      	ldr	r2, [r3, #24]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	bf0c      	ite	eq
 8003542:	2301      	moveq	r3, #1
 8003544:	2300      	movne	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	429a      	cmp	r2, r3
 800354e:	d0b4      	beq.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003566:	e033      	b.n	80035d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 f90b 	bl	8003788 <I2C_IsErrorOccurred>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e031      	b.n	80035e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d025      	beq.n	80035d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003584:	f7ff f9ce 	bl	8002924 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	429a      	cmp	r2, r3
 8003592:	d302      	bcc.n	800359a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d11a      	bne.n	80035d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d013      	beq.n	80035d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ac:	f043 0220 	orr.w	r2, r3, #32
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e007      	b.n	80035e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d1c4      	bne.n	8003568 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f4:	e02f      	b.n	8003656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f8c4 	bl	8003788 <I2C_IsErrorOccurred>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e02d      	b.n	8003666 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7ff f98b 	bl	8002924 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d11a      	bne.n	8003656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b20      	cmp	r3, #32
 800362c:	d013      	beq.n	8003656 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003632:	f043 0220 	orr.w	r2, r3, #32
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e007      	b.n	8003666 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b20      	cmp	r3, #32
 8003662:	d1c8      	bne.n	80035f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003680:	e071      	b.n	8003766 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f87e 	bl	8003788 <I2C_IsErrorOccurred>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d13b      	bne.n	800371c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d138      	bne.n	800371c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d105      	bne.n	80036c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	2b10      	cmp	r3, #16
 80036d0:	d121      	bne.n	8003716 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2210      	movs	r2, #16
 80036d8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2204      	movs	r2, #4
 80036de:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2220      	movs	r2, #32
 80036e6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b24      	ldr	r3, [pc, #144]	@ (8003784 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80036f4:	400b      	ands	r3, r1
 80036f6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	75fb      	strb	r3, [r7, #23]
 8003714:	e002      	b.n	800371c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800371c:	f7ff f902 	bl	8002924 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	429a      	cmp	r2, r3
 800372a:	d302      	bcc.n	8003732 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d119      	bne.n	8003766 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d116      	bne.n	8003766 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b04      	cmp	r3, #4
 8003744:	d00f      	beq.n	8003766 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b04      	cmp	r3, #4
 8003772:	d002      	beq.n	800377a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003774:	7dfb      	ldrb	r3, [r7, #23]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d083      	beq.n	8003682 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800377a:	7dfb      	ldrb	r3, [r7, #23]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	fe00e800 	.word	0xfe00e800

08003788 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	@ 0x28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d068      	beq.n	8003886 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2210      	movs	r2, #16
 80037ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037bc:	e049      	b.n	8003852 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d045      	beq.n	8003852 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7ff f8ad 	bl	8002924 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <I2C_IsErrorOccurred+0x54>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d13a      	bne.n	8003852 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037fe:	d121      	bne.n	8003844 <I2C_IsErrorOccurred+0xbc>
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003806:	d01d      	beq.n	8003844 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	2b20      	cmp	r3, #32
 800380c:	d01a      	beq.n	8003844 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800381c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800381e:	f7ff f881 	bl	8002924 <HAL_GetTick>
 8003822:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003824:	e00e      	b.n	8003844 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003826:	f7ff f87d 	bl	8002924 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b19      	cmp	r3, #25
 8003832:	d907      	bls.n	8003844 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	f043 0320 	orr.w	r3, r3, #32
 800383a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003842:	e006      	b.n	8003852 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b20      	cmp	r3, #32
 8003850:	d1e9      	bne.n	8003826 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b20      	cmp	r3, #32
 800385e:	d003      	beq.n	8003868 <I2C_IsErrorOccurred+0xe0>
 8003860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0aa      	beq.n	80037be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800386c:	2b00      	cmp	r3, #0
 800386e:	d103      	bne.n	8003878 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2220      	movs	r2, #32
 8003876:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	f043 0304 	orr.w	r3, r3, #4
 800387e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00b      	beq.n	80038d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	f043 0308 	orr.w	r3, r3, #8
 80038c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00b      	beq.n	80038f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	f043 0302 	orr.w	r3, r3, #2
 80038e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80038f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01c      	beq.n	8003936 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f7ff fdaf 	bl	8003460 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	4b0d      	ldr	r3, [pc, #52]	@ (8003944 <I2C_IsErrorOccurred+0x1bc>)
 800390e:	400b      	ands	r3, r1
 8003910:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	431a      	orrs	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003936:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800393a:	4618      	mov	r0, r3
 800393c:	3728      	adds	r7, #40	@ 0x28
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	fe00e800 	.word	0xfe00e800

08003948 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	460b      	mov	r3, r1
 8003954:	817b      	strh	r3, [r7, #10]
 8003956:	4613      	mov	r3, r2
 8003958:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800395a:	897b      	ldrh	r3, [r7, #10]
 800395c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003960:	7a7b      	ldrb	r3, [r7, #9]
 8003962:	041b      	lsls	r3, r3, #16
 8003964:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003968:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	4313      	orrs	r3, r2
 8003972:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003976:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	0d5b      	lsrs	r3, r3, #21
 8003982:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003986:	4b08      	ldr	r3, [pc, #32]	@ (80039a8 <I2C_TransferConfig+0x60>)
 8003988:	430b      	orrs	r3, r1
 800398a:	43db      	mvns	r3, r3
 800398c:	ea02 0103 	and.w	r1, r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	03ff63ff 	.word	0x03ff63ff

080039ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d138      	bne.n	8003a34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e032      	b.n	8003a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2224      	movs	r2, #36	@ 0x24
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6819      	ldr	r1, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e000      	b.n	8003a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a34:	2302      	movs	r3, #2
  }
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b085      	sub	sp, #20
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d139      	bne.n	8003acc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e033      	b.n	8003ace <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2224      	movs	r2, #36	@ 0x24
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
  }
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e29b      	b.n	800402a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8087 	beq.w	8003c0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b00:	4b96      	ldr	r3, [pc, #600]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d00c      	beq.n	8003b26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b0c:	4b93      	ldr	r3, [pc, #588]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d112      	bne.n	8003b3e <HAL_RCC_OscConfig+0x62>
 8003b18:	4b90      	ldr	r3, [pc, #576]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b24:	d10b      	bne.n	8003b3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b26:	4b8d      	ldr	r3, [pc, #564]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d06c      	beq.n	8003c0c <HAL_RCC_OscConfig+0x130>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d168      	bne.n	8003c0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e275      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b46:	d106      	bne.n	8003b56 <HAL_RCC_OscConfig+0x7a>
 8003b48:	4b84      	ldr	r3, [pc, #528]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a83      	ldr	r2, [pc, #524]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	e02e      	b.n	8003bb4 <HAL_RCC_OscConfig+0xd8>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x9c>
 8003b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a7e      	ldr	r2, [pc, #504]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b7c      	ldr	r3, [pc, #496]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a7b      	ldr	r2, [pc, #492]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e01d      	b.n	8003bb4 <HAL_RCC_OscConfig+0xd8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0xc0>
 8003b82:	4b76      	ldr	r3, [pc, #472]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a75      	ldr	r2, [pc, #468]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	4b73      	ldr	r3, [pc, #460]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a72      	ldr	r2, [pc, #456]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e00b      	b.n	8003bb4 <HAL_RCC_OscConfig+0xd8>
 8003b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a6e      	ldr	r2, [pc, #440]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a6b      	ldr	r2, [pc, #428]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d013      	beq.n	8003be4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe feb2 	bl	8002924 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fe feae 	bl	8002924 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	@ 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e229      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	4b61      	ldr	r3, [pc, #388]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0xe8>
 8003be2:	e014      	b.n	8003c0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fe fe9e 	bl	8002924 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fe fe9a 	bl	8002924 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	@ 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e215      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfe:	4b57      	ldr	r3, [pc, #348]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x110>
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d069      	beq.n	8003cee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c1a:	4b50      	ldr	r3, [pc, #320]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00b      	beq.n	8003c3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c26:	4b4d      	ldr	r3, [pc, #308]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d11c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x190>
 8003c32:	4b4a      	ldr	r3, [pc, #296]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d116      	bne.n	8003c6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3e:	4b47      	ldr	r3, [pc, #284]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_RCC_OscConfig+0x17a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d001      	beq.n	8003c56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e1e9      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c56:	4b41      	ldr	r3, [pc, #260]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	493d      	ldr	r1, [pc, #244]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6a:	e040      	b.n	8003cee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d023      	beq.n	8003cbc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c74:	4b39      	ldr	r3, [pc, #228]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a38      	ldr	r2, [pc, #224]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fe fe50 	bl	8002924 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c88:	f7fe fe4c 	bl	8002924 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e1c7      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9a:	4b30      	ldr	r3, [pc, #192]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4929      	ldr	r1, [pc, #164]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]
 8003cba:	e018      	b.n	8003cee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cbc:	4b27      	ldr	r3, [pc, #156]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a26      	ldr	r2, [pc, #152]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fe fe2c 	bl	8002924 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd0:	f7fe fe28 	bl	8002924 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e1a3      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d038      	beq.n	8003d6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d019      	beq.n	8003d36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d02:	4b16      	ldr	r3, [pc, #88]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d06:	4a15      	ldr	r2, [pc, #84]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fe fe09 	bl	8002924 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d16:	f7fe fe05 	bl	8002924 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e180      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d28:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x23a>
 8003d34:	e01a      	b.n	8003d6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d36:	4b09      	ldr	r3, [pc, #36]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d3a:	4a08      	ldr	r2, [pc, #32]	@ (8003d5c <HAL_RCC_OscConfig+0x280>)
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d42:	f7fe fdef 	bl	8002924 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4a:	f7fe fdeb 	bl	8002924 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d903      	bls.n	8003d60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e166      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
 8003d5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d60:	4b92      	ldr	r3, [pc, #584]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1ee      	bne.n	8003d4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80a4 	beq.w	8003ec2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7a:	4b8c      	ldr	r3, [pc, #560]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10d      	bne.n	8003da2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	4b89      	ldr	r3, [pc, #548]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	4a88      	ldr	r2, [pc, #544]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d92:	4b86      	ldr	r3, [pc, #536]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da2:	4b83      	ldr	r3, [pc, #524]	@ (8003fb0 <HAL_RCC_OscConfig+0x4d4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d118      	bne.n	8003de0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003dae:	4b80      	ldr	r3, [pc, #512]	@ (8003fb0 <HAL_RCC_OscConfig+0x4d4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7f      	ldr	r2, [pc, #508]	@ (8003fb0 <HAL_RCC_OscConfig+0x4d4>)
 8003db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dba:	f7fe fdb3 	bl	8002924 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc2:	f7fe fdaf 	bl	8002924 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b64      	cmp	r3, #100	@ 0x64
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e12a      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd4:	4b76      	ldr	r3, [pc, #472]	@ (8003fb0 <HAL_RCC_OscConfig+0x4d4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d106      	bne.n	8003df6 <HAL_RCC_OscConfig+0x31a>
 8003de8:	4b70      	ldr	r3, [pc, #448]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dec:	4a6f      	ldr	r2, [pc, #444]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df4:	e02d      	b.n	8003e52 <HAL_RCC_OscConfig+0x376>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCC_OscConfig+0x33c>
 8003dfe:	4b6b      	ldr	r3, [pc, #428]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	4a6a      	ldr	r2, [pc, #424]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e0a:	4b68      	ldr	r3, [pc, #416]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0e:	4a67      	ldr	r2, [pc, #412]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003e10:	f023 0304 	bic.w	r3, r3, #4
 8003e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e16:	e01c      	b.n	8003e52 <HAL_RCC_OscConfig+0x376>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d10c      	bne.n	8003e3a <HAL_RCC_OscConfig+0x35e>
 8003e20:	4b62      	ldr	r3, [pc, #392]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e24:	4a61      	ldr	r2, [pc, #388]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003e26:	f043 0304 	orr.w	r3, r3, #4
 8003e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e2c:	4b5f      	ldr	r3, [pc, #380]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e30:	4a5e      	ldr	r2, [pc, #376]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e38:	e00b      	b.n	8003e52 <HAL_RCC_OscConfig+0x376>
 8003e3a:	4b5c      	ldr	r3, [pc, #368]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	4a5b      	ldr	r2, [pc, #364]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e46:	4b59      	ldr	r3, [pc, #356]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4a:	4a58      	ldr	r2, [pc, #352]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003e4c:	f023 0304 	bic.w	r3, r3, #4
 8003e50:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d015      	beq.n	8003e86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5a:	f7fe fd63 	bl	8002924 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e60:	e00a      	b.n	8003e78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fe fd5f 	bl	8002924 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e0d8      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	4b4c      	ldr	r3, [pc, #304]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ee      	beq.n	8003e62 <HAL_RCC_OscConfig+0x386>
 8003e84:	e014      	b.n	8003eb0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fe fd4d 	bl	8002924 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fe fd49 	bl	8002924 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e0c2      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea4:	4b41      	ldr	r3, [pc, #260]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1ee      	bne.n	8003e8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d105      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	4a3c      	ldr	r2, [pc, #240]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003ebc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ec0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80ae 	beq.w	8004028 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ecc:	4b37      	ldr	r3, [pc, #220]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 030c 	and.w	r3, r3, #12
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d06d      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d14b      	bne.n	8003f78 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee0:	4b32      	ldr	r3, [pc, #200]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a31      	ldr	r2, [pc, #196]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fe fd1a 	bl	8002924 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef4:	f7fe fd16 	bl	8002924 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e091      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f06:	4b29      	ldr	r3, [pc, #164]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69da      	ldr	r2, [r3, #28]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	019b      	lsls	r3, r3, #6
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	085b      	lsrs	r3, r3, #1
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	041b      	lsls	r3, r3, #16
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f34:	061b      	lsls	r3, r3, #24
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3c:	071b      	lsls	r3, r3, #28
 8003f3e:	491b      	ldr	r1, [pc, #108]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f44:	4b19      	ldr	r3, [pc, #100]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a18      	ldr	r2, [pc, #96]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe fce8 	bl	8002924 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f58:	f7fe fce4 	bl	8002924 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e05f      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6a:	4b10      	ldr	r3, [pc, #64]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x47c>
 8003f76:	e057      	b.n	8004028 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f78:	4b0c      	ldr	r3, [pc, #48]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003f7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fe fcce 	bl	8002924 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8c:	f7fe fcca 	bl	8002924 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e045      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9e:	4b03      	ldr	r3, [pc, #12]	@ (8003fac <HAL_RCC_OscConfig+0x4d0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x4b0>
 8003faa:	e03d      	b.n	8004028 <HAL_RCC_OscConfig+0x54c>
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8004034 <HAL_RCC_OscConfig+0x558>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d030      	beq.n	8004024 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d129      	bne.n	8004024 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d122      	bne.n	8004024 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d119      	bne.n	8004024 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d10f      	bne.n	8004024 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d107      	bne.n	8004024 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40023800 	.word	0x40023800

08004038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0d0      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004050:	4b6a      	ldr	r3, [pc, #424]	@ (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d910      	bls.n	8004080 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405e:	4b67      	ldr	r3, [pc, #412]	@ (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 020f 	bic.w	r2, r3, #15
 8004066:	4965      	ldr	r1, [pc, #404]	@ (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406e:	4b63      	ldr	r3, [pc, #396]	@ (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0b8      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d020      	beq.n	80040ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004098:	4b59      	ldr	r3, [pc, #356]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4a58      	ldr	r2, [pc, #352]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 800409e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040b0:	4b53      	ldr	r3, [pc, #332]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a52      	ldr	r2, [pc, #328]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 80040b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040bc:	4b50      	ldr	r3, [pc, #320]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	494d      	ldr	r1, [pc, #308]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d040      	beq.n	800415c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e2:	4b47      	ldr	r3, [pc, #284]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d115      	bne.n	800411a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e07f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fa:	4b41      	ldr	r3, [pc, #260]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e073      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410a:	4b3d      	ldr	r3, [pc, #244]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e06b      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800411a:	4b39      	ldr	r3, [pc, #228]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f023 0203 	bic.w	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4936      	ldr	r1, [pc, #216]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 8004128:	4313      	orrs	r3, r2
 800412a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800412c:	f7fe fbfa 	bl	8002924 <HAL_GetTick>
 8004130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004132:	e00a      	b.n	800414a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004134:	f7fe fbf6 	bl	8002924 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e053      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414a:	4b2d      	ldr	r3, [pc, #180]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 020c 	and.w	r2, r3, #12
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	429a      	cmp	r2, r3
 800415a:	d1eb      	bne.n	8004134 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800415c:	4b27      	ldr	r3, [pc, #156]	@ (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d210      	bcs.n	800418c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416a:	4b24      	ldr	r3, [pc, #144]	@ (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f023 020f 	bic.w	r2, r3, #15
 8004172:	4922      	ldr	r1, [pc, #136]	@ (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800417a:	4b20      	ldr	r3, [pc, #128]	@ (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d001      	beq.n	800418c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e032      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004198:	4b19      	ldr	r3, [pc, #100]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4916      	ldr	r1, [pc, #88]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041b6:	4b12      	ldr	r3, [pc, #72]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	490e      	ldr	r1, [pc, #56]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ca:	f000 f821 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	490a      	ldr	r1, [pc, #40]	@ (8004204 <HAL_RCC_ClockConfig+0x1cc>)
 80041dc:	5ccb      	ldrb	r3, [r1, r3]
 80041de:	fa22 f303 	lsr.w	r3, r2, r3
 80041e2:	4a09      	ldr	r2, [pc, #36]	@ (8004208 <HAL_RCC_ClockConfig+0x1d0>)
 80041e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041e6:	4b09      	ldr	r3, [pc, #36]	@ (800420c <HAL_RCC_ClockConfig+0x1d4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe fb56 	bl	800289c <HAL_InitTick>

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40023c00 	.word	0x40023c00
 8004200:	40023800 	.word	0x40023800
 8004204:	0800ac40 	.word	0x0800ac40
 8004208:	2000000c 	.word	0x2000000c
 800420c:	20000010 	.word	0x20000010

08004210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004214:	b090      	sub	sp, #64	@ 0x40
 8004216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	637b      	str	r3, [r7, #52]	@ 0x34
 800421c:	2300      	movs	r3, #0
 800421e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004220:	2300      	movs	r3, #0
 8004222:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004228:	4b59      	ldr	r3, [pc, #356]	@ (8004390 <HAL_RCC_GetSysClockFreq+0x180>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b08      	cmp	r3, #8
 8004232:	d00d      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0x40>
 8004234:	2b08      	cmp	r3, #8
 8004236:	f200 80a1 	bhi.w	800437c <HAL_RCC_GetSysClockFreq+0x16c>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0x34>
 800423e:	2b04      	cmp	r3, #4
 8004240:	d003      	beq.n	800424a <HAL_RCC_GetSysClockFreq+0x3a>
 8004242:	e09b      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004244:	4b53      	ldr	r3, [pc, #332]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x184>)
 8004246:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004248:	e09b      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800424a:	4b53      	ldr	r3, [pc, #332]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x188>)
 800424c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800424e:	e098      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004250:	4b4f      	ldr	r3, [pc, #316]	@ (8004390 <HAL_RCC_GetSysClockFreq+0x180>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004258:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800425a:	4b4d      	ldr	r3, [pc, #308]	@ (8004390 <HAL_RCC_GetSysClockFreq+0x180>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d028      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004266:	4b4a      	ldr	r3, [pc, #296]	@ (8004390 <HAL_RCC_GetSysClockFreq+0x180>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	099b      	lsrs	r3, r3, #6
 800426c:	2200      	movs	r2, #0
 800426e:	623b      	str	r3, [r7, #32]
 8004270:	627a      	str	r2, [r7, #36]	@ 0x24
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004278:	2100      	movs	r1, #0
 800427a:	4b47      	ldr	r3, [pc, #284]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x188>)
 800427c:	fb03 f201 	mul.w	r2, r3, r1
 8004280:	2300      	movs	r3, #0
 8004282:	fb00 f303 	mul.w	r3, r0, r3
 8004286:	4413      	add	r3, r2
 8004288:	4a43      	ldr	r2, [pc, #268]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x188>)
 800428a:	fba0 1202 	umull	r1, r2, r0, r2
 800428e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004290:	460a      	mov	r2, r1
 8004292:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004294:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004296:	4413      	add	r3, r2
 8004298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800429a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429c:	2200      	movs	r2, #0
 800429e:	61bb      	str	r3, [r7, #24]
 80042a0:	61fa      	str	r2, [r7, #28]
 80042a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80042aa:	f7fc f9dd 	bl	8000668 <__aeabi_uldivmod>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4613      	mov	r3, r2
 80042b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042b6:	e053      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b8:	4b35      	ldr	r3, [pc, #212]	@ (8004390 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	099b      	lsrs	r3, r3, #6
 80042be:	2200      	movs	r2, #0
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	617a      	str	r2, [r7, #20]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042ca:	f04f 0b00 	mov.w	fp, #0
 80042ce:	4652      	mov	r2, sl
 80042d0:	465b      	mov	r3, fp
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f04f 0100 	mov.w	r1, #0
 80042da:	0159      	lsls	r1, r3, #5
 80042dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042e0:	0150      	lsls	r0, r2, #5
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	ebb2 080a 	subs.w	r8, r2, sl
 80042ea:	eb63 090b 	sbc.w	r9, r3, fp
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004302:	ebb2 0408 	subs.w	r4, r2, r8
 8004306:	eb63 0509 	sbc.w	r5, r3, r9
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	00eb      	lsls	r3, r5, #3
 8004314:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004318:	00e2      	lsls	r2, r4, #3
 800431a:	4614      	mov	r4, r2
 800431c:	461d      	mov	r5, r3
 800431e:	eb14 030a 	adds.w	r3, r4, sl
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	eb45 030b 	adc.w	r3, r5, fp
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004336:	4629      	mov	r1, r5
 8004338:	028b      	lsls	r3, r1, #10
 800433a:	4621      	mov	r1, r4
 800433c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004340:	4621      	mov	r1, r4
 8004342:	028a      	lsls	r2, r1, #10
 8004344:	4610      	mov	r0, r2
 8004346:	4619      	mov	r1, r3
 8004348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434a:	2200      	movs	r2, #0
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	60fa      	str	r2, [r7, #12]
 8004350:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004354:	f7fc f988 	bl	8000668 <__aeabi_uldivmod>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4613      	mov	r3, r2
 800435e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004360:	4b0b      	ldr	r3, [pc, #44]	@ (8004390 <HAL_RCC_GetSysClockFreq+0x180>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	3301      	adds	r3, #1
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004370:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004374:	fbb2 f3f3 	udiv	r3, r2, r3
 8004378:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800437a:	e002      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800437c:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x184>)
 800437e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004384:	4618      	mov	r0, r3
 8004386:	3740      	adds	r7, #64	@ 0x40
 8004388:	46bd      	mov	sp, r7
 800438a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800
 8004394:	00f42400 	.word	0x00f42400
 8004398:	017d7840 	.word	0x017d7840

0800439c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a0:	4b03      	ldr	r3, [pc, #12]	@ (80043b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043a2:	681b      	ldr	r3, [r3, #0]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	2000000c 	.word	0x2000000c

080043b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043b8:	f7ff fff0 	bl	800439c <HAL_RCC_GetHCLKFreq>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b05      	ldr	r3, [pc, #20]	@ (80043d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	0a9b      	lsrs	r3, r3, #10
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	4903      	ldr	r1, [pc, #12]	@ (80043d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ca:	5ccb      	ldrb	r3, [r1, r3]
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40023800 	.word	0x40023800
 80043d8:	0800ac50 	.word	0x0800ac50

080043dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043e0:	f7ff ffdc 	bl	800439c <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0b5b      	lsrs	r3, r3, #13
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4903      	ldr	r1, [pc, #12]	@ (8004400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	0800ac50 	.word	0x0800ac50

08004404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d012      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800442c:	4b69      	ldr	r3, [pc, #420]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4a68      	ldr	r2, [pc, #416]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004432:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004436:	6093      	str	r3, [r2, #8]
 8004438:	4b66      	ldr	r3, [pc, #408]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004440:	4964      	ldr	r1, [pc, #400]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004442:	4313      	orrs	r3, r2
 8004444:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d017      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800445e:	4b5d      	ldr	r3, [pc, #372]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004460:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004464:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446c:	4959      	ldr	r1, [pc, #356]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004478:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800447c:	d101      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800447e:	2301      	movs	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800448a:	2301      	movs	r3, #1
 800448c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d017      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800449a:	4b4e      	ldr	r3, [pc, #312]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	494a      	ldr	r1, [pc, #296]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044b8:	d101      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044ba:	2301      	movs	r3, #1
 80044bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044c6:	2301      	movs	r3, #1
 80044c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 808b 	beq.w	80045fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044e8:	4b3a      	ldr	r3, [pc, #232]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ec:	4a39      	ldr	r2, [pc, #228]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80044f4:	4b37      	ldr	r3, [pc, #220]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004500:	4b35      	ldr	r3, [pc, #212]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a34      	ldr	r2, [pc, #208]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800450a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450c:	f7fe fa0a 	bl	8002924 <HAL_GetTick>
 8004510:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004514:	f7fe fa06 	bl	8002924 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	@ 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e38f      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004526:	4b2c      	ldr	r3, [pc, #176]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004532:	4b28      	ldr	r3, [pc, #160]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800453a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d035      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	429a      	cmp	r2, r3
 800454e:	d02e      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004550:	4b20      	ldr	r3, [pc, #128]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004554:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004558:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455a:	4b1e      	ldr	r3, [pc, #120]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455e:	4a1d      	ldr	r2, [pc, #116]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004564:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004566:	4b1b      	ldr	r3, [pc, #108]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456a:	4a1a      	ldr	r2, [pc, #104]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004570:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004572:	4a18      	ldr	r2, [pc, #96]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004578:	4b16      	ldr	r3, [pc, #88]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b01      	cmp	r3, #1
 8004582:	d114      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fe f9ce 	bl	8002924 <HAL_GetTick>
 8004588:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458a:	e00a      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800458c:	f7fe f9ca 	bl	8002924 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e351      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a2:	4b0c      	ldr	r3, [pc, #48]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0ee      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045ba:	d111      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045bc:	4b05      	ldr	r3, [pc, #20]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045c8:	4b04      	ldr	r3, [pc, #16]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045ca:	400b      	ands	r3, r1
 80045cc:	4901      	ldr	r1, [pc, #4]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
 80045d2:	e00b      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40007000 	.word	0x40007000
 80045dc:	0ffffcff 	.word	0x0ffffcff
 80045e0:	4bac      	ldr	r3, [pc, #688]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4aab      	ldr	r2, [pc, #684]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80045ea:	6093      	str	r3, [r2, #8]
 80045ec:	4ba9      	ldr	r3, [pc, #676]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f8:	49a6      	ldr	r1, [pc, #664]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b00      	cmp	r3, #0
 8004608:	d010      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800460a:	4ba2      	ldr	r3, [pc, #648]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004610:	4aa0      	ldr	r2, [pc, #640]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004616:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800461a:	4b9e      	ldr	r3, [pc, #632]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004624:	499b      	ldr	r1, [pc, #620]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004638:	4b96      	ldr	r3, [pc, #600]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004646:	4993      	ldr	r1, [pc, #588]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800465a:	4b8e      	ldr	r3, [pc, #568]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004660:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004668:	498a      	ldr	r1, [pc, #552]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800467c:	4b85      	ldr	r3, [pc, #532]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004682:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800468a:	4982      	ldr	r1, [pc, #520]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800469e:	4b7d      	ldr	r3, [pc, #500]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ac:	4979      	ldr	r1, [pc, #484]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046c0:	4b74      	ldr	r3, [pc, #464]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c6:	f023 0203 	bic.w	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ce:	4971      	ldr	r1, [pc, #452]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046e2:	4b6c      	ldr	r3, [pc, #432]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e8:	f023 020c 	bic.w	r2, r3, #12
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f0:	4968      	ldr	r1, [pc, #416]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004704:	4b63      	ldr	r3, [pc, #396]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004712:	4960      	ldr	r1, [pc, #384]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004726:	4b5b      	ldr	r3, [pc, #364]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004734:	4957      	ldr	r1, [pc, #348]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004748:	4b52      	ldr	r3, [pc, #328]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004756:	494f      	ldr	r1, [pc, #316]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800476a:	4b4a      	ldr	r3, [pc, #296]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004770:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004778:	4946      	ldr	r1, [pc, #280]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800478c:	4b41      	ldr	r3, [pc, #260]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004792:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479a:	493e      	ldr	r1, [pc, #248]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047ae:	4b39      	ldr	r3, [pc, #228]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047bc:	4935      	ldr	r1, [pc, #212]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047d0:	4b30      	ldr	r3, [pc, #192]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047de:	492d      	ldr	r1, [pc, #180]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d011      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047f2:	4b28      	ldr	r3, [pc, #160]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004800:	4924      	ldr	r1, [pc, #144]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800480c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004810:	d101      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004812:	2301      	movs	r3, #1
 8004814:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004822:	2301      	movs	r3, #1
 8004824:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004832:	4b18      	ldr	r3, [pc, #96]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004838:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004840:	4914      	ldr	r1, [pc, #80]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004854:	4b0f      	ldr	r3, [pc, #60]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004864:	490b      	ldr	r1, [pc, #44]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00f      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004878:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004888:	4902      	ldr	r1, [pc, #8]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004890:	e002      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00b      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048a4:	4b8a      	ldr	r3, [pc, #552]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b4:	4986      	ldr	r1, [pc, #536]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00b      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048c8:	4b81      	ldr	r3, [pc, #516]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048d8:	497d      	ldr	r1, [pc, #500]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d006      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 80d6 	beq.w	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048f4:	4b76      	ldr	r3, [pc, #472]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a75      	ldr	r2, [pc, #468]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004900:	f7fe f810 	bl	8002924 <HAL_GetTick>
 8004904:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004906:	e008      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004908:	f7fe f80c 	bl	8002924 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b64      	cmp	r3, #100	@ 0x64
 8004914:	d901      	bls.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e195      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800491a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f0      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d021      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004936:	2b00      	cmp	r3, #0
 8004938:	d11d      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800493a:	4b65      	ldr	r3, [pc, #404]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004940:	0c1b      	lsrs	r3, r3, #16
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004948:	4b61      	ldr	r3, [pc, #388]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800494e:	0e1b      	lsrs	r3, r3, #24
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	019a      	lsls	r2, r3, #6
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	041b      	lsls	r3, r3, #16
 8004960:	431a      	orrs	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	071b      	lsls	r3, r3, #28
 800496e:	4958      	ldr	r1, [pc, #352]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d004      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004986:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004994:	2b00      	cmp	r3, #0
 8004996:	d02e      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049a0:	d129      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049a2:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049b0:	4b47      	ldr	r3, [pc, #284]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049b6:	0f1b      	lsrs	r3, r3, #28
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	019a      	lsls	r2, r3, #6
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	041b      	lsls	r3, r3, #16
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	061b      	lsls	r3, r3, #24
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	071b      	lsls	r3, r3, #28
 80049d6:	493e      	ldr	r1, [pc, #248]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049de:	4b3c      	ldr	r3, [pc, #240]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049e4:	f023 021f 	bic.w	r2, r3, #31
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ec:	3b01      	subs	r3, #1
 80049ee:	4938      	ldr	r1, [pc, #224]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d01d      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a02:	4b33      	ldr	r3, [pc, #204]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a08:	0e1b      	lsrs	r3, r3, #24
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a10:	4b2f      	ldr	r3, [pc, #188]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a16:	0f1b      	lsrs	r3, r3, #28
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	019a      	lsls	r2, r3, #6
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	061b      	lsls	r3, r3, #24
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	071b      	lsls	r3, r3, #28
 8004a36:	4926      	ldr	r1, [pc, #152]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d011      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	019a      	lsls	r2, r3, #6
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	061b      	lsls	r3, r3, #24
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	071b      	lsls	r3, r3, #28
 8004a66:	491a      	ldr	r1, [pc, #104]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a6e:	4b18      	ldr	r3, [pc, #96]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a17      	ldr	r2, [pc, #92]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a7a:	f7fd ff53 	bl	8002924 <HAL_GetTick>
 8004a7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a80:	e008      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a82:	f7fd ff4f 	bl	8002924 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b64      	cmp	r3, #100	@ 0x64
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e0d8      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a94:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0f0      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	f040 80ce 	bne.w	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004aa8:	4b09      	ldr	r3, [pc, #36]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a08      	ldr	r2, [pc, #32]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab4:	f7fd ff36 	bl	8002924 <HAL_GetTick>
 8004ab8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004abc:	f7fd ff32 	bl	8002924 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	@ 0x64
 8004ac8:	d904      	bls.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e0bb      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ae0:	d0ec      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d02e      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d12a      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b0a:	4b51      	ldr	r3, [pc, #324]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b10:	0c1b      	lsrs	r3, r3, #16
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b18:	4b4d      	ldr	r3, [pc, #308]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1e:	0f1b      	lsrs	r3, r3, #28
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	019a      	lsls	r2, r3, #6
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	061b      	lsls	r3, r3, #24
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	071b      	lsls	r3, r3, #28
 8004b3e:	4944      	ldr	r1, [pc, #272]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b46:	4b42      	ldr	r3, [pc, #264]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b4c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b54:	3b01      	subs	r3, #1
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	493d      	ldr	r1, [pc, #244]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d022      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b74:	d11d      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b76:	4b36      	ldr	r3, [pc, #216]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7c:	0e1b      	lsrs	r3, r3, #24
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b84:	4b32      	ldr	r3, [pc, #200]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8a:	0f1b      	lsrs	r3, r3, #28
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	019a      	lsls	r2, r3, #6
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	041b      	lsls	r3, r3, #16
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	061b      	lsls	r3, r3, #24
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	071b      	lsls	r3, r3, #28
 8004baa:	4929      	ldr	r1, [pc, #164]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d028      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bbe:	4b24      	ldr	r3, [pc, #144]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc4:	0e1b      	lsrs	r3, r3, #24
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bcc:	4b20      	ldr	r3, [pc, #128]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd2:	0c1b      	lsrs	r3, r3, #16
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	019a      	lsls	r2, r3, #6
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	431a      	orrs	r2, r3
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	061b      	lsls	r3, r3, #24
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	071b      	lsls	r3, r3, #28
 8004bf2:	4917      	ldr	r1, [pc, #92]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bfa:	4b15      	ldr	r3, [pc, #84]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c08:	4911      	ldr	r1, [pc, #68]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c10:	4b0f      	ldr	r3, [pc, #60]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a0e      	ldr	r2, [pc, #56]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c1c:	f7fd fe82 	bl	8002924 <HAL_GetTick>
 8004c20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c24:	f7fd fe7e 	bl	8002924 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b64      	cmp	r3, #100	@ 0x64
 8004c30:	d901      	bls.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e007      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c36:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c42:	d1ef      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40023800 	.word	0x40023800

08004c54 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e01c      	b.n	8004ca0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	795b      	ldrb	r3, [r3, #5]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d105      	bne.n	8004c7c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fd fae4 	bl	8002244 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0204 	orr.w	r2, r2, #4
 8004c90:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e09d      	b.n	8004df6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d108      	bne.n	8004cd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cca:	d009      	beq.n	8004ce0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	61da      	str	r2, [r3, #28]
 8004cd2:	e005      	b.n	8004ce0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fd fb14 	bl	8002328 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d20:	d902      	bls.n	8004d28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e002      	b.n	8004d2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004d36:	d007      	beq.n	8004d48 <HAL_SPI_Init+0xa0>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8a:	ea42 0103 	orr.w	r1, r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d92:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	0c1b      	lsrs	r3, r3, #16
 8004da4:	f003 0204 	and.w	r2, r3, #4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004dc4:	ea42 0103 	orr.w	r1, r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004de4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b088      	sub	sp, #32
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	603b      	str	r3, [r7, #0]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e0e:	f7fd fd89 	bl	8002924 <HAL_GetTick>
 8004e12:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004e14:	88fb      	ldrh	r3, [r7, #6]
 8004e16:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d001      	beq.n	8004e28 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004e24:	2302      	movs	r3, #2
 8004e26:	e15c      	b.n	80050e2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <HAL_SPI_Transmit+0x36>
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e154      	b.n	80050e2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_SPI_Transmit+0x48>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e14d      	b.n	80050e2 <HAL_SPI_Transmit+0x2e4>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2203      	movs	r2, #3
 8004e52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e98:	d10f      	bne.n	8004eba <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ea8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004eb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec4:	2b40      	cmp	r3, #64	@ 0x40
 8004ec6:	d007      	beq.n	8004ed8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ee0:	d952      	bls.n	8004f88 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_SPI_Transmit+0xf2>
 8004eea:	8b7b      	ldrh	r3, [r7, #26]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d145      	bne.n	8004f7c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef4:	881a      	ldrh	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f00:	1c9a      	adds	r2, r3, #2
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f14:	e032      	b.n	8004f7c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d112      	bne.n	8004f4a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f28:	881a      	ldrh	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f34:	1c9a      	adds	r2, r3, #2
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f48:	e018      	b.n	8004f7c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f4a:	f7fd fceb 	bl	8002924 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d803      	bhi.n	8004f62 <HAL_SPI_Transmit+0x164>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f60:	d102      	bne.n	8004f68 <HAL_SPI_Transmit+0x16a>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e0b2      	b.n	80050e2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1c7      	bne.n	8004f16 <HAL_SPI_Transmit+0x118>
 8004f86:	e083      	b.n	8005090 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_SPI_Transmit+0x198>
 8004f90:	8b7b      	ldrh	r3, [r7, #26]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d177      	bne.n	8005086 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d912      	bls.n	8004fc6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa4:	881a      	ldrh	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb0:	1c9a      	adds	r2, r3, #2
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b02      	subs	r3, #2
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fc4:	e05f      	b.n	8005086 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	330c      	adds	r3, #12
 8004fd0:	7812      	ldrb	r2, [r2, #0]
 8004fd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004fec:	e04b      	b.n	8005086 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d12b      	bne.n	8005054 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b01      	cmp	r3, #1
 8005004:	d912      	bls.n	800502c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500a:	881a      	ldrh	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005016:	1c9a      	adds	r2, r3, #2
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b02      	subs	r3, #2
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800502a:	e02c      	b.n	8005086 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	330c      	adds	r3, #12
 8005036:	7812      	ldrb	r2, [r2, #0]
 8005038:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005052:	e018      	b.n	8005086 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005054:	f7fd fc66 	bl	8002924 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d803      	bhi.n	800506c <HAL_SPI_Transmit+0x26e>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d102      	bne.n	8005072 <HAL_SPI_Transmit+0x274>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e02d      	b.n	80050e2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1ae      	bne.n	8004fee <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	6839      	ldr	r1, [r7, #0]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f947 	bl	8005328 <SPI_EndRxTxTransaction>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80050e0:	2300      	movs	r3, #0
  }
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050fc:	f7fd fc12 	bl	8002924 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	4413      	add	r3, r2
 800510a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800510c:	f7fd fc0a 	bl	8002924 <HAL_GetTick>
 8005110:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005112:	4b39      	ldr	r3, [pc, #228]	@ (80051f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	015b      	lsls	r3, r3, #5
 8005118:	0d1b      	lsrs	r3, r3, #20
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	fb02 f303 	mul.w	r3, r2, r3
 8005120:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005122:	e055      	b.n	80051d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512a:	d051      	beq.n	80051d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800512c:	f7fd fbfa 	bl	8002924 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	429a      	cmp	r2, r3
 800513a:	d902      	bls.n	8005142 <SPI_WaitFlagStateUntilTimeout+0x56>
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d13d      	bne.n	80051be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005150:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800515a:	d111      	bne.n	8005180 <SPI_WaitFlagStateUntilTimeout+0x94>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005164:	d004      	beq.n	8005170 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800516e:	d107      	bne.n	8005180 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800517e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005188:	d10f      	bne.n	80051aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e018      	b.n	80051f0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]
 80051c8:	e002      	b.n	80051d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4013      	ands	r3, r2
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	429a      	cmp	r2, r3
 80051de:	bf0c      	ite	eq
 80051e0:	2301      	moveq	r3, #1
 80051e2:	2300      	movne	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d19a      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3720      	adds	r7, #32
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	2000000c 	.word	0x2000000c

080051fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	@ 0x28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800520e:	f7fd fb89 	bl	8002924 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	4413      	add	r3, r2
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800521e:	f7fd fb81 	bl	8002924 <HAL_GetTick>
 8005222:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	330c      	adds	r3, #12
 800522a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800522c:	4b3d      	ldr	r3, [pc, #244]	@ (8005324 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	00da      	lsls	r2, r3, #3
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	0d1b      	lsrs	r3, r3, #20
 800523c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800523e:	fb02 f303 	mul.w	r3, r2, r3
 8005242:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005244:	e061      	b.n	800530a <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800524c:	d107      	bne.n	800525e <SPI_WaitFifoStateUntilTimeout+0x62>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d104      	bne.n	800525e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800525c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005264:	d051      	beq.n	800530a <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005266:	f7fd fb5d 	bl	8002924 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005272:	429a      	cmp	r2, r3
 8005274:	d902      	bls.n	800527c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d13d      	bne.n	80052f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800528a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005294:	d111      	bne.n	80052ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800529e:	d004      	beq.n	80052aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a8:	d107      	bne.n	80052ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052c2:	d10f      	bne.n	80052e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e011      	b.n	800531c <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d102      	bne.n	8005304 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
 8005302:	e002      	b.n	800530a <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	3b01      	subs	r3, #1
 8005308:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4013      	ands	r3, r2
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	429a      	cmp	r2, r3
 8005318:	d195      	bne.n	8005246 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3728      	adds	r7, #40	@ 0x28
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	2000000c 	.word	0x2000000c

08005328 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2200      	movs	r2, #0
 800533c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f7ff ff5b 	bl	80051fc <SPI_WaitFifoStateUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d007      	beq.n	800535c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005350:	f043 0220 	orr.w	r2, r3, #32
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e046      	b.n	80053ea <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800535c:	4b25      	ldr	r3, [pc, #148]	@ (80053f4 <SPI_EndRxTxTransaction+0xcc>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a25      	ldr	r2, [pc, #148]	@ (80053f8 <SPI_EndRxTxTransaction+0xd0>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	0d5b      	lsrs	r3, r3, #21
 8005368:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800536c:	fb02 f303 	mul.w	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800537a:	d112      	bne.n	80053a2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2200      	movs	r2, #0
 8005384:	2180      	movs	r1, #128	@ 0x80
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff feb0 	bl	80050ec <SPI_WaitFlagStateUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d016      	beq.n	80053c0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005396:	f043 0220 	orr.w	r2, r3, #32
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e023      	b.n	80053ea <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b8:	2b80      	cmp	r3, #128	@ 0x80
 80053ba:	d0f2      	beq.n	80053a2 <SPI_EndRxTxTransaction+0x7a>
 80053bc:	e000      	b.n	80053c0 <SPI_EndRxTxTransaction+0x98>
        break;
 80053be:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7ff ff15 	bl	80051fc <SPI_WaitFifoStateUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d007      	beq.n	80053e8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053dc:	f043 0220 	orr.w	r2, r3, #32
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e000      	b.n	80053ea <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	2000000c 	.word	0x2000000c
 80053f8:	165e9f81 	.word	0x165e9f81

080053fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e049      	b.n	80054a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7fd f944 	bl	80026b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3304      	adds	r3, #4
 8005438:	4619      	mov	r1, r3
 800543a:	4610      	mov	r0, r2
 800543c:	f000 f900 	bl	8005640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_TIM_ConfigClockSource+0x1c>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e0b4      	b.n	8005632 <HAL_TIM_ConfigClockSource+0x186>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	4b56      	ldr	r3, [pc, #344]	@ (800563c <HAL_TIM_ConfigClockSource+0x190>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005500:	d03e      	beq.n	8005580 <HAL_TIM_ConfigClockSource+0xd4>
 8005502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005506:	f200 8087 	bhi.w	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 800550a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800550e:	f000 8086 	beq.w	800561e <HAL_TIM_ConfigClockSource+0x172>
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005516:	d87f      	bhi.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 8005518:	2b70      	cmp	r3, #112	@ 0x70
 800551a:	d01a      	beq.n	8005552 <HAL_TIM_ConfigClockSource+0xa6>
 800551c:	2b70      	cmp	r3, #112	@ 0x70
 800551e:	d87b      	bhi.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 8005520:	2b60      	cmp	r3, #96	@ 0x60
 8005522:	d050      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005524:	2b60      	cmp	r3, #96	@ 0x60
 8005526:	d877      	bhi.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 8005528:	2b50      	cmp	r3, #80	@ 0x50
 800552a:	d03c      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0xfa>
 800552c:	2b50      	cmp	r3, #80	@ 0x50
 800552e:	d873      	bhi.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 8005530:	2b40      	cmp	r3, #64	@ 0x40
 8005532:	d058      	beq.n	80055e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005534:	2b40      	cmp	r3, #64	@ 0x40
 8005536:	d86f      	bhi.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 8005538:	2b30      	cmp	r3, #48	@ 0x30
 800553a:	d064      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0x15a>
 800553c:	2b30      	cmp	r3, #48	@ 0x30
 800553e:	d86b      	bhi.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 8005540:	2b20      	cmp	r3, #32
 8005542:	d060      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0x15a>
 8005544:	2b20      	cmp	r3, #32
 8005546:	d867      	bhi.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
 8005548:	2b00      	cmp	r3, #0
 800554a:	d05c      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0x15a>
 800554c:	2b10      	cmp	r3, #16
 800554e:	d05a      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0x15a>
 8005550:	e062      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005562:	f000 f98d 	bl	8005880 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	609a      	str	r2, [r3, #8]
      break;
 800557e:	e04f      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005590:	f000 f976 	bl	8005880 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689a      	ldr	r2, [r3, #8]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055a2:	609a      	str	r2, [r3, #8]
      break;
 80055a4:	e03c      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055b2:	461a      	mov	r2, r3
 80055b4:	f000 f8ea 	bl	800578c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2150      	movs	r1, #80	@ 0x50
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 f943 	bl	800584a <TIM_ITRx_SetConfig>
      break;
 80055c4:	e02c      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055d2:	461a      	mov	r2, r3
 80055d4:	f000 f909 	bl	80057ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2160      	movs	r1, #96	@ 0x60
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 f933 	bl	800584a <TIM_ITRx_SetConfig>
      break;
 80055e4:	e01c      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f2:	461a      	mov	r2, r3
 80055f4:	f000 f8ca 	bl	800578c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2140      	movs	r1, #64	@ 0x40
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 f923 	bl	800584a <TIM_ITRx_SetConfig>
      break;
 8005604:	e00c      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4619      	mov	r1, r3
 8005610:	4610      	mov	r0, r2
 8005612:	f000 f91a 	bl	800584a <TIM_ITRx_SetConfig>
      break;
 8005616:	e003      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	73fb      	strb	r3, [r7, #15]
      break;
 800561c:	e000      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800561e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	fffeff88 	.word	0xfffeff88

08005640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a43      	ldr	r2, [pc, #268]	@ (8005760 <TIM_Base_SetConfig+0x120>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d013      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800565e:	d00f      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a40      	ldr	r2, [pc, #256]	@ (8005764 <TIM_Base_SetConfig+0x124>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00b      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a3f      	ldr	r2, [pc, #252]	@ (8005768 <TIM_Base_SetConfig+0x128>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d007      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a3e      	ldr	r2, [pc, #248]	@ (800576c <TIM_Base_SetConfig+0x12c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d003      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a3d      	ldr	r2, [pc, #244]	@ (8005770 <TIM_Base_SetConfig+0x130>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d108      	bne.n	8005692 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a32      	ldr	r2, [pc, #200]	@ (8005760 <TIM_Base_SetConfig+0x120>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d02b      	beq.n	80056f2 <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a0:	d027      	beq.n	80056f2 <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005764 <TIM_Base_SetConfig+0x124>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d023      	beq.n	80056f2 <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005768 <TIM_Base_SetConfig+0x128>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d01f      	beq.n	80056f2 <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2d      	ldr	r2, [pc, #180]	@ (800576c <TIM_Base_SetConfig+0x12c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d01b      	beq.n	80056f2 <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005770 <TIM_Base_SetConfig+0x130>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d017      	beq.n	80056f2 <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005774 <TIM_Base_SetConfig+0x134>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005778 <TIM_Base_SetConfig+0x138>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00f      	beq.n	80056f2 <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a29      	ldr	r2, [pc, #164]	@ (800577c <TIM_Base_SetConfig+0x13c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00b      	beq.n	80056f2 <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a28      	ldr	r2, [pc, #160]	@ (8005780 <TIM_Base_SetConfig+0x140>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d007      	beq.n	80056f2 <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a27      	ldr	r2, [pc, #156]	@ (8005784 <TIM_Base_SetConfig+0x144>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d003      	beq.n	80056f2 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a26      	ldr	r2, [pc, #152]	@ (8005788 <TIM_Base_SetConfig+0x148>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d108      	bne.n	8005704 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4313      	orrs	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a0e      	ldr	r2, [pc, #56]	@ (8005760 <TIM_Base_SetConfig+0x120>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d003      	beq.n	8005732 <TIM_Base_SetConfig+0xf2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a10      	ldr	r2, [pc, #64]	@ (8005770 <TIM_Base_SetConfig+0x130>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d103      	bne.n	800573a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f043 0204 	orr.w	r2, r3, #4
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	601a      	str	r2, [r3, #0]
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40010000 	.word	0x40010000
 8005764:	40000400 	.word	0x40000400
 8005768:	40000800 	.word	0x40000800
 800576c:	40000c00 	.word	0x40000c00
 8005770:	40010400 	.word	0x40010400
 8005774:	40014000 	.word	0x40014000
 8005778:	40014400 	.word	0x40014400
 800577c:	40014800 	.word	0x40014800
 8005780:	40001800 	.word	0x40001800
 8005784:	40001c00 	.word	0x40001c00
 8005788:	40002000 	.word	0x40002000

0800578c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f023 0201 	bic.w	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f023 030a 	bic.w	r3, r3, #10
 80057c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b087      	sub	sp, #28
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f023 0210 	bic.w	r2, r3, #16
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	031b      	lsls	r3, r3, #12
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005826:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800584a:	b480      	push	{r7}
 800584c:	b085      	sub	sp, #20
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005860:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	f043 0307 	orr.w	r3, r3, #7
 800586c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	609a      	str	r2, [r3, #8]
}
 8005874:	bf00      	nop
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800589a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	021a      	lsls	r2, r3, #8
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	609a      	str	r2, [r3, #8]
}
 80058b4:	bf00      	nop
 80058b6:	371c      	adds	r7, #28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e06d      	b.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a30      	ldr	r2, [pc, #192]	@ (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d004      	beq.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a2f      	ldr	r2, [pc, #188]	@ (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d108      	bne.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005912:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005924:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a20      	ldr	r2, [pc, #128]	@ (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d022      	beq.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800594a:	d01d      	beq.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a1d      	ldr	r2, [pc, #116]	@ (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d018      	beq.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1c      	ldr	r2, [pc, #112]	@ (80059cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d013      	beq.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1a      	ldr	r2, [pc, #104]	@ (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00e      	beq.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a15      	ldr	r2, [pc, #84]	@ (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d009      	beq.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a16      	ldr	r2, [pc, #88]	@ (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d004      	beq.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a15      	ldr	r2, [pc, #84]	@ (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d10c      	bne.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800598e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	4313      	orrs	r3, r2
 8005998:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	40010000 	.word	0x40010000
 80059c4:	40010400 	.word	0x40010400
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800
 80059d0:	40000c00 	.word	0x40000c00
 80059d4:	40014000 	.word	0x40014000
 80059d8:	40001800 	.word	0x40001800

080059dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e040      	b.n	8005a70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fc fea6 	bl	8002750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2224      	movs	r2, #36	@ 0x24
 8005a08:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0201 	bic.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fb16 	bl	8006054 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f8af 	bl	8005b8c <UART_SetConfig>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e01b      	b.n	8005a70 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fb95 	bl	8006198 <UART_CheckIdleState>
 8005a6e:	4603      	mov	r3, r0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	@ 0x28
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d177      	bne.n	8005b80 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_UART_Transmit+0x24>
 8005a96:	88fb      	ldrh	r3, [r7, #6]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e070      	b.n	8005b82 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2221      	movs	r2, #33	@ 0x21
 8005aac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aae:	f7fc ff39 	bl	8002924 <HAL_GetTick>
 8005ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	88fa      	ldrh	r2, [r7, #6]
 8005ac0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005acc:	d108      	bne.n	8005ae0 <HAL_UART_Transmit+0x68>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d104      	bne.n	8005ae0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	e003      	b.n	8005ae8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ae8:	e02f      	b.n	8005b4a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2200      	movs	r2, #0
 8005af2:	2180      	movs	r1, #128	@ 0x80
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 fbf7 	bl	80062e8 <UART_WaitOnFlagUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d004      	beq.n	8005b0a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e03b      	b.n	8005b82 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10b      	bne.n	8005b28 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b1e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	3302      	adds	r3, #2
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	e007      	b.n	8005b38 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	781a      	ldrb	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	3301      	adds	r3, #1
 8005b36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1c9      	bne.n	8005aea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2140      	movs	r1, #64	@ 0x40
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 fbc1 	bl	80062e8 <UART_WaitOnFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d004      	beq.n	8005b76 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e005      	b.n	8005b82 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e000      	b.n	8005b82 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b80:	2302      	movs	r3, #2
  }
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	4ba6      	ldr	r3, [pc, #664]	@ (8005e50 <UART_SetConfig+0x2c4>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	6979      	ldr	r1, [r7, #20]
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a94      	ldr	r2, [pc, #592]	@ (8005e54 <UART_SetConfig+0x2c8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d120      	bne.n	8005c4a <UART_SetConfig+0xbe>
 8005c08:	4b93      	ldr	r3, [pc, #588]	@ (8005e58 <UART_SetConfig+0x2cc>)
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d816      	bhi.n	8005c44 <UART_SetConfig+0xb8>
 8005c16:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <UART_SetConfig+0x90>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c2d 	.word	0x08005c2d
 8005c20:	08005c39 	.word	0x08005c39
 8005c24:	08005c33 	.word	0x08005c33
 8005c28:	08005c3f 	.word	0x08005c3f
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	77fb      	strb	r3, [r7, #31]
 8005c30:	e150      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005c32:	2302      	movs	r3, #2
 8005c34:	77fb      	strb	r3, [r7, #31]
 8005c36:	e14d      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	77fb      	strb	r3, [r7, #31]
 8005c3c:	e14a      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005c3e:	2308      	movs	r3, #8
 8005c40:	77fb      	strb	r3, [r7, #31]
 8005c42:	e147      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005c44:	2310      	movs	r3, #16
 8005c46:	77fb      	strb	r3, [r7, #31]
 8005c48:	e144      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a83      	ldr	r2, [pc, #524]	@ (8005e5c <UART_SetConfig+0x2d0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d132      	bne.n	8005cba <UART_SetConfig+0x12e>
 8005c54:	4b80      	ldr	r3, [pc, #512]	@ (8005e58 <UART_SetConfig+0x2cc>)
 8005c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c5a:	f003 030c 	and.w	r3, r3, #12
 8005c5e:	2b0c      	cmp	r3, #12
 8005c60:	d828      	bhi.n	8005cb4 <UART_SetConfig+0x128>
 8005c62:	a201      	add	r2, pc, #4	@ (adr r2, 8005c68 <UART_SetConfig+0xdc>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005c9d 	.word	0x08005c9d
 8005c6c:	08005cb5 	.word	0x08005cb5
 8005c70:	08005cb5 	.word	0x08005cb5
 8005c74:	08005cb5 	.word	0x08005cb5
 8005c78:	08005ca9 	.word	0x08005ca9
 8005c7c:	08005cb5 	.word	0x08005cb5
 8005c80:	08005cb5 	.word	0x08005cb5
 8005c84:	08005cb5 	.word	0x08005cb5
 8005c88:	08005ca3 	.word	0x08005ca3
 8005c8c:	08005cb5 	.word	0x08005cb5
 8005c90:	08005cb5 	.word	0x08005cb5
 8005c94:	08005cb5 	.word	0x08005cb5
 8005c98:	08005caf 	.word	0x08005caf
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e118      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	77fb      	strb	r3, [r7, #31]
 8005ca6:	e115      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005ca8:	2304      	movs	r3, #4
 8005caa:	77fb      	strb	r3, [r7, #31]
 8005cac:	e112      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005cae:	2308      	movs	r3, #8
 8005cb0:	77fb      	strb	r3, [r7, #31]
 8005cb2:	e10f      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	77fb      	strb	r3, [r7, #31]
 8005cb8:	e10c      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a68      	ldr	r2, [pc, #416]	@ (8005e60 <UART_SetConfig+0x2d4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d120      	bne.n	8005d06 <UART_SetConfig+0x17a>
 8005cc4:	4b64      	ldr	r3, [pc, #400]	@ (8005e58 <UART_SetConfig+0x2cc>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005cce:	2b30      	cmp	r3, #48	@ 0x30
 8005cd0:	d013      	beq.n	8005cfa <UART_SetConfig+0x16e>
 8005cd2:	2b30      	cmp	r3, #48	@ 0x30
 8005cd4:	d814      	bhi.n	8005d00 <UART_SetConfig+0x174>
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d009      	beq.n	8005cee <UART_SetConfig+0x162>
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	d810      	bhi.n	8005d00 <UART_SetConfig+0x174>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <UART_SetConfig+0x15c>
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	d006      	beq.n	8005cf4 <UART_SetConfig+0x168>
 8005ce6:	e00b      	b.n	8005d00 <UART_SetConfig+0x174>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	77fb      	strb	r3, [r7, #31]
 8005cec:	e0f2      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	77fb      	strb	r3, [r7, #31]
 8005cf2:	e0ef      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e0ec      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005cfa:	2308      	movs	r3, #8
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e0e9      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005d00:	2310      	movs	r3, #16
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e0e6      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a56      	ldr	r2, [pc, #344]	@ (8005e64 <UART_SetConfig+0x2d8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d120      	bne.n	8005d52 <UART_SetConfig+0x1c6>
 8005d10:	4b51      	ldr	r3, [pc, #324]	@ (8005e58 <UART_SetConfig+0x2cc>)
 8005d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d1c:	d013      	beq.n	8005d46 <UART_SetConfig+0x1ba>
 8005d1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d20:	d814      	bhi.n	8005d4c <UART_SetConfig+0x1c0>
 8005d22:	2b80      	cmp	r3, #128	@ 0x80
 8005d24:	d009      	beq.n	8005d3a <UART_SetConfig+0x1ae>
 8005d26:	2b80      	cmp	r3, #128	@ 0x80
 8005d28:	d810      	bhi.n	8005d4c <UART_SetConfig+0x1c0>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <UART_SetConfig+0x1a8>
 8005d2e:	2b40      	cmp	r3, #64	@ 0x40
 8005d30:	d006      	beq.n	8005d40 <UART_SetConfig+0x1b4>
 8005d32:	e00b      	b.n	8005d4c <UART_SetConfig+0x1c0>
 8005d34:	2300      	movs	r3, #0
 8005d36:	77fb      	strb	r3, [r7, #31]
 8005d38:	e0cc      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	77fb      	strb	r3, [r7, #31]
 8005d3e:	e0c9      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005d40:	2304      	movs	r3, #4
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	e0c6      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005d46:	2308      	movs	r3, #8
 8005d48:	77fb      	strb	r3, [r7, #31]
 8005d4a:	e0c3      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	77fb      	strb	r3, [r7, #31]
 8005d50:	e0c0      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a44      	ldr	r2, [pc, #272]	@ (8005e68 <UART_SetConfig+0x2dc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d125      	bne.n	8005da8 <UART_SetConfig+0x21c>
 8005d5c:	4b3e      	ldr	r3, [pc, #248]	@ (8005e58 <UART_SetConfig+0x2cc>)
 8005d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d6a:	d017      	beq.n	8005d9c <UART_SetConfig+0x210>
 8005d6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d70:	d817      	bhi.n	8005da2 <UART_SetConfig+0x216>
 8005d72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d76:	d00b      	beq.n	8005d90 <UART_SetConfig+0x204>
 8005d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d7c:	d811      	bhi.n	8005da2 <UART_SetConfig+0x216>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <UART_SetConfig+0x1fe>
 8005d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d86:	d006      	beq.n	8005d96 <UART_SetConfig+0x20a>
 8005d88:	e00b      	b.n	8005da2 <UART_SetConfig+0x216>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	77fb      	strb	r3, [r7, #31]
 8005d8e:	e0a1      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005d90:	2302      	movs	r3, #2
 8005d92:	77fb      	strb	r3, [r7, #31]
 8005d94:	e09e      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005d96:	2304      	movs	r3, #4
 8005d98:	77fb      	strb	r3, [r7, #31]
 8005d9a:	e09b      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e098      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005da2:	2310      	movs	r3, #16
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e095      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a2f      	ldr	r2, [pc, #188]	@ (8005e6c <UART_SetConfig+0x2e0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d125      	bne.n	8005dfe <UART_SetConfig+0x272>
 8005db2:	4b29      	ldr	r3, [pc, #164]	@ (8005e58 <UART_SetConfig+0x2cc>)
 8005db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005db8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005dbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dc0:	d017      	beq.n	8005df2 <UART_SetConfig+0x266>
 8005dc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dc6:	d817      	bhi.n	8005df8 <UART_SetConfig+0x26c>
 8005dc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dcc:	d00b      	beq.n	8005de6 <UART_SetConfig+0x25a>
 8005dce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dd2:	d811      	bhi.n	8005df8 <UART_SetConfig+0x26c>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <UART_SetConfig+0x254>
 8005dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ddc:	d006      	beq.n	8005dec <UART_SetConfig+0x260>
 8005dde:	e00b      	b.n	8005df8 <UART_SetConfig+0x26c>
 8005de0:	2301      	movs	r3, #1
 8005de2:	77fb      	strb	r3, [r7, #31]
 8005de4:	e076      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005de6:	2302      	movs	r3, #2
 8005de8:	77fb      	strb	r3, [r7, #31]
 8005dea:	e073      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005dec:	2304      	movs	r3, #4
 8005dee:	77fb      	strb	r3, [r7, #31]
 8005df0:	e070      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005df2:	2308      	movs	r3, #8
 8005df4:	77fb      	strb	r3, [r7, #31]
 8005df6:	e06d      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005df8:	2310      	movs	r3, #16
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e06a      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a1b      	ldr	r2, [pc, #108]	@ (8005e70 <UART_SetConfig+0x2e4>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d138      	bne.n	8005e7a <UART_SetConfig+0x2ee>
 8005e08:	4b13      	ldr	r3, [pc, #76]	@ (8005e58 <UART_SetConfig+0x2cc>)
 8005e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005e12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e16:	d017      	beq.n	8005e48 <UART_SetConfig+0x2bc>
 8005e18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e1c:	d82a      	bhi.n	8005e74 <UART_SetConfig+0x2e8>
 8005e1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e22:	d00b      	beq.n	8005e3c <UART_SetConfig+0x2b0>
 8005e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e28:	d824      	bhi.n	8005e74 <UART_SetConfig+0x2e8>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <UART_SetConfig+0x2aa>
 8005e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e32:	d006      	beq.n	8005e42 <UART_SetConfig+0x2b6>
 8005e34:	e01e      	b.n	8005e74 <UART_SetConfig+0x2e8>
 8005e36:	2300      	movs	r3, #0
 8005e38:	77fb      	strb	r3, [r7, #31]
 8005e3a:	e04b      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	77fb      	strb	r3, [r7, #31]
 8005e40:	e048      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005e42:	2304      	movs	r3, #4
 8005e44:	77fb      	strb	r3, [r7, #31]
 8005e46:	e045      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005e48:	2308      	movs	r3, #8
 8005e4a:	77fb      	strb	r3, [r7, #31]
 8005e4c:	e042      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005e4e:	bf00      	nop
 8005e50:	efff69f3 	.word	0xefff69f3
 8005e54:	40011000 	.word	0x40011000
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	40004400 	.word	0x40004400
 8005e60:	40004800 	.word	0x40004800
 8005e64:	40004c00 	.word	0x40004c00
 8005e68:	40005000 	.word	0x40005000
 8005e6c:	40011400 	.word	0x40011400
 8005e70:	40007800 	.word	0x40007800
 8005e74:	2310      	movs	r3, #16
 8005e76:	77fb      	strb	r3, [r7, #31]
 8005e78:	e02c      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a72      	ldr	r2, [pc, #456]	@ (8006048 <UART_SetConfig+0x4bc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d125      	bne.n	8005ed0 <UART_SetConfig+0x344>
 8005e84:	4b71      	ldr	r3, [pc, #452]	@ (800604c <UART_SetConfig+0x4c0>)
 8005e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e8a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005e8e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005e92:	d017      	beq.n	8005ec4 <UART_SetConfig+0x338>
 8005e94:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005e98:	d817      	bhi.n	8005eca <UART_SetConfig+0x33e>
 8005e9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e9e:	d00b      	beq.n	8005eb8 <UART_SetConfig+0x32c>
 8005ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ea4:	d811      	bhi.n	8005eca <UART_SetConfig+0x33e>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <UART_SetConfig+0x326>
 8005eaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eae:	d006      	beq.n	8005ebe <UART_SetConfig+0x332>
 8005eb0:	e00b      	b.n	8005eca <UART_SetConfig+0x33e>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	77fb      	strb	r3, [r7, #31]
 8005eb6:	e00d      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	e00a      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005ebe:	2304      	movs	r3, #4
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	e007      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	77fb      	strb	r3, [r7, #31]
 8005ec8:	e004      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005eca:	2310      	movs	r3, #16
 8005ecc:	77fb      	strb	r3, [r7, #31]
 8005ece:	e001      	b.n	8005ed4 <UART_SetConfig+0x348>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005edc:	d15b      	bne.n	8005f96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005ede:	7ffb      	ldrb	r3, [r7, #31]
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d828      	bhi.n	8005f36 <UART_SetConfig+0x3aa>
 8005ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8005eec <UART_SetConfig+0x360>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005f11 	.word	0x08005f11
 8005ef0:	08005f19 	.word	0x08005f19
 8005ef4:	08005f21 	.word	0x08005f21
 8005ef8:	08005f37 	.word	0x08005f37
 8005efc:	08005f27 	.word	0x08005f27
 8005f00:	08005f37 	.word	0x08005f37
 8005f04:	08005f37 	.word	0x08005f37
 8005f08:	08005f37 	.word	0x08005f37
 8005f0c:	08005f2f 	.word	0x08005f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f10:	f7fe fa50 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8005f14:	61b8      	str	r0, [r7, #24]
        break;
 8005f16:	e013      	b.n	8005f40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f18:	f7fe fa60 	bl	80043dc <HAL_RCC_GetPCLK2Freq>
 8005f1c:	61b8      	str	r0, [r7, #24]
        break;
 8005f1e:	e00f      	b.n	8005f40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f20:	4b4b      	ldr	r3, [pc, #300]	@ (8006050 <UART_SetConfig+0x4c4>)
 8005f22:	61bb      	str	r3, [r7, #24]
        break;
 8005f24:	e00c      	b.n	8005f40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f26:	f7fe f973 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 8005f2a:	61b8      	str	r0, [r7, #24]
        break;
 8005f2c:	e008      	b.n	8005f40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f32:	61bb      	str	r3, [r7, #24]
        break;
 8005f34:	e004      	b.n	8005f40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	77bb      	strb	r3, [r7, #30]
        break;
 8005f3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d074      	beq.n	8006030 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	005a      	lsls	r2, r3, #1
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	085b      	lsrs	r3, r3, #1
 8005f50:	441a      	add	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	2b0f      	cmp	r3, #15
 8005f60:	d916      	bls.n	8005f90 <UART_SetConfig+0x404>
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f68:	d212      	bcs.n	8005f90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f023 030f 	bic.w	r3, r3, #15
 8005f72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	89fb      	ldrh	r3, [r7, #14]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	89fa      	ldrh	r2, [r7, #14]
 8005f8c:	60da      	str	r2, [r3, #12]
 8005f8e:	e04f      	b.n	8006030 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	77bb      	strb	r3, [r7, #30]
 8005f94:	e04c      	b.n	8006030 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f96:	7ffb      	ldrb	r3, [r7, #31]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d828      	bhi.n	8005fee <UART_SetConfig+0x462>
 8005f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa4 <UART_SetConfig+0x418>)
 8005f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa2:	bf00      	nop
 8005fa4:	08005fc9 	.word	0x08005fc9
 8005fa8:	08005fd1 	.word	0x08005fd1
 8005fac:	08005fd9 	.word	0x08005fd9
 8005fb0:	08005fef 	.word	0x08005fef
 8005fb4:	08005fdf 	.word	0x08005fdf
 8005fb8:	08005fef 	.word	0x08005fef
 8005fbc:	08005fef 	.word	0x08005fef
 8005fc0:	08005fef 	.word	0x08005fef
 8005fc4:	08005fe7 	.word	0x08005fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc8:	f7fe f9f4 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8005fcc:	61b8      	str	r0, [r7, #24]
        break;
 8005fce:	e013      	b.n	8005ff8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd0:	f7fe fa04 	bl	80043dc <HAL_RCC_GetPCLK2Freq>
 8005fd4:	61b8      	str	r0, [r7, #24]
        break;
 8005fd6:	e00f      	b.n	8005ff8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8006050 <UART_SetConfig+0x4c4>)
 8005fda:	61bb      	str	r3, [r7, #24]
        break;
 8005fdc:	e00c      	b.n	8005ff8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fde:	f7fe f917 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 8005fe2:	61b8      	str	r0, [r7, #24]
        break;
 8005fe4:	e008      	b.n	8005ff8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fea:	61bb      	str	r3, [r7, #24]
        break;
 8005fec:	e004      	b.n	8005ff8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ff6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d018      	beq.n	8006030 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	085a      	lsrs	r2, r3, #1
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	441a      	add	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006010:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b0f      	cmp	r3, #15
 8006016:	d909      	bls.n	800602c <UART_SetConfig+0x4a0>
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800601e:	d205      	bcs.n	800602c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	b29a      	uxth	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60da      	str	r2, [r3, #12]
 800602a:	e001      	b.n	8006030 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800603c:	7fbb      	ldrb	r3, [r7, #30]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3720      	adds	r7, #32
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	40007c00 	.word	0x40007c00
 800604c:	40023800 	.word	0x40023800
 8006050:	00f42400 	.word	0x00f42400

08006054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00a      	beq.n	800607e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01a      	beq.n	800616a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006152:	d10a      	bne.n	800616a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	605a      	str	r2, [r3, #4]
  }
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b098      	sub	sp, #96	@ 0x60
 800619c:	af02      	add	r7, sp, #8
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061a8:	f7fc fbbc 	bl	8002924 <HAL_GetTick>
 80061ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0308 	and.w	r3, r3, #8
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d12e      	bne.n	800621a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c4:	2200      	movs	r2, #0
 80061c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f88c 	bl	80062e8 <UART_WaitOnFlagUntilTimeout>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d021      	beq.n	800621a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061de:	e853 3f00 	ldrex	r3, [r3]
 80061e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e6      	bne.n	80061d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e062      	b.n	80062e0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b04      	cmp	r3, #4
 8006226:	d149      	bne.n	80062bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006228:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006230:	2200      	movs	r2, #0
 8006232:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f856 	bl	80062e8 <UART_WaitOnFlagUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d03c      	beq.n	80062bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	e853 3f00 	ldrex	r3, [r3]
 800624e:	623b      	str	r3, [r7, #32]
   return(result);
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	461a      	mov	r2, r3
 800625e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006260:	633b      	str	r3, [r7, #48]	@ 0x30
 8006262:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006268:	e841 2300 	strex	r3, r2, [r1]
 800626c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800626e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e6      	bne.n	8006242 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3308      	adds	r3, #8
 800627a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	60fb      	str	r3, [r7, #12]
   return(result);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0301 	bic.w	r3, r3, #1
 800628a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3308      	adds	r3, #8
 8006292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006294:	61fa      	str	r2, [r7, #28]
 8006296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	69b9      	ldr	r1, [r7, #24]
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	617b      	str	r3, [r7, #20]
   return(result);
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e5      	bne.n	8006274 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e011      	b.n	80062e0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3758      	adds	r7, #88	@ 0x58
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	4613      	mov	r3, r2
 80062f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062f8:	e04f      	b.n	800639a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d04b      	beq.n	800639a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006302:	f7fc fb0f 	bl	8002924 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	429a      	cmp	r2, r3
 8006310:	d302      	bcc.n	8006318 <UART_WaitOnFlagUntilTimeout+0x30>
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e04e      	b.n	80063ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	d037      	beq.n	800639a <UART_WaitOnFlagUntilTimeout+0xb2>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b80      	cmp	r3, #128	@ 0x80
 800632e:	d034      	beq.n	800639a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b40      	cmp	r3, #64	@ 0x40
 8006334:	d031      	beq.n	800639a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b08      	cmp	r3, #8
 8006342:	d110      	bne.n	8006366 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2208      	movs	r2, #8
 800634a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f838 	bl	80063c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2208      	movs	r2, #8
 8006356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e029      	b.n	80063ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006374:	d111      	bne.n	800639a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800637e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f81e 	bl	80063c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2220      	movs	r2, #32
 800638a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e00f      	b.n	80063ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4013      	ands	r3, r2
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	bf0c      	ite	eq
 80063aa:	2301      	moveq	r3, #1
 80063ac:	2300      	movne	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d0a0      	beq.n	80062fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b095      	sub	sp, #84	@ 0x54
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80063ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3308      	adds	r3, #8
 8006402:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	61fb      	str	r3, [r7, #28]
   return(result);
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f023 0301 	bic.w	r3, r3, #1
 8006412:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3308      	adds	r3, #8
 800641a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800641c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800641e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e5      	bne.n	80063fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006434:	2b01      	cmp	r3, #1
 8006436:	d118      	bne.n	800646a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	60bb      	str	r3, [r7, #8]
   return(result);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f023 0310 	bic.w	r3, r3, #16
 800644c:	647b      	str	r3, [r7, #68]	@ 0x44
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6979      	ldr	r1, [r7, #20]
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	613b      	str	r3, [r7, #16]
   return(result);
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e6      	bne.n	8006438 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800647e:	bf00      	nop
 8006480:	3754      	adds	r7, #84	@ 0x54
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <__cvt>:
 800648a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648c:	ed2d 8b02 	vpush	{d8}
 8006490:	eeb0 8b40 	vmov.f64	d8, d0
 8006494:	b085      	sub	sp, #20
 8006496:	4617      	mov	r7, r2
 8006498:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800649a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800649c:	ee18 2a90 	vmov	r2, s17
 80064a0:	f025 0520 	bic.w	r5, r5, #32
 80064a4:	2a00      	cmp	r2, #0
 80064a6:	bfb6      	itet	lt
 80064a8:	222d      	movlt	r2, #45	@ 0x2d
 80064aa:	2200      	movge	r2, #0
 80064ac:	eeb1 8b40 	vneglt.f64	d8, d0
 80064b0:	2d46      	cmp	r5, #70	@ 0x46
 80064b2:	460c      	mov	r4, r1
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	d004      	beq.n	80064c2 <__cvt+0x38>
 80064b8:	2d45      	cmp	r5, #69	@ 0x45
 80064ba:	d100      	bne.n	80064be <__cvt+0x34>
 80064bc:	3401      	adds	r4, #1
 80064be:	2102      	movs	r1, #2
 80064c0:	e000      	b.n	80064c4 <__cvt+0x3a>
 80064c2:	2103      	movs	r1, #3
 80064c4:	ab03      	add	r3, sp, #12
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	ab02      	add	r3, sp, #8
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	4622      	mov	r2, r4
 80064ce:	4633      	mov	r3, r6
 80064d0:	eeb0 0b48 	vmov.f64	d0, d8
 80064d4:	f001 f84c 	bl	8007570 <_dtoa_r>
 80064d8:	2d47      	cmp	r5, #71	@ 0x47
 80064da:	d114      	bne.n	8006506 <__cvt+0x7c>
 80064dc:	07fb      	lsls	r3, r7, #31
 80064de:	d50a      	bpl.n	80064f6 <__cvt+0x6c>
 80064e0:	1902      	adds	r2, r0, r4
 80064e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80064e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ea:	bf08      	it	eq
 80064ec:	9203      	streq	r2, [sp, #12]
 80064ee:	2130      	movs	r1, #48	@ 0x30
 80064f0:	9b03      	ldr	r3, [sp, #12]
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d319      	bcc.n	800652a <__cvt+0xa0>
 80064f6:	9b03      	ldr	r3, [sp, #12]
 80064f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064fa:	1a1b      	subs	r3, r3, r0
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	b005      	add	sp, #20
 8006500:	ecbd 8b02 	vpop	{d8}
 8006504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006506:	2d46      	cmp	r5, #70	@ 0x46
 8006508:	eb00 0204 	add.w	r2, r0, r4
 800650c:	d1e9      	bne.n	80064e2 <__cvt+0x58>
 800650e:	7803      	ldrb	r3, [r0, #0]
 8006510:	2b30      	cmp	r3, #48	@ 0x30
 8006512:	d107      	bne.n	8006524 <__cvt+0x9a>
 8006514:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651c:	bf1c      	itt	ne
 800651e:	f1c4 0401 	rsbne	r4, r4, #1
 8006522:	6034      	strne	r4, [r6, #0]
 8006524:	6833      	ldr	r3, [r6, #0]
 8006526:	441a      	add	r2, r3
 8006528:	e7db      	b.n	80064e2 <__cvt+0x58>
 800652a:	1c5c      	adds	r4, r3, #1
 800652c:	9403      	str	r4, [sp, #12]
 800652e:	7019      	strb	r1, [r3, #0]
 8006530:	e7de      	b.n	80064f0 <__cvt+0x66>

08006532 <__exponent>:
 8006532:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006534:	2900      	cmp	r1, #0
 8006536:	bfba      	itte	lt
 8006538:	4249      	neglt	r1, r1
 800653a:	232d      	movlt	r3, #45	@ 0x2d
 800653c:	232b      	movge	r3, #43	@ 0x2b
 800653e:	2909      	cmp	r1, #9
 8006540:	7002      	strb	r2, [r0, #0]
 8006542:	7043      	strb	r3, [r0, #1]
 8006544:	dd29      	ble.n	800659a <__exponent+0x68>
 8006546:	f10d 0307 	add.w	r3, sp, #7
 800654a:	461d      	mov	r5, r3
 800654c:	270a      	movs	r7, #10
 800654e:	461a      	mov	r2, r3
 8006550:	fbb1 f6f7 	udiv	r6, r1, r7
 8006554:	fb07 1416 	mls	r4, r7, r6, r1
 8006558:	3430      	adds	r4, #48	@ 0x30
 800655a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800655e:	460c      	mov	r4, r1
 8006560:	2c63      	cmp	r4, #99	@ 0x63
 8006562:	f103 33ff 	add.w	r3, r3, #4294967295
 8006566:	4631      	mov	r1, r6
 8006568:	dcf1      	bgt.n	800654e <__exponent+0x1c>
 800656a:	3130      	adds	r1, #48	@ 0x30
 800656c:	1e94      	subs	r4, r2, #2
 800656e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006572:	1c41      	adds	r1, r0, #1
 8006574:	4623      	mov	r3, r4
 8006576:	42ab      	cmp	r3, r5
 8006578:	d30a      	bcc.n	8006590 <__exponent+0x5e>
 800657a:	f10d 0309 	add.w	r3, sp, #9
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	42ac      	cmp	r4, r5
 8006582:	bf88      	it	hi
 8006584:	2300      	movhi	r3, #0
 8006586:	3302      	adds	r3, #2
 8006588:	4403      	add	r3, r0
 800658a:	1a18      	subs	r0, r3, r0
 800658c:	b003      	add	sp, #12
 800658e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006590:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006594:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006598:	e7ed      	b.n	8006576 <__exponent+0x44>
 800659a:	2330      	movs	r3, #48	@ 0x30
 800659c:	3130      	adds	r1, #48	@ 0x30
 800659e:	7083      	strb	r3, [r0, #2]
 80065a0:	70c1      	strb	r1, [r0, #3]
 80065a2:	1d03      	adds	r3, r0, #4
 80065a4:	e7f1      	b.n	800658a <__exponent+0x58>
	...

080065a8 <_printf_float>:
 80065a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	b08d      	sub	sp, #52	@ 0x34
 80065ae:	460c      	mov	r4, r1
 80065b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80065b4:	4616      	mov	r6, r2
 80065b6:	461f      	mov	r7, r3
 80065b8:	4605      	mov	r5, r0
 80065ba:	f000 fed1 	bl	8007360 <_localeconv_r>
 80065be:	f8d0 b000 	ldr.w	fp, [r0]
 80065c2:	4658      	mov	r0, fp
 80065c4:	f7f9 fe8c 	bl	80002e0 <strlen>
 80065c8:	2300      	movs	r3, #0
 80065ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80065cc:	f8d8 3000 	ldr.w	r3, [r8]
 80065d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80065d4:	6822      	ldr	r2, [r4, #0]
 80065d6:	9005      	str	r0, [sp, #20]
 80065d8:	3307      	adds	r3, #7
 80065da:	f023 0307 	bic.w	r3, r3, #7
 80065de:	f103 0108 	add.w	r1, r3, #8
 80065e2:	f8c8 1000 	str.w	r1, [r8]
 80065e6:	ed93 0b00 	vldr	d0, [r3]
 80065ea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006848 <_printf_float+0x2a0>
 80065ee:	eeb0 7bc0 	vabs.f64	d7, d0
 80065f2:	eeb4 7b46 	vcmp.f64	d7, d6
 80065f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065fa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80065fe:	dd24      	ble.n	800664a <_printf_float+0xa2>
 8006600:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006608:	d502      	bpl.n	8006610 <_printf_float+0x68>
 800660a:	232d      	movs	r3, #45	@ 0x2d
 800660c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006610:	498f      	ldr	r1, [pc, #572]	@ (8006850 <_printf_float+0x2a8>)
 8006612:	4b90      	ldr	r3, [pc, #576]	@ (8006854 <_printf_float+0x2ac>)
 8006614:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006618:	bf8c      	ite	hi
 800661a:	4688      	movhi	r8, r1
 800661c:	4698      	movls	r8, r3
 800661e:	f022 0204 	bic.w	r2, r2, #4
 8006622:	2303      	movs	r3, #3
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	6022      	str	r2, [r4, #0]
 8006628:	f04f 0a00 	mov.w	sl, #0
 800662c:	9700      	str	r7, [sp, #0]
 800662e:	4633      	mov	r3, r6
 8006630:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006632:	4621      	mov	r1, r4
 8006634:	4628      	mov	r0, r5
 8006636:	f000 f9d1 	bl	80069dc <_printf_common>
 800663a:	3001      	adds	r0, #1
 800663c:	f040 8089 	bne.w	8006752 <_printf_float+0x1aa>
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	b00d      	add	sp, #52	@ 0x34
 8006646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664a:	eeb4 0b40 	vcmp.f64	d0, d0
 800664e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006652:	d709      	bvc.n	8006668 <_printf_float+0xc0>
 8006654:	ee10 3a90 	vmov	r3, s1
 8006658:	2b00      	cmp	r3, #0
 800665a:	bfbc      	itt	lt
 800665c:	232d      	movlt	r3, #45	@ 0x2d
 800665e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006662:	497d      	ldr	r1, [pc, #500]	@ (8006858 <_printf_float+0x2b0>)
 8006664:	4b7d      	ldr	r3, [pc, #500]	@ (800685c <_printf_float+0x2b4>)
 8006666:	e7d5      	b.n	8006614 <_printf_float+0x6c>
 8006668:	6863      	ldr	r3, [r4, #4]
 800666a:	1c59      	adds	r1, r3, #1
 800666c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006670:	d139      	bne.n	80066e6 <_printf_float+0x13e>
 8006672:	2306      	movs	r3, #6
 8006674:	6063      	str	r3, [r4, #4]
 8006676:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800667a:	2300      	movs	r3, #0
 800667c:	6022      	str	r2, [r4, #0]
 800667e:	9303      	str	r3, [sp, #12]
 8006680:	ab0a      	add	r3, sp, #40	@ 0x28
 8006682:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006686:	ab09      	add	r3, sp, #36	@ 0x24
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	6861      	ldr	r1, [r4, #4]
 800668c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006690:	4628      	mov	r0, r5
 8006692:	f7ff fefa 	bl	800648a <__cvt>
 8006696:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800669a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800669c:	4680      	mov	r8, r0
 800669e:	d129      	bne.n	80066f4 <_printf_float+0x14c>
 80066a0:	1cc8      	adds	r0, r1, #3
 80066a2:	db02      	blt.n	80066aa <_printf_float+0x102>
 80066a4:	6863      	ldr	r3, [r4, #4]
 80066a6:	4299      	cmp	r1, r3
 80066a8:	dd41      	ble.n	800672e <_printf_float+0x186>
 80066aa:	f1a9 0902 	sub.w	r9, r9, #2
 80066ae:	fa5f f989 	uxtb.w	r9, r9
 80066b2:	3901      	subs	r1, #1
 80066b4:	464a      	mov	r2, r9
 80066b6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80066ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80066bc:	f7ff ff39 	bl	8006532 <__exponent>
 80066c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066c2:	1813      	adds	r3, r2, r0
 80066c4:	2a01      	cmp	r2, #1
 80066c6:	4682      	mov	sl, r0
 80066c8:	6123      	str	r3, [r4, #16]
 80066ca:	dc02      	bgt.n	80066d2 <_printf_float+0x12a>
 80066cc:	6822      	ldr	r2, [r4, #0]
 80066ce:	07d2      	lsls	r2, r2, #31
 80066d0:	d501      	bpl.n	80066d6 <_printf_float+0x12e>
 80066d2:	3301      	adds	r3, #1
 80066d4:	6123      	str	r3, [r4, #16]
 80066d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0a6      	beq.n	800662c <_printf_float+0x84>
 80066de:	232d      	movs	r3, #45	@ 0x2d
 80066e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066e4:	e7a2      	b.n	800662c <_printf_float+0x84>
 80066e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80066ea:	d1c4      	bne.n	8006676 <_printf_float+0xce>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1c2      	bne.n	8006676 <_printf_float+0xce>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e7bf      	b.n	8006674 <_printf_float+0xcc>
 80066f4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80066f8:	d9db      	bls.n	80066b2 <_printf_float+0x10a>
 80066fa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80066fe:	d118      	bne.n	8006732 <_printf_float+0x18a>
 8006700:	2900      	cmp	r1, #0
 8006702:	6863      	ldr	r3, [r4, #4]
 8006704:	dd0b      	ble.n	800671e <_printf_float+0x176>
 8006706:	6121      	str	r1, [r4, #16]
 8006708:	b913      	cbnz	r3, 8006710 <_printf_float+0x168>
 800670a:	6822      	ldr	r2, [r4, #0]
 800670c:	07d0      	lsls	r0, r2, #31
 800670e:	d502      	bpl.n	8006716 <_printf_float+0x16e>
 8006710:	3301      	adds	r3, #1
 8006712:	440b      	add	r3, r1
 8006714:	6123      	str	r3, [r4, #16]
 8006716:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006718:	f04f 0a00 	mov.w	sl, #0
 800671c:	e7db      	b.n	80066d6 <_printf_float+0x12e>
 800671e:	b913      	cbnz	r3, 8006726 <_printf_float+0x17e>
 8006720:	6822      	ldr	r2, [r4, #0]
 8006722:	07d2      	lsls	r2, r2, #31
 8006724:	d501      	bpl.n	800672a <_printf_float+0x182>
 8006726:	3302      	adds	r3, #2
 8006728:	e7f4      	b.n	8006714 <_printf_float+0x16c>
 800672a:	2301      	movs	r3, #1
 800672c:	e7f2      	b.n	8006714 <_printf_float+0x16c>
 800672e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006732:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006734:	4299      	cmp	r1, r3
 8006736:	db05      	blt.n	8006744 <_printf_float+0x19c>
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	6121      	str	r1, [r4, #16]
 800673c:	07d8      	lsls	r0, r3, #31
 800673e:	d5ea      	bpl.n	8006716 <_printf_float+0x16e>
 8006740:	1c4b      	adds	r3, r1, #1
 8006742:	e7e7      	b.n	8006714 <_printf_float+0x16c>
 8006744:	2900      	cmp	r1, #0
 8006746:	bfd4      	ite	le
 8006748:	f1c1 0202 	rsble	r2, r1, #2
 800674c:	2201      	movgt	r2, #1
 800674e:	4413      	add	r3, r2
 8006750:	e7e0      	b.n	8006714 <_printf_float+0x16c>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	055a      	lsls	r2, r3, #21
 8006756:	d407      	bmi.n	8006768 <_printf_float+0x1c0>
 8006758:	6923      	ldr	r3, [r4, #16]
 800675a:	4642      	mov	r2, r8
 800675c:	4631      	mov	r1, r6
 800675e:	4628      	mov	r0, r5
 8006760:	47b8      	blx	r7
 8006762:	3001      	adds	r0, #1
 8006764:	d12a      	bne.n	80067bc <_printf_float+0x214>
 8006766:	e76b      	b.n	8006640 <_printf_float+0x98>
 8006768:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800676c:	f240 80e0 	bls.w	8006930 <_printf_float+0x388>
 8006770:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006774:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800677c:	d133      	bne.n	80067e6 <_printf_float+0x23e>
 800677e:	4a38      	ldr	r2, [pc, #224]	@ (8006860 <_printf_float+0x2b8>)
 8006780:	2301      	movs	r3, #1
 8006782:	4631      	mov	r1, r6
 8006784:	4628      	mov	r0, r5
 8006786:	47b8      	blx	r7
 8006788:	3001      	adds	r0, #1
 800678a:	f43f af59 	beq.w	8006640 <_printf_float+0x98>
 800678e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006792:	4543      	cmp	r3, r8
 8006794:	db02      	blt.n	800679c <_printf_float+0x1f4>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	07d8      	lsls	r0, r3, #31
 800679a:	d50f      	bpl.n	80067bc <_printf_float+0x214>
 800679c:	9b05      	ldr	r3, [sp, #20]
 800679e:	465a      	mov	r2, fp
 80067a0:	4631      	mov	r1, r6
 80067a2:	4628      	mov	r0, r5
 80067a4:	47b8      	blx	r7
 80067a6:	3001      	adds	r0, #1
 80067a8:	f43f af4a 	beq.w	8006640 <_printf_float+0x98>
 80067ac:	f04f 0900 	mov.w	r9, #0
 80067b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80067b4:	f104 0a1a 	add.w	sl, r4, #26
 80067b8:	45c8      	cmp	r8, r9
 80067ba:	dc09      	bgt.n	80067d0 <_printf_float+0x228>
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	079b      	lsls	r3, r3, #30
 80067c0:	f100 8107 	bmi.w	80069d2 <_printf_float+0x42a>
 80067c4:	68e0      	ldr	r0, [r4, #12]
 80067c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067c8:	4298      	cmp	r0, r3
 80067ca:	bfb8      	it	lt
 80067cc:	4618      	movlt	r0, r3
 80067ce:	e739      	b.n	8006644 <_printf_float+0x9c>
 80067d0:	2301      	movs	r3, #1
 80067d2:	4652      	mov	r2, sl
 80067d4:	4631      	mov	r1, r6
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b8      	blx	r7
 80067da:	3001      	adds	r0, #1
 80067dc:	f43f af30 	beq.w	8006640 <_printf_float+0x98>
 80067e0:	f109 0901 	add.w	r9, r9, #1
 80067e4:	e7e8      	b.n	80067b8 <_printf_float+0x210>
 80067e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	dc3b      	bgt.n	8006864 <_printf_float+0x2bc>
 80067ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006860 <_printf_float+0x2b8>)
 80067ee:	2301      	movs	r3, #1
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b8      	blx	r7
 80067f6:	3001      	adds	r0, #1
 80067f8:	f43f af22 	beq.w	8006640 <_printf_float+0x98>
 80067fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006800:	ea59 0303 	orrs.w	r3, r9, r3
 8006804:	d102      	bne.n	800680c <_printf_float+0x264>
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	07d9      	lsls	r1, r3, #31
 800680a:	d5d7      	bpl.n	80067bc <_printf_float+0x214>
 800680c:	9b05      	ldr	r3, [sp, #20]
 800680e:	465a      	mov	r2, fp
 8006810:	4631      	mov	r1, r6
 8006812:	4628      	mov	r0, r5
 8006814:	47b8      	blx	r7
 8006816:	3001      	adds	r0, #1
 8006818:	f43f af12 	beq.w	8006640 <_printf_float+0x98>
 800681c:	f04f 0a00 	mov.w	sl, #0
 8006820:	f104 0b1a 	add.w	fp, r4, #26
 8006824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006826:	425b      	negs	r3, r3
 8006828:	4553      	cmp	r3, sl
 800682a:	dc01      	bgt.n	8006830 <_printf_float+0x288>
 800682c:	464b      	mov	r3, r9
 800682e:	e794      	b.n	800675a <_printf_float+0x1b2>
 8006830:	2301      	movs	r3, #1
 8006832:	465a      	mov	r2, fp
 8006834:	4631      	mov	r1, r6
 8006836:	4628      	mov	r0, r5
 8006838:	47b8      	blx	r7
 800683a:	3001      	adds	r0, #1
 800683c:	f43f af00 	beq.w	8006640 <_printf_float+0x98>
 8006840:	f10a 0a01 	add.w	sl, sl, #1
 8006844:	e7ee      	b.n	8006824 <_printf_float+0x27c>
 8006846:	bf00      	nop
 8006848:	ffffffff 	.word	0xffffffff
 800684c:	7fefffff 	.word	0x7fefffff
 8006850:	0800ac5c 	.word	0x0800ac5c
 8006854:	0800ac58 	.word	0x0800ac58
 8006858:	0800ac64 	.word	0x0800ac64
 800685c:	0800ac60 	.word	0x0800ac60
 8006860:	0800ac68 	.word	0x0800ac68
 8006864:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006866:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800686a:	4553      	cmp	r3, sl
 800686c:	bfa8      	it	ge
 800686e:	4653      	movge	r3, sl
 8006870:	2b00      	cmp	r3, #0
 8006872:	4699      	mov	r9, r3
 8006874:	dc37      	bgt.n	80068e6 <_printf_float+0x33e>
 8006876:	2300      	movs	r3, #0
 8006878:	9307      	str	r3, [sp, #28]
 800687a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800687e:	f104 021a 	add.w	r2, r4, #26
 8006882:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006884:	9907      	ldr	r1, [sp, #28]
 8006886:	9306      	str	r3, [sp, #24]
 8006888:	eba3 0309 	sub.w	r3, r3, r9
 800688c:	428b      	cmp	r3, r1
 800688e:	dc31      	bgt.n	80068f4 <_printf_float+0x34c>
 8006890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006892:	459a      	cmp	sl, r3
 8006894:	dc3b      	bgt.n	800690e <_printf_float+0x366>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	07da      	lsls	r2, r3, #31
 800689a:	d438      	bmi.n	800690e <_printf_float+0x366>
 800689c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800689e:	ebaa 0903 	sub.w	r9, sl, r3
 80068a2:	9b06      	ldr	r3, [sp, #24]
 80068a4:	ebaa 0303 	sub.w	r3, sl, r3
 80068a8:	4599      	cmp	r9, r3
 80068aa:	bfa8      	it	ge
 80068ac:	4699      	movge	r9, r3
 80068ae:	f1b9 0f00 	cmp.w	r9, #0
 80068b2:	dc34      	bgt.n	800691e <_printf_float+0x376>
 80068b4:	f04f 0800 	mov.w	r8, #0
 80068b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068bc:	f104 0b1a 	add.w	fp, r4, #26
 80068c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c2:	ebaa 0303 	sub.w	r3, sl, r3
 80068c6:	eba3 0309 	sub.w	r3, r3, r9
 80068ca:	4543      	cmp	r3, r8
 80068cc:	f77f af76 	ble.w	80067bc <_printf_float+0x214>
 80068d0:	2301      	movs	r3, #1
 80068d2:	465a      	mov	r2, fp
 80068d4:	4631      	mov	r1, r6
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b8      	blx	r7
 80068da:	3001      	adds	r0, #1
 80068dc:	f43f aeb0 	beq.w	8006640 <_printf_float+0x98>
 80068e0:	f108 0801 	add.w	r8, r8, #1
 80068e4:	e7ec      	b.n	80068c0 <_printf_float+0x318>
 80068e6:	4642      	mov	r2, r8
 80068e8:	4631      	mov	r1, r6
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b8      	blx	r7
 80068ee:	3001      	adds	r0, #1
 80068f0:	d1c1      	bne.n	8006876 <_printf_float+0x2ce>
 80068f2:	e6a5      	b.n	8006640 <_printf_float+0x98>
 80068f4:	2301      	movs	r3, #1
 80068f6:	4631      	mov	r1, r6
 80068f8:	4628      	mov	r0, r5
 80068fa:	9206      	str	r2, [sp, #24]
 80068fc:	47b8      	blx	r7
 80068fe:	3001      	adds	r0, #1
 8006900:	f43f ae9e 	beq.w	8006640 <_printf_float+0x98>
 8006904:	9b07      	ldr	r3, [sp, #28]
 8006906:	9a06      	ldr	r2, [sp, #24]
 8006908:	3301      	adds	r3, #1
 800690a:	9307      	str	r3, [sp, #28]
 800690c:	e7b9      	b.n	8006882 <_printf_float+0x2da>
 800690e:	9b05      	ldr	r3, [sp, #20]
 8006910:	465a      	mov	r2, fp
 8006912:	4631      	mov	r1, r6
 8006914:	4628      	mov	r0, r5
 8006916:	47b8      	blx	r7
 8006918:	3001      	adds	r0, #1
 800691a:	d1bf      	bne.n	800689c <_printf_float+0x2f4>
 800691c:	e690      	b.n	8006640 <_printf_float+0x98>
 800691e:	9a06      	ldr	r2, [sp, #24]
 8006920:	464b      	mov	r3, r9
 8006922:	4442      	add	r2, r8
 8006924:	4631      	mov	r1, r6
 8006926:	4628      	mov	r0, r5
 8006928:	47b8      	blx	r7
 800692a:	3001      	adds	r0, #1
 800692c:	d1c2      	bne.n	80068b4 <_printf_float+0x30c>
 800692e:	e687      	b.n	8006640 <_printf_float+0x98>
 8006930:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006934:	f1b9 0f01 	cmp.w	r9, #1
 8006938:	dc01      	bgt.n	800693e <_printf_float+0x396>
 800693a:	07db      	lsls	r3, r3, #31
 800693c:	d536      	bpl.n	80069ac <_printf_float+0x404>
 800693e:	2301      	movs	r3, #1
 8006940:	4642      	mov	r2, r8
 8006942:	4631      	mov	r1, r6
 8006944:	4628      	mov	r0, r5
 8006946:	47b8      	blx	r7
 8006948:	3001      	adds	r0, #1
 800694a:	f43f ae79 	beq.w	8006640 <_printf_float+0x98>
 800694e:	9b05      	ldr	r3, [sp, #20]
 8006950:	465a      	mov	r2, fp
 8006952:	4631      	mov	r1, r6
 8006954:	4628      	mov	r0, r5
 8006956:	47b8      	blx	r7
 8006958:	3001      	adds	r0, #1
 800695a:	f43f ae71 	beq.w	8006640 <_printf_float+0x98>
 800695e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006962:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800696a:	f109 39ff 	add.w	r9, r9, #4294967295
 800696e:	d018      	beq.n	80069a2 <_printf_float+0x3fa>
 8006970:	464b      	mov	r3, r9
 8006972:	f108 0201 	add.w	r2, r8, #1
 8006976:	4631      	mov	r1, r6
 8006978:	4628      	mov	r0, r5
 800697a:	47b8      	blx	r7
 800697c:	3001      	adds	r0, #1
 800697e:	d10c      	bne.n	800699a <_printf_float+0x3f2>
 8006980:	e65e      	b.n	8006640 <_printf_float+0x98>
 8006982:	2301      	movs	r3, #1
 8006984:	465a      	mov	r2, fp
 8006986:	4631      	mov	r1, r6
 8006988:	4628      	mov	r0, r5
 800698a:	47b8      	blx	r7
 800698c:	3001      	adds	r0, #1
 800698e:	f43f ae57 	beq.w	8006640 <_printf_float+0x98>
 8006992:	f108 0801 	add.w	r8, r8, #1
 8006996:	45c8      	cmp	r8, r9
 8006998:	dbf3      	blt.n	8006982 <_printf_float+0x3da>
 800699a:	4653      	mov	r3, sl
 800699c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80069a0:	e6dc      	b.n	800675c <_printf_float+0x1b4>
 80069a2:	f04f 0800 	mov.w	r8, #0
 80069a6:	f104 0b1a 	add.w	fp, r4, #26
 80069aa:	e7f4      	b.n	8006996 <_printf_float+0x3ee>
 80069ac:	2301      	movs	r3, #1
 80069ae:	4642      	mov	r2, r8
 80069b0:	e7e1      	b.n	8006976 <_printf_float+0x3ce>
 80069b2:	2301      	movs	r3, #1
 80069b4:	464a      	mov	r2, r9
 80069b6:	4631      	mov	r1, r6
 80069b8:	4628      	mov	r0, r5
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	f43f ae3f 	beq.w	8006640 <_printf_float+0x98>
 80069c2:	f108 0801 	add.w	r8, r8, #1
 80069c6:	68e3      	ldr	r3, [r4, #12]
 80069c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069ca:	1a5b      	subs	r3, r3, r1
 80069cc:	4543      	cmp	r3, r8
 80069ce:	dcf0      	bgt.n	80069b2 <_printf_float+0x40a>
 80069d0:	e6f8      	b.n	80067c4 <_printf_float+0x21c>
 80069d2:	f04f 0800 	mov.w	r8, #0
 80069d6:	f104 0919 	add.w	r9, r4, #25
 80069da:	e7f4      	b.n	80069c6 <_printf_float+0x41e>

080069dc <_printf_common>:
 80069dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e0:	4616      	mov	r6, r2
 80069e2:	4698      	mov	r8, r3
 80069e4:	688a      	ldr	r2, [r1, #8]
 80069e6:	690b      	ldr	r3, [r1, #16]
 80069e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069ec:	4293      	cmp	r3, r2
 80069ee:	bfb8      	it	lt
 80069f0:	4613      	movlt	r3, r2
 80069f2:	6033      	str	r3, [r6, #0]
 80069f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069f8:	4607      	mov	r7, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	b10a      	cbz	r2, 8006a02 <_printf_common+0x26>
 80069fe:	3301      	adds	r3, #1
 8006a00:	6033      	str	r3, [r6, #0]
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	0699      	lsls	r1, r3, #26
 8006a06:	bf42      	ittt	mi
 8006a08:	6833      	ldrmi	r3, [r6, #0]
 8006a0a:	3302      	addmi	r3, #2
 8006a0c:	6033      	strmi	r3, [r6, #0]
 8006a0e:	6825      	ldr	r5, [r4, #0]
 8006a10:	f015 0506 	ands.w	r5, r5, #6
 8006a14:	d106      	bne.n	8006a24 <_printf_common+0x48>
 8006a16:	f104 0a19 	add.w	sl, r4, #25
 8006a1a:	68e3      	ldr	r3, [r4, #12]
 8006a1c:	6832      	ldr	r2, [r6, #0]
 8006a1e:	1a9b      	subs	r3, r3, r2
 8006a20:	42ab      	cmp	r3, r5
 8006a22:	dc26      	bgt.n	8006a72 <_printf_common+0x96>
 8006a24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a28:	6822      	ldr	r2, [r4, #0]
 8006a2a:	3b00      	subs	r3, #0
 8006a2c:	bf18      	it	ne
 8006a2e:	2301      	movne	r3, #1
 8006a30:	0692      	lsls	r2, r2, #26
 8006a32:	d42b      	bmi.n	8006a8c <_printf_common+0xb0>
 8006a34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a38:	4641      	mov	r1, r8
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	47c8      	blx	r9
 8006a3e:	3001      	adds	r0, #1
 8006a40:	d01e      	beq.n	8006a80 <_printf_common+0xa4>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	6922      	ldr	r2, [r4, #16]
 8006a46:	f003 0306 	and.w	r3, r3, #6
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	bf02      	ittt	eq
 8006a4e:	68e5      	ldreq	r5, [r4, #12]
 8006a50:	6833      	ldreq	r3, [r6, #0]
 8006a52:	1aed      	subeq	r5, r5, r3
 8006a54:	68a3      	ldr	r3, [r4, #8]
 8006a56:	bf0c      	ite	eq
 8006a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a5c:	2500      	movne	r5, #0
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	bfc4      	itt	gt
 8006a62:	1a9b      	subgt	r3, r3, r2
 8006a64:	18ed      	addgt	r5, r5, r3
 8006a66:	2600      	movs	r6, #0
 8006a68:	341a      	adds	r4, #26
 8006a6a:	42b5      	cmp	r5, r6
 8006a6c:	d11a      	bne.n	8006aa4 <_printf_common+0xc8>
 8006a6e:	2000      	movs	r0, #0
 8006a70:	e008      	b.n	8006a84 <_printf_common+0xa8>
 8006a72:	2301      	movs	r3, #1
 8006a74:	4652      	mov	r2, sl
 8006a76:	4641      	mov	r1, r8
 8006a78:	4638      	mov	r0, r7
 8006a7a:	47c8      	blx	r9
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d103      	bne.n	8006a88 <_printf_common+0xac>
 8006a80:	f04f 30ff 	mov.w	r0, #4294967295
 8006a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a88:	3501      	adds	r5, #1
 8006a8a:	e7c6      	b.n	8006a1a <_printf_common+0x3e>
 8006a8c:	18e1      	adds	r1, r4, r3
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	2030      	movs	r0, #48	@ 0x30
 8006a92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a96:	4422      	add	r2, r4
 8006a98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006aa0:	3302      	adds	r3, #2
 8006aa2:	e7c7      	b.n	8006a34 <_printf_common+0x58>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	4641      	mov	r1, r8
 8006aaa:	4638      	mov	r0, r7
 8006aac:	47c8      	blx	r9
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d0e6      	beq.n	8006a80 <_printf_common+0xa4>
 8006ab2:	3601      	adds	r6, #1
 8006ab4:	e7d9      	b.n	8006a6a <_printf_common+0x8e>
	...

08006ab8 <_printf_i>:
 8006ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006abc:	7e0f      	ldrb	r7, [r1, #24]
 8006abe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ac0:	2f78      	cmp	r7, #120	@ 0x78
 8006ac2:	4691      	mov	r9, r2
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	469a      	mov	sl, r3
 8006aca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ace:	d807      	bhi.n	8006ae0 <_printf_i+0x28>
 8006ad0:	2f62      	cmp	r7, #98	@ 0x62
 8006ad2:	d80a      	bhi.n	8006aea <_printf_i+0x32>
 8006ad4:	2f00      	cmp	r7, #0
 8006ad6:	f000 80d1 	beq.w	8006c7c <_printf_i+0x1c4>
 8006ada:	2f58      	cmp	r7, #88	@ 0x58
 8006adc:	f000 80b8 	beq.w	8006c50 <_printf_i+0x198>
 8006ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ae4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ae8:	e03a      	b.n	8006b60 <_printf_i+0xa8>
 8006aea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006aee:	2b15      	cmp	r3, #21
 8006af0:	d8f6      	bhi.n	8006ae0 <_printf_i+0x28>
 8006af2:	a101      	add	r1, pc, #4	@ (adr r1, 8006af8 <_printf_i+0x40>)
 8006af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006af8:	08006b51 	.word	0x08006b51
 8006afc:	08006b65 	.word	0x08006b65
 8006b00:	08006ae1 	.word	0x08006ae1
 8006b04:	08006ae1 	.word	0x08006ae1
 8006b08:	08006ae1 	.word	0x08006ae1
 8006b0c:	08006ae1 	.word	0x08006ae1
 8006b10:	08006b65 	.word	0x08006b65
 8006b14:	08006ae1 	.word	0x08006ae1
 8006b18:	08006ae1 	.word	0x08006ae1
 8006b1c:	08006ae1 	.word	0x08006ae1
 8006b20:	08006ae1 	.word	0x08006ae1
 8006b24:	08006c63 	.word	0x08006c63
 8006b28:	08006b8f 	.word	0x08006b8f
 8006b2c:	08006c1d 	.word	0x08006c1d
 8006b30:	08006ae1 	.word	0x08006ae1
 8006b34:	08006ae1 	.word	0x08006ae1
 8006b38:	08006c85 	.word	0x08006c85
 8006b3c:	08006ae1 	.word	0x08006ae1
 8006b40:	08006b8f 	.word	0x08006b8f
 8006b44:	08006ae1 	.word	0x08006ae1
 8006b48:	08006ae1 	.word	0x08006ae1
 8006b4c:	08006c25 	.word	0x08006c25
 8006b50:	6833      	ldr	r3, [r6, #0]
 8006b52:	1d1a      	adds	r2, r3, #4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6032      	str	r2, [r6, #0]
 8006b58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b60:	2301      	movs	r3, #1
 8006b62:	e09c      	b.n	8006c9e <_printf_i+0x1e6>
 8006b64:	6833      	ldr	r3, [r6, #0]
 8006b66:	6820      	ldr	r0, [r4, #0]
 8006b68:	1d19      	adds	r1, r3, #4
 8006b6a:	6031      	str	r1, [r6, #0]
 8006b6c:	0606      	lsls	r6, r0, #24
 8006b6e:	d501      	bpl.n	8006b74 <_printf_i+0xbc>
 8006b70:	681d      	ldr	r5, [r3, #0]
 8006b72:	e003      	b.n	8006b7c <_printf_i+0xc4>
 8006b74:	0645      	lsls	r5, r0, #25
 8006b76:	d5fb      	bpl.n	8006b70 <_printf_i+0xb8>
 8006b78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	da03      	bge.n	8006b88 <_printf_i+0xd0>
 8006b80:	232d      	movs	r3, #45	@ 0x2d
 8006b82:	426d      	negs	r5, r5
 8006b84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b88:	4858      	ldr	r0, [pc, #352]	@ (8006cec <_printf_i+0x234>)
 8006b8a:	230a      	movs	r3, #10
 8006b8c:	e011      	b.n	8006bb2 <_printf_i+0xfa>
 8006b8e:	6821      	ldr	r1, [r4, #0]
 8006b90:	6833      	ldr	r3, [r6, #0]
 8006b92:	0608      	lsls	r0, r1, #24
 8006b94:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b98:	d402      	bmi.n	8006ba0 <_printf_i+0xe8>
 8006b9a:	0649      	lsls	r1, r1, #25
 8006b9c:	bf48      	it	mi
 8006b9e:	b2ad      	uxthmi	r5, r5
 8006ba0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ba2:	4852      	ldr	r0, [pc, #328]	@ (8006cec <_printf_i+0x234>)
 8006ba4:	6033      	str	r3, [r6, #0]
 8006ba6:	bf14      	ite	ne
 8006ba8:	230a      	movne	r3, #10
 8006baa:	2308      	moveq	r3, #8
 8006bac:	2100      	movs	r1, #0
 8006bae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bb2:	6866      	ldr	r6, [r4, #4]
 8006bb4:	60a6      	str	r6, [r4, #8]
 8006bb6:	2e00      	cmp	r6, #0
 8006bb8:	db05      	blt.n	8006bc6 <_printf_i+0x10e>
 8006bba:	6821      	ldr	r1, [r4, #0]
 8006bbc:	432e      	orrs	r6, r5
 8006bbe:	f021 0104 	bic.w	r1, r1, #4
 8006bc2:	6021      	str	r1, [r4, #0]
 8006bc4:	d04b      	beq.n	8006c5e <_printf_i+0x1a6>
 8006bc6:	4616      	mov	r6, r2
 8006bc8:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bcc:	fb03 5711 	mls	r7, r3, r1, r5
 8006bd0:	5dc7      	ldrb	r7, [r0, r7]
 8006bd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bd6:	462f      	mov	r7, r5
 8006bd8:	42bb      	cmp	r3, r7
 8006bda:	460d      	mov	r5, r1
 8006bdc:	d9f4      	bls.n	8006bc8 <_printf_i+0x110>
 8006bde:	2b08      	cmp	r3, #8
 8006be0:	d10b      	bne.n	8006bfa <_printf_i+0x142>
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	07df      	lsls	r7, r3, #31
 8006be6:	d508      	bpl.n	8006bfa <_printf_i+0x142>
 8006be8:	6923      	ldr	r3, [r4, #16]
 8006bea:	6861      	ldr	r1, [r4, #4]
 8006bec:	4299      	cmp	r1, r3
 8006bee:	bfde      	ittt	le
 8006bf0:	2330      	movle	r3, #48	@ 0x30
 8006bf2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bf6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bfa:	1b92      	subs	r2, r2, r6
 8006bfc:	6122      	str	r2, [r4, #16]
 8006bfe:	f8cd a000 	str.w	sl, [sp]
 8006c02:	464b      	mov	r3, r9
 8006c04:	aa03      	add	r2, sp, #12
 8006c06:	4621      	mov	r1, r4
 8006c08:	4640      	mov	r0, r8
 8006c0a:	f7ff fee7 	bl	80069dc <_printf_common>
 8006c0e:	3001      	adds	r0, #1
 8006c10:	d14a      	bne.n	8006ca8 <_printf_i+0x1f0>
 8006c12:	f04f 30ff 	mov.w	r0, #4294967295
 8006c16:	b004      	add	sp, #16
 8006c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	f043 0320 	orr.w	r3, r3, #32
 8006c22:	6023      	str	r3, [r4, #0]
 8006c24:	4832      	ldr	r0, [pc, #200]	@ (8006cf0 <_printf_i+0x238>)
 8006c26:	2778      	movs	r7, #120	@ 0x78
 8006c28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	6831      	ldr	r1, [r6, #0]
 8006c30:	061f      	lsls	r7, r3, #24
 8006c32:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c36:	d402      	bmi.n	8006c3e <_printf_i+0x186>
 8006c38:	065f      	lsls	r7, r3, #25
 8006c3a:	bf48      	it	mi
 8006c3c:	b2ad      	uxthmi	r5, r5
 8006c3e:	6031      	str	r1, [r6, #0]
 8006c40:	07d9      	lsls	r1, r3, #31
 8006c42:	bf44      	itt	mi
 8006c44:	f043 0320 	orrmi.w	r3, r3, #32
 8006c48:	6023      	strmi	r3, [r4, #0]
 8006c4a:	b11d      	cbz	r5, 8006c54 <_printf_i+0x19c>
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	e7ad      	b.n	8006bac <_printf_i+0xf4>
 8006c50:	4826      	ldr	r0, [pc, #152]	@ (8006cec <_printf_i+0x234>)
 8006c52:	e7e9      	b.n	8006c28 <_printf_i+0x170>
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	f023 0320 	bic.w	r3, r3, #32
 8006c5a:	6023      	str	r3, [r4, #0]
 8006c5c:	e7f6      	b.n	8006c4c <_printf_i+0x194>
 8006c5e:	4616      	mov	r6, r2
 8006c60:	e7bd      	b.n	8006bde <_printf_i+0x126>
 8006c62:	6833      	ldr	r3, [r6, #0]
 8006c64:	6825      	ldr	r5, [r4, #0]
 8006c66:	6961      	ldr	r1, [r4, #20]
 8006c68:	1d18      	adds	r0, r3, #4
 8006c6a:	6030      	str	r0, [r6, #0]
 8006c6c:	062e      	lsls	r6, r5, #24
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	d501      	bpl.n	8006c76 <_printf_i+0x1be>
 8006c72:	6019      	str	r1, [r3, #0]
 8006c74:	e002      	b.n	8006c7c <_printf_i+0x1c4>
 8006c76:	0668      	lsls	r0, r5, #25
 8006c78:	d5fb      	bpl.n	8006c72 <_printf_i+0x1ba>
 8006c7a:	8019      	strh	r1, [r3, #0]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	6123      	str	r3, [r4, #16]
 8006c80:	4616      	mov	r6, r2
 8006c82:	e7bc      	b.n	8006bfe <_printf_i+0x146>
 8006c84:	6833      	ldr	r3, [r6, #0]
 8006c86:	1d1a      	adds	r2, r3, #4
 8006c88:	6032      	str	r2, [r6, #0]
 8006c8a:	681e      	ldr	r6, [r3, #0]
 8006c8c:	6862      	ldr	r2, [r4, #4]
 8006c8e:	2100      	movs	r1, #0
 8006c90:	4630      	mov	r0, r6
 8006c92:	f7f9 fad5 	bl	8000240 <memchr>
 8006c96:	b108      	cbz	r0, 8006c9c <_printf_i+0x1e4>
 8006c98:	1b80      	subs	r0, r0, r6
 8006c9a:	6060      	str	r0, [r4, #4]
 8006c9c:	6863      	ldr	r3, [r4, #4]
 8006c9e:	6123      	str	r3, [r4, #16]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ca6:	e7aa      	b.n	8006bfe <_printf_i+0x146>
 8006ca8:	6923      	ldr	r3, [r4, #16]
 8006caa:	4632      	mov	r2, r6
 8006cac:	4649      	mov	r1, r9
 8006cae:	4640      	mov	r0, r8
 8006cb0:	47d0      	blx	sl
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	d0ad      	beq.n	8006c12 <_printf_i+0x15a>
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	079b      	lsls	r3, r3, #30
 8006cba:	d413      	bmi.n	8006ce4 <_printf_i+0x22c>
 8006cbc:	68e0      	ldr	r0, [r4, #12]
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	4298      	cmp	r0, r3
 8006cc2:	bfb8      	it	lt
 8006cc4:	4618      	movlt	r0, r3
 8006cc6:	e7a6      	b.n	8006c16 <_printf_i+0x15e>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	4632      	mov	r2, r6
 8006ccc:	4649      	mov	r1, r9
 8006cce:	4640      	mov	r0, r8
 8006cd0:	47d0      	blx	sl
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d09d      	beq.n	8006c12 <_printf_i+0x15a>
 8006cd6:	3501      	adds	r5, #1
 8006cd8:	68e3      	ldr	r3, [r4, #12]
 8006cda:	9903      	ldr	r1, [sp, #12]
 8006cdc:	1a5b      	subs	r3, r3, r1
 8006cde:	42ab      	cmp	r3, r5
 8006ce0:	dcf2      	bgt.n	8006cc8 <_printf_i+0x210>
 8006ce2:	e7eb      	b.n	8006cbc <_printf_i+0x204>
 8006ce4:	2500      	movs	r5, #0
 8006ce6:	f104 0619 	add.w	r6, r4, #25
 8006cea:	e7f5      	b.n	8006cd8 <_printf_i+0x220>
 8006cec:	0800ac6a 	.word	0x0800ac6a
 8006cf0:	0800ac7b 	.word	0x0800ac7b

08006cf4 <_scanf_float>:
 8006cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf8:	b087      	sub	sp, #28
 8006cfa:	4691      	mov	r9, r2
 8006cfc:	9303      	str	r3, [sp, #12]
 8006cfe:	688b      	ldr	r3, [r1, #8]
 8006d00:	1e5a      	subs	r2, r3, #1
 8006d02:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006d06:	bf81      	itttt	hi
 8006d08:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006d0c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006d10:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006d14:	608b      	strhi	r3, [r1, #8]
 8006d16:	680b      	ldr	r3, [r1, #0]
 8006d18:	460a      	mov	r2, r1
 8006d1a:	f04f 0500 	mov.w	r5, #0
 8006d1e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006d22:	f842 3b1c 	str.w	r3, [r2], #28
 8006d26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006d2a:	4680      	mov	r8, r0
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	bf98      	it	ls
 8006d30:	f04f 0b00 	movls.w	fp, #0
 8006d34:	9201      	str	r2, [sp, #4]
 8006d36:	4616      	mov	r6, r2
 8006d38:	46aa      	mov	sl, r5
 8006d3a:	462f      	mov	r7, r5
 8006d3c:	9502      	str	r5, [sp, #8]
 8006d3e:	68a2      	ldr	r2, [r4, #8]
 8006d40:	b15a      	cbz	r2, 8006d5a <_scanf_float+0x66>
 8006d42:	f8d9 3000 	ldr.w	r3, [r9]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b4e      	cmp	r3, #78	@ 0x4e
 8006d4a:	d863      	bhi.n	8006e14 <_scanf_float+0x120>
 8006d4c:	2b40      	cmp	r3, #64	@ 0x40
 8006d4e:	d83b      	bhi.n	8006dc8 <_scanf_float+0xd4>
 8006d50:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006d54:	b2c8      	uxtb	r0, r1
 8006d56:	280e      	cmp	r0, #14
 8006d58:	d939      	bls.n	8006dce <_scanf_float+0xda>
 8006d5a:	b11f      	cbz	r7, 8006d64 <_scanf_float+0x70>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d62:	6023      	str	r3, [r4, #0]
 8006d64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d68:	f1ba 0f01 	cmp.w	sl, #1
 8006d6c:	f200 8114 	bhi.w	8006f98 <_scanf_float+0x2a4>
 8006d70:	9b01      	ldr	r3, [sp, #4]
 8006d72:	429e      	cmp	r6, r3
 8006d74:	f200 8105 	bhi.w	8006f82 <_scanf_float+0x28e>
 8006d78:	2001      	movs	r0, #1
 8006d7a:	b007      	add	sp, #28
 8006d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d80:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006d84:	2a0d      	cmp	r2, #13
 8006d86:	d8e8      	bhi.n	8006d5a <_scanf_float+0x66>
 8006d88:	a101      	add	r1, pc, #4	@ (adr r1, 8006d90 <_scanf_float+0x9c>)
 8006d8a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d8e:	bf00      	nop
 8006d90:	08006ed9 	.word	0x08006ed9
 8006d94:	08006d5b 	.word	0x08006d5b
 8006d98:	08006d5b 	.word	0x08006d5b
 8006d9c:	08006d5b 	.word	0x08006d5b
 8006da0:	08006f35 	.word	0x08006f35
 8006da4:	08006f0f 	.word	0x08006f0f
 8006da8:	08006d5b 	.word	0x08006d5b
 8006dac:	08006d5b 	.word	0x08006d5b
 8006db0:	08006ee7 	.word	0x08006ee7
 8006db4:	08006d5b 	.word	0x08006d5b
 8006db8:	08006d5b 	.word	0x08006d5b
 8006dbc:	08006d5b 	.word	0x08006d5b
 8006dc0:	08006d5b 	.word	0x08006d5b
 8006dc4:	08006ea3 	.word	0x08006ea3
 8006dc8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006dcc:	e7da      	b.n	8006d84 <_scanf_float+0x90>
 8006dce:	290e      	cmp	r1, #14
 8006dd0:	d8c3      	bhi.n	8006d5a <_scanf_float+0x66>
 8006dd2:	a001      	add	r0, pc, #4	@ (adr r0, 8006dd8 <_scanf_float+0xe4>)
 8006dd4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006dd8:	08006e93 	.word	0x08006e93
 8006ddc:	08006d5b 	.word	0x08006d5b
 8006de0:	08006e93 	.word	0x08006e93
 8006de4:	08006f23 	.word	0x08006f23
 8006de8:	08006d5b 	.word	0x08006d5b
 8006dec:	08006e35 	.word	0x08006e35
 8006df0:	08006e79 	.word	0x08006e79
 8006df4:	08006e79 	.word	0x08006e79
 8006df8:	08006e79 	.word	0x08006e79
 8006dfc:	08006e79 	.word	0x08006e79
 8006e00:	08006e79 	.word	0x08006e79
 8006e04:	08006e79 	.word	0x08006e79
 8006e08:	08006e79 	.word	0x08006e79
 8006e0c:	08006e79 	.word	0x08006e79
 8006e10:	08006e79 	.word	0x08006e79
 8006e14:	2b6e      	cmp	r3, #110	@ 0x6e
 8006e16:	d809      	bhi.n	8006e2c <_scanf_float+0x138>
 8006e18:	2b60      	cmp	r3, #96	@ 0x60
 8006e1a:	d8b1      	bhi.n	8006d80 <_scanf_float+0x8c>
 8006e1c:	2b54      	cmp	r3, #84	@ 0x54
 8006e1e:	d07b      	beq.n	8006f18 <_scanf_float+0x224>
 8006e20:	2b59      	cmp	r3, #89	@ 0x59
 8006e22:	d19a      	bne.n	8006d5a <_scanf_float+0x66>
 8006e24:	2d07      	cmp	r5, #7
 8006e26:	d198      	bne.n	8006d5a <_scanf_float+0x66>
 8006e28:	2508      	movs	r5, #8
 8006e2a:	e02f      	b.n	8006e8c <_scanf_float+0x198>
 8006e2c:	2b74      	cmp	r3, #116	@ 0x74
 8006e2e:	d073      	beq.n	8006f18 <_scanf_float+0x224>
 8006e30:	2b79      	cmp	r3, #121	@ 0x79
 8006e32:	e7f6      	b.n	8006e22 <_scanf_float+0x12e>
 8006e34:	6821      	ldr	r1, [r4, #0]
 8006e36:	05c8      	lsls	r0, r1, #23
 8006e38:	d51e      	bpl.n	8006e78 <_scanf_float+0x184>
 8006e3a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006e3e:	6021      	str	r1, [r4, #0]
 8006e40:	3701      	adds	r7, #1
 8006e42:	f1bb 0f00 	cmp.w	fp, #0
 8006e46:	d003      	beq.n	8006e50 <_scanf_float+0x15c>
 8006e48:	3201      	adds	r2, #1
 8006e4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e4e:	60a2      	str	r2, [r4, #8]
 8006e50:	68a3      	ldr	r3, [r4, #8]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	60a3      	str	r3, [r4, #8]
 8006e56:	6923      	ldr	r3, [r4, #16]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	6123      	str	r3, [r4, #16]
 8006e5c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f8c9 3004 	str.w	r3, [r9, #4]
 8006e68:	f340 8082 	ble.w	8006f70 <_scanf_float+0x27c>
 8006e6c:	f8d9 3000 	ldr.w	r3, [r9]
 8006e70:	3301      	adds	r3, #1
 8006e72:	f8c9 3000 	str.w	r3, [r9]
 8006e76:	e762      	b.n	8006d3e <_scanf_float+0x4a>
 8006e78:	eb1a 0105 	adds.w	r1, sl, r5
 8006e7c:	f47f af6d 	bne.w	8006d5a <_scanf_float+0x66>
 8006e80:	6822      	ldr	r2, [r4, #0]
 8006e82:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006e86:	6022      	str	r2, [r4, #0]
 8006e88:	460d      	mov	r5, r1
 8006e8a:	468a      	mov	sl, r1
 8006e8c:	f806 3b01 	strb.w	r3, [r6], #1
 8006e90:	e7de      	b.n	8006e50 <_scanf_float+0x15c>
 8006e92:	6822      	ldr	r2, [r4, #0]
 8006e94:	0610      	lsls	r0, r2, #24
 8006e96:	f57f af60 	bpl.w	8006d5a <_scanf_float+0x66>
 8006e9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e9e:	6022      	str	r2, [r4, #0]
 8006ea0:	e7f4      	b.n	8006e8c <_scanf_float+0x198>
 8006ea2:	f1ba 0f00 	cmp.w	sl, #0
 8006ea6:	d10c      	bne.n	8006ec2 <_scanf_float+0x1ce>
 8006ea8:	b977      	cbnz	r7, 8006ec8 <_scanf_float+0x1d4>
 8006eaa:	6822      	ldr	r2, [r4, #0]
 8006eac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006eb0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006eb4:	d108      	bne.n	8006ec8 <_scanf_float+0x1d4>
 8006eb6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006eba:	6022      	str	r2, [r4, #0]
 8006ebc:	f04f 0a01 	mov.w	sl, #1
 8006ec0:	e7e4      	b.n	8006e8c <_scanf_float+0x198>
 8006ec2:	f1ba 0f02 	cmp.w	sl, #2
 8006ec6:	d050      	beq.n	8006f6a <_scanf_float+0x276>
 8006ec8:	2d01      	cmp	r5, #1
 8006eca:	d002      	beq.n	8006ed2 <_scanf_float+0x1de>
 8006ecc:	2d04      	cmp	r5, #4
 8006ece:	f47f af44 	bne.w	8006d5a <_scanf_float+0x66>
 8006ed2:	3501      	adds	r5, #1
 8006ed4:	b2ed      	uxtb	r5, r5
 8006ed6:	e7d9      	b.n	8006e8c <_scanf_float+0x198>
 8006ed8:	f1ba 0f01 	cmp.w	sl, #1
 8006edc:	f47f af3d 	bne.w	8006d5a <_scanf_float+0x66>
 8006ee0:	f04f 0a02 	mov.w	sl, #2
 8006ee4:	e7d2      	b.n	8006e8c <_scanf_float+0x198>
 8006ee6:	b975      	cbnz	r5, 8006f06 <_scanf_float+0x212>
 8006ee8:	2f00      	cmp	r7, #0
 8006eea:	f47f af37 	bne.w	8006d5c <_scanf_float+0x68>
 8006eee:	6822      	ldr	r2, [r4, #0]
 8006ef0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006ef4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006ef8:	f040 80fc 	bne.w	80070f4 <_scanf_float+0x400>
 8006efc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f00:	6022      	str	r2, [r4, #0]
 8006f02:	2501      	movs	r5, #1
 8006f04:	e7c2      	b.n	8006e8c <_scanf_float+0x198>
 8006f06:	2d03      	cmp	r5, #3
 8006f08:	d0e3      	beq.n	8006ed2 <_scanf_float+0x1de>
 8006f0a:	2d05      	cmp	r5, #5
 8006f0c:	e7df      	b.n	8006ece <_scanf_float+0x1da>
 8006f0e:	2d02      	cmp	r5, #2
 8006f10:	f47f af23 	bne.w	8006d5a <_scanf_float+0x66>
 8006f14:	2503      	movs	r5, #3
 8006f16:	e7b9      	b.n	8006e8c <_scanf_float+0x198>
 8006f18:	2d06      	cmp	r5, #6
 8006f1a:	f47f af1e 	bne.w	8006d5a <_scanf_float+0x66>
 8006f1e:	2507      	movs	r5, #7
 8006f20:	e7b4      	b.n	8006e8c <_scanf_float+0x198>
 8006f22:	6822      	ldr	r2, [r4, #0]
 8006f24:	0591      	lsls	r1, r2, #22
 8006f26:	f57f af18 	bpl.w	8006d5a <_scanf_float+0x66>
 8006f2a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006f2e:	6022      	str	r2, [r4, #0]
 8006f30:	9702      	str	r7, [sp, #8]
 8006f32:	e7ab      	b.n	8006e8c <_scanf_float+0x198>
 8006f34:	6822      	ldr	r2, [r4, #0]
 8006f36:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006f3a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006f3e:	d005      	beq.n	8006f4c <_scanf_float+0x258>
 8006f40:	0550      	lsls	r0, r2, #21
 8006f42:	f57f af0a 	bpl.w	8006d5a <_scanf_float+0x66>
 8006f46:	2f00      	cmp	r7, #0
 8006f48:	f000 80d4 	beq.w	80070f4 <_scanf_float+0x400>
 8006f4c:	0591      	lsls	r1, r2, #22
 8006f4e:	bf58      	it	pl
 8006f50:	9902      	ldrpl	r1, [sp, #8]
 8006f52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f56:	bf58      	it	pl
 8006f58:	1a79      	subpl	r1, r7, r1
 8006f5a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006f5e:	bf58      	it	pl
 8006f60:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006f64:	6022      	str	r2, [r4, #0]
 8006f66:	2700      	movs	r7, #0
 8006f68:	e790      	b.n	8006e8c <_scanf_float+0x198>
 8006f6a:	f04f 0a03 	mov.w	sl, #3
 8006f6e:	e78d      	b.n	8006e8c <_scanf_float+0x198>
 8006f70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006f74:	4649      	mov	r1, r9
 8006f76:	4640      	mov	r0, r8
 8006f78:	4798      	blx	r3
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	f43f aedf 	beq.w	8006d3e <_scanf_float+0x4a>
 8006f80:	e6eb      	b.n	8006d5a <_scanf_float+0x66>
 8006f82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f8a:	464a      	mov	r2, r9
 8006f8c:	4640      	mov	r0, r8
 8006f8e:	4798      	blx	r3
 8006f90:	6923      	ldr	r3, [r4, #16]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	6123      	str	r3, [r4, #16]
 8006f96:	e6eb      	b.n	8006d70 <_scanf_float+0x7c>
 8006f98:	1e6b      	subs	r3, r5, #1
 8006f9a:	2b06      	cmp	r3, #6
 8006f9c:	d824      	bhi.n	8006fe8 <_scanf_float+0x2f4>
 8006f9e:	2d02      	cmp	r5, #2
 8006fa0:	d836      	bhi.n	8007010 <_scanf_float+0x31c>
 8006fa2:	9b01      	ldr	r3, [sp, #4]
 8006fa4:	429e      	cmp	r6, r3
 8006fa6:	f67f aee7 	bls.w	8006d78 <_scanf_float+0x84>
 8006faa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fb2:	464a      	mov	r2, r9
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	4798      	blx	r3
 8006fb8:	6923      	ldr	r3, [r4, #16]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	6123      	str	r3, [r4, #16]
 8006fbe:	e7f0      	b.n	8006fa2 <_scanf_float+0x2ae>
 8006fc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fc4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006fc8:	464a      	mov	r2, r9
 8006fca:	4640      	mov	r0, r8
 8006fcc:	4798      	blx	r3
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	6123      	str	r3, [r4, #16]
 8006fd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fd8:	fa5f fa8a 	uxtb.w	sl, sl
 8006fdc:	f1ba 0f02 	cmp.w	sl, #2
 8006fe0:	d1ee      	bne.n	8006fc0 <_scanf_float+0x2cc>
 8006fe2:	3d03      	subs	r5, #3
 8006fe4:	b2ed      	uxtb	r5, r5
 8006fe6:	1b76      	subs	r6, r6, r5
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	05da      	lsls	r2, r3, #23
 8006fec:	d530      	bpl.n	8007050 <_scanf_float+0x35c>
 8006fee:	055b      	lsls	r3, r3, #21
 8006ff0:	d511      	bpl.n	8007016 <_scanf_float+0x322>
 8006ff2:	9b01      	ldr	r3, [sp, #4]
 8006ff4:	429e      	cmp	r6, r3
 8006ff6:	f67f aebf 	bls.w	8006d78 <_scanf_float+0x84>
 8006ffa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ffe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007002:	464a      	mov	r2, r9
 8007004:	4640      	mov	r0, r8
 8007006:	4798      	blx	r3
 8007008:	6923      	ldr	r3, [r4, #16]
 800700a:	3b01      	subs	r3, #1
 800700c:	6123      	str	r3, [r4, #16]
 800700e:	e7f0      	b.n	8006ff2 <_scanf_float+0x2fe>
 8007010:	46aa      	mov	sl, r5
 8007012:	46b3      	mov	fp, r6
 8007014:	e7de      	b.n	8006fd4 <_scanf_float+0x2e0>
 8007016:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	2965      	cmp	r1, #101	@ 0x65
 800701e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007022:	f106 35ff 	add.w	r5, r6, #4294967295
 8007026:	6123      	str	r3, [r4, #16]
 8007028:	d00c      	beq.n	8007044 <_scanf_float+0x350>
 800702a:	2945      	cmp	r1, #69	@ 0x45
 800702c:	d00a      	beq.n	8007044 <_scanf_float+0x350>
 800702e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007032:	464a      	mov	r2, r9
 8007034:	4640      	mov	r0, r8
 8007036:	4798      	blx	r3
 8007038:	6923      	ldr	r3, [r4, #16]
 800703a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800703e:	3b01      	subs	r3, #1
 8007040:	1eb5      	subs	r5, r6, #2
 8007042:	6123      	str	r3, [r4, #16]
 8007044:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007048:	464a      	mov	r2, r9
 800704a:	4640      	mov	r0, r8
 800704c:	4798      	blx	r3
 800704e:	462e      	mov	r6, r5
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	f012 0210 	ands.w	r2, r2, #16
 8007056:	d001      	beq.n	800705c <_scanf_float+0x368>
 8007058:	2000      	movs	r0, #0
 800705a:	e68e      	b.n	8006d7a <_scanf_float+0x86>
 800705c:	7032      	strb	r2, [r6, #0]
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007068:	d123      	bne.n	80070b2 <_scanf_float+0x3be>
 800706a:	9b02      	ldr	r3, [sp, #8]
 800706c:	429f      	cmp	r7, r3
 800706e:	d00a      	beq.n	8007086 <_scanf_float+0x392>
 8007070:	1bda      	subs	r2, r3, r7
 8007072:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007076:	429e      	cmp	r6, r3
 8007078:	bf28      	it	cs
 800707a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800707e:	491e      	ldr	r1, [pc, #120]	@ (80070f8 <_scanf_float+0x404>)
 8007080:	4630      	mov	r0, r6
 8007082:	f000 f8ff 	bl	8007284 <siprintf>
 8007086:	9901      	ldr	r1, [sp, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	4640      	mov	r0, r8
 800708c:	f002 fb2a 	bl	80096e4 <_strtod_r>
 8007090:	9b03      	ldr	r3, [sp, #12]
 8007092:	6821      	ldr	r1, [r4, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f011 0f02 	tst.w	r1, #2
 800709a:	f103 0204 	add.w	r2, r3, #4
 800709e:	d015      	beq.n	80070cc <_scanf_float+0x3d8>
 80070a0:	9903      	ldr	r1, [sp, #12]
 80070a2:	600a      	str	r2, [r1, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	ed83 0b00 	vstr	d0, [r3]
 80070aa:	68e3      	ldr	r3, [r4, #12]
 80070ac:	3301      	adds	r3, #1
 80070ae:	60e3      	str	r3, [r4, #12]
 80070b0:	e7d2      	b.n	8007058 <_scanf_float+0x364>
 80070b2:	9b04      	ldr	r3, [sp, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0e6      	beq.n	8007086 <_scanf_float+0x392>
 80070b8:	9905      	ldr	r1, [sp, #20]
 80070ba:	230a      	movs	r3, #10
 80070bc:	3101      	adds	r1, #1
 80070be:	4640      	mov	r0, r8
 80070c0:	f002 fb90 	bl	80097e4 <_strtol_r>
 80070c4:	9b04      	ldr	r3, [sp, #16]
 80070c6:	9e05      	ldr	r6, [sp, #20]
 80070c8:	1ac2      	subs	r2, r0, r3
 80070ca:	e7d2      	b.n	8007072 <_scanf_float+0x37e>
 80070cc:	f011 0f04 	tst.w	r1, #4
 80070d0:	9903      	ldr	r1, [sp, #12]
 80070d2:	600a      	str	r2, [r1, #0]
 80070d4:	d1e6      	bne.n	80070a4 <_scanf_float+0x3b0>
 80070d6:	eeb4 0b40 	vcmp.f64	d0, d0
 80070da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070de:	681d      	ldr	r5, [r3, #0]
 80070e0:	d705      	bvc.n	80070ee <_scanf_float+0x3fa>
 80070e2:	4806      	ldr	r0, [pc, #24]	@ (80070fc <_scanf_float+0x408>)
 80070e4:	f000 f9b4 	bl	8007450 <nanf>
 80070e8:	ed85 0a00 	vstr	s0, [r5]
 80070ec:	e7dd      	b.n	80070aa <_scanf_float+0x3b6>
 80070ee:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80070f2:	e7f9      	b.n	80070e8 <_scanf_float+0x3f4>
 80070f4:	2700      	movs	r7, #0
 80070f6:	e635      	b.n	8006d64 <_scanf_float+0x70>
 80070f8:	0800ac8c 	.word	0x0800ac8c
 80070fc:	0800adcd 	.word	0x0800adcd

08007100 <std>:
 8007100:	2300      	movs	r3, #0
 8007102:	b510      	push	{r4, lr}
 8007104:	4604      	mov	r4, r0
 8007106:	e9c0 3300 	strd	r3, r3, [r0]
 800710a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800710e:	6083      	str	r3, [r0, #8]
 8007110:	8181      	strh	r1, [r0, #12]
 8007112:	6643      	str	r3, [r0, #100]	@ 0x64
 8007114:	81c2      	strh	r2, [r0, #14]
 8007116:	6183      	str	r3, [r0, #24]
 8007118:	4619      	mov	r1, r3
 800711a:	2208      	movs	r2, #8
 800711c:	305c      	adds	r0, #92	@ 0x5c
 800711e:	f000 f916 	bl	800734e <memset>
 8007122:	4b0d      	ldr	r3, [pc, #52]	@ (8007158 <std+0x58>)
 8007124:	6263      	str	r3, [r4, #36]	@ 0x24
 8007126:	4b0d      	ldr	r3, [pc, #52]	@ (800715c <std+0x5c>)
 8007128:	62a3      	str	r3, [r4, #40]	@ 0x28
 800712a:	4b0d      	ldr	r3, [pc, #52]	@ (8007160 <std+0x60>)
 800712c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800712e:	4b0d      	ldr	r3, [pc, #52]	@ (8007164 <std+0x64>)
 8007130:	6323      	str	r3, [r4, #48]	@ 0x30
 8007132:	4b0d      	ldr	r3, [pc, #52]	@ (8007168 <std+0x68>)
 8007134:	6224      	str	r4, [r4, #32]
 8007136:	429c      	cmp	r4, r3
 8007138:	d006      	beq.n	8007148 <std+0x48>
 800713a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800713e:	4294      	cmp	r4, r2
 8007140:	d002      	beq.n	8007148 <std+0x48>
 8007142:	33d0      	adds	r3, #208	@ 0xd0
 8007144:	429c      	cmp	r4, r3
 8007146:	d105      	bne.n	8007154 <std+0x54>
 8007148:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800714c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007150:	f000 b97a 	b.w	8007448 <__retarget_lock_init_recursive>
 8007154:	bd10      	pop	{r4, pc}
 8007156:	bf00      	nop
 8007158:	080072c9 	.word	0x080072c9
 800715c:	080072eb 	.word	0x080072eb
 8007160:	08007323 	.word	0x08007323
 8007164:	08007347 	.word	0x08007347
 8007168:	20000428 	.word	0x20000428

0800716c <stdio_exit_handler>:
 800716c:	4a02      	ldr	r2, [pc, #8]	@ (8007178 <stdio_exit_handler+0xc>)
 800716e:	4903      	ldr	r1, [pc, #12]	@ (800717c <stdio_exit_handler+0x10>)
 8007170:	4803      	ldr	r0, [pc, #12]	@ (8007180 <stdio_exit_handler+0x14>)
 8007172:	f000 b869 	b.w	8007248 <_fwalk_sglue>
 8007176:	bf00      	nop
 8007178:	20000018 	.word	0x20000018
 800717c:	08009ba1 	.word	0x08009ba1
 8007180:	20000028 	.word	0x20000028

08007184 <cleanup_stdio>:
 8007184:	6841      	ldr	r1, [r0, #4]
 8007186:	4b0c      	ldr	r3, [pc, #48]	@ (80071b8 <cleanup_stdio+0x34>)
 8007188:	4299      	cmp	r1, r3
 800718a:	b510      	push	{r4, lr}
 800718c:	4604      	mov	r4, r0
 800718e:	d001      	beq.n	8007194 <cleanup_stdio+0x10>
 8007190:	f002 fd06 	bl	8009ba0 <_fflush_r>
 8007194:	68a1      	ldr	r1, [r4, #8]
 8007196:	4b09      	ldr	r3, [pc, #36]	@ (80071bc <cleanup_stdio+0x38>)
 8007198:	4299      	cmp	r1, r3
 800719a:	d002      	beq.n	80071a2 <cleanup_stdio+0x1e>
 800719c:	4620      	mov	r0, r4
 800719e:	f002 fcff 	bl	8009ba0 <_fflush_r>
 80071a2:	68e1      	ldr	r1, [r4, #12]
 80071a4:	4b06      	ldr	r3, [pc, #24]	@ (80071c0 <cleanup_stdio+0x3c>)
 80071a6:	4299      	cmp	r1, r3
 80071a8:	d004      	beq.n	80071b4 <cleanup_stdio+0x30>
 80071aa:	4620      	mov	r0, r4
 80071ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b0:	f002 bcf6 	b.w	8009ba0 <_fflush_r>
 80071b4:	bd10      	pop	{r4, pc}
 80071b6:	bf00      	nop
 80071b8:	20000428 	.word	0x20000428
 80071bc:	20000490 	.word	0x20000490
 80071c0:	200004f8 	.word	0x200004f8

080071c4 <global_stdio_init.part.0>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	4b0b      	ldr	r3, [pc, #44]	@ (80071f4 <global_stdio_init.part.0+0x30>)
 80071c8:	4c0b      	ldr	r4, [pc, #44]	@ (80071f8 <global_stdio_init.part.0+0x34>)
 80071ca:	4a0c      	ldr	r2, [pc, #48]	@ (80071fc <global_stdio_init.part.0+0x38>)
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	4620      	mov	r0, r4
 80071d0:	2200      	movs	r2, #0
 80071d2:	2104      	movs	r1, #4
 80071d4:	f7ff ff94 	bl	8007100 <std>
 80071d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071dc:	2201      	movs	r2, #1
 80071de:	2109      	movs	r1, #9
 80071e0:	f7ff ff8e 	bl	8007100 <std>
 80071e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80071e8:	2202      	movs	r2, #2
 80071ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ee:	2112      	movs	r1, #18
 80071f0:	f7ff bf86 	b.w	8007100 <std>
 80071f4:	20000560 	.word	0x20000560
 80071f8:	20000428 	.word	0x20000428
 80071fc:	0800716d 	.word	0x0800716d

08007200 <__sfp_lock_acquire>:
 8007200:	4801      	ldr	r0, [pc, #4]	@ (8007208 <__sfp_lock_acquire+0x8>)
 8007202:	f000 b922 	b.w	800744a <__retarget_lock_acquire_recursive>
 8007206:	bf00      	nop
 8007208:	20000569 	.word	0x20000569

0800720c <__sfp_lock_release>:
 800720c:	4801      	ldr	r0, [pc, #4]	@ (8007214 <__sfp_lock_release+0x8>)
 800720e:	f000 b91d 	b.w	800744c <__retarget_lock_release_recursive>
 8007212:	bf00      	nop
 8007214:	20000569 	.word	0x20000569

08007218 <__sinit>:
 8007218:	b510      	push	{r4, lr}
 800721a:	4604      	mov	r4, r0
 800721c:	f7ff fff0 	bl	8007200 <__sfp_lock_acquire>
 8007220:	6a23      	ldr	r3, [r4, #32]
 8007222:	b11b      	cbz	r3, 800722c <__sinit+0x14>
 8007224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007228:	f7ff bff0 	b.w	800720c <__sfp_lock_release>
 800722c:	4b04      	ldr	r3, [pc, #16]	@ (8007240 <__sinit+0x28>)
 800722e:	6223      	str	r3, [r4, #32]
 8007230:	4b04      	ldr	r3, [pc, #16]	@ (8007244 <__sinit+0x2c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1f5      	bne.n	8007224 <__sinit+0xc>
 8007238:	f7ff ffc4 	bl	80071c4 <global_stdio_init.part.0>
 800723c:	e7f2      	b.n	8007224 <__sinit+0xc>
 800723e:	bf00      	nop
 8007240:	08007185 	.word	0x08007185
 8007244:	20000560 	.word	0x20000560

08007248 <_fwalk_sglue>:
 8007248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800724c:	4607      	mov	r7, r0
 800724e:	4688      	mov	r8, r1
 8007250:	4614      	mov	r4, r2
 8007252:	2600      	movs	r6, #0
 8007254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007258:	f1b9 0901 	subs.w	r9, r9, #1
 800725c:	d505      	bpl.n	800726a <_fwalk_sglue+0x22>
 800725e:	6824      	ldr	r4, [r4, #0]
 8007260:	2c00      	cmp	r4, #0
 8007262:	d1f7      	bne.n	8007254 <_fwalk_sglue+0xc>
 8007264:	4630      	mov	r0, r6
 8007266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800726a:	89ab      	ldrh	r3, [r5, #12]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d907      	bls.n	8007280 <_fwalk_sglue+0x38>
 8007270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007274:	3301      	adds	r3, #1
 8007276:	d003      	beq.n	8007280 <_fwalk_sglue+0x38>
 8007278:	4629      	mov	r1, r5
 800727a:	4638      	mov	r0, r7
 800727c:	47c0      	blx	r8
 800727e:	4306      	orrs	r6, r0
 8007280:	3568      	adds	r5, #104	@ 0x68
 8007282:	e7e9      	b.n	8007258 <_fwalk_sglue+0x10>

08007284 <siprintf>:
 8007284:	b40e      	push	{r1, r2, r3}
 8007286:	b510      	push	{r4, lr}
 8007288:	b09d      	sub	sp, #116	@ 0x74
 800728a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800728c:	9002      	str	r0, [sp, #8]
 800728e:	9006      	str	r0, [sp, #24]
 8007290:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007294:	480a      	ldr	r0, [pc, #40]	@ (80072c0 <siprintf+0x3c>)
 8007296:	9107      	str	r1, [sp, #28]
 8007298:	9104      	str	r1, [sp, #16]
 800729a:	490a      	ldr	r1, [pc, #40]	@ (80072c4 <siprintf+0x40>)
 800729c:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a0:	9105      	str	r1, [sp, #20]
 80072a2:	2400      	movs	r4, #0
 80072a4:	a902      	add	r1, sp, #8
 80072a6:	6800      	ldr	r0, [r0, #0]
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80072ac:	f002 faf8 	bl	80098a0 <_svfiprintf_r>
 80072b0:	9b02      	ldr	r3, [sp, #8]
 80072b2:	701c      	strb	r4, [r3, #0]
 80072b4:	b01d      	add	sp, #116	@ 0x74
 80072b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ba:	b003      	add	sp, #12
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	20000024 	.word	0x20000024
 80072c4:	ffff0208 	.word	0xffff0208

080072c8 <__sread>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	460c      	mov	r4, r1
 80072cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d0:	f000 f86c 	bl	80073ac <_read_r>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	bfab      	itete	ge
 80072d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80072da:	89a3      	ldrhlt	r3, [r4, #12]
 80072dc:	181b      	addge	r3, r3, r0
 80072de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80072e2:	bfac      	ite	ge
 80072e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80072e6:	81a3      	strhlt	r3, [r4, #12]
 80072e8:	bd10      	pop	{r4, pc}

080072ea <__swrite>:
 80072ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ee:	461f      	mov	r7, r3
 80072f0:	898b      	ldrh	r3, [r1, #12]
 80072f2:	05db      	lsls	r3, r3, #23
 80072f4:	4605      	mov	r5, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	4616      	mov	r6, r2
 80072fa:	d505      	bpl.n	8007308 <__swrite+0x1e>
 80072fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007300:	2302      	movs	r3, #2
 8007302:	2200      	movs	r2, #0
 8007304:	f000 f840 	bl	8007388 <_lseek_r>
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800730e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007312:	81a3      	strh	r3, [r4, #12]
 8007314:	4632      	mov	r2, r6
 8007316:	463b      	mov	r3, r7
 8007318:	4628      	mov	r0, r5
 800731a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800731e:	f000 b857 	b.w	80073d0 <_write_r>

08007322 <__sseek>:
 8007322:	b510      	push	{r4, lr}
 8007324:	460c      	mov	r4, r1
 8007326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732a:	f000 f82d 	bl	8007388 <_lseek_r>
 800732e:	1c43      	adds	r3, r0, #1
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	bf15      	itete	ne
 8007334:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007336:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800733a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800733e:	81a3      	strheq	r3, [r4, #12]
 8007340:	bf18      	it	ne
 8007342:	81a3      	strhne	r3, [r4, #12]
 8007344:	bd10      	pop	{r4, pc}

08007346 <__sclose>:
 8007346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734a:	f000 b80d 	b.w	8007368 <_close_r>

0800734e <memset>:
 800734e:	4402      	add	r2, r0
 8007350:	4603      	mov	r3, r0
 8007352:	4293      	cmp	r3, r2
 8007354:	d100      	bne.n	8007358 <memset+0xa>
 8007356:	4770      	bx	lr
 8007358:	f803 1b01 	strb.w	r1, [r3], #1
 800735c:	e7f9      	b.n	8007352 <memset+0x4>
	...

08007360 <_localeconv_r>:
 8007360:	4800      	ldr	r0, [pc, #0]	@ (8007364 <_localeconv_r+0x4>)
 8007362:	4770      	bx	lr
 8007364:	20000164 	.word	0x20000164

08007368 <_close_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4d06      	ldr	r5, [pc, #24]	@ (8007384 <_close_r+0x1c>)
 800736c:	2300      	movs	r3, #0
 800736e:	4604      	mov	r4, r0
 8007370:	4608      	mov	r0, r1
 8007372:	602b      	str	r3, [r5, #0]
 8007374:	f7fb f8cb 	bl	800250e <_close>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	d102      	bne.n	8007382 <_close_r+0x1a>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	b103      	cbz	r3, 8007382 <_close_r+0x1a>
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	20000564 	.word	0x20000564

08007388 <_lseek_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	4d07      	ldr	r5, [pc, #28]	@ (80073a8 <_lseek_r+0x20>)
 800738c:	4604      	mov	r4, r0
 800738e:	4608      	mov	r0, r1
 8007390:	4611      	mov	r1, r2
 8007392:	2200      	movs	r2, #0
 8007394:	602a      	str	r2, [r5, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	f7fb f8e0 	bl	800255c <_lseek>
 800739c:	1c43      	adds	r3, r0, #1
 800739e:	d102      	bne.n	80073a6 <_lseek_r+0x1e>
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	b103      	cbz	r3, 80073a6 <_lseek_r+0x1e>
 80073a4:	6023      	str	r3, [r4, #0]
 80073a6:	bd38      	pop	{r3, r4, r5, pc}
 80073a8:	20000564 	.word	0x20000564

080073ac <_read_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	4d07      	ldr	r5, [pc, #28]	@ (80073cc <_read_r+0x20>)
 80073b0:	4604      	mov	r4, r0
 80073b2:	4608      	mov	r0, r1
 80073b4:	4611      	mov	r1, r2
 80073b6:	2200      	movs	r2, #0
 80073b8:	602a      	str	r2, [r5, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	f7fb f86e 	bl	800249c <_read>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d102      	bne.n	80073ca <_read_r+0x1e>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	b103      	cbz	r3, 80073ca <_read_r+0x1e>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	20000564 	.word	0x20000564

080073d0 <_write_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4d07      	ldr	r5, [pc, #28]	@ (80073f0 <_write_r+0x20>)
 80073d4:	4604      	mov	r4, r0
 80073d6:	4608      	mov	r0, r1
 80073d8:	4611      	mov	r1, r2
 80073da:	2200      	movs	r2, #0
 80073dc:	602a      	str	r2, [r5, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	f7fb f879 	bl	80024d6 <_write>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	d102      	bne.n	80073ee <_write_r+0x1e>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	b103      	cbz	r3, 80073ee <_write_r+0x1e>
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	bd38      	pop	{r3, r4, r5, pc}
 80073f0:	20000564 	.word	0x20000564

080073f4 <__errno>:
 80073f4:	4b01      	ldr	r3, [pc, #4]	@ (80073fc <__errno+0x8>)
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000024 	.word	0x20000024

08007400 <__libc_init_array>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	4d0d      	ldr	r5, [pc, #52]	@ (8007438 <__libc_init_array+0x38>)
 8007404:	4c0d      	ldr	r4, [pc, #52]	@ (800743c <__libc_init_array+0x3c>)
 8007406:	1b64      	subs	r4, r4, r5
 8007408:	10a4      	asrs	r4, r4, #2
 800740a:	2600      	movs	r6, #0
 800740c:	42a6      	cmp	r6, r4
 800740e:	d109      	bne.n	8007424 <__libc_init_array+0x24>
 8007410:	4d0b      	ldr	r5, [pc, #44]	@ (8007440 <__libc_init_array+0x40>)
 8007412:	4c0c      	ldr	r4, [pc, #48]	@ (8007444 <__libc_init_array+0x44>)
 8007414:	f003 fab6 	bl	800a984 <_init>
 8007418:	1b64      	subs	r4, r4, r5
 800741a:	10a4      	asrs	r4, r4, #2
 800741c:	2600      	movs	r6, #0
 800741e:	42a6      	cmp	r6, r4
 8007420:	d105      	bne.n	800742e <__libc_init_array+0x2e>
 8007422:	bd70      	pop	{r4, r5, r6, pc}
 8007424:	f855 3b04 	ldr.w	r3, [r5], #4
 8007428:	4798      	blx	r3
 800742a:	3601      	adds	r6, #1
 800742c:	e7ee      	b.n	800740c <__libc_init_array+0xc>
 800742e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007432:	4798      	blx	r3
 8007434:	3601      	adds	r6, #1
 8007436:	e7f2      	b.n	800741e <__libc_init_array+0x1e>
 8007438:	0800b08c 	.word	0x0800b08c
 800743c:	0800b08c 	.word	0x0800b08c
 8007440:	0800b08c 	.word	0x0800b08c
 8007444:	0800b090 	.word	0x0800b090

08007448 <__retarget_lock_init_recursive>:
 8007448:	4770      	bx	lr

0800744a <__retarget_lock_acquire_recursive>:
 800744a:	4770      	bx	lr

0800744c <__retarget_lock_release_recursive>:
 800744c:	4770      	bx	lr
	...

08007450 <nanf>:
 8007450:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007458 <nanf+0x8>
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	7fc00000 	.word	0x7fc00000

0800745c <quorem>:
 800745c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007460:	6903      	ldr	r3, [r0, #16]
 8007462:	690c      	ldr	r4, [r1, #16]
 8007464:	42a3      	cmp	r3, r4
 8007466:	4607      	mov	r7, r0
 8007468:	db7e      	blt.n	8007568 <quorem+0x10c>
 800746a:	3c01      	subs	r4, #1
 800746c:	f101 0814 	add.w	r8, r1, #20
 8007470:	00a3      	lsls	r3, r4, #2
 8007472:	f100 0514 	add.w	r5, r0, #20
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007482:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007486:	3301      	adds	r3, #1
 8007488:	429a      	cmp	r2, r3
 800748a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800748e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007492:	d32e      	bcc.n	80074f2 <quorem+0x96>
 8007494:	f04f 0a00 	mov.w	sl, #0
 8007498:	46c4      	mov	ip, r8
 800749a:	46ae      	mov	lr, r5
 800749c:	46d3      	mov	fp, sl
 800749e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80074a2:	b298      	uxth	r0, r3
 80074a4:	fb06 a000 	mla	r0, r6, r0, sl
 80074a8:	0c02      	lsrs	r2, r0, #16
 80074aa:	0c1b      	lsrs	r3, r3, #16
 80074ac:	fb06 2303 	mla	r3, r6, r3, r2
 80074b0:	f8de 2000 	ldr.w	r2, [lr]
 80074b4:	b280      	uxth	r0, r0
 80074b6:	b292      	uxth	r2, r2
 80074b8:	1a12      	subs	r2, r2, r0
 80074ba:	445a      	add	r2, fp
 80074bc:	f8de 0000 	ldr.w	r0, [lr]
 80074c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80074ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80074ce:	b292      	uxth	r2, r2
 80074d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80074d4:	45e1      	cmp	r9, ip
 80074d6:	f84e 2b04 	str.w	r2, [lr], #4
 80074da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80074de:	d2de      	bcs.n	800749e <quorem+0x42>
 80074e0:	9b00      	ldr	r3, [sp, #0]
 80074e2:	58eb      	ldr	r3, [r5, r3]
 80074e4:	b92b      	cbnz	r3, 80074f2 <quorem+0x96>
 80074e6:	9b01      	ldr	r3, [sp, #4]
 80074e8:	3b04      	subs	r3, #4
 80074ea:	429d      	cmp	r5, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	d32f      	bcc.n	8007550 <quorem+0xf4>
 80074f0:	613c      	str	r4, [r7, #16]
 80074f2:	4638      	mov	r0, r7
 80074f4:	f001 f956 	bl	80087a4 <__mcmp>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	db25      	blt.n	8007548 <quorem+0xec>
 80074fc:	4629      	mov	r1, r5
 80074fe:	2000      	movs	r0, #0
 8007500:	f858 2b04 	ldr.w	r2, [r8], #4
 8007504:	f8d1 c000 	ldr.w	ip, [r1]
 8007508:	fa1f fe82 	uxth.w	lr, r2
 800750c:	fa1f f38c 	uxth.w	r3, ip
 8007510:	eba3 030e 	sub.w	r3, r3, lr
 8007514:	4403      	add	r3, r0
 8007516:	0c12      	lsrs	r2, r2, #16
 8007518:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800751c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007520:	b29b      	uxth	r3, r3
 8007522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007526:	45c1      	cmp	r9, r8
 8007528:	f841 3b04 	str.w	r3, [r1], #4
 800752c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007530:	d2e6      	bcs.n	8007500 <quorem+0xa4>
 8007532:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800753a:	b922      	cbnz	r2, 8007546 <quorem+0xea>
 800753c:	3b04      	subs	r3, #4
 800753e:	429d      	cmp	r5, r3
 8007540:	461a      	mov	r2, r3
 8007542:	d30b      	bcc.n	800755c <quorem+0x100>
 8007544:	613c      	str	r4, [r7, #16]
 8007546:	3601      	adds	r6, #1
 8007548:	4630      	mov	r0, r6
 800754a:	b003      	add	sp, #12
 800754c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007550:	6812      	ldr	r2, [r2, #0]
 8007552:	3b04      	subs	r3, #4
 8007554:	2a00      	cmp	r2, #0
 8007556:	d1cb      	bne.n	80074f0 <quorem+0x94>
 8007558:	3c01      	subs	r4, #1
 800755a:	e7c6      	b.n	80074ea <quorem+0x8e>
 800755c:	6812      	ldr	r2, [r2, #0]
 800755e:	3b04      	subs	r3, #4
 8007560:	2a00      	cmp	r2, #0
 8007562:	d1ef      	bne.n	8007544 <quorem+0xe8>
 8007564:	3c01      	subs	r4, #1
 8007566:	e7ea      	b.n	800753e <quorem+0xe2>
 8007568:	2000      	movs	r0, #0
 800756a:	e7ee      	b.n	800754a <quorem+0xee>
 800756c:	0000      	movs	r0, r0
	...

08007570 <_dtoa_r>:
 8007570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007574:	ed2d 8b02 	vpush	{d8}
 8007578:	69c7      	ldr	r7, [r0, #28]
 800757a:	b091      	sub	sp, #68	@ 0x44
 800757c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007580:	ec55 4b10 	vmov	r4, r5, d0
 8007584:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007586:	9107      	str	r1, [sp, #28]
 8007588:	4681      	mov	r9, r0
 800758a:	9209      	str	r2, [sp, #36]	@ 0x24
 800758c:	930d      	str	r3, [sp, #52]	@ 0x34
 800758e:	b97f      	cbnz	r7, 80075b0 <_dtoa_r+0x40>
 8007590:	2010      	movs	r0, #16
 8007592:	f000 fd95 	bl	80080c0 <malloc>
 8007596:	4602      	mov	r2, r0
 8007598:	f8c9 001c 	str.w	r0, [r9, #28]
 800759c:	b920      	cbnz	r0, 80075a8 <_dtoa_r+0x38>
 800759e:	4ba0      	ldr	r3, [pc, #640]	@ (8007820 <_dtoa_r+0x2b0>)
 80075a0:	21ef      	movs	r1, #239	@ 0xef
 80075a2:	48a0      	ldr	r0, [pc, #640]	@ (8007824 <_dtoa_r+0x2b4>)
 80075a4:	f002 fb78 	bl	8009c98 <__assert_func>
 80075a8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80075ac:	6007      	str	r7, [r0, #0]
 80075ae:	60c7      	str	r7, [r0, #12]
 80075b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80075b4:	6819      	ldr	r1, [r3, #0]
 80075b6:	b159      	cbz	r1, 80075d0 <_dtoa_r+0x60>
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	604a      	str	r2, [r1, #4]
 80075bc:	2301      	movs	r3, #1
 80075be:	4093      	lsls	r3, r2
 80075c0:	608b      	str	r3, [r1, #8]
 80075c2:	4648      	mov	r0, r9
 80075c4:	f000 fe72 	bl	80082ac <_Bfree>
 80075c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	1e2b      	subs	r3, r5, #0
 80075d2:	bfbb      	ittet	lt
 80075d4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80075d8:	9303      	strlt	r3, [sp, #12]
 80075da:	2300      	movge	r3, #0
 80075dc:	2201      	movlt	r2, #1
 80075de:	bfac      	ite	ge
 80075e0:	6033      	strge	r3, [r6, #0]
 80075e2:	6032      	strlt	r2, [r6, #0]
 80075e4:	4b90      	ldr	r3, [pc, #576]	@ (8007828 <_dtoa_r+0x2b8>)
 80075e6:	9e03      	ldr	r6, [sp, #12]
 80075e8:	43b3      	bics	r3, r6
 80075ea:	d110      	bne.n	800760e <_dtoa_r+0x9e>
 80075ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80075ee:	f242 730f 	movw	r3, #9999	@ 0x270f
 80075f2:	6013      	str	r3, [r2, #0]
 80075f4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80075f8:	4323      	orrs	r3, r4
 80075fa:	f000 84e6 	beq.w	8007fca <_dtoa_r+0xa5a>
 80075fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007600:	4f8a      	ldr	r7, [pc, #552]	@ (800782c <_dtoa_r+0x2bc>)
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 84e8 	beq.w	8007fd8 <_dtoa_r+0xa68>
 8007608:	1cfb      	adds	r3, r7, #3
 800760a:	f000 bce3 	b.w	8007fd4 <_dtoa_r+0xa64>
 800760e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007612:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761a:	d10a      	bne.n	8007632 <_dtoa_r+0xc2>
 800761c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800761e:	2301      	movs	r3, #1
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007624:	b113      	cbz	r3, 800762c <_dtoa_r+0xbc>
 8007626:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007628:	4b81      	ldr	r3, [pc, #516]	@ (8007830 <_dtoa_r+0x2c0>)
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	4f81      	ldr	r7, [pc, #516]	@ (8007834 <_dtoa_r+0x2c4>)
 800762e:	f000 bcd3 	b.w	8007fd8 <_dtoa_r+0xa68>
 8007632:	aa0e      	add	r2, sp, #56	@ 0x38
 8007634:	a90f      	add	r1, sp, #60	@ 0x3c
 8007636:	4648      	mov	r0, r9
 8007638:	eeb0 0b48 	vmov.f64	d0, d8
 800763c:	f001 f9d2 	bl	80089e4 <__d2b>
 8007640:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007644:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007646:	9001      	str	r0, [sp, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d045      	beq.n	80076d8 <_dtoa_r+0x168>
 800764c:	eeb0 7b48 	vmov.f64	d7, d8
 8007650:	ee18 1a90 	vmov	r1, s17
 8007654:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007658:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800765c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007660:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007664:	2500      	movs	r5, #0
 8007666:	ee07 1a90 	vmov	s15, r1
 800766a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800766e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007808 <_dtoa_r+0x298>
 8007672:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007676:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007810 <_dtoa_r+0x2a0>
 800767a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800767e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007818 <_dtoa_r+0x2a8>
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800768a:	eeb0 7b46 	vmov.f64	d7, d6
 800768e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007692:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007696:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800769a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769e:	ee16 8a90 	vmov	r8, s13
 80076a2:	d508      	bpl.n	80076b6 <_dtoa_r+0x146>
 80076a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80076a8:	eeb4 6b47 	vcmp.f64	d6, d7
 80076ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b0:	bf18      	it	ne
 80076b2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80076b6:	f1b8 0f16 	cmp.w	r8, #22
 80076ba:	d82b      	bhi.n	8007714 <_dtoa_r+0x1a4>
 80076bc:	495e      	ldr	r1, [pc, #376]	@ (8007838 <_dtoa_r+0x2c8>)
 80076be:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80076c2:	ed91 7b00 	vldr	d7, [r1]
 80076c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80076ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ce:	d501      	bpl.n	80076d4 <_dtoa_r+0x164>
 80076d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80076d4:	2100      	movs	r1, #0
 80076d6:	e01e      	b.n	8007716 <_dtoa_r+0x1a6>
 80076d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076da:	4413      	add	r3, r2
 80076dc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80076e0:	2920      	cmp	r1, #32
 80076e2:	bfc1      	itttt	gt
 80076e4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80076e8:	408e      	lslgt	r6, r1
 80076ea:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80076ee:	fa24 f101 	lsrgt.w	r1, r4, r1
 80076f2:	bfd6      	itet	le
 80076f4:	f1c1 0120 	rsble	r1, r1, #32
 80076f8:	4331      	orrgt	r1, r6
 80076fa:	fa04 f101 	lslle.w	r1, r4, r1
 80076fe:	ee07 1a90 	vmov	s15, r1
 8007702:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007706:	3b01      	subs	r3, #1
 8007708:	ee17 1a90 	vmov	r1, s15
 800770c:	2501      	movs	r5, #1
 800770e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007712:	e7a8      	b.n	8007666 <_dtoa_r+0xf6>
 8007714:	2101      	movs	r1, #1
 8007716:	1ad2      	subs	r2, r2, r3
 8007718:	1e53      	subs	r3, r2, #1
 800771a:	9306      	str	r3, [sp, #24]
 800771c:	bf45      	ittet	mi
 800771e:	f1c2 0301 	rsbmi	r3, r2, #1
 8007722:	9304      	strmi	r3, [sp, #16]
 8007724:	2300      	movpl	r3, #0
 8007726:	2300      	movmi	r3, #0
 8007728:	bf4c      	ite	mi
 800772a:	9306      	strmi	r3, [sp, #24]
 800772c:	9304      	strpl	r3, [sp, #16]
 800772e:	f1b8 0f00 	cmp.w	r8, #0
 8007732:	910c      	str	r1, [sp, #48]	@ 0x30
 8007734:	db18      	blt.n	8007768 <_dtoa_r+0x1f8>
 8007736:	9b06      	ldr	r3, [sp, #24]
 8007738:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800773c:	4443      	add	r3, r8
 800773e:	9306      	str	r3, [sp, #24]
 8007740:	2300      	movs	r3, #0
 8007742:	9a07      	ldr	r2, [sp, #28]
 8007744:	2a09      	cmp	r2, #9
 8007746:	d845      	bhi.n	80077d4 <_dtoa_r+0x264>
 8007748:	2a05      	cmp	r2, #5
 800774a:	bfc4      	itt	gt
 800774c:	3a04      	subgt	r2, #4
 800774e:	9207      	strgt	r2, [sp, #28]
 8007750:	9a07      	ldr	r2, [sp, #28]
 8007752:	f1a2 0202 	sub.w	r2, r2, #2
 8007756:	bfcc      	ite	gt
 8007758:	2400      	movgt	r4, #0
 800775a:	2401      	movle	r4, #1
 800775c:	2a03      	cmp	r2, #3
 800775e:	d844      	bhi.n	80077ea <_dtoa_r+0x27a>
 8007760:	e8df f002 	tbb	[pc, r2]
 8007764:	0b173634 	.word	0x0b173634
 8007768:	9b04      	ldr	r3, [sp, #16]
 800776a:	2200      	movs	r2, #0
 800776c:	eba3 0308 	sub.w	r3, r3, r8
 8007770:	9304      	str	r3, [sp, #16]
 8007772:	920a      	str	r2, [sp, #40]	@ 0x28
 8007774:	f1c8 0300 	rsb	r3, r8, #0
 8007778:	e7e3      	b.n	8007742 <_dtoa_r+0x1d2>
 800777a:	2201      	movs	r2, #1
 800777c:	9208      	str	r2, [sp, #32]
 800777e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007780:	eb08 0b02 	add.w	fp, r8, r2
 8007784:	f10b 0a01 	add.w	sl, fp, #1
 8007788:	4652      	mov	r2, sl
 800778a:	2a01      	cmp	r2, #1
 800778c:	bfb8      	it	lt
 800778e:	2201      	movlt	r2, #1
 8007790:	e006      	b.n	80077a0 <_dtoa_r+0x230>
 8007792:	2201      	movs	r2, #1
 8007794:	9208      	str	r2, [sp, #32]
 8007796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007798:	2a00      	cmp	r2, #0
 800779a:	dd29      	ble.n	80077f0 <_dtoa_r+0x280>
 800779c:	4693      	mov	fp, r2
 800779e:	4692      	mov	sl, r2
 80077a0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80077a4:	2100      	movs	r1, #0
 80077a6:	2004      	movs	r0, #4
 80077a8:	f100 0614 	add.w	r6, r0, #20
 80077ac:	4296      	cmp	r6, r2
 80077ae:	d926      	bls.n	80077fe <_dtoa_r+0x28e>
 80077b0:	6079      	str	r1, [r7, #4]
 80077b2:	4648      	mov	r0, r9
 80077b4:	9305      	str	r3, [sp, #20]
 80077b6:	f000 fd39 	bl	800822c <_Balloc>
 80077ba:	9b05      	ldr	r3, [sp, #20]
 80077bc:	4607      	mov	r7, r0
 80077be:	2800      	cmp	r0, #0
 80077c0:	d13e      	bne.n	8007840 <_dtoa_r+0x2d0>
 80077c2:	4b1e      	ldr	r3, [pc, #120]	@ (800783c <_dtoa_r+0x2cc>)
 80077c4:	4602      	mov	r2, r0
 80077c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80077ca:	e6ea      	b.n	80075a2 <_dtoa_r+0x32>
 80077cc:	2200      	movs	r2, #0
 80077ce:	e7e1      	b.n	8007794 <_dtoa_r+0x224>
 80077d0:	2200      	movs	r2, #0
 80077d2:	e7d3      	b.n	800777c <_dtoa_r+0x20c>
 80077d4:	2401      	movs	r4, #1
 80077d6:	2200      	movs	r2, #0
 80077d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80077dc:	f04f 3bff 	mov.w	fp, #4294967295
 80077e0:	2100      	movs	r1, #0
 80077e2:	46da      	mov	sl, fp
 80077e4:	2212      	movs	r2, #18
 80077e6:	9109      	str	r1, [sp, #36]	@ 0x24
 80077e8:	e7da      	b.n	80077a0 <_dtoa_r+0x230>
 80077ea:	2201      	movs	r2, #1
 80077ec:	9208      	str	r2, [sp, #32]
 80077ee:	e7f5      	b.n	80077dc <_dtoa_r+0x26c>
 80077f0:	f04f 0b01 	mov.w	fp, #1
 80077f4:	46da      	mov	sl, fp
 80077f6:	465a      	mov	r2, fp
 80077f8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80077fc:	e7d0      	b.n	80077a0 <_dtoa_r+0x230>
 80077fe:	3101      	adds	r1, #1
 8007800:	0040      	lsls	r0, r0, #1
 8007802:	e7d1      	b.n	80077a8 <_dtoa_r+0x238>
 8007804:	f3af 8000 	nop.w
 8007808:	636f4361 	.word	0x636f4361
 800780c:	3fd287a7 	.word	0x3fd287a7
 8007810:	8b60c8b3 	.word	0x8b60c8b3
 8007814:	3fc68a28 	.word	0x3fc68a28
 8007818:	509f79fb 	.word	0x509f79fb
 800781c:	3fd34413 	.word	0x3fd34413
 8007820:	0800ac9e 	.word	0x0800ac9e
 8007824:	0800acb5 	.word	0x0800acb5
 8007828:	7ff00000 	.word	0x7ff00000
 800782c:	0800ac9a 	.word	0x0800ac9a
 8007830:	0800ac69 	.word	0x0800ac69
 8007834:	0800ac68 	.word	0x0800ac68
 8007838:	0800ae68 	.word	0x0800ae68
 800783c:	0800ad0d 	.word	0x0800ad0d
 8007840:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007844:	f1ba 0f0e 	cmp.w	sl, #14
 8007848:	6010      	str	r0, [r2, #0]
 800784a:	d86e      	bhi.n	800792a <_dtoa_r+0x3ba>
 800784c:	2c00      	cmp	r4, #0
 800784e:	d06c      	beq.n	800792a <_dtoa_r+0x3ba>
 8007850:	f1b8 0f00 	cmp.w	r8, #0
 8007854:	f340 80b4 	ble.w	80079c0 <_dtoa_r+0x450>
 8007858:	4ac8      	ldr	r2, [pc, #800]	@ (8007b7c <_dtoa_r+0x60c>)
 800785a:	f008 010f 	and.w	r1, r8, #15
 800785e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007862:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007866:	ed92 7b00 	vldr	d7, [r2]
 800786a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800786e:	f000 809b 	beq.w	80079a8 <_dtoa_r+0x438>
 8007872:	4ac3      	ldr	r2, [pc, #780]	@ (8007b80 <_dtoa_r+0x610>)
 8007874:	ed92 6b08 	vldr	d6, [r2, #32]
 8007878:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800787c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007880:	f001 010f 	and.w	r1, r1, #15
 8007884:	2203      	movs	r2, #3
 8007886:	48be      	ldr	r0, [pc, #760]	@ (8007b80 <_dtoa_r+0x610>)
 8007888:	2900      	cmp	r1, #0
 800788a:	f040 808f 	bne.w	80079ac <_dtoa_r+0x43c>
 800788e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007892:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007896:	ed8d 7b02 	vstr	d7, [sp, #8]
 800789a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800789c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80078a0:	2900      	cmp	r1, #0
 80078a2:	f000 80b3 	beq.w	8007a0c <_dtoa_r+0x49c>
 80078a6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80078aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80078ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b2:	f140 80ab 	bpl.w	8007a0c <_dtoa_r+0x49c>
 80078b6:	f1ba 0f00 	cmp.w	sl, #0
 80078ba:	f000 80a7 	beq.w	8007a0c <_dtoa_r+0x49c>
 80078be:	f1bb 0f00 	cmp.w	fp, #0
 80078c2:	dd30      	ble.n	8007926 <_dtoa_r+0x3b6>
 80078c4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80078c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80078cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80078d0:	f108 31ff 	add.w	r1, r8, #4294967295
 80078d4:	9105      	str	r1, [sp, #20]
 80078d6:	3201      	adds	r2, #1
 80078d8:	465c      	mov	r4, fp
 80078da:	ed9d 6b02 	vldr	d6, [sp, #8]
 80078de:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80078e2:	ee07 2a90 	vmov	s15, r2
 80078e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80078ea:	eea7 5b06 	vfma.f64	d5, d7, d6
 80078ee:	ee15 2a90 	vmov	r2, s11
 80078f2:	ec51 0b15 	vmov	r0, r1, d5
 80078f6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80078fa:	2c00      	cmp	r4, #0
 80078fc:	f040 808a 	bne.w	8007a14 <_dtoa_r+0x4a4>
 8007900:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007904:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007908:	ec41 0b17 	vmov	d7, r0, r1
 800790c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007914:	f300 826a 	bgt.w	8007dec <_dtoa_r+0x87c>
 8007918:	eeb1 7b47 	vneg.f64	d7, d7
 800791c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007924:	d423      	bmi.n	800796e <_dtoa_r+0x3fe>
 8007926:	ed8d 8b02 	vstr	d8, [sp, #8]
 800792a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800792c:	2a00      	cmp	r2, #0
 800792e:	f2c0 8129 	blt.w	8007b84 <_dtoa_r+0x614>
 8007932:	f1b8 0f0e 	cmp.w	r8, #14
 8007936:	f300 8125 	bgt.w	8007b84 <_dtoa_r+0x614>
 800793a:	4b90      	ldr	r3, [pc, #576]	@ (8007b7c <_dtoa_r+0x60c>)
 800793c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007940:	ed93 6b00 	vldr	d6, [r3]
 8007944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007946:	2b00      	cmp	r3, #0
 8007948:	f280 80c8 	bge.w	8007adc <_dtoa_r+0x56c>
 800794c:	f1ba 0f00 	cmp.w	sl, #0
 8007950:	f300 80c4 	bgt.w	8007adc <_dtoa_r+0x56c>
 8007954:	d10b      	bne.n	800796e <_dtoa_r+0x3fe>
 8007956:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800795a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800795e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007962:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796a:	f2c0 823c 	blt.w	8007de6 <_dtoa_r+0x876>
 800796e:	2400      	movs	r4, #0
 8007970:	4625      	mov	r5, r4
 8007972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007974:	43db      	mvns	r3, r3
 8007976:	9305      	str	r3, [sp, #20]
 8007978:	463e      	mov	r6, r7
 800797a:	f04f 0800 	mov.w	r8, #0
 800797e:	4621      	mov	r1, r4
 8007980:	4648      	mov	r0, r9
 8007982:	f000 fc93 	bl	80082ac <_Bfree>
 8007986:	2d00      	cmp	r5, #0
 8007988:	f000 80a2 	beq.w	8007ad0 <_dtoa_r+0x560>
 800798c:	f1b8 0f00 	cmp.w	r8, #0
 8007990:	d005      	beq.n	800799e <_dtoa_r+0x42e>
 8007992:	45a8      	cmp	r8, r5
 8007994:	d003      	beq.n	800799e <_dtoa_r+0x42e>
 8007996:	4641      	mov	r1, r8
 8007998:	4648      	mov	r0, r9
 800799a:	f000 fc87 	bl	80082ac <_Bfree>
 800799e:	4629      	mov	r1, r5
 80079a0:	4648      	mov	r0, r9
 80079a2:	f000 fc83 	bl	80082ac <_Bfree>
 80079a6:	e093      	b.n	8007ad0 <_dtoa_r+0x560>
 80079a8:	2202      	movs	r2, #2
 80079aa:	e76c      	b.n	8007886 <_dtoa_r+0x316>
 80079ac:	07cc      	lsls	r4, r1, #31
 80079ae:	d504      	bpl.n	80079ba <_dtoa_r+0x44a>
 80079b0:	ed90 6b00 	vldr	d6, [r0]
 80079b4:	3201      	adds	r2, #1
 80079b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80079ba:	1049      	asrs	r1, r1, #1
 80079bc:	3008      	adds	r0, #8
 80079be:	e763      	b.n	8007888 <_dtoa_r+0x318>
 80079c0:	d022      	beq.n	8007a08 <_dtoa_r+0x498>
 80079c2:	f1c8 0100 	rsb	r1, r8, #0
 80079c6:	4a6d      	ldr	r2, [pc, #436]	@ (8007b7c <_dtoa_r+0x60c>)
 80079c8:	f001 000f 	and.w	r0, r1, #15
 80079cc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80079d0:	ed92 7b00 	vldr	d7, [r2]
 80079d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80079d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80079dc:	4868      	ldr	r0, [pc, #416]	@ (8007b80 <_dtoa_r+0x610>)
 80079de:	1109      	asrs	r1, r1, #4
 80079e0:	2400      	movs	r4, #0
 80079e2:	2202      	movs	r2, #2
 80079e4:	b929      	cbnz	r1, 80079f2 <_dtoa_r+0x482>
 80079e6:	2c00      	cmp	r4, #0
 80079e8:	f43f af57 	beq.w	800789a <_dtoa_r+0x32a>
 80079ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80079f0:	e753      	b.n	800789a <_dtoa_r+0x32a>
 80079f2:	07ce      	lsls	r6, r1, #31
 80079f4:	d505      	bpl.n	8007a02 <_dtoa_r+0x492>
 80079f6:	ed90 6b00 	vldr	d6, [r0]
 80079fa:	3201      	adds	r2, #1
 80079fc:	2401      	movs	r4, #1
 80079fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a02:	1049      	asrs	r1, r1, #1
 8007a04:	3008      	adds	r0, #8
 8007a06:	e7ed      	b.n	80079e4 <_dtoa_r+0x474>
 8007a08:	2202      	movs	r2, #2
 8007a0a:	e746      	b.n	800789a <_dtoa_r+0x32a>
 8007a0c:	f8cd 8014 	str.w	r8, [sp, #20]
 8007a10:	4654      	mov	r4, sl
 8007a12:	e762      	b.n	80078da <_dtoa_r+0x36a>
 8007a14:	4a59      	ldr	r2, [pc, #356]	@ (8007b7c <_dtoa_r+0x60c>)
 8007a16:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007a1a:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007a1e:	9a08      	ldr	r2, [sp, #32]
 8007a20:	ec41 0b17 	vmov	d7, r0, r1
 8007a24:	443c      	add	r4, r7
 8007a26:	b34a      	cbz	r2, 8007a7c <_dtoa_r+0x50c>
 8007a28:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007a2c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007a30:	463e      	mov	r6, r7
 8007a32:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007a36:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007a3a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007a3e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007a42:	ee14 2a90 	vmov	r2, s9
 8007a46:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007a4a:	3230      	adds	r2, #48	@ 0x30
 8007a4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007a50:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a58:	f806 2b01 	strb.w	r2, [r6], #1
 8007a5c:	d438      	bmi.n	8007ad0 <_dtoa_r+0x560>
 8007a5e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007a62:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a6a:	d46e      	bmi.n	8007b4a <_dtoa_r+0x5da>
 8007a6c:	42a6      	cmp	r6, r4
 8007a6e:	f43f af5a 	beq.w	8007926 <_dtoa_r+0x3b6>
 8007a72:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007a76:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007a7a:	e7e0      	b.n	8007a3e <_dtoa_r+0x4ce>
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	463e      	mov	r6, r7
 8007a80:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007a84:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007a88:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007a8c:	ee14 2a90 	vmov	r2, s9
 8007a90:	3230      	adds	r2, #48	@ 0x30
 8007a92:	f806 2b01 	strb.w	r2, [r6], #1
 8007a96:	42a6      	cmp	r6, r4
 8007a98:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007a9c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007aa0:	d119      	bne.n	8007ad6 <_dtoa_r+0x566>
 8007aa2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007aa6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007aaa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab2:	dc4a      	bgt.n	8007b4a <_dtoa_r+0x5da>
 8007ab4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007ab8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac0:	f57f af31 	bpl.w	8007926 <_dtoa_r+0x3b6>
 8007ac4:	460e      	mov	r6, r1
 8007ac6:	3901      	subs	r1, #1
 8007ac8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007acc:	2b30      	cmp	r3, #48	@ 0x30
 8007ace:	d0f9      	beq.n	8007ac4 <_dtoa_r+0x554>
 8007ad0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007ad4:	e027      	b.n	8007b26 <_dtoa_r+0x5b6>
 8007ad6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007ada:	e7d5      	b.n	8007a88 <_dtoa_r+0x518>
 8007adc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ae0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007ae4:	463e      	mov	r6, r7
 8007ae6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007aea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007aee:	ee15 3a10 	vmov	r3, s10
 8007af2:	3330      	adds	r3, #48	@ 0x30
 8007af4:	f806 3b01 	strb.w	r3, [r6], #1
 8007af8:	1bf3      	subs	r3, r6, r7
 8007afa:	459a      	cmp	sl, r3
 8007afc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007b00:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007b04:	d132      	bne.n	8007b6c <_dtoa_r+0x5fc>
 8007b06:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007b0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b12:	dc18      	bgt.n	8007b46 <_dtoa_r+0x5d6>
 8007b14:	eeb4 7b46 	vcmp.f64	d7, d6
 8007b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1c:	d103      	bne.n	8007b26 <_dtoa_r+0x5b6>
 8007b1e:	ee15 3a10 	vmov	r3, s10
 8007b22:	07db      	lsls	r3, r3, #31
 8007b24:	d40f      	bmi.n	8007b46 <_dtoa_r+0x5d6>
 8007b26:	9901      	ldr	r1, [sp, #4]
 8007b28:	4648      	mov	r0, r9
 8007b2a:	f000 fbbf 	bl	80082ac <_Bfree>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b32:	7033      	strb	r3, [r6, #0]
 8007b34:	f108 0301 	add.w	r3, r8, #1
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 824b 	beq.w	8007fd8 <_dtoa_r+0xa68>
 8007b42:	601e      	str	r6, [r3, #0]
 8007b44:	e248      	b.n	8007fd8 <_dtoa_r+0xa68>
 8007b46:	f8cd 8014 	str.w	r8, [sp, #20]
 8007b4a:	4633      	mov	r3, r6
 8007b4c:	461e      	mov	r6, r3
 8007b4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b52:	2a39      	cmp	r2, #57	@ 0x39
 8007b54:	d106      	bne.n	8007b64 <_dtoa_r+0x5f4>
 8007b56:	429f      	cmp	r7, r3
 8007b58:	d1f8      	bne.n	8007b4c <_dtoa_r+0x5dc>
 8007b5a:	9a05      	ldr	r2, [sp, #20]
 8007b5c:	3201      	adds	r2, #1
 8007b5e:	9205      	str	r2, [sp, #20]
 8007b60:	2230      	movs	r2, #48	@ 0x30
 8007b62:	703a      	strb	r2, [r7, #0]
 8007b64:	781a      	ldrb	r2, [r3, #0]
 8007b66:	3201      	adds	r2, #1
 8007b68:	701a      	strb	r2, [r3, #0]
 8007b6a:	e7b1      	b.n	8007ad0 <_dtoa_r+0x560>
 8007b6c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007b70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b78:	d1b5      	bne.n	8007ae6 <_dtoa_r+0x576>
 8007b7a:	e7d4      	b.n	8007b26 <_dtoa_r+0x5b6>
 8007b7c:	0800ae68 	.word	0x0800ae68
 8007b80:	0800ae40 	.word	0x0800ae40
 8007b84:	9908      	ldr	r1, [sp, #32]
 8007b86:	2900      	cmp	r1, #0
 8007b88:	f000 80e9 	beq.w	8007d5e <_dtoa_r+0x7ee>
 8007b8c:	9907      	ldr	r1, [sp, #28]
 8007b8e:	2901      	cmp	r1, #1
 8007b90:	f300 80cb 	bgt.w	8007d2a <_dtoa_r+0x7ba>
 8007b94:	2d00      	cmp	r5, #0
 8007b96:	f000 80c4 	beq.w	8007d22 <_dtoa_r+0x7b2>
 8007b9a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007b9e:	9e04      	ldr	r6, [sp, #16]
 8007ba0:	461c      	mov	r4, r3
 8007ba2:	9305      	str	r3, [sp, #20]
 8007ba4:	9b04      	ldr	r3, [sp, #16]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	9304      	str	r3, [sp, #16]
 8007baa:	9b06      	ldr	r3, [sp, #24]
 8007bac:	2101      	movs	r1, #1
 8007bae:	4413      	add	r3, r2
 8007bb0:	4648      	mov	r0, r9
 8007bb2:	9306      	str	r3, [sp, #24]
 8007bb4:	f000 fc78 	bl	80084a8 <__i2b>
 8007bb8:	9b05      	ldr	r3, [sp, #20]
 8007bba:	4605      	mov	r5, r0
 8007bbc:	b166      	cbz	r6, 8007bd8 <_dtoa_r+0x668>
 8007bbe:	9a06      	ldr	r2, [sp, #24]
 8007bc0:	2a00      	cmp	r2, #0
 8007bc2:	dd09      	ble.n	8007bd8 <_dtoa_r+0x668>
 8007bc4:	42b2      	cmp	r2, r6
 8007bc6:	9904      	ldr	r1, [sp, #16]
 8007bc8:	bfa8      	it	ge
 8007bca:	4632      	movge	r2, r6
 8007bcc:	1a89      	subs	r1, r1, r2
 8007bce:	9104      	str	r1, [sp, #16]
 8007bd0:	9906      	ldr	r1, [sp, #24]
 8007bd2:	1ab6      	subs	r6, r6, r2
 8007bd4:	1a8a      	subs	r2, r1, r2
 8007bd6:	9206      	str	r2, [sp, #24]
 8007bd8:	b30b      	cbz	r3, 8007c1e <_dtoa_r+0x6ae>
 8007bda:	9a08      	ldr	r2, [sp, #32]
 8007bdc:	2a00      	cmp	r2, #0
 8007bde:	f000 80c5 	beq.w	8007d6c <_dtoa_r+0x7fc>
 8007be2:	2c00      	cmp	r4, #0
 8007be4:	f000 80bf 	beq.w	8007d66 <_dtoa_r+0x7f6>
 8007be8:	4629      	mov	r1, r5
 8007bea:	4622      	mov	r2, r4
 8007bec:	4648      	mov	r0, r9
 8007bee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bf0:	f000 fd12 	bl	8008618 <__pow5mult>
 8007bf4:	9a01      	ldr	r2, [sp, #4]
 8007bf6:	4601      	mov	r1, r0
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	4648      	mov	r0, r9
 8007bfc:	f000 fc6a 	bl	80084d4 <__multiply>
 8007c00:	9901      	ldr	r1, [sp, #4]
 8007c02:	9005      	str	r0, [sp, #20]
 8007c04:	4648      	mov	r0, r9
 8007c06:	f000 fb51 	bl	80082ac <_Bfree>
 8007c0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c0c:	1b1b      	subs	r3, r3, r4
 8007c0e:	f000 80b0 	beq.w	8007d72 <_dtoa_r+0x802>
 8007c12:	9905      	ldr	r1, [sp, #20]
 8007c14:	461a      	mov	r2, r3
 8007c16:	4648      	mov	r0, r9
 8007c18:	f000 fcfe 	bl	8008618 <__pow5mult>
 8007c1c:	9001      	str	r0, [sp, #4]
 8007c1e:	2101      	movs	r1, #1
 8007c20:	4648      	mov	r0, r9
 8007c22:	f000 fc41 	bl	80084a8 <__i2b>
 8007c26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c28:	4604      	mov	r4, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 81da 	beq.w	8007fe4 <_dtoa_r+0xa74>
 8007c30:	461a      	mov	r2, r3
 8007c32:	4601      	mov	r1, r0
 8007c34:	4648      	mov	r0, r9
 8007c36:	f000 fcef 	bl	8008618 <__pow5mult>
 8007c3a:	9b07      	ldr	r3, [sp, #28]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	4604      	mov	r4, r0
 8007c40:	f300 80a0 	bgt.w	8007d84 <_dtoa_r+0x814>
 8007c44:	9b02      	ldr	r3, [sp, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f040 8096 	bne.w	8007d78 <_dtoa_r+0x808>
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007c52:	2a00      	cmp	r2, #0
 8007c54:	f040 8092 	bne.w	8007d7c <_dtoa_r+0x80c>
 8007c58:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007c5c:	0d12      	lsrs	r2, r2, #20
 8007c5e:	0512      	lsls	r2, r2, #20
 8007c60:	2a00      	cmp	r2, #0
 8007c62:	f000 808d 	beq.w	8007d80 <_dtoa_r+0x810>
 8007c66:	9b04      	ldr	r3, [sp, #16]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	9304      	str	r3, [sp, #16]
 8007c6c:	9b06      	ldr	r3, [sp, #24]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	9306      	str	r3, [sp, #24]
 8007c72:	2301      	movs	r3, #1
 8007c74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 81b9 	beq.w	8007ff0 <_dtoa_r+0xa80>
 8007c7e:	6922      	ldr	r2, [r4, #16]
 8007c80:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007c84:	6910      	ldr	r0, [r2, #16]
 8007c86:	f000 fbc3 	bl	8008410 <__hi0bits>
 8007c8a:	f1c0 0020 	rsb	r0, r0, #32
 8007c8e:	9b06      	ldr	r3, [sp, #24]
 8007c90:	4418      	add	r0, r3
 8007c92:	f010 001f 	ands.w	r0, r0, #31
 8007c96:	f000 8081 	beq.w	8007d9c <_dtoa_r+0x82c>
 8007c9a:	f1c0 0220 	rsb	r2, r0, #32
 8007c9e:	2a04      	cmp	r2, #4
 8007ca0:	dd73      	ble.n	8007d8a <_dtoa_r+0x81a>
 8007ca2:	9b04      	ldr	r3, [sp, #16]
 8007ca4:	f1c0 001c 	rsb	r0, r0, #28
 8007ca8:	4403      	add	r3, r0
 8007caa:	9304      	str	r3, [sp, #16]
 8007cac:	9b06      	ldr	r3, [sp, #24]
 8007cae:	4406      	add	r6, r0
 8007cb0:	4403      	add	r3, r0
 8007cb2:	9306      	str	r3, [sp, #24]
 8007cb4:	9b04      	ldr	r3, [sp, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	dd05      	ble.n	8007cc6 <_dtoa_r+0x756>
 8007cba:	9901      	ldr	r1, [sp, #4]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4648      	mov	r0, r9
 8007cc0:	f000 fd04 	bl	80086cc <__lshift>
 8007cc4:	9001      	str	r0, [sp, #4]
 8007cc6:	9b06      	ldr	r3, [sp, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	dd05      	ble.n	8007cd8 <_dtoa_r+0x768>
 8007ccc:	4621      	mov	r1, r4
 8007cce:	461a      	mov	r2, r3
 8007cd0:	4648      	mov	r0, r9
 8007cd2:	f000 fcfb 	bl	80086cc <__lshift>
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d060      	beq.n	8007da0 <_dtoa_r+0x830>
 8007cde:	9801      	ldr	r0, [sp, #4]
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	f000 fd5f 	bl	80087a4 <__mcmp>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	da5a      	bge.n	8007da0 <_dtoa_r+0x830>
 8007cea:	f108 33ff 	add.w	r3, r8, #4294967295
 8007cee:	9305      	str	r3, [sp, #20]
 8007cf0:	9901      	ldr	r1, [sp, #4]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	220a      	movs	r2, #10
 8007cf6:	4648      	mov	r0, r9
 8007cf8:	f000 fafa 	bl	80082f0 <__multadd>
 8007cfc:	9b08      	ldr	r3, [sp, #32]
 8007cfe:	9001      	str	r0, [sp, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 8177 	beq.w	8007ff4 <_dtoa_r+0xa84>
 8007d06:	4629      	mov	r1, r5
 8007d08:	2300      	movs	r3, #0
 8007d0a:	220a      	movs	r2, #10
 8007d0c:	4648      	mov	r0, r9
 8007d0e:	f000 faef 	bl	80082f0 <__multadd>
 8007d12:	f1bb 0f00 	cmp.w	fp, #0
 8007d16:	4605      	mov	r5, r0
 8007d18:	dc6e      	bgt.n	8007df8 <_dtoa_r+0x888>
 8007d1a:	9b07      	ldr	r3, [sp, #28]
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	dc48      	bgt.n	8007db2 <_dtoa_r+0x842>
 8007d20:	e06a      	b.n	8007df8 <_dtoa_r+0x888>
 8007d22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d24:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007d28:	e739      	b.n	8007b9e <_dtoa_r+0x62e>
 8007d2a:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007d2e:	42a3      	cmp	r3, r4
 8007d30:	db07      	blt.n	8007d42 <_dtoa_r+0x7d2>
 8007d32:	f1ba 0f00 	cmp.w	sl, #0
 8007d36:	eba3 0404 	sub.w	r4, r3, r4
 8007d3a:	db0b      	blt.n	8007d54 <_dtoa_r+0x7e4>
 8007d3c:	9e04      	ldr	r6, [sp, #16]
 8007d3e:	4652      	mov	r2, sl
 8007d40:	e72f      	b.n	8007ba2 <_dtoa_r+0x632>
 8007d42:	1ae2      	subs	r2, r4, r3
 8007d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d46:	9e04      	ldr	r6, [sp, #16]
 8007d48:	4413      	add	r3, r2
 8007d4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d4c:	4652      	mov	r2, sl
 8007d4e:	4623      	mov	r3, r4
 8007d50:	2400      	movs	r4, #0
 8007d52:	e726      	b.n	8007ba2 <_dtoa_r+0x632>
 8007d54:	9a04      	ldr	r2, [sp, #16]
 8007d56:	eba2 060a 	sub.w	r6, r2, sl
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	e721      	b.n	8007ba2 <_dtoa_r+0x632>
 8007d5e:	9e04      	ldr	r6, [sp, #16]
 8007d60:	9d08      	ldr	r5, [sp, #32]
 8007d62:	461c      	mov	r4, r3
 8007d64:	e72a      	b.n	8007bbc <_dtoa_r+0x64c>
 8007d66:	9a01      	ldr	r2, [sp, #4]
 8007d68:	9205      	str	r2, [sp, #20]
 8007d6a:	e752      	b.n	8007c12 <_dtoa_r+0x6a2>
 8007d6c:	9901      	ldr	r1, [sp, #4]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	e751      	b.n	8007c16 <_dtoa_r+0x6a6>
 8007d72:	9b05      	ldr	r3, [sp, #20]
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	e752      	b.n	8007c1e <_dtoa_r+0x6ae>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	e77b      	b.n	8007c74 <_dtoa_r+0x704>
 8007d7c:	9b02      	ldr	r3, [sp, #8]
 8007d7e:	e779      	b.n	8007c74 <_dtoa_r+0x704>
 8007d80:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007d82:	e778      	b.n	8007c76 <_dtoa_r+0x706>
 8007d84:	2300      	movs	r3, #0
 8007d86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d88:	e779      	b.n	8007c7e <_dtoa_r+0x70e>
 8007d8a:	d093      	beq.n	8007cb4 <_dtoa_r+0x744>
 8007d8c:	9b04      	ldr	r3, [sp, #16]
 8007d8e:	321c      	adds	r2, #28
 8007d90:	4413      	add	r3, r2
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	9b06      	ldr	r3, [sp, #24]
 8007d96:	4416      	add	r6, r2
 8007d98:	4413      	add	r3, r2
 8007d9a:	e78a      	b.n	8007cb2 <_dtoa_r+0x742>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	e7f5      	b.n	8007d8c <_dtoa_r+0x81c>
 8007da0:	f1ba 0f00 	cmp.w	sl, #0
 8007da4:	f8cd 8014 	str.w	r8, [sp, #20]
 8007da8:	46d3      	mov	fp, sl
 8007daa:	dc21      	bgt.n	8007df0 <_dtoa_r+0x880>
 8007dac:	9b07      	ldr	r3, [sp, #28]
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	dd1e      	ble.n	8007df0 <_dtoa_r+0x880>
 8007db2:	f1bb 0f00 	cmp.w	fp, #0
 8007db6:	f47f addc 	bne.w	8007972 <_dtoa_r+0x402>
 8007dba:	4621      	mov	r1, r4
 8007dbc:	465b      	mov	r3, fp
 8007dbe:	2205      	movs	r2, #5
 8007dc0:	4648      	mov	r0, r9
 8007dc2:	f000 fa95 	bl	80082f0 <__multadd>
 8007dc6:	4601      	mov	r1, r0
 8007dc8:	4604      	mov	r4, r0
 8007dca:	9801      	ldr	r0, [sp, #4]
 8007dcc:	f000 fcea 	bl	80087a4 <__mcmp>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	f77f adce 	ble.w	8007972 <_dtoa_r+0x402>
 8007dd6:	463e      	mov	r6, r7
 8007dd8:	2331      	movs	r3, #49	@ 0x31
 8007dda:	f806 3b01 	strb.w	r3, [r6], #1
 8007dde:	9b05      	ldr	r3, [sp, #20]
 8007de0:	3301      	adds	r3, #1
 8007de2:	9305      	str	r3, [sp, #20]
 8007de4:	e5c9      	b.n	800797a <_dtoa_r+0x40a>
 8007de6:	f8cd 8014 	str.w	r8, [sp, #20]
 8007dea:	4654      	mov	r4, sl
 8007dec:	4625      	mov	r5, r4
 8007dee:	e7f2      	b.n	8007dd6 <_dtoa_r+0x866>
 8007df0:	9b08      	ldr	r3, [sp, #32]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 8102 	beq.w	8007ffc <_dtoa_r+0xa8c>
 8007df8:	2e00      	cmp	r6, #0
 8007dfa:	dd05      	ble.n	8007e08 <_dtoa_r+0x898>
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4632      	mov	r2, r6
 8007e00:	4648      	mov	r0, r9
 8007e02:	f000 fc63 	bl	80086cc <__lshift>
 8007e06:	4605      	mov	r5, r0
 8007e08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d058      	beq.n	8007ec0 <_dtoa_r+0x950>
 8007e0e:	6869      	ldr	r1, [r5, #4]
 8007e10:	4648      	mov	r0, r9
 8007e12:	f000 fa0b 	bl	800822c <_Balloc>
 8007e16:	4606      	mov	r6, r0
 8007e18:	b928      	cbnz	r0, 8007e26 <_dtoa_r+0x8b6>
 8007e1a:	4b82      	ldr	r3, [pc, #520]	@ (8008024 <_dtoa_r+0xab4>)
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007e22:	f7ff bbbe 	b.w	80075a2 <_dtoa_r+0x32>
 8007e26:	692a      	ldr	r2, [r5, #16]
 8007e28:	3202      	adds	r2, #2
 8007e2a:	0092      	lsls	r2, r2, #2
 8007e2c:	f105 010c 	add.w	r1, r5, #12
 8007e30:	300c      	adds	r0, #12
 8007e32:	f001 ff19 	bl	8009c68 <memcpy>
 8007e36:	2201      	movs	r2, #1
 8007e38:	4631      	mov	r1, r6
 8007e3a:	4648      	mov	r0, r9
 8007e3c:	f000 fc46 	bl	80086cc <__lshift>
 8007e40:	1c7b      	adds	r3, r7, #1
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	eb07 030b 	add.w	r3, r7, fp
 8007e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e4a:	9b02      	ldr	r3, [sp, #8]
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	46a8      	mov	r8, r5
 8007e52:	9308      	str	r3, [sp, #32]
 8007e54:	4605      	mov	r5, r0
 8007e56:	9b04      	ldr	r3, [sp, #16]
 8007e58:	9801      	ldr	r0, [sp, #4]
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	f103 3bff 	add.w	fp, r3, #4294967295
 8007e60:	f7ff fafc 	bl	800745c <quorem>
 8007e64:	4641      	mov	r1, r8
 8007e66:	9002      	str	r0, [sp, #8]
 8007e68:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007e6c:	9801      	ldr	r0, [sp, #4]
 8007e6e:	f000 fc99 	bl	80087a4 <__mcmp>
 8007e72:	462a      	mov	r2, r5
 8007e74:	9006      	str	r0, [sp, #24]
 8007e76:	4621      	mov	r1, r4
 8007e78:	4648      	mov	r0, r9
 8007e7a:	f000 fcaf 	bl	80087dc <__mdiff>
 8007e7e:	68c2      	ldr	r2, [r0, #12]
 8007e80:	4606      	mov	r6, r0
 8007e82:	b9fa      	cbnz	r2, 8007ec4 <_dtoa_r+0x954>
 8007e84:	4601      	mov	r1, r0
 8007e86:	9801      	ldr	r0, [sp, #4]
 8007e88:	f000 fc8c 	bl	80087a4 <__mcmp>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4648      	mov	r0, r9
 8007e92:	920a      	str	r2, [sp, #40]	@ 0x28
 8007e94:	f000 fa0a 	bl	80082ac <_Bfree>
 8007e98:	9b07      	ldr	r3, [sp, #28]
 8007e9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e9c:	9e04      	ldr	r6, [sp, #16]
 8007e9e:	ea42 0103 	orr.w	r1, r2, r3
 8007ea2:	9b08      	ldr	r3, [sp, #32]
 8007ea4:	4319      	orrs	r1, r3
 8007ea6:	d10f      	bne.n	8007ec8 <_dtoa_r+0x958>
 8007ea8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007eac:	d028      	beq.n	8007f00 <_dtoa_r+0x990>
 8007eae:	9b06      	ldr	r3, [sp, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	dd02      	ble.n	8007eba <_dtoa_r+0x94a>
 8007eb4:	9b02      	ldr	r3, [sp, #8]
 8007eb6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8007eba:	f88b a000 	strb.w	sl, [fp]
 8007ebe:	e55e      	b.n	800797e <_dtoa_r+0x40e>
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	e7bd      	b.n	8007e40 <_dtoa_r+0x8d0>
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	e7e2      	b.n	8007e8e <_dtoa_r+0x91e>
 8007ec8:	9b06      	ldr	r3, [sp, #24]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	db04      	blt.n	8007ed8 <_dtoa_r+0x968>
 8007ece:	9907      	ldr	r1, [sp, #28]
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	9908      	ldr	r1, [sp, #32]
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	d120      	bne.n	8007f1a <_dtoa_r+0x9aa>
 8007ed8:	2a00      	cmp	r2, #0
 8007eda:	ddee      	ble.n	8007eba <_dtoa_r+0x94a>
 8007edc:	9901      	ldr	r1, [sp, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	4648      	mov	r0, r9
 8007ee2:	f000 fbf3 	bl	80086cc <__lshift>
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	9001      	str	r0, [sp, #4]
 8007eea:	f000 fc5b 	bl	80087a4 <__mcmp>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	dc03      	bgt.n	8007efa <_dtoa_r+0x98a>
 8007ef2:	d1e2      	bne.n	8007eba <_dtoa_r+0x94a>
 8007ef4:	f01a 0f01 	tst.w	sl, #1
 8007ef8:	d0df      	beq.n	8007eba <_dtoa_r+0x94a>
 8007efa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007efe:	d1d9      	bne.n	8007eb4 <_dtoa_r+0x944>
 8007f00:	2339      	movs	r3, #57	@ 0x39
 8007f02:	f88b 3000 	strb.w	r3, [fp]
 8007f06:	4633      	mov	r3, r6
 8007f08:	461e      	mov	r6, r3
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007f10:	2a39      	cmp	r2, #57	@ 0x39
 8007f12:	d052      	beq.n	8007fba <_dtoa_r+0xa4a>
 8007f14:	3201      	adds	r2, #1
 8007f16:	701a      	strb	r2, [r3, #0]
 8007f18:	e531      	b.n	800797e <_dtoa_r+0x40e>
 8007f1a:	2a00      	cmp	r2, #0
 8007f1c:	dd07      	ble.n	8007f2e <_dtoa_r+0x9be>
 8007f1e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007f22:	d0ed      	beq.n	8007f00 <_dtoa_r+0x990>
 8007f24:	f10a 0301 	add.w	r3, sl, #1
 8007f28:	f88b 3000 	strb.w	r3, [fp]
 8007f2c:	e527      	b.n	800797e <_dtoa_r+0x40e>
 8007f2e:	9b04      	ldr	r3, [sp, #16]
 8007f30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f32:	f803 ac01 	strb.w	sl, [r3, #-1]
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d029      	beq.n	8007f8e <_dtoa_r+0xa1e>
 8007f3a:	9901      	ldr	r1, [sp, #4]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	220a      	movs	r2, #10
 8007f40:	4648      	mov	r0, r9
 8007f42:	f000 f9d5 	bl	80082f0 <__multadd>
 8007f46:	45a8      	cmp	r8, r5
 8007f48:	9001      	str	r0, [sp, #4]
 8007f4a:	f04f 0300 	mov.w	r3, #0
 8007f4e:	f04f 020a 	mov.w	r2, #10
 8007f52:	4641      	mov	r1, r8
 8007f54:	4648      	mov	r0, r9
 8007f56:	d107      	bne.n	8007f68 <_dtoa_r+0x9f8>
 8007f58:	f000 f9ca 	bl	80082f0 <__multadd>
 8007f5c:	4680      	mov	r8, r0
 8007f5e:	4605      	mov	r5, r0
 8007f60:	9b04      	ldr	r3, [sp, #16]
 8007f62:	3301      	adds	r3, #1
 8007f64:	9304      	str	r3, [sp, #16]
 8007f66:	e776      	b.n	8007e56 <_dtoa_r+0x8e6>
 8007f68:	f000 f9c2 	bl	80082f0 <__multadd>
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	4680      	mov	r8, r0
 8007f70:	2300      	movs	r3, #0
 8007f72:	220a      	movs	r2, #10
 8007f74:	4648      	mov	r0, r9
 8007f76:	f000 f9bb 	bl	80082f0 <__multadd>
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	e7f0      	b.n	8007f60 <_dtoa_r+0x9f0>
 8007f7e:	f1bb 0f00 	cmp.w	fp, #0
 8007f82:	bfcc      	ite	gt
 8007f84:	465e      	movgt	r6, fp
 8007f86:	2601      	movle	r6, #1
 8007f88:	443e      	add	r6, r7
 8007f8a:	f04f 0800 	mov.w	r8, #0
 8007f8e:	9901      	ldr	r1, [sp, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	4648      	mov	r0, r9
 8007f94:	f000 fb9a 	bl	80086cc <__lshift>
 8007f98:	4621      	mov	r1, r4
 8007f9a:	9001      	str	r0, [sp, #4]
 8007f9c:	f000 fc02 	bl	80087a4 <__mcmp>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	dcb0      	bgt.n	8007f06 <_dtoa_r+0x996>
 8007fa4:	d102      	bne.n	8007fac <_dtoa_r+0xa3c>
 8007fa6:	f01a 0f01 	tst.w	sl, #1
 8007faa:	d1ac      	bne.n	8007f06 <_dtoa_r+0x996>
 8007fac:	4633      	mov	r3, r6
 8007fae:	461e      	mov	r6, r3
 8007fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fb4:	2a30      	cmp	r2, #48	@ 0x30
 8007fb6:	d0fa      	beq.n	8007fae <_dtoa_r+0xa3e>
 8007fb8:	e4e1      	b.n	800797e <_dtoa_r+0x40e>
 8007fba:	429f      	cmp	r7, r3
 8007fbc:	d1a4      	bne.n	8007f08 <_dtoa_r+0x998>
 8007fbe:	9b05      	ldr	r3, [sp, #20]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	9305      	str	r3, [sp, #20]
 8007fc4:	2331      	movs	r3, #49	@ 0x31
 8007fc6:	703b      	strb	r3, [r7, #0]
 8007fc8:	e4d9      	b.n	800797e <_dtoa_r+0x40e>
 8007fca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007fcc:	4f16      	ldr	r7, [pc, #88]	@ (8008028 <_dtoa_r+0xab8>)
 8007fce:	b11b      	cbz	r3, 8007fd8 <_dtoa_r+0xa68>
 8007fd0:	f107 0308 	add.w	r3, r7, #8
 8007fd4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	4638      	mov	r0, r7
 8007fda:	b011      	add	sp, #68	@ 0x44
 8007fdc:	ecbd 8b02 	vpop	{d8}
 8007fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe4:	9b07      	ldr	r3, [sp, #28]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	f77f ae2c 	ble.w	8007c44 <_dtoa_r+0x6d4>
 8007fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ff0:	2001      	movs	r0, #1
 8007ff2:	e64c      	b.n	8007c8e <_dtoa_r+0x71e>
 8007ff4:	f1bb 0f00 	cmp.w	fp, #0
 8007ff8:	f77f aed8 	ble.w	8007dac <_dtoa_r+0x83c>
 8007ffc:	463e      	mov	r6, r7
 8007ffe:	9801      	ldr	r0, [sp, #4]
 8008000:	4621      	mov	r1, r4
 8008002:	f7ff fa2b 	bl	800745c <quorem>
 8008006:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800800a:	f806 ab01 	strb.w	sl, [r6], #1
 800800e:	1bf2      	subs	r2, r6, r7
 8008010:	4593      	cmp	fp, r2
 8008012:	ddb4      	ble.n	8007f7e <_dtoa_r+0xa0e>
 8008014:	9901      	ldr	r1, [sp, #4]
 8008016:	2300      	movs	r3, #0
 8008018:	220a      	movs	r2, #10
 800801a:	4648      	mov	r0, r9
 800801c:	f000 f968 	bl	80082f0 <__multadd>
 8008020:	9001      	str	r0, [sp, #4]
 8008022:	e7ec      	b.n	8007ffe <_dtoa_r+0xa8e>
 8008024:	0800ad0d 	.word	0x0800ad0d
 8008028:	0800ac91 	.word	0x0800ac91

0800802c <_free_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4605      	mov	r5, r0
 8008030:	2900      	cmp	r1, #0
 8008032:	d041      	beq.n	80080b8 <_free_r+0x8c>
 8008034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008038:	1f0c      	subs	r4, r1, #4
 800803a:	2b00      	cmp	r3, #0
 800803c:	bfb8      	it	lt
 800803e:	18e4      	addlt	r4, r4, r3
 8008040:	f000 f8e8 	bl	8008214 <__malloc_lock>
 8008044:	4a1d      	ldr	r2, [pc, #116]	@ (80080bc <_free_r+0x90>)
 8008046:	6813      	ldr	r3, [r2, #0]
 8008048:	b933      	cbnz	r3, 8008058 <_free_r+0x2c>
 800804a:	6063      	str	r3, [r4, #4]
 800804c:	6014      	str	r4, [r2, #0]
 800804e:	4628      	mov	r0, r5
 8008050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008054:	f000 b8e4 	b.w	8008220 <__malloc_unlock>
 8008058:	42a3      	cmp	r3, r4
 800805a:	d908      	bls.n	800806e <_free_r+0x42>
 800805c:	6820      	ldr	r0, [r4, #0]
 800805e:	1821      	adds	r1, r4, r0
 8008060:	428b      	cmp	r3, r1
 8008062:	bf01      	itttt	eq
 8008064:	6819      	ldreq	r1, [r3, #0]
 8008066:	685b      	ldreq	r3, [r3, #4]
 8008068:	1809      	addeq	r1, r1, r0
 800806a:	6021      	streq	r1, [r4, #0]
 800806c:	e7ed      	b.n	800804a <_free_r+0x1e>
 800806e:	461a      	mov	r2, r3
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	b10b      	cbz	r3, 8008078 <_free_r+0x4c>
 8008074:	42a3      	cmp	r3, r4
 8008076:	d9fa      	bls.n	800806e <_free_r+0x42>
 8008078:	6811      	ldr	r1, [r2, #0]
 800807a:	1850      	adds	r0, r2, r1
 800807c:	42a0      	cmp	r0, r4
 800807e:	d10b      	bne.n	8008098 <_free_r+0x6c>
 8008080:	6820      	ldr	r0, [r4, #0]
 8008082:	4401      	add	r1, r0
 8008084:	1850      	adds	r0, r2, r1
 8008086:	4283      	cmp	r3, r0
 8008088:	6011      	str	r1, [r2, #0]
 800808a:	d1e0      	bne.n	800804e <_free_r+0x22>
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	6053      	str	r3, [r2, #4]
 8008092:	4408      	add	r0, r1
 8008094:	6010      	str	r0, [r2, #0]
 8008096:	e7da      	b.n	800804e <_free_r+0x22>
 8008098:	d902      	bls.n	80080a0 <_free_r+0x74>
 800809a:	230c      	movs	r3, #12
 800809c:	602b      	str	r3, [r5, #0]
 800809e:	e7d6      	b.n	800804e <_free_r+0x22>
 80080a0:	6820      	ldr	r0, [r4, #0]
 80080a2:	1821      	adds	r1, r4, r0
 80080a4:	428b      	cmp	r3, r1
 80080a6:	bf04      	itt	eq
 80080a8:	6819      	ldreq	r1, [r3, #0]
 80080aa:	685b      	ldreq	r3, [r3, #4]
 80080ac:	6063      	str	r3, [r4, #4]
 80080ae:	bf04      	itt	eq
 80080b0:	1809      	addeq	r1, r1, r0
 80080b2:	6021      	streq	r1, [r4, #0]
 80080b4:	6054      	str	r4, [r2, #4]
 80080b6:	e7ca      	b.n	800804e <_free_r+0x22>
 80080b8:	bd38      	pop	{r3, r4, r5, pc}
 80080ba:	bf00      	nop
 80080bc:	20000570 	.word	0x20000570

080080c0 <malloc>:
 80080c0:	4b02      	ldr	r3, [pc, #8]	@ (80080cc <malloc+0xc>)
 80080c2:	4601      	mov	r1, r0
 80080c4:	6818      	ldr	r0, [r3, #0]
 80080c6:	f000 b825 	b.w	8008114 <_malloc_r>
 80080ca:	bf00      	nop
 80080cc:	20000024 	.word	0x20000024

080080d0 <sbrk_aligned>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	4e0f      	ldr	r6, [pc, #60]	@ (8008110 <sbrk_aligned+0x40>)
 80080d4:	460c      	mov	r4, r1
 80080d6:	6831      	ldr	r1, [r6, #0]
 80080d8:	4605      	mov	r5, r0
 80080da:	b911      	cbnz	r1, 80080e2 <sbrk_aligned+0x12>
 80080dc:	f001 fdb4 	bl	8009c48 <_sbrk_r>
 80080e0:	6030      	str	r0, [r6, #0]
 80080e2:	4621      	mov	r1, r4
 80080e4:	4628      	mov	r0, r5
 80080e6:	f001 fdaf 	bl	8009c48 <_sbrk_r>
 80080ea:	1c43      	adds	r3, r0, #1
 80080ec:	d103      	bne.n	80080f6 <sbrk_aligned+0x26>
 80080ee:	f04f 34ff 	mov.w	r4, #4294967295
 80080f2:	4620      	mov	r0, r4
 80080f4:	bd70      	pop	{r4, r5, r6, pc}
 80080f6:	1cc4      	adds	r4, r0, #3
 80080f8:	f024 0403 	bic.w	r4, r4, #3
 80080fc:	42a0      	cmp	r0, r4
 80080fe:	d0f8      	beq.n	80080f2 <sbrk_aligned+0x22>
 8008100:	1a21      	subs	r1, r4, r0
 8008102:	4628      	mov	r0, r5
 8008104:	f001 fda0 	bl	8009c48 <_sbrk_r>
 8008108:	3001      	adds	r0, #1
 800810a:	d1f2      	bne.n	80080f2 <sbrk_aligned+0x22>
 800810c:	e7ef      	b.n	80080ee <sbrk_aligned+0x1e>
 800810e:	bf00      	nop
 8008110:	2000056c 	.word	0x2000056c

08008114 <_malloc_r>:
 8008114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008118:	1ccd      	adds	r5, r1, #3
 800811a:	f025 0503 	bic.w	r5, r5, #3
 800811e:	3508      	adds	r5, #8
 8008120:	2d0c      	cmp	r5, #12
 8008122:	bf38      	it	cc
 8008124:	250c      	movcc	r5, #12
 8008126:	2d00      	cmp	r5, #0
 8008128:	4606      	mov	r6, r0
 800812a:	db01      	blt.n	8008130 <_malloc_r+0x1c>
 800812c:	42a9      	cmp	r1, r5
 800812e:	d904      	bls.n	800813a <_malloc_r+0x26>
 8008130:	230c      	movs	r3, #12
 8008132:	6033      	str	r3, [r6, #0]
 8008134:	2000      	movs	r0, #0
 8008136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800813a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008210 <_malloc_r+0xfc>
 800813e:	f000 f869 	bl	8008214 <__malloc_lock>
 8008142:	f8d8 3000 	ldr.w	r3, [r8]
 8008146:	461c      	mov	r4, r3
 8008148:	bb44      	cbnz	r4, 800819c <_malloc_r+0x88>
 800814a:	4629      	mov	r1, r5
 800814c:	4630      	mov	r0, r6
 800814e:	f7ff ffbf 	bl	80080d0 <sbrk_aligned>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	4604      	mov	r4, r0
 8008156:	d158      	bne.n	800820a <_malloc_r+0xf6>
 8008158:	f8d8 4000 	ldr.w	r4, [r8]
 800815c:	4627      	mov	r7, r4
 800815e:	2f00      	cmp	r7, #0
 8008160:	d143      	bne.n	80081ea <_malloc_r+0xd6>
 8008162:	2c00      	cmp	r4, #0
 8008164:	d04b      	beq.n	80081fe <_malloc_r+0xea>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	4639      	mov	r1, r7
 800816a:	4630      	mov	r0, r6
 800816c:	eb04 0903 	add.w	r9, r4, r3
 8008170:	f001 fd6a 	bl	8009c48 <_sbrk_r>
 8008174:	4581      	cmp	r9, r0
 8008176:	d142      	bne.n	80081fe <_malloc_r+0xea>
 8008178:	6821      	ldr	r1, [r4, #0]
 800817a:	1a6d      	subs	r5, r5, r1
 800817c:	4629      	mov	r1, r5
 800817e:	4630      	mov	r0, r6
 8008180:	f7ff ffa6 	bl	80080d0 <sbrk_aligned>
 8008184:	3001      	adds	r0, #1
 8008186:	d03a      	beq.n	80081fe <_malloc_r+0xea>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	442b      	add	r3, r5
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	f8d8 3000 	ldr.w	r3, [r8]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	bb62      	cbnz	r2, 80081f0 <_malloc_r+0xdc>
 8008196:	f8c8 7000 	str.w	r7, [r8]
 800819a:	e00f      	b.n	80081bc <_malloc_r+0xa8>
 800819c:	6822      	ldr	r2, [r4, #0]
 800819e:	1b52      	subs	r2, r2, r5
 80081a0:	d420      	bmi.n	80081e4 <_malloc_r+0xd0>
 80081a2:	2a0b      	cmp	r2, #11
 80081a4:	d917      	bls.n	80081d6 <_malloc_r+0xc2>
 80081a6:	1961      	adds	r1, r4, r5
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	6025      	str	r5, [r4, #0]
 80081ac:	bf18      	it	ne
 80081ae:	6059      	strne	r1, [r3, #4]
 80081b0:	6863      	ldr	r3, [r4, #4]
 80081b2:	bf08      	it	eq
 80081b4:	f8c8 1000 	streq.w	r1, [r8]
 80081b8:	5162      	str	r2, [r4, r5]
 80081ba:	604b      	str	r3, [r1, #4]
 80081bc:	4630      	mov	r0, r6
 80081be:	f000 f82f 	bl	8008220 <__malloc_unlock>
 80081c2:	f104 000b 	add.w	r0, r4, #11
 80081c6:	1d23      	adds	r3, r4, #4
 80081c8:	f020 0007 	bic.w	r0, r0, #7
 80081cc:	1ac2      	subs	r2, r0, r3
 80081ce:	bf1c      	itt	ne
 80081d0:	1a1b      	subne	r3, r3, r0
 80081d2:	50a3      	strne	r3, [r4, r2]
 80081d4:	e7af      	b.n	8008136 <_malloc_r+0x22>
 80081d6:	6862      	ldr	r2, [r4, #4]
 80081d8:	42a3      	cmp	r3, r4
 80081da:	bf0c      	ite	eq
 80081dc:	f8c8 2000 	streq.w	r2, [r8]
 80081e0:	605a      	strne	r2, [r3, #4]
 80081e2:	e7eb      	b.n	80081bc <_malloc_r+0xa8>
 80081e4:	4623      	mov	r3, r4
 80081e6:	6864      	ldr	r4, [r4, #4]
 80081e8:	e7ae      	b.n	8008148 <_malloc_r+0x34>
 80081ea:	463c      	mov	r4, r7
 80081ec:	687f      	ldr	r7, [r7, #4]
 80081ee:	e7b6      	b.n	800815e <_malloc_r+0x4a>
 80081f0:	461a      	mov	r2, r3
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	d1fb      	bne.n	80081f0 <_malloc_r+0xdc>
 80081f8:	2300      	movs	r3, #0
 80081fa:	6053      	str	r3, [r2, #4]
 80081fc:	e7de      	b.n	80081bc <_malloc_r+0xa8>
 80081fe:	230c      	movs	r3, #12
 8008200:	6033      	str	r3, [r6, #0]
 8008202:	4630      	mov	r0, r6
 8008204:	f000 f80c 	bl	8008220 <__malloc_unlock>
 8008208:	e794      	b.n	8008134 <_malloc_r+0x20>
 800820a:	6005      	str	r5, [r0, #0]
 800820c:	e7d6      	b.n	80081bc <_malloc_r+0xa8>
 800820e:	bf00      	nop
 8008210:	20000570 	.word	0x20000570

08008214 <__malloc_lock>:
 8008214:	4801      	ldr	r0, [pc, #4]	@ (800821c <__malloc_lock+0x8>)
 8008216:	f7ff b918 	b.w	800744a <__retarget_lock_acquire_recursive>
 800821a:	bf00      	nop
 800821c:	20000568 	.word	0x20000568

08008220 <__malloc_unlock>:
 8008220:	4801      	ldr	r0, [pc, #4]	@ (8008228 <__malloc_unlock+0x8>)
 8008222:	f7ff b913 	b.w	800744c <__retarget_lock_release_recursive>
 8008226:	bf00      	nop
 8008228:	20000568 	.word	0x20000568

0800822c <_Balloc>:
 800822c:	b570      	push	{r4, r5, r6, lr}
 800822e:	69c6      	ldr	r6, [r0, #28]
 8008230:	4604      	mov	r4, r0
 8008232:	460d      	mov	r5, r1
 8008234:	b976      	cbnz	r6, 8008254 <_Balloc+0x28>
 8008236:	2010      	movs	r0, #16
 8008238:	f7ff ff42 	bl	80080c0 <malloc>
 800823c:	4602      	mov	r2, r0
 800823e:	61e0      	str	r0, [r4, #28]
 8008240:	b920      	cbnz	r0, 800824c <_Balloc+0x20>
 8008242:	4b18      	ldr	r3, [pc, #96]	@ (80082a4 <_Balloc+0x78>)
 8008244:	4818      	ldr	r0, [pc, #96]	@ (80082a8 <_Balloc+0x7c>)
 8008246:	216b      	movs	r1, #107	@ 0x6b
 8008248:	f001 fd26 	bl	8009c98 <__assert_func>
 800824c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008250:	6006      	str	r6, [r0, #0]
 8008252:	60c6      	str	r6, [r0, #12]
 8008254:	69e6      	ldr	r6, [r4, #28]
 8008256:	68f3      	ldr	r3, [r6, #12]
 8008258:	b183      	cbz	r3, 800827c <_Balloc+0x50>
 800825a:	69e3      	ldr	r3, [r4, #28]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008262:	b9b8      	cbnz	r0, 8008294 <_Balloc+0x68>
 8008264:	2101      	movs	r1, #1
 8008266:	fa01 f605 	lsl.w	r6, r1, r5
 800826a:	1d72      	adds	r2, r6, #5
 800826c:	0092      	lsls	r2, r2, #2
 800826e:	4620      	mov	r0, r4
 8008270:	f001 fd30 	bl	8009cd4 <_calloc_r>
 8008274:	b160      	cbz	r0, 8008290 <_Balloc+0x64>
 8008276:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800827a:	e00e      	b.n	800829a <_Balloc+0x6e>
 800827c:	2221      	movs	r2, #33	@ 0x21
 800827e:	2104      	movs	r1, #4
 8008280:	4620      	mov	r0, r4
 8008282:	f001 fd27 	bl	8009cd4 <_calloc_r>
 8008286:	69e3      	ldr	r3, [r4, #28]
 8008288:	60f0      	str	r0, [r6, #12]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e4      	bne.n	800825a <_Balloc+0x2e>
 8008290:	2000      	movs	r0, #0
 8008292:	bd70      	pop	{r4, r5, r6, pc}
 8008294:	6802      	ldr	r2, [r0, #0]
 8008296:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800829a:	2300      	movs	r3, #0
 800829c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082a0:	e7f7      	b.n	8008292 <_Balloc+0x66>
 80082a2:	bf00      	nop
 80082a4:	0800ac9e 	.word	0x0800ac9e
 80082a8:	0800ad1e 	.word	0x0800ad1e

080082ac <_Bfree>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	69c6      	ldr	r6, [r0, #28]
 80082b0:	4605      	mov	r5, r0
 80082b2:	460c      	mov	r4, r1
 80082b4:	b976      	cbnz	r6, 80082d4 <_Bfree+0x28>
 80082b6:	2010      	movs	r0, #16
 80082b8:	f7ff ff02 	bl	80080c0 <malloc>
 80082bc:	4602      	mov	r2, r0
 80082be:	61e8      	str	r0, [r5, #28]
 80082c0:	b920      	cbnz	r0, 80082cc <_Bfree+0x20>
 80082c2:	4b09      	ldr	r3, [pc, #36]	@ (80082e8 <_Bfree+0x3c>)
 80082c4:	4809      	ldr	r0, [pc, #36]	@ (80082ec <_Bfree+0x40>)
 80082c6:	218f      	movs	r1, #143	@ 0x8f
 80082c8:	f001 fce6 	bl	8009c98 <__assert_func>
 80082cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082d0:	6006      	str	r6, [r0, #0]
 80082d2:	60c6      	str	r6, [r0, #12]
 80082d4:	b13c      	cbz	r4, 80082e6 <_Bfree+0x3a>
 80082d6:	69eb      	ldr	r3, [r5, #28]
 80082d8:	6862      	ldr	r2, [r4, #4]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082e0:	6021      	str	r1, [r4, #0]
 80082e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
 80082e8:	0800ac9e 	.word	0x0800ac9e
 80082ec:	0800ad1e 	.word	0x0800ad1e

080082f0 <__multadd>:
 80082f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f4:	690d      	ldr	r5, [r1, #16]
 80082f6:	4607      	mov	r7, r0
 80082f8:	460c      	mov	r4, r1
 80082fa:	461e      	mov	r6, r3
 80082fc:	f101 0c14 	add.w	ip, r1, #20
 8008300:	2000      	movs	r0, #0
 8008302:	f8dc 3000 	ldr.w	r3, [ip]
 8008306:	b299      	uxth	r1, r3
 8008308:	fb02 6101 	mla	r1, r2, r1, r6
 800830c:	0c1e      	lsrs	r6, r3, #16
 800830e:	0c0b      	lsrs	r3, r1, #16
 8008310:	fb02 3306 	mla	r3, r2, r6, r3
 8008314:	b289      	uxth	r1, r1
 8008316:	3001      	adds	r0, #1
 8008318:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800831c:	4285      	cmp	r5, r0
 800831e:	f84c 1b04 	str.w	r1, [ip], #4
 8008322:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008326:	dcec      	bgt.n	8008302 <__multadd+0x12>
 8008328:	b30e      	cbz	r6, 800836e <__multadd+0x7e>
 800832a:	68a3      	ldr	r3, [r4, #8]
 800832c:	42ab      	cmp	r3, r5
 800832e:	dc19      	bgt.n	8008364 <__multadd+0x74>
 8008330:	6861      	ldr	r1, [r4, #4]
 8008332:	4638      	mov	r0, r7
 8008334:	3101      	adds	r1, #1
 8008336:	f7ff ff79 	bl	800822c <_Balloc>
 800833a:	4680      	mov	r8, r0
 800833c:	b928      	cbnz	r0, 800834a <__multadd+0x5a>
 800833e:	4602      	mov	r2, r0
 8008340:	4b0c      	ldr	r3, [pc, #48]	@ (8008374 <__multadd+0x84>)
 8008342:	480d      	ldr	r0, [pc, #52]	@ (8008378 <__multadd+0x88>)
 8008344:	21ba      	movs	r1, #186	@ 0xba
 8008346:	f001 fca7 	bl	8009c98 <__assert_func>
 800834a:	6922      	ldr	r2, [r4, #16]
 800834c:	3202      	adds	r2, #2
 800834e:	f104 010c 	add.w	r1, r4, #12
 8008352:	0092      	lsls	r2, r2, #2
 8008354:	300c      	adds	r0, #12
 8008356:	f001 fc87 	bl	8009c68 <memcpy>
 800835a:	4621      	mov	r1, r4
 800835c:	4638      	mov	r0, r7
 800835e:	f7ff ffa5 	bl	80082ac <_Bfree>
 8008362:	4644      	mov	r4, r8
 8008364:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008368:	3501      	adds	r5, #1
 800836a:	615e      	str	r6, [r3, #20]
 800836c:	6125      	str	r5, [r4, #16]
 800836e:	4620      	mov	r0, r4
 8008370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008374:	0800ad0d 	.word	0x0800ad0d
 8008378:	0800ad1e 	.word	0x0800ad1e

0800837c <__s2b>:
 800837c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008380:	460c      	mov	r4, r1
 8008382:	4615      	mov	r5, r2
 8008384:	461f      	mov	r7, r3
 8008386:	2209      	movs	r2, #9
 8008388:	3308      	adds	r3, #8
 800838a:	4606      	mov	r6, r0
 800838c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008390:	2100      	movs	r1, #0
 8008392:	2201      	movs	r2, #1
 8008394:	429a      	cmp	r2, r3
 8008396:	db09      	blt.n	80083ac <__s2b+0x30>
 8008398:	4630      	mov	r0, r6
 800839a:	f7ff ff47 	bl	800822c <_Balloc>
 800839e:	b940      	cbnz	r0, 80083b2 <__s2b+0x36>
 80083a0:	4602      	mov	r2, r0
 80083a2:	4b19      	ldr	r3, [pc, #100]	@ (8008408 <__s2b+0x8c>)
 80083a4:	4819      	ldr	r0, [pc, #100]	@ (800840c <__s2b+0x90>)
 80083a6:	21d3      	movs	r1, #211	@ 0xd3
 80083a8:	f001 fc76 	bl	8009c98 <__assert_func>
 80083ac:	0052      	lsls	r2, r2, #1
 80083ae:	3101      	adds	r1, #1
 80083b0:	e7f0      	b.n	8008394 <__s2b+0x18>
 80083b2:	9b08      	ldr	r3, [sp, #32]
 80083b4:	6143      	str	r3, [r0, #20]
 80083b6:	2d09      	cmp	r5, #9
 80083b8:	f04f 0301 	mov.w	r3, #1
 80083bc:	6103      	str	r3, [r0, #16]
 80083be:	dd16      	ble.n	80083ee <__s2b+0x72>
 80083c0:	f104 0909 	add.w	r9, r4, #9
 80083c4:	46c8      	mov	r8, r9
 80083c6:	442c      	add	r4, r5
 80083c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80083cc:	4601      	mov	r1, r0
 80083ce:	3b30      	subs	r3, #48	@ 0x30
 80083d0:	220a      	movs	r2, #10
 80083d2:	4630      	mov	r0, r6
 80083d4:	f7ff ff8c 	bl	80082f0 <__multadd>
 80083d8:	45a0      	cmp	r8, r4
 80083da:	d1f5      	bne.n	80083c8 <__s2b+0x4c>
 80083dc:	f1a5 0408 	sub.w	r4, r5, #8
 80083e0:	444c      	add	r4, r9
 80083e2:	1b2d      	subs	r5, r5, r4
 80083e4:	1963      	adds	r3, r4, r5
 80083e6:	42bb      	cmp	r3, r7
 80083e8:	db04      	blt.n	80083f4 <__s2b+0x78>
 80083ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ee:	340a      	adds	r4, #10
 80083f0:	2509      	movs	r5, #9
 80083f2:	e7f6      	b.n	80083e2 <__s2b+0x66>
 80083f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80083f8:	4601      	mov	r1, r0
 80083fa:	3b30      	subs	r3, #48	@ 0x30
 80083fc:	220a      	movs	r2, #10
 80083fe:	4630      	mov	r0, r6
 8008400:	f7ff ff76 	bl	80082f0 <__multadd>
 8008404:	e7ee      	b.n	80083e4 <__s2b+0x68>
 8008406:	bf00      	nop
 8008408:	0800ad0d 	.word	0x0800ad0d
 800840c:	0800ad1e 	.word	0x0800ad1e

08008410 <__hi0bits>:
 8008410:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008414:	4603      	mov	r3, r0
 8008416:	bf36      	itet	cc
 8008418:	0403      	lslcc	r3, r0, #16
 800841a:	2000      	movcs	r0, #0
 800841c:	2010      	movcc	r0, #16
 800841e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008422:	bf3c      	itt	cc
 8008424:	021b      	lslcc	r3, r3, #8
 8008426:	3008      	addcc	r0, #8
 8008428:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800842c:	bf3c      	itt	cc
 800842e:	011b      	lslcc	r3, r3, #4
 8008430:	3004      	addcc	r0, #4
 8008432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008436:	bf3c      	itt	cc
 8008438:	009b      	lslcc	r3, r3, #2
 800843a:	3002      	addcc	r0, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	db05      	blt.n	800844c <__hi0bits+0x3c>
 8008440:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008444:	f100 0001 	add.w	r0, r0, #1
 8008448:	bf08      	it	eq
 800844a:	2020      	moveq	r0, #32
 800844c:	4770      	bx	lr

0800844e <__lo0bits>:
 800844e:	6803      	ldr	r3, [r0, #0]
 8008450:	4602      	mov	r2, r0
 8008452:	f013 0007 	ands.w	r0, r3, #7
 8008456:	d00b      	beq.n	8008470 <__lo0bits+0x22>
 8008458:	07d9      	lsls	r1, r3, #31
 800845a:	d421      	bmi.n	80084a0 <__lo0bits+0x52>
 800845c:	0798      	lsls	r0, r3, #30
 800845e:	bf49      	itett	mi
 8008460:	085b      	lsrmi	r3, r3, #1
 8008462:	089b      	lsrpl	r3, r3, #2
 8008464:	2001      	movmi	r0, #1
 8008466:	6013      	strmi	r3, [r2, #0]
 8008468:	bf5c      	itt	pl
 800846a:	6013      	strpl	r3, [r2, #0]
 800846c:	2002      	movpl	r0, #2
 800846e:	4770      	bx	lr
 8008470:	b299      	uxth	r1, r3
 8008472:	b909      	cbnz	r1, 8008478 <__lo0bits+0x2a>
 8008474:	0c1b      	lsrs	r3, r3, #16
 8008476:	2010      	movs	r0, #16
 8008478:	b2d9      	uxtb	r1, r3
 800847a:	b909      	cbnz	r1, 8008480 <__lo0bits+0x32>
 800847c:	3008      	adds	r0, #8
 800847e:	0a1b      	lsrs	r3, r3, #8
 8008480:	0719      	lsls	r1, r3, #28
 8008482:	bf04      	itt	eq
 8008484:	091b      	lsreq	r3, r3, #4
 8008486:	3004      	addeq	r0, #4
 8008488:	0799      	lsls	r1, r3, #30
 800848a:	bf04      	itt	eq
 800848c:	089b      	lsreq	r3, r3, #2
 800848e:	3002      	addeq	r0, #2
 8008490:	07d9      	lsls	r1, r3, #31
 8008492:	d403      	bmi.n	800849c <__lo0bits+0x4e>
 8008494:	085b      	lsrs	r3, r3, #1
 8008496:	f100 0001 	add.w	r0, r0, #1
 800849a:	d003      	beq.n	80084a4 <__lo0bits+0x56>
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	4770      	bx	lr
 80084a0:	2000      	movs	r0, #0
 80084a2:	4770      	bx	lr
 80084a4:	2020      	movs	r0, #32
 80084a6:	4770      	bx	lr

080084a8 <__i2b>:
 80084a8:	b510      	push	{r4, lr}
 80084aa:	460c      	mov	r4, r1
 80084ac:	2101      	movs	r1, #1
 80084ae:	f7ff febd 	bl	800822c <_Balloc>
 80084b2:	4602      	mov	r2, r0
 80084b4:	b928      	cbnz	r0, 80084c2 <__i2b+0x1a>
 80084b6:	4b05      	ldr	r3, [pc, #20]	@ (80084cc <__i2b+0x24>)
 80084b8:	4805      	ldr	r0, [pc, #20]	@ (80084d0 <__i2b+0x28>)
 80084ba:	f240 1145 	movw	r1, #325	@ 0x145
 80084be:	f001 fbeb 	bl	8009c98 <__assert_func>
 80084c2:	2301      	movs	r3, #1
 80084c4:	6144      	str	r4, [r0, #20]
 80084c6:	6103      	str	r3, [r0, #16]
 80084c8:	bd10      	pop	{r4, pc}
 80084ca:	bf00      	nop
 80084cc:	0800ad0d 	.word	0x0800ad0d
 80084d0:	0800ad1e 	.word	0x0800ad1e

080084d4 <__multiply>:
 80084d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	4617      	mov	r7, r2
 80084da:	690a      	ldr	r2, [r1, #16]
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	429a      	cmp	r2, r3
 80084e0:	bfa8      	it	ge
 80084e2:	463b      	movge	r3, r7
 80084e4:	4689      	mov	r9, r1
 80084e6:	bfa4      	itt	ge
 80084e8:	460f      	movge	r7, r1
 80084ea:	4699      	movge	r9, r3
 80084ec:	693d      	ldr	r5, [r7, #16]
 80084ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	6879      	ldr	r1, [r7, #4]
 80084f6:	eb05 060a 	add.w	r6, r5, sl
 80084fa:	42b3      	cmp	r3, r6
 80084fc:	b085      	sub	sp, #20
 80084fe:	bfb8      	it	lt
 8008500:	3101      	addlt	r1, #1
 8008502:	f7ff fe93 	bl	800822c <_Balloc>
 8008506:	b930      	cbnz	r0, 8008516 <__multiply+0x42>
 8008508:	4602      	mov	r2, r0
 800850a:	4b41      	ldr	r3, [pc, #260]	@ (8008610 <__multiply+0x13c>)
 800850c:	4841      	ldr	r0, [pc, #260]	@ (8008614 <__multiply+0x140>)
 800850e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008512:	f001 fbc1 	bl	8009c98 <__assert_func>
 8008516:	f100 0414 	add.w	r4, r0, #20
 800851a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800851e:	4623      	mov	r3, r4
 8008520:	2200      	movs	r2, #0
 8008522:	4573      	cmp	r3, lr
 8008524:	d320      	bcc.n	8008568 <__multiply+0x94>
 8008526:	f107 0814 	add.w	r8, r7, #20
 800852a:	f109 0114 	add.w	r1, r9, #20
 800852e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008532:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008536:	9302      	str	r3, [sp, #8]
 8008538:	1beb      	subs	r3, r5, r7
 800853a:	3b15      	subs	r3, #21
 800853c:	f023 0303 	bic.w	r3, r3, #3
 8008540:	3304      	adds	r3, #4
 8008542:	3715      	adds	r7, #21
 8008544:	42bd      	cmp	r5, r7
 8008546:	bf38      	it	cc
 8008548:	2304      	movcc	r3, #4
 800854a:	9301      	str	r3, [sp, #4]
 800854c:	9b02      	ldr	r3, [sp, #8]
 800854e:	9103      	str	r1, [sp, #12]
 8008550:	428b      	cmp	r3, r1
 8008552:	d80c      	bhi.n	800856e <__multiply+0x9a>
 8008554:	2e00      	cmp	r6, #0
 8008556:	dd03      	ble.n	8008560 <__multiply+0x8c>
 8008558:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800855c:	2b00      	cmp	r3, #0
 800855e:	d055      	beq.n	800860c <__multiply+0x138>
 8008560:	6106      	str	r6, [r0, #16]
 8008562:	b005      	add	sp, #20
 8008564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008568:	f843 2b04 	str.w	r2, [r3], #4
 800856c:	e7d9      	b.n	8008522 <__multiply+0x4e>
 800856e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008572:	f1ba 0f00 	cmp.w	sl, #0
 8008576:	d01f      	beq.n	80085b8 <__multiply+0xe4>
 8008578:	46c4      	mov	ip, r8
 800857a:	46a1      	mov	r9, r4
 800857c:	2700      	movs	r7, #0
 800857e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008582:	f8d9 3000 	ldr.w	r3, [r9]
 8008586:	fa1f fb82 	uxth.w	fp, r2
 800858a:	b29b      	uxth	r3, r3
 800858c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008590:	443b      	add	r3, r7
 8008592:	f8d9 7000 	ldr.w	r7, [r9]
 8008596:	0c12      	lsrs	r2, r2, #16
 8008598:	0c3f      	lsrs	r7, r7, #16
 800859a:	fb0a 7202 	mla	r2, sl, r2, r7
 800859e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085a8:	4565      	cmp	r5, ip
 80085aa:	f849 3b04 	str.w	r3, [r9], #4
 80085ae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80085b2:	d8e4      	bhi.n	800857e <__multiply+0xaa>
 80085b4:	9b01      	ldr	r3, [sp, #4]
 80085b6:	50e7      	str	r7, [r4, r3]
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80085be:	3104      	adds	r1, #4
 80085c0:	f1b9 0f00 	cmp.w	r9, #0
 80085c4:	d020      	beq.n	8008608 <__multiply+0x134>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	4647      	mov	r7, r8
 80085ca:	46a4      	mov	ip, r4
 80085cc:	f04f 0a00 	mov.w	sl, #0
 80085d0:	f8b7 b000 	ldrh.w	fp, [r7]
 80085d4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80085d8:	fb09 220b 	mla	r2, r9, fp, r2
 80085dc:	4452      	add	r2, sl
 80085de:	b29b      	uxth	r3, r3
 80085e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085e4:	f84c 3b04 	str.w	r3, [ip], #4
 80085e8:	f857 3b04 	ldr.w	r3, [r7], #4
 80085ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085f0:	f8bc 3000 	ldrh.w	r3, [ip]
 80085f4:	fb09 330a 	mla	r3, r9, sl, r3
 80085f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80085fc:	42bd      	cmp	r5, r7
 80085fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008602:	d8e5      	bhi.n	80085d0 <__multiply+0xfc>
 8008604:	9a01      	ldr	r2, [sp, #4]
 8008606:	50a3      	str	r3, [r4, r2]
 8008608:	3404      	adds	r4, #4
 800860a:	e79f      	b.n	800854c <__multiply+0x78>
 800860c:	3e01      	subs	r6, #1
 800860e:	e7a1      	b.n	8008554 <__multiply+0x80>
 8008610:	0800ad0d 	.word	0x0800ad0d
 8008614:	0800ad1e 	.word	0x0800ad1e

08008618 <__pow5mult>:
 8008618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800861c:	4615      	mov	r5, r2
 800861e:	f012 0203 	ands.w	r2, r2, #3
 8008622:	4607      	mov	r7, r0
 8008624:	460e      	mov	r6, r1
 8008626:	d007      	beq.n	8008638 <__pow5mult+0x20>
 8008628:	4c25      	ldr	r4, [pc, #148]	@ (80086c0 <__pow5mult+0xa8>)
 800862a:	3a01      	subs	r2, #1
 800862c:	2300      	movs	r3, #0
 800862e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008632:	f7ff fe5d 	bl	80082f0 <__multadd>
 8008636:	4606      	mov	r6, r0
 8008638:	10ad      	asrs	r5, r5, #2
 800863a:	d03d      	beq.n	80086b8 <__pow5mult+0xa0>
 800863c:	69fc      	ldr	r4, [r7, #28]
 800863e:	b97c      	cbnz	r4, 8008660 <__pow5mult+0x48>
 8008640:	2010      	movs	r0, #16
 8008642:	f7ff fd3d 	bl	80080c0 <malloc>
 8008646:	4602      	mov	r2, r0
 8008648:	61f8      	str	r0, [r7, #28]
 800864a:	b928      	cbnz	r0, 8008658 <__pow5mult+0x40>
 800864c:	4b1d      	ldr	r3, [pc, #116]	@ (80086c4 <__pow5mult+0xac>)
 800864e:	481e      	ldr	r0, [pc, #120]	@ (80086c8 <__pow5mult+0xb0>)
 8008650:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008654:	f001 fb20 	bl	8009c98 <__assert_func>
 8008658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800865c:	6004      	str	r4, [r0, #0]
 800865e:	60c4      	str	r4, [r0, #12]
 8008660:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008668:	b94c      	cbnz	r4, 800867e <__pow5mult+0x66>
 800866a:	f240 2171 	movw	r1, #625	@ 0x271
 800866e:	4638      	mov	r0, r7
 8008670:	f7ff ff1a 	bl	80084a8 <__i2b>
 8008674:	2300      	movs	r3, #0
 8008676:	f8c8 0008 	str.w	r0, [r8, #8]
 800867a:	4604      	mov	r4, r0
 800867c:	6003      	str	r3, [r0, #0]
 800867e:	f04f 0900 	mov.w	r9, #0
 8008682:	07eb      	lsls	r3, r5, #31
 8008684:	d50a      	bpl.n	800869c <__pow5mult+0x84>
 8008686:	4631      	mov	r1, r6
 8008688:	4622      	mov	r2, r4
 800868a:	4638      	mov	r0, r7
 800868c:	f7ff ff22 	bl	80084d4 <__multiply>
 8008690:	4631      	mov	r1, r6
 8008692:	4680      	mov	r8, r0
 8008694:	4638      	mov	r0, r7
 8008696:	f7ff fe09 	bl	80082ac <_Bfree>
 800869a:	4646      	mov	r6, r8
 800869c:	106d      	asrs	r5, r5, #1
 800869e:	d00b      	beq.n	80086b8 <__pow5mult+0xa0>
 80086a0:	6820      	ldr	r0, [r4, #0]
 80086a2:	b938      	cbnz	r0, 80086b4 <__pow5mult+0x9c>
 80086a4:	4622      	mov	r2, r4
 80086a6:	4621      	mov	r1, r4
 80086a8:	4638      	mov	r0, r7
 80086aa:	f7ff ff13 	bl	80084d4 <__multiply>
 80086ae:	6020      	str	r0, [r4, #0]
 80086b0:	f8c0 9000 	str.w	r9, [r0]
 80086b4:	4604      	mov	r4, r0
 80086b6:	e7e4      	b.n	8008682 <__pow5mult+0x6a>
 80086b8:	4630      	mov	r0, r6
 80086ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086be:	bf00      	nop
 80086c0:	0800ae30 	.word	0x0800ae30
 80086c4:	0800ac9e 	.word	0x0800ac9e
 80086c8:	0800ad1e 	.word	0x0800ad1e

080086cc <__lshift>:
 80086cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	460c      	mov	r4, r1
 80086d2:	6849      	ldr	r1, [r1, #4]
 80086d4:	6923      	ldr	r3, [r4, #16]
 80086d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086da:	68a3      	ldr	r3, [r4, #8]
 80086dc:	4607      	mov	r7, r0
 80086de:	4691      	mov	r9, r2
 80086e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086e4:	f108 0601 	add.w	r6, r8, #1
 80086e8:	42b3      	cmp	r3, r6
 80086ea:	db0b      	blt.n	8008704 <__lshift+0x38>
 80086ec:	4638      	mov	r0, r7
 80086ee:	f7ff fd9d 	bl	800822c <_Balloc>
 80086f2:	4605      	mov	r5, r0
 80086f4:	b948      	cbnz	r0, 800870a <__lshift+0x3e>
 80086f6:	4602      	mov	r2, r0
 80086f8:	4b28      	ldr	r3, [pc, #160]	@ (800879c <__lshift+0xd0>)
 80086fa:	4829      	ldr	r0, [pc, #164]	@ (80087a0 <__lshift+0xd4>)
 80086fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008700:	f001 faca 	bl	8009c98 <__assert_func>
 8008704:	3101      	adds	r1, #1
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	e7ee      	b.n	80086e8 <__lshift+0x1c>
 800870a:	2300      	movs	r3, #0
 800870c:	f100 0114 	add.w	r1, r0, #20
 8008710:	f100 0210 	add.w	r2, r0, #16
 8008714:	4618      	mov	r0, r3
 8008716:	4553      	cmp	r3, sl
 8008718:	db33      	blt.n	8008782 <__lshift+0xb6>
 800871a:	6920      	ldr	r0, [r4, #16]
 800871c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008720:	f104 0314 	add.w	r3, r4, #20
 8008724:	f019 091f 	ands.w	r9, r9, #31
 8008728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800872c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008730:	d02b      	beq.n	800878a <__lshift+0xbe>
 8008732:	f1c9 0e20 	rsb	lr, r9, #32
 8008736:	468a      	mov	sl, r1
 8008738:	2200      	movs	r2, #0
 800873a:	6818      	ldr	r0, [r3, #0]
 800873c:	fa00 f009 	lsl.w	r0, r0, r9
 8008740:	4310      	orrs	r0, r2
 8008742:	f84a 0b04 	str.w	r0, [sl], #4
 8008746:	f853 2b04 	ldr.w	r2, [r3], #4
 800874a:	459c      	cmp	ip, r3
 800874c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008750:	d8f3      	bhi.n	800873a <__lshift+0x6e>
 8008752:	ebac 0304 	sub.w	r3, ip, r4
 8008756:	3b15      	subs	r3, #21
 8008758:	f023 0303 	bic.w	r3, r3, #3
 800875c:	3304      	adds	r3, #4
 800875e:	f104 0015 	add.w	r0, r4, #21
 8008762:	4560      	cmp	r0, ip
 8008764:	bf88      	it	hi
 8008766:	2304      	movhi	r3, #4
 8008768:	50ca      	str	r2, [r1, r3]
 800876a:	b10a      	cbz	r2, 8008770 <__lshift+0xa4>
 800876c:	f108 0602 	add.w	r6, r8, #2
 8008770:	3e01      	subs	r6, #1
 8008772:	4638      	mov	r0, r7
 8008774:	612e      	str	r6, [r5, #16]
 8008776:	4621      	mov	r1, r4
 8008778:	f7ff fd98 	bl	80082ac <_Bfree>
 800877c:	4628      	mov	r0, r5
 800877e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008782:	f842 0f04 	str.w	r0, [r2, #4]!
 8008786:	3301      	adds	r3, #1
 8008788:	e7c5      	b.n	8008716 <__lshift+0x4a>
 800878a:	3904      	subs	r1, #4
 800878c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008790:	f841 2f04 	str.w	r2, [r1, #4]!
 8008794:	459c      	cmp	ip, r3
 8008796:	d8f9      	bhi.n	800878c <__lshift+0xc0>
 8008798:	e7ea      	b.n	8008770 <__lshift+0xa4>
 800879a:	bf00      	nop
 800879c:	0800ad0d 	.word	0x0800ad0d
 80087a0:	0800ad1e 	.word	0x0800ad1e

080087a4 <__mcmp>:
 80087a4:	690a      	ldr	r2, [r1, #16]
 80087a6:	4603      	mov	r3, r0
 80087a8:	6900      	ldr	r0, [r0, #16]
 80087aa:	1a80      	subs	r0, r0, r2
 80087ac:	b530      	push	{r4, r5, lr}
 80087ae:	d10e      	bne.n	80087ce <__mcmp+0x2a>
 80087b0:	3314      	adds	r3, #20
 80087b2:	3114      	adds	r1, #20
 80087b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80087b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80087bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80087c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80087c4:	4295      	cmp	r5, r2
 80087c6:	d003      	beq.n	80087d0 <__mcmp+0x2c>
 80087c8:	d205      	bcs.n	80087d6 <__mcmp+0x32>
 80087ca:	f04f 30ff 	mov.w	r0, #4294967295
 80087ce:	bd30      	pop	{r4, r5, pc}
 80087d0:	42a3      	cmp	r3, r4
 80087d2:	d3f3      	bcc.n	80087bc <__mcmp+0x18>
 80087d4:	e7fb      	b.n	80087ce <__mcmp+0x2a>
 80087d6:	2001      	movs	r0, #1
 80087d8:	e7f9      	b.n	80087ce <__mcmp+0x2a>
	...

080087dc <__mdiff>:
 80087dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	4689      	mov	r9, r1
 80087e2:	4606      	mov	r6, r0
 80087e4:	4611      	mov	r1, r2
 80087e6:	4648      	mov	r0, r9
 80087e8:	4614      	mov	r4, r2
 80087ea:	f7ff ffdb 	bl	80087a4 <__mcmp>
 80087ee:	1e05      	subs	r5, r0, #0
 80087f0:	d112      	bne.n	8008818 <__mdiff+0x3c>
 80087f2:	4629      	mov	r1, r5
 80087f4:	4630      	mov	r0, r6
 80087f6:	f7ff fd19 	bl	800822c <_Balloc>
 80087fa:	4602      	mov	r2, r0
 80087fc:	b928      	cbnz	r0, 800880a <__mdiff+0x2e>
 80087fe:	4b3f      	ldr	r3, [pc, #252]	@ (80088fc <__mdiff+0x120>)
 8008800:	f240 2137 	movw	r1, #567	@ 0x237
 8008804:	483e      	ldr	r0, [pc, #248]	@ (8008900 <__mdiff+0x124>)
 8008806:	f001 fa47 	bl	8009c98 <__assert_func>
 800880a:	2301      	movs	r3, #1
 800880c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008810:	4610      	mov	r0, r2
 8008812:	b003      	add	sp, #12
 8008814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008818:	bfbc      	itt	lt
 800881a:	464b      	movlt	r3, r9
 800881c:	46a1      	movlt	r9, r4
 800881e:	4630      	mov	r0, r6
 8008820:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008824:	bfba      	itte	lt
 8008826:	461c      	movlt	r4, r3
 8008828:	2501      	movlt	r5, #1
 800882a:	2500      	movge	r5, #0
 800882c:	f7ff fcfe 	bl	800822c <_Balloc>
 8008830:	4602      	mov	r2, r0
 8008832:	b918      	cbnz	r0, 800883c <__mdiff+0x60>
 8008834:	4b31      	ldr	r3, [pc, #196]	@ (80088fc <__mdiff+0x120>)
 8008836:	f240 2145 	movw	r1, #581	@ 0x245
 800883a:	e7e3      	b.n	8008804 <__mdiff+0x28>
 800883c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008840:	6926      	ldr	r6, [r4, #16]
 8008842:	60c5      	str	r5, [r0, #12]
 8008844:	f109 0310 	add.w	r3, r9, #16
 8008848:	f109 0514 	add.w	r5, r9, #20
 800884c:	f104 0e14 	add.w	lr, r4, #20
 8008850:	f100 0b14 	add.w	fp, r0, #20
 8008854:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008858:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800885c:	9301      	str	r3, [sp, #4]
 800885e:	46d9      	mov	r9, fp
 8008860:	f04f 0c00 	mov.w	ip, #0
 8008864:	9b01      	ldr	r3, [sp, #4]
 8008866:	f85e 0b04 	ldr.w	r0, [lr], #4
 800886a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800886e:	9301      	str	r3, [sp, #4]
 8008870:	fa1f f38a 	uxth.w	r3, sl
 8008874:	4619      	mov	r1, r3
 8008876:	b283      	uxth	r3, r0
 8008878:	1acb      	subs	r3, r1, r3
 800887a:	0c00      	lsrs	r0, r0, #16
 800887c:	4463      	add	r3, ip
 800887e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008882:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008886:	b29b      	uxth	r3, r3
 8008888:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800888c:	4576      	cmp	r6, lr
 800888e:	f849 3b04 	str.w	r3, [r9], #4
 8008892:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008896:	d8e5      	bhi.n	8008864 <__mdiff+0x88>
 8008898:	1b33      	subs	r3, r6, r4
 800889a:	3b15      	subs	r3, #21
 800889c:	f023 0303 	bic.w	r3, r3, #3
 80088a0:	3415      	adds	r4, #21
 80088a2:	3304      	adds	r3, #4
 80088a4:	42a6      	cmp	r6, r4
 80088a6:	bf38      	it	cc
 80088a8:	2304      	movcc	r3, #4
 80088aa:	441d      	add	r5, r3
 80088ac:	445b      	add	r3, fp
 80088ae:	461e      	mov	r6, r3
 80088b0:	462c      	mov	r4, r5
 80088b2:	4544      	cmp	r4, r8
 80088b4:	d30e      	bcc.n	80088d4 <__mdiff+0xf8>
 80088b6:	f108 0103 	add.w	r1, r8, #3
 80088ba:	1b49      	subs	r1, r1, r5
 80088bc:	f021 0103 	bic.w	r1, r1, #3
 80088c0:	3d03      	subs	r5, #3
 80088c2:	45a8      	cmp	r8, r5
 80088c4:	bf38      	it	cc
 80088c6:	2100      	movcc	r1, #0
 80088c8:	440b      	add	r3, r1
 80088ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088ce:	b191      	cbz	r1, 80088f6 <__mdiff+0x11a>
 80088d0:	6117      	str	r7, [r2, #16]
 80088d2:	e79d      	b.n	8008810 <__mdiff+0x34>
 80088d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80088d8:	46e6      	mov	lr, ip
 80088da:	0c08      	lsrs	r0, r1, #16
 80088dc:	fa1c fc81 	uxtah	ip, ip, r1
 80088e0:	4471      	add	r1, lr
 80088e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80088e6:	b289      	uxth	r1, r1
 80088e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80088ec:	f846 1b04 	str.w	r1, [r6], #4
 80088f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80088f4:	e7dd      	b.n	80088b2 <__mdiff+0xd6>
 80088f6:	3f01      	subs	r7, #1
 80088f8:	e7e7      	b.n	80088ca <__mdiff+0xee>
 80088fa:	bf00      	nop
 80088fc:	0800ad0d 	.word	0x0800ad0d
 8008900:	0800ad1e 	.word	0x0800ad1e

08008904 <__ulp>:
 8008904:	b082      	sub	sp, #8
 8008906:	ed8d 0b00 	vstr	d0, [sp]
 800890a:	9a01      	ldr	r2, [sp, #4]
 800890c:	4b0f      	ldr	r3, [pc, #60]	@ (800894c <__ulp+0x48>)
 800890e:	4013      	ands	r3, r2
 8008910:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008914:	2b00      	cmp	r3, #0
 8008916:	dc08      	bgt.n	800892a <__ulp+0x26>
 8008918:	425b      	negs	r3, r3
 800891a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800891e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008922:	da04      	bge.n	800892e <__ulp+0x2a>
 8008924:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008928:	4113      	asrs	r3, r2
 800892a:	2200      	movs	r2, #0
 800892c:	e008      	b.n	8008940 <__ulp+0x3c>
 800892e:	f1a2 0314 	sub.w	r3, r2, #20
 8008932:	2b1e      	cmp	r3, #30
 8008934:	bfda      	itte	le
 8008936:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800893a:	40da      	lsrle	r2, r3
 800893c:	2201      	movgt	r2, #1
 800893e:	2300      	movs	r3, #0
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	ec41 0b10 	vmov	d0, r0, r1
 8008948:	b002      	add	sp, #8
 800894a:	4770      	bx	lr
 800894c:	7ff00000 	.word	0x7ff00000

08008950 <__b2d>:
 8008950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008954:	6906      	ldr	r6, [r0, #16]
 8008956:	f100 0814 	add.w	r8, r0, #20
 800895a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800895e:	1f37      	subs	r7, r6, #4
 8008960:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008964:	4610      	mov	r0, r2
 8008966:	f7ff fd53 	bl	8008410 <__hi0bits>
 800896a:	f1c0 0320 	rsb	r3, r0, #32
 800896e:	280a      	cmp	r0, #10
 8008970:	600b      	str	r3, [r1, #0]
 8008972:	491b      	ldr	r1, [pc, #108]	@ (80089e0 <__b2d+0x90>)
 8008974:	dc15      	bgt.n	80089a2 <__b2d+0x52>
 8008976:	f1c0 0c0b 	rsb	ip, r0, #11
 800897a:	fa22 f30c 	lsr.w	r3, r2, ip
 800897e:	45b8      	cmp	r8, r7
 8008980:	ea43 0501 	orr.w	r5, r3, r1
 8008984:	bf34      	ite	cc
 8008986:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800898a:	2300      	movcs	r3, #0
 800898c:	3015      	adds	r0, #21
 800898e:	fa02 f000 	lsl.w	r0, r2, r0
 8008992:	fa23 f30c 	lsr.w	r3, r3, ip
 8008996:	4303      	orrs	r3, r0
 8008998:	461c      	mov	r4, r3
 800899a:	ec45 4b10 	vmov	d0, r4, r5
 800899e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a2:	45b8      	cmp	r8, r7
 80089a4:	bf3a      	itte	cc
 80089a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80089aa:	f1a6 0708 	subcc.w	r7, r6, #8
 80089ae:	2300      	movcs	r3, #0
 80089b0:	380b      	subs	r0, #11
 80089b2:	d012      	beq.n	80089da <__b2d+0x8a>
 80089b4:	f1c0 0120 	rsb	r1, r0, #32
 80089b8:	fa23 f401 	lsr.w	r4, r3, r1
 80089bc:	4082      	lsls	r2, r0
 80089be:	4322      	orrs	r2, r4
 80089c0:	4547      	cmp	r7, r8
 80089c2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80089c6:	bf8c      	ite	hi
 80089c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80089cc:	2200      	movls	r2, #0
 80089ce:	4083      	lsls	r3, r0
 80089d0:	40ca      	lsrs	r2, r1
 80089d2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80089d6:	4313      	orrs	r3, r2
 80089d8:	e7de      	b.n	8008998 <__b2d+0x48>
 80089da:	ea42 0501 	orr.w	r5, r2, r1
 80089de:	e7db      	b.n	8008998 <__b2d+0x48>
 80089e0:	3ff00000 	.word	0x3ff00000

080089e4 <__d2b>:
 80089e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089e8:	460f      	mov	r7, r1
 80089ea:	2101      	movs	r1, #1
 80089ec:	ec59 8b10 	vmov	r8, r9, d0
 80089f0:	4616      	mov	r6, r2
 80089f2:	f7ff fc1b 	bl	800822c <_Balloc>
 80089f6:	4604      	mov	r4, r0
 80089f8:	b930      	cbnz	r0, 8008a08 <__d2b+0x24>
 80089fa:	4602      	mov	r2, r0
 80089fc:	4b23      	ldr	r3, [pc, #140]	@ (8008a8c <__d2b+0xa8>)
 80089fe:	4824      	ldr	r0, [pc, #144]	@ (8008a90 <__d2b+0xac>)
 8008a00:	f240 310f 	movw	r1, #783	@ 0x30f
 8008a04:	f001 f948 	bl	8009c98 <__assert_func>
 8008a08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a10:	b10d      	cbz	r5, 8008a16 <__d2b+0x32>
 8008a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	f1b8 0300 	subs.w	r3, r8, #0
 8008a1c:	d023      	beq.n	8008a66 <__d2b+0x82>
 8008a1e:	4668      	mov	r0, sp
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	f7ff fd14 	bl	800844e <__lo0bits>
 8008a26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a2a:	b1d0      	cbz	r0, 8008a62 <__d2b+0x7e>
 8008a2c:	f1c0 0320 	rsb	r3, r0, #32
 8008a30:	fa02 f303 	lsl.w	r3, r2, r3
 8008a34:	430b      	orrs	r3, r1
 8008a36:	40c2      	lsrs	r2, r0
 8008a38:	6163      	str	r3, [r4, #20]
 8008a3a:	9201      	str	r2, [sp, #4]
 8008a3c:	9b01      	ldr	r3, [sp, #4]
 8008a3e:	61a3      	str	r3, [r4, #24]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	bf0c      	ite	eq
 8008a44:	2201      	moveq	r2, #1
 8008a46:	2202      	movne	r2, #2
 8008a48:	6122      	str	r2, [r4, #16]
 8008a4a:	b1a5      	cbz	r5, 8008a76 <__d2b+0x92>
 8008a4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008a50:	4405      	add	r5, r0
 8008a52:	603d      	str	r5, [r7, #0]
 8008a54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008a58:	6030      	str	r0, [r6, #0]
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	b003      	add	sp, #12
 8008a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a62:	6161      	str	r1, [r4, #20]
 8008a64:	e7ea      	b.n	8008a3c <__d2b+0x58>
 8008a66:	a801      	add	r0, sp, #4
 8008a68:	f7ff fcf1 	bl	800844e <__lo0bits>
 8008a6c:	9b01      	ldr	r3, [sp, #4]
 8008a6e:	6163      	str	r3, [r4, #20]
 8008a70:	3020      	adds	r0, #32
 8008a72:	2201      	movs	r2, #1
 8008a74:	e7e8      	b.n	8008a48 <__d2b+0x64>
 8008a76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008a7e:	6038      	str	r0, [r7, #0]
 8008a80:	6918      	ldr	r0, [r3, #16]
 8008a82:	f7ff fcc5 	bl	8008410 <__hi0bits>
 8008a86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a8a:	e7e5      	b.n	8008a58 <__d2b+0x74>
 8008a8c:	0800ad0d 	.word	0x0800ad0d
 8008a90:	0800ad1e 	.word	0x0800ad1e

08008a94 <__ratio>:
 8008a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a98:	4688      	mov	r8, r1
 8008a9a:	4669      	mov	r1, sp
 8008a9c:	4681      	mov	r9, r0
 8008a9e:	f7ff ff57 	bl	8008950 <__b2d>
 8008aa2:	a901      	add	r1, sp, #4
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	ec55 4b10 	vmov	r4, r5, d0
 8008aaa:	f7ff ff51 	bl	8008950 <__b2d>
 8008aae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008ab2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8008ab6:	1ad2      	subs	r2, r2, r3
 8008ab8:	e9dd 3100 	ldrd	r3, r1, [sp]
 8008abc:	1a5b      	subs	r3, r3, r1
 8008abe:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8008ac2:	ec57 6b10 	vmov	r6, r7, d0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	bfd6      	itet	le
 8008aca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ace:	462a      	movgt	r2, r5
 8008ad0:	463a      	movle	r2, r7
 8008ad2:	46ab      	mov	fp, r5
 8008ad4:	46a2      	mov	sl, r4
 8008ad6:	bfce      	itee	gt
 8008ad8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008adc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8008ae0:	ee00 3a90 	vmovle	s1, r3
 8008ae4:	ec4b ab17 	vmov	d7, sl, fp
 8008ae8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8008aec:	b003      	add	sp, #12
 8008aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008af2 <__copybits>:
 8008af2:	3901      	subs	r1, #1
 8008af4:	b570      	push	{r4, r5, r6, lr}
 8008af6:	1149      	asrs	r1, r1, #5
 8008af8:	6914      	ldr	r4, [r2, #16]
 8008afa:	3101      	adds	r1, #1
 8008afc:	f102 0314 	add.w	r3, r2, #20
 8008b00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b08:	1f05      	subs	r5, r0, #4
 8008b0a:	42a3      	cmp	r3, r4
 8008b0c:	d30c      	bcc.n	8008b28 <__copybits+0x36>
 8008b0e:	1aa3      	subs	r3, r4, r2
 8008b10:	3b11      	subs	r3, #17
 8008b12:	f023 0303 	bic.w	r3, r3, #3
 8008b16:	3211      	adds	r2, #17
 8008b18:	42a2      	cmp	r2, r4
 8008b1a:	bf88      	it	hi
 8008b1c:	2300      	movhi	r3, #0
 8008b1e:	4418      	add	r0, r3
 8008b20:	2300      	movs	r3, #0
 8008b22:	4288      	cmp	r0, r1
 8008b24:	d305      	bcc.n	8008b32 <__copybits+0x40>
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	f853 6b04 	ldr.w	r6, [r3], #4
 8008b2c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008b30:	e7eb      	b.n	8008b0a <__copybits+0x18>
 8008b32:	f840 3b04 	str.w	r3, [r0], #4
 8008b36:	e7f4      	b.n	8008b22 <__copybits+0x30>

08008b38 <__any_on>:
 8008b38:	f100 0214 	add.w	r2, r0, #20
 8008b3c:	6900      	ldr	r0, [r0, #16]
 8008b3e:	114b      	asrs	r3, r1, #5
 8008b40:	4298      	cmp	r0, r3
 8008b42:	b510      	push	{r4, lr}
 8008b44:	db11      	blt.n	8008b6a <__any_on+0x32>
 8008b46:	dd0a      	ble.n	8008b5e <__any_on+0x26>
 8008b48:	f011 011f 	ands.w	r1, r1, #31
 8008b4c:	d007      	beq.n	8008b5e <__any_on+0x26>
 8008b4e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008b52:	fa24 f001 	lsr.w	r0, r4, r1
 8008b56:	fa00 f101 	lsl.w	r1, r0, r1
 8008b5a:	428c      	cmp	r4, r1
 8008b5c:	d10b      	bne.n	8008b76 <__any_on+0x3e>
 8008b5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d803      	bhi.n	8008b6e <__any_on+0x36>
 8008b66:	2000      	movs	r0, #0
 8008b68:	bd10      	pop	{r4, pc}
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	e7f7      	b.n	8008b5e <__any_on+0x26>
 8008b6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b72:	2900      	cmp	r1, #0
 8008b74:	d0f5      	beq.n	8008b62 <__any_on+0x2a>
 8008b76:	2001      	movs	r0, #1
 8008b78:	e7f6      	b.n	8008b68 <__any_on+0x30>

08008b7a <sulp>:
 8008b7a:	b570      	push	{r4, r5, r6, lr}
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	460d      	mov	r5, r1
 8008b80:	4616      	mov	r6, r2
 8008b82:	ec45 4b10 	vmov	d0, r4, r5
 8008b86:	f7ff febd 	bl	8008904 <__ulp>
 8008b8a:	b17e      	cbz	r6, 8008bac <sulp+0x32>
 8008b8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008b90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	dd09      	ble.n	8008bac <sulp+0x32>
 8008b98:	051b      	lsls	r3, r3, #20
 8008b9a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8008ba4:	ec41 0b17 	vmov	d7, r0, r1
 8008ba8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008bac:	bd70      	pop	{r4, r5, r6, pc}
	...

08008bb0 <_strtod_l>:
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	ed2d 8b0a 	vpush	{d8-d12}
 8008bb8:	b097      	sub	sp, #92	@ 0x5c
 8008bba:	4688      	mov	r8, r1
 8008bbc:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	9212      	str	r2, [sp, #72]	@ 0x48
 8008bc2:	9005      	str	r0, [sp, #20]
 8008bc4:	f04f 0a00 	mov.w	sl, #0
 8008bc8:	f04f 0b00 	mov.w	fp, #0
 8008bcc:	460a      	mov	r2, r1
 8008bce:	9211      	str	r2, [sp, #68]	@ 0x44
 8008bd0:	7811      	ldrb	r1, [r2, #0]
 8008bd2:	292b      	cmp	r1, #43	@ 0x2b
 8008bd4:	d04c      	beq.n	8008c70 <_strtod_l+0xc0>
 8008bd6:	d839      	bhi.n	8008c4c <_strtod_l+0x9c>
 8008bd8:	290d      	cmp	r1, #13
 8008bda:	d833      	bhi.n	8008c44 <_strtod_l+0x94>
 8008bdc:	2908      	cmp	r1, #8
 8008bde:	d833      	bhi.n	8008c48 <_strtod_l+0x98>
 8008be0:	2900      	cmp	r1, #0
 8008be2:	d03c      	beq.n	8008c5e <_strtod_l+0xae>
 8008be4:	2200      	movs	r2, #0
 8008be6:	9208      	str	r2, [sp, #32]
 8008be8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8008bea:	782a      	ldrb	r2, [r5, #0]
 8008bec:	2a30      	cmp	r2, #48	@ 0x30
 8008bee:	f040 80b7 	bne.w	8008d60 <_strtod_l+0x1b0>
 8008bf2:	786a      	ldrb	r2, [r5, #1]
 8008bf4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008bf8:	2a58      	cmp	r2, #88	@ 0x58
 8008bfa:	d170      	bne.n	8008cde <_strtod_l+0x12e>
 8008bfc:	9302      	str	r3, [sp, #8]
 8008bfe:	9b08      	ldr	r3, [sp, #32]
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	ab12      	add	r3, sp, #72	@ 0x48
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	4a90      	ldr	r2, [pc, #576]	@ (8008e48 <_strtod_l+0x298>)
 8008c08:	9805      	ldr	r0, [sp, #20]
 8008c0a:	ab13      	add	r3, sp, #76	@ 0x4c
 8008c0c:	a911      	add	r1, sp, #68	@ 0x44
 8008c0e:	f001 f8dd 	bl	8009dcc <__gethex>
 8008c12:	f010 060f 	ands.w	r6, r0, #15
 8008c16:	4604      	mov	r4, r0
 8008c18:	d005      	beq.n	8008c26 <_strtod_l+0x76>
 8008c1a:	2e06      	cmp	r6, #6
 8008c1c:	d12a      	bne.n	8008c74 <_strtod_l+0xc4>
 8008c1e:	3501      	adds	r5, #1
 8008c20:	2300      	movs	r3, #0
 8008c22:	9511      	str	r5, [sp, #68]	@ 0x44
 8008c24:	9308      	str	r3, [sp, #32]
 8008c26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f040 8537 	bne.w	800969c <_strtod_l+0xaec>
 8008c2e:	9b08      	ldr	r3, [sp, #32]
 8008c30:	ec4b ab10 	vmov	d0, sl, fp
 8008c34:	b1cb      	cbz	r3, 8008c6a <_strtod_l+0xba>
 8008c36:	eeb1 0b40 	vneg.f64	d0, d0
 8008c3a:	b017      	add	sp, #92	@ 0x5c
 8008c3c:	ecbd 8b0a 	vpop	{d8-d12}
 8008c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c44:	2920      	cmp	r1, #32
 8008c46:	d1cd      	bne.n	8008be4 <_strtod_l+0x34>
 8008c48:	3201      	adds	r2, #1
 8008c4a:	e7c0      	b.n	8008bce <_strtod_l+0x1e>
 8008c4c:	292d      	cmp	r1, #45	@ 0x2d
 8008c4e:	d1c9      	bne.n	8008be4 <_strtod_l+0x34>
 8008c50:	2101      	movs	r1, #1
 8008c52:	9108      	str	r1, [sp, #32]
 8008c54:	1c51      	adds	r1, r2, #1
 8008c56:	9111      	str	r1, [sp, #68]	@ 0x44
 8008c58:	7852      	ldrb	r2, [r2, #1]
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	d1c4      	bne.n	8008be8 <_strtod_l+0x38>
 8008c5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c60:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f040 8517 	bne.w	8009698 <_strtod_l+0xae8>
 8008c6a:	ec4b ab10 	vmov	d0, sl, fp
 8008c6e:	e7e4      	b.n	8008c3a <_strtod_l+0x8a>
 8008c70:	2100      	movs	r1, #0
 8008c72:	e7ee      	b.n	8008c52 <_strtod_l+0xa2>
 8008c74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c76:	b13a      	cbz	r2, 8008c88 <_strtod_l+0xd8>
 8008c78:	2135      	movs	r1, #53	@ 0x35
 8008c7a:	a814      	add	r0, sp, #80	@ 0x50
 8008c7c:	f7ff ff39 	bl	8008af2 <__copybits>
 8008c80:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008c82:	9805      	ldr	r0, [sp, #20]
 8008c84:	f7ff fb12 	bl	80082ac <_Bfree>
 8008c88:	1e73      	subs	r3, r6, #1
 8008c8a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d806      	bhi.n	8008c9e <_strtod_l+0xee>
 8008c90:	e8df f003 	tbb	[pc, r3]
 8008c94:	201d0314 	.word	0x201d0314
 8008c98:	14          	.byte	0x14
 8008c99:	00          	.byte	0x00
 8008c9a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8008c9e:	05e3      	lsls	r3, r4, #23
 8008ca0:	bf48      	it	mi
 8008ca2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008ca6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008caa:	0d1b      	lsrs	r3, r3, #20
 8008cac:	051b      	lsls	r3, r3, #20
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1b9      	bne.n	8008c26 <_strtod_l+0x76>
 8008cb2:	f7fe fb9f 	bl	80073f4 <__errno>
 8008cb6:	2322      	movs	r3, #34	@ 0x22
 8008cb8:	6003      	str	r3, [r0, #0]
 8008cba:	e7b4      	b.n	8008c26 <_strtod_l+0x76>
 8008cbc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8008cc0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008cc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008cc8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ccc:	e7e7      	b.n	8008c9e <_strtod_l+0xee>
 8008cce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008e50 <_strtod_l+0x2a0>
 8008cd2:	e7e4      	b.n	8008c9e <_strtod_l+0xee>
 8008cd4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008cd8:	f04f 3aff 	mov.w	sl, #4294967295
 8008cdc:	e7df      	b.n	8008c9e <_strtod_l+0xee>
 8008cde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ce0:	1c5a      	adds	r2, r3, #1
 8008ce2:	9211      	str	r2, [sp, #68]	@ 0x44
 8008ce4:	785b      	ldrb	r3, [r3, #1]
 8008ce6:	2b30      	cmp	r3, #48	@ 0x30
 8008ce8:	d0f9      	beq.n	8008cde <_strtod_l+0x12e>
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d09b      	beq.n	8008c26 <_strtod_l+0x76>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	9307      	str	r3, [sp, #28]
 8008cf2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008cf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9306      	str	r3, [sp, #24]
 8008cfa:	4699      	mov	r9, r3
 8008cfc:	461d      	mov	r5, r3
 8008cfe:	220a      	movs	r2, #10
 8008d00:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8008d02:	7804      	ldrb	r4, [r0, #0]
 8008d04:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8008d08:	b2d9      	uxtb	r1, r3
 8008d0a:	2909      	cmp	r1, #9
 8008d0c:	d92a      	bls.n	8008d64 <_strtod_l+0x1b4>
 8008d0e:	494f      	ldr	r1, [pc, #316]	@ (8008e4c <_strtod_l+0x29c>)
 8008d10:	2201      	movs	r2, #1
 8008d12:	f000 ff87 	bl	8009c24 <strncmp>
 8008d16:	b398      	cbz	r0, 8008d80 <_strtod_l+0x1d0>
 8008d18:	2000      	movs	r0, #0
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	4607      	mov	r7, r0
 8008d20:	4601      	mov	r1, r0
 8008d22:	2a65      	cmp	r2, #101	@ 0x65
 8008d24:	d001      	beq.n	8008d2a <_strtod_l+0x17a>
 8008d26:	2a45      	cmp	r2, #69	@ 0x45
 8008d28:	d118      	bne.n	8008d5c <_strtod_l+0x1ac>
 8008d2a:	b91b      	cbnz	r3, 8008d34 <_strtod_l+0x184>
 8008d2c:	9b07      	ldr	r3, [sp, #28]
 8008d2e:	4303      	orrs	r3, r0
 8008d30:	d095      	beq.n	8008c5e <_strtod_l+0xae>
 8008d32:	2300      	movs	r3, #0
 8008d34:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8008d38:	f108 0201 	add.w	r2, r8, #1
 8008d3c:	9211      	str	r2, [sp, #68]	@ 0x44
 8008d3e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008d42:	2a2b      	cmp	r2, #43	@ 0x2b
 8008d44:	d074      	beq.n	8008e30 <_strtod_l+0x280>
 8008d46:	2a2d      	cmp	r2, #45	@ 0x2d
 8008d48:	d07a      	beq.n	8008e40 <_strtod_l+0x290>
 8008d4a:	f04f 0e00 	mov.w	lr, #0
 8008d4e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8008d52:	2c09      	cmp	r4, #9
 8008d54:	f240 8082 	bls.w	8008e5c <_strtod_l+0x2ac>
 8008d58:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8008d5c:	2400      	movs	r4, #0
 8008d5e:	e09d      	b.n	8008e9c <_strtod_l+0x2ec>
 8008d60:	2300      	movs	r3, #0
 8008d62:	e7c5      	b.n	8008cf0 <_strtod_l+0x140>
 8008d64:	2d08      	cmp	r5, #8
 8008d66:	bfc8      	it	gt
 8008d68:	9906      	ldrgt	r1, [sp, #24]
 8008d6a:	f100 0001 	add.w	r0, r0, #1
 8008d6e:	bfca      	itet	gt
 8008d70:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008d74:	fb02 3909 	mlale	r9, r2, r9, r3
 8008d78:	9306      	strgt	r3, [sp, #24]
 8008d7a:	3501      	adds	r5, #1
 8008d7c:	9011      	str	r0, [sp, #68]	@ 0x44
 8008d7e:	e7bf      	b.n	8008d00 <_strtod_l+0x150>
 8008d80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	9211      	str	r2, [sp, #68]	@ 0x44
 8008d86:	785a      	ldrb	r2, [r3, #1]
 8008d88:	b3bd      	cbz	r5, 8008dfa <_strtod_l+0x24a>
 8008d8a:	4607      	mov	r7, r0
 8008d8c:	462b      	mov	r3, r5
 8008d8e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008d92:	2909      	cmp	r1, #9
 8008d94:	d912      	bls.n	8008dbc <_strtod_l+0x20c>
 8008d96:	2101      	movs	r1, #1
 8008d98:	e7c3      	b.n	8008d22 <_strtod_l+0x172>
 8008d9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d9c:	1c5a      	adds	r2, r3, #1
 8008d9e:	9211      	str	r2, [sp, #68]	@ 0x44
 8008da0:	785a      	ldrb	r2, [r3, #1]
 8008da2:	3001      	adds	r0, #1
 8008da4:	2a30      	cmp	r2, #48	@ 0x30
 8008da6:	d0f8      	beq.n	8008d9a <_strtod_l+0x1ea>
 8008da8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	f200 847a 	bhi.w	80096a6 <_strtod_l+0xaf6>
 8008db2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008db4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008db6:	4607      	mov	r7, r0
 8008db8:	2000      	movs	r0, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	3a30      	subs	r2, #48	@ 0x30
 8008dbe:	f100 0101 	add.w	r1, r0, #1
 8008dc2:	d014      	beq.n	8008dee <_strtod_l+0x23e>
 8008dc4:	440f      	add	r7, r1
 8008dc6:	469c      	mov	ip, r3
 8008dc8:	f04f 0e0a 	mov.w	lr, #10
 8008dcc:	f10c 0401 	add.w	r4, ip, #1
 8008dd0:	1ae6      	subs	r6, r4, r3
 8008dd2:	42b1      	cmp	r1, r6
 8008dd4:	dc13      	bgt.n	8008dfe <_strtod_l+0x24e>
 8008dd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008dda:	1819      	adds	r1, r3, r0
 8008ddc:	2908      	cmp	r1, #8
 8008dde:	f103 0301 	add.w	r3, r3, #1
 8008de2:	4403      	add	r3, r0
 8008de4:	dc19      	bgt.n	8008e1a <_strtod_l+0x26a>
 8008de6:	210a      	movs	r1, #10
 8008de8:	fb01 2909 	mla	r9, r1, r9, r2
 8008dec:	2100      	movs	r1, #0
 8008dee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008df0:	1c50      	adds	r0, r2, #1
 8008df2:	9011      	str	r0, [sp, #68]	@ 0x44
 8008df4:	7852      	ldrb	r2, [r2, #1]
 8008df6:	4608      	mov	r0, r1
 8008df8:	e7c9      	b.n	8008d8e <_strtod_l+0x1de>
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	e7d2      	b.n	8008da4 <_strtod_l+0x1f4>
 8008dfe:	f1bc 0f08 	cmp.w	ip, #8
 8008e02:	dc03      	bgt.n	8008e0c <_strtod_l+0x25c>
 8008e04:	fb0e f909 	mul.w	r9, lr, r9
 8008e08:	46a4      	mov	ip, r4
 8008e0a:	e7df      	b.n	8008dcc <_strtod_l+0x21c>
 8008e0c:	2c10      	cmp	r4, #16
 8008e0e:	bfde      	ittt	le
 8008e10:	9e06      	ldrle	r6, [sp, #24]
 8008e12:	fb0e f606 	mulle.w	r6, lr, r6
 8008e16:	9606      	strle	r6, [sp, #24]
 8008e18:	e7f6      	b.n	8008e08 <_strtod_l+0x258>
 8008e1a:	290f      	cmp	r1, #15
 8008e1c:	bfdf      	itttt	le
 8008e1e:	9806      	ldrle	r0, [sp, #24]
 8008e20:	210a      	movle	r1, #10
 8008e22:	fb01 2200 	mlale	r2, r1, r0, r2
 8008e26:	9206      	strle	r2, [sp, #24]
 8008e28:	e7e0      	b.n	8008dec <_strtod_l+0x23c>
 8008e2a:	2700      	movs	r7, #0
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	e77d      	b.n	8008d2c <_strtod_l+0x17c>
 8008e30:	f04f 0e00 	mov.w	lr, #0
 8008e34:	f108 0202 	add.w	r2, r8, #2
 8008e38:	9211      	str	r2, [sp, #68]	@ 0x44
 8008e3a:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008e3e:	e786      	b.n	8008d4e <_strtod_l+0x19e>
 8008e40:	f04f 0e01 	mov.w	lr, #1
 8008e44:	e7f6      	b.n	8008e34 <_strtod_l+0x284>
 8008e46:	bf00      	nop
 8008e48:	0800af44 	.word	0x0800af44
 8008e4c:	0800ad77 	.word	0x0800ad77
 8008e50:	7ff00000 	.word	0x7ff00000
 8008e54:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e56:	1c54      	adds	r4, r2, #1
 8008e58:	9411      	str	r4, [sp, #68]	@ 0x44
 8008e5a:	7852      	ldrb	r2, [r2, #1]
 8008e5c:	2a30      	cmp	r2, #48	@ 0x30
 8008e5e:	d0f9      	beq.n	8008e54 <_strtod_l+0x2a4>
 8008e60:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8008e64:	2c08      	cmp	r4, #8
 8008e66:	f63f af79 	bhi.w	8008d5c <_strtod_l+0x1ac>
 8008e6a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8008e6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e70:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e72:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e74:	1c54      	adds	r4, r2, #1
 8008e76:	9411      	str	r4, [sp, #68]	@ 0x44
 8008e78:	7852      	ldrb	r2, [r2, #1]
 8008e7a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8008e7e:	2e09      	cmp	r6, #9
 8008e80:	d937      	bls.n	8008ef2 <_strtod_l+0x342>
 8008e82:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008e84:	1ba4      	subs	r4, r4, r6
 8008e86:	2c08      	cmp	r4, #8
 8008e88:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8008e8c:	dc02      	bgt.n	8008e94 <_strtod_l+0x2e4>
 8008e8e:	4564      	cmp	r4, ip
 8008e90:	bfa8      	it	ge
 8008e92:	4664      	movge	r4, ip
 8008e94:	f1be 0f00 	cmp.w	lr, #0
 8008e98:	d000      	beq.n	8008e9c <_strtod_l+0x2ec>
 8008e9a:	4264      	negs	r4, r4
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d14d      	bne.n	8008f3c <_strtod_l+0x38c>
 8008ea0:	9b07      	ldr	r3, [sp, #28]
 8008ea2:	4318      	orrs	r0, r3
 8008ea4:	f47f aebf 	bne.w	8008c26 <_strtod_l+0x76>
 8008ea8:	2900      	cmp	r1, #0
 8008eaa:	f47f aed8 	bne.w	8008c5e <_strtod_l+0xae>
 8008eae:	2a69      	cmp	r2, #105	@ 0x69
 8008eb0:	d027      	beq.n	8008f02 <_strtod_l+0x352>
 8008eb2:	dc24      	bgt.n	8008efe <_strtod_l+0x34e>
 8008eb4:	2a49      	cmp	r2, #73	@ 0x49
 8008eb6:	d024      	beq.n	8008f02 <_strtod_l+0x352>
 8008eb8:	2a4e      	cmp	r2, #78	@ 0x4e
 8008eba:	f47f aed0 	bne.w	8008c5e <_strtod_l+0xae>
 8008ebe:	4997      	ldr	r1, [pc, #604]	@ (800911c <_strtod_l+0x56c>)
 8008ec0:	a811      	add	r0, sp, #68	@ 0x44
 8008ec2:	f001 f9a5 	bl	800a210 <__match>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	f43f aec9 	beq.w	8008c5e <_strtod_l+0xae>
 8008ecc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b28      	cmp	r3, #40	@ 0x28
 8008ed2:	d12d      	bne.n	8008f30 <_strtod_l+0x380>
 8008ed4:	4992      	ldr	r1, [pc, #584]	@ (8009120 <_strtod_l+0x570>)
 8008ed6:	aa14      	add	r2, sp, #80	@ 0x50
 8008ed8:	a811      	add	r0, sp, #68	@ 0x44
 8008eda:	f001 f9ad 	bl	800a238 <__hexnan>
 8008ede:	2805      	cmp	r0, #5
 8008ee0:	d126      	bne.n	8008f30 <_strtod_l+0x380>
 8008ee2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008ee4:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8008ee8:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008eec:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008ef0:	e699      	b.n	8008c26 <_strtod_l+0x76>
 8008ef2:	240a      	movs	r4, #10
 8008ef4:	fb04 2c0c 	mla	ip, r4, ip, r2
 8008ef8:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8008efc:	e7b9      	b.n	8008e72 <_strtod_l+0x2c2>
 8008efe:	2a6e      	cmp	r2, #110	@ 0x6e
 8008f00:	e7db      	b.n	8008eba <_strtod_l+0x30a>
 8008f02:	4988      	ldr	r1, [pc, #544]	@ (8009124 <_strtod_l+0x574>)
 8008f04:	a811      	add	r0, sp, #68	@ 0x44
 8008f06:	f001 f983 	bl	800a210 <__match>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	f43f aea7 	beq.w	8008c5e <_strtod_l+0xae>
 8008f10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f12:	4985      	ldr	r1, [pc, #532]	@ (8009128 <_strtod_l+0x578>)
 8008f14:	3b01      	subs	r3, #1
 8008f16:	a811      	add	r0, sp, #68	@ 0x44
 8008f18:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f1a:	f001 f979 	bl	800a210 <__match>
 8008f1e:	b910      	cbnz	r0, 8008f26 <_strtod_l+0x376>
 8008f20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f22:	3301      	adds	r3, #1
 8008f24:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f26:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800913c <_strtod_l+0x58c>
 8008f2a:	f04f 0a00 	mov.w	sl, #0
 8008f2e:	e67a      	b.n	8008c26 <_strtod_l+0x76>
 8008f30:	487e      	ldr	r0, [pc, #504]	@ (800912c <_strtod_l+0x57c>)
 8008f32:	f000 fea9 	bl	8009c88 <nan>
 8008f36:	ec5b ab10 	vmov	sl, fp, d0
 8008f3a:	e674      	b.n	8008c26 <_strtod_l+0x76>
 8008f3c:	ee07 9a90 	vmov	s15, r9
 8008f40:	1be2      	subs	r2, r4, r7
 8008f42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008f46:	2d00      	cmp	r5, #0
 8008f48:	bf08      	it	eq
 8008f4a:	461d      	moveq	r5, r3
 8008f4c:	2b10      	cmp	r3, #16
 8008f4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f50:	461a      	mov	r2, r3
 8008f52:	bfa8      	it	ge
 8008f54:	2210      	movge	r2, #16
 8008f56:	2b09      	cmp	r3, #9
 8008f58:	ec5b ab17 	vmov	sl, fp, d7
 8008f5c:	dc15      	bgt.n	8008f8a <_strtod_l+0x3da>
 8008f5e:	1be1      	subs	r1, r4, r7
 8008f60:	2900      	cmp	r1, #0
 8008f62:	f43f ae60 	beq.w	8008c26 <_strtod_l+0x76>
 8008f66:	eba4 0107 	sub.w	r1, r4, r7
 8008f6a:	dd72      	ble.n	8009052 <_strtod_l+0x4a2>
 8008f6c:	2916      	cmp	r1, #22
 8008f6e:	dc59      	bgt.n	8009024 <_strtod_l+0x474>
 8008f70:	4b6f      	ldr	r3, [pc, #444]	@ (8009130 <_strtod_l+0x580>)
 8008f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f78:	ed93 7b00 	vldr	d7, [r3]
 8008f7c:	ec4b ab16 	vmov	d6, sl, fp
 8008f80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f84:	ec5b ab17 	vmov	sl, fp, d7
 8008f88:	e64d      	b.n	8008c26 <_strtod_l+0x76>
 8008f8a:	4969      	ldr	r1, [pc, #420]	@ (8009130 <_strtod_l+0x580>)
 8008f8c:	eddd 6a06 	vldr	s13, [sp, #24]
 8008f90:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008f94:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8008f98:	2b0f      	cmp	r3, #15
 8008f9a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008f9e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008fa2:	ec5b ab16 	vmov	sl, fp, d6
 8008fa6:	ddda      	ble.n	8008f5e <_strtod_l+0x3ae>
 8008fa8:	1a9a      	subs	r2, r3, r2
 8008faa:	1be1      	subs	r1, r4, r7
 8008fac:	440a      	add	r2, r1
 8008fae:	2a00      	cmp	r2, #0
 8008fb0:	f340 8094 	ble.w	80090dc <_strtod_l+0x52c>
 8008fb4:	f012 000f 	ands.w	r0, r2, #15
 8008fb8:	d00a      	beq.n	8008fd0 <_strtod_l+0x420>
 8008fba:	495d      	ldr	r1, [pc, #372]	@ (8009130 <_strtod_l+0x580>)
 8008fbc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008fc0:	ed91 7b00 	vldr	d7, [r1]
 8008fc4:	ec4b ab16 	vmov	d6, sl, fp
 8008fc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008fcc:	ec5b ab17 	vmov	sl, fp, d7
 8008fd0:	f032 020f 	bics.w	r2, r2, #15
 8008fd4:	d073      	beq.n	80090be <_strtod_l+0x50e>
 8008fd6:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8008fda:	dd47      	ble.n	800906c <_strtod_l+0x4bc>
 8008fdc:	2400      	movs	r4, #0
 8008fde:	4625      	mov	r5, r4
 8008fe0:	9407      	str	r4, [sp, #28]
 8008fe2:	4626      	mov	r6, r4
 8008fe4:	9a05      	ldr	r2, [sp, #20]
 8008fe6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800913c <_strtod_l+0x58c>
 8008fea:	2322      	movs	r3, #34	@ 0x22
 8008fec:	6013      	str	r3, [r2, #0]
 8008fee:	f04f 0a00 	mov.w	sl, #0
 8008ff2:	9b07      	ldr	r3, [sp, #28]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f43f ae16 	beq.w	8008c26 <_strtod_l+0x76>
 8008ffa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008ffc:	9805      	ldr	r0, [sp, #20]
 8008ffe:	f7ff f955 	bl	80082ac <_Bfree>
 8009002:	9805      	ldr	r0, [sp, #20]
 8009004:	4631      	mov	r1, r6
 8009006:	f7ff f951 	bl	80082ac <_Bfree>
 800900a:	9805      	ldr	r0, [sp, #20]
 800900c:	4629      	mov	r1, r5
 800900e:	f7ff f94d 	bl	80082ac <_Bfree>
 8009012:	9907      	ldr	r1, [sp, #28]
 8009014:	9805      	ldr	r0, [sp, #20]
 8009016:	f7ff f949 	bl	80082ac <_Bfree>
 800901a:	9805      	ldr	r0, [sp, #20]
 800901c:	4621      	mov	r1, r4
 800901e:	f7ff f945 	bl	80082ac <_Bfree>
 8009022:	e600      	b.n	8008c26 <_strtod_l+0x76>
 8009024:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8009028:	1be0      	subs	r0, r4, r7
 800902a:	4281      	cmp	r1, r0
 800902c:	dbbc      	blt.n	8008fa8 <_strtod_l+0x3f8>
 800902e:	4a40      	ldr	r2, [pc, #256]	@ (8009130 <_strtod_l+0x580>)
 8009030:	f1c3 030f 	rsb	r3, r3, #15
 8009034:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009038:	ed91 7b00 	vldr	d7, [r1]
 800903c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800903e:	ec4b ab16 	vmov	d6, sl, fp
 8009042:	1acb      	subs	r3, r1, r3
 8009044:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009048:	ee27 7b06 	vmul.f64	d7, d7, d6
 800904c:	ed92 6b00 	vldr	d6, [r2]
 8009050:	e796      	b.n	8008f80 <_strtod_l+0x3d0>
 8009052:	3116      	adds	r1, #22
 8009054:	dba8      	blt.n	8008fa8 <_strtod_l+0x3f8>
 8009056:	4b36      	ldr	r3, [pc, #216]	@ (8009130 <_strtod_l+0x580>)
 8009058:	1b3c      	subs	r4, r7, r4
 800905a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800905e:	ed94 7b00 	vldr	d7, [r4]
 8009062:	ec4b ab16 	vmov	d6, sl, fp
 8009066:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800906a:	e78b      	b.n	8008f84 <_strtod_l+0x3d4>
 800906c:	2000      	movs	r0, #0
 800906e:	ec4b ab17 	vmov	d7, sl, fp
 8009072:	4e30      	ldr	r6, [pc, #192]	@ (8009134 <_strtod_l+0x584>)
 8009074:	1112      	asrs	r2, r2, #4
 8009076:	4601      	mov	r1, r0
 8009078:	2a01      	cmp	r2, #1
 800907a:	dc23      	bgt.n	80090c4 <_strtod_l+0x514>
 800907c:	b108      	cbz	r0, 8009082 <_strtod_l+0x4d2>
 800907e:	ec5b ab17 	vmov	sl, fp, d7
 8009082:	4a2c      	ldr	r2, [pc, #176]	@ (8009134 <_strtod_l+0x584>)
 8009084:	482c      	ldr	r0, [pc, #176]	@ (8009138 <_strtod_l+0x588>)
 8009086:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800908a:	ed92 7b00 	vldr	d7, [r2]
 800908e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009092:	ec4b ab16 	vmov	d6, sl, fp
 8009096:	4a29      	ldr	r2, [pc, #164]	@ (800913c <_strtod_l+0x58c>)
 8009098:	ee27 7b06 	vmul.f64	d7, d7, d6
 800909c:	ee17 1a90 	vmov	r1, s15
 80090a0:	400a      	ands	r2, r1
 80090a2:	4282      	cmp	r2, r0
 80090a4:	ec5b ab17 	vmov	sl, fp, d7
 80090a8:	d898      	bhi.n	8008fdc <_strtod_l+0x42c>
 80090aa:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80090ae:	4282      	cmp	r2, r0
 80090b0:	bf86      	itte	hi
 80090b2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009140 <_strtod_l+0x590>
 80090b6:	f04f 3aff 	movhi.w	sl, #4294967295
 80090ba:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80090be:	2200      	movs	r2, #0
 80090c0:	9206      	str	r2, [sp, #24]
 80090c2:	e076      	b.n	80091b2 <_strtod_l+0x602>
 80090c4:	f012 0f01 	tst.w	r2, #1
 80090c8:	d004      	beq.n	80090d4 <_strtod_l+0x524>
 80090ca:	ed96 6b00 	vldr	d6, [r6]
 80090ce:	2001      	movs	r0, #1
 80090d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80090d4:	3101      	adds	r1, #1
 80090d6:	1052      	asrs	r2, r2, #1
 80090d8:	3608      	adds	r6, #8
 80090da:	e7cd      	b.n	8009078 <_strtod_l+0x4c8>
 80090dc:	d0ef      	beq.n	80090be <_strtod_l+0x50e>
 80090de:	4252      	negs	r2, r2
 80090e0:	f012 000f 	ands.w	r0, r2, #15
 80090e4:	d00a      	beq.n	80090fc <_strtod_l+0x54c>
 80090e6:	4912      	ldr	r1, [pc, #72]	@ (8009130 <_strtod_l+0x580>)
 80090e8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80090ec:	ed91 7b00 	vldr	d7, [r1]
 80090f0:	ec4b ab16 	vmov	d6, sl, fp
 80090f4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80090f8:	ec5b ab17 	vmov	sl, fp, d7
 80090fc:	1112      	asrs	r2, r2, #4
 80090fe:	d0de      	beq.n	80090be <_strtod_l+0x50e>
 8009100:	2a1f      	cmp	r2, #31
 8009102:	dd1f      	ble.n	8009144 <_strtod_l+0x594>
 8009104:	2400      	movs	r4, #0
 8009106:	4625      	mov	r5, r4
 8009108:	9407      	str	r4, [sp, #28]
 800910a:	4626      	mov	r6, r4
 800910c:	9a05      	ldr	r2, [sp, #20]
 800910e:	2322      	movs	r3, #34	@ 0x22
 8009110:	f04f 0a00 	mov.w	sl, #0
 8009114:	f04f 0b00 	mov.w	fp, #0
 8009118:	6013      	str	r3, [r2, #0]
 800911a:	e76a      	b.n	8008ff2 <_strtod_l+0x442>
 800911c:	0800ac65 	.word	0x0800ac65
 8009120:	0800af30 	.word	0x0800af30
 8009124:	0800ac5d 	.word	0x0800ac5d
 8009128:	0800ac94 	.word	0x0800ac94
 800912c:	0800adcd 	.word	0x0800adcd
 8009130:	0800ae68 	.word	0x0800ae68
 8009134:	0800ae40 	.word	0x0800ae40
 8009138:	7ca00000 	.word	0x7ca00000
 800913c:	7ff00000 	.word	0x7ff00000
 8009140:	7fefffff 	.word	0x7fefffff
 8009144:	f012 0110 	ands.w	r1, r2, #16
 8009148:	bf18      	it	ne
 800914a:	216a      	movne	r1, #106	@ 0x6a
 800914c:	9106      	str	r1, [sp, #24]
 800914e:	ec4b ab17 	vmov	d7, sl, fp
 8009152:	49af      	ldr	r1, [pc, #700]	@ (8009410 <_strtod_l+0x860>)
 8009154:	2000      	movs	r0, #0
 8009156:	07d6      	lsls	r6, r2, #31
 8009158:	d504      	bpl.n	8009164 <_strtod_l+0x5b4>
 800915a:	ed91 6b00 	vldr	d6, [r1]
 800915e:	2001      	movs	r0, #1
 8009160:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009164:	1052      	asrs	r2, r2, #1
 8009166:	f101 0108 	add.w	r1, r1, #8
 800916a:	d1f4      	bne.n	8009156 <_strtod_l+0x5a6>
 800916c:	b108      	cbz	r0, 8009172 <_strtod_l+0x5c2>
 800916e:	ec5b ab17 	vmov	sl, fp, d7
 8009172:	9a06      	ldr	r2, [sp, #24]
 8009174:	b1b2      	cbz	r2, 80091a4 <_strtod_l+0x5f4>
 8009176:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800917a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800917e:	2a00      	cmp	r2, #0
 8009180:	4658      	mov	r0, fp
 8009182:	dd0f      	ble.n	80091a4 <_strtod_l+0x5f4>
 8009184:	2a1f      	cmp	r2, #31
 8009186:	dd55      	ble.n	8009234 <_strtod_l+0x684>
 8009188:	2a34      	cmp	r2, #52	@ 0x34
 800918a:	bfde      	ittt	le
 800918c:	f04f 32ff 	movle.w	r2, #4294967295
 8009190:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8009194:	408a      	lslle	r2, r1
 8009196:	f04f 0a00 	mov.w	sl, #0
 800919a:	bfcc      	ite	gt
 800919c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80091a0:	ea02 0b00 	andle.w	fp, r2, r0
 80091a4:	ec4b ab17 	vmov	d7, sl, fp
 80091a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80091ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b0:	d0a8      	beq.n	8009104 <_strtod_l+0x554>
 80091b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80091b4:	9805      	ldr	r0, [sp, #20]
 80091b6:	f8cd 9000 	str.w	r9, [sp]
 80091ba:	462a      	mov	r2, r5
 80091bc:	f7ff f8de 	bl	800837c <__s2b>
 80091c0:	9007      	str	r0, [sp, #28]
 80091c2:	2800      	cmp	r0, #0
 80091c4:	f43f af0a 	beq.w	8008fdc <_strtod_l+0x42c>
 80091c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ca:	1b3f      	subs	r7, r7, r4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bfb4      	ite	lt
 80091d0:	463b      	movlt	r3, r7
 80091d2:	2300      	movge	r3, #0
 80091d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80091d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d8:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8009400 <_strtod_l+0x850>
 80091dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80091e0:	2400      	movs	r4, #0
 80091e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80091e4:	4625      	mov	r5, r4
 80091e6:	9b07      	ldr	r3, [sp, #28]
 80091e8:	9805      	ldr	r0, [sp, #20]
 80091ea:	6859      	ldr	r1, [r3, #4]
 80091ec:	f7ff f81e 	bl	800822c <_Balloc>
 80091f0:	4606      	mov	r6, r0
 80091f2:	2800      	cmp	r0, #0
 80091f4:	f43f aef6 	beq.w	8008fe4 <_strtod_l+0x434>
 80091f8:	9b07      	ldr	r3, [sp, #28]
 80091fa:	691a      	ldr	r2, [r3, #16]
 80091fc:	ec4b ab19 	vmov	d9, sl, fp
 8009200:	3202      	adds	r2, #2
 8009202:	f103 010c 	add.w	r1, r3, #12
 8009206:	0092      	lsls	r2, r2, #2
 8009208:	300c      	adds	r0, #12
 800920a:	f000 fd2d 	bl	8009c68 <memcpy>
 800920e:	eeb0 0b49 	vmov.f64	d0, d9
 8009212:	9805      	ldr	r0, [sp, #20]
 8009214:	aa14      	add	r2, sp, #80	@ 0x50
 8009216:	a913      	add	r1, sp, #76	@ 0x4c
 8009218:	f7ff fbe4 	bl	80089e4 <__d2b>
 800921c:	9012      	str	r0, [sp, #72]	@ 0x48
 800921e:	2800      	cmp	r0, #0
 8009220:	f43f aee0 	beq.w	8008fe4 <_strtod_l+0x434>
 8009224:	9805      	ldr	r0, [sp, #20]
 8009226:	2101      	movs	r1, #1
 8009228:	f7ff f93e 	bl	80084a8 <__i2b>
 800922c:	4605      	mov	r5, r0
 800922e:	b940      	cbnz	r0, 8009242 <_strtod_l+0x692>
 8009230:	2500      	movs	r5, #0
 8009232:	e6d7      	b.n	8008fe4 <_strtod_l+0x434>
 8009234:	f04f 31ff 	mov.w	r1, #4294967295
 8009238:	fa01 f202 	lsl.w	r2, r1, r2
 800923c:	ea02 0a0a 	and.w	sl, r2, sl
 8009240:	e7b0      	b.n	80091a4 <_strtod_l+0x5f4>
 8009242:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8009244:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009246:	2f00      	cmp	r7, #0
 8009248:	bfab      	itete	ge
 800924a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800924c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800924e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8009252:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8009256:	bfac      	ite	ge
 8009258:	eb07 0903 	addge.w	r9, r7, r3
 800925c:	eba3 0807 	sublt.w	r8, r3, r7
 8009260:	9b06      	ldr	r3, [sp, #24]
 8009262:	1aff      	subs	r7, r7, r3
 8009264:	4417      	add	r7, r2
 8009266:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800926a:	4a6a      	ldr	r2, [pc, #424]	@ (8009414 <_strtod_l+0x864>)
 800926c:	3f01      	subs	r7, #1
 800926e:	4297      	cmp	r7, r2
 8009270:	da51      	bge.n	8009316 <_strtod_l+0x766>
 8009272:	1bd1      	subs	r1, r2, r7
 8009274:	291f      	cmp	r1, #31
 8009276:	eba3 0301 	sub.w	r3, r3, r1
 800927a:	f04f 0201 	mov.w	r2, #1
 800927e:	dc3e      	bgt.n	80092fe <_strtod_l+0x74e>
 8009280:	408a      	lsls	r2, r1
 8009282:	920c      	str	r2, [sp, #48]	@ 0x30
 8009284:	2200      	movs	r2, #0
 8009286:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009288:	eb09 0703 	add.w	r7, r9, r3
 800928c:	4498      	add	r8, r3
 800928e:	9b06      	ldr	r3, [sp, #24]
 8009290:	45b9      	cmp	r9, r7
 8009292:	4498      	add	r8, r3
 8009294:	464b      	mov	r3, r9
 8009296:	bfa8      	it	ge
 8009298:	463b      	movge	r3, r7
 800929a:	4543      	cmp	r3, r8
 800929c:	bfa8      	it	ge
 800929e:	4643      	movge	r3, r8
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	bfc2      	ittt	gt
 80092a4:	1aff      	subgt	r7, r7, r3
 80092a6:	eba8 0803 	subgt.w	r8, r8, r3
 80092aa:	eba9 0903 	subgt.w	r9, r9, r3
 80092ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dd16      	ble.n	80092e2 <_strtod_l+0x732>
 80092b4:	4629      	mov	r1, r5
 80092b6:	9805      	ldr	r0, [sp, #20]
 80092b8:	461a      	mov	r2, r3
 80092ba:	f7ff f9ad 	bl	8008618 <__pow5mult>
 80092be:	4605      	mov	r5, r0
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d0b5      	beq.n	8009230 <_strtod_l+0x680>
 80092c4:	4601      	mov	r1, r0
 80092c6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80092c8:	9805      	ldr	r0, [sp, #20]
 80092ca:	f7ff f903 	bl	80084d4 <__multiply>
 80092ce:	900f      	str	r0, [sp, #60]	@ 0x3c
 80092d0:	2800      	cmp	r0, #0
 80092d2:	f43f ae87 	beq.w	8008fe4 <_strtod_l+0x434>
 80092d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80092d8:	9805      	ldr	r0, [sp, #20]
 80092da:	f7fe ffe7 	bl	80082ac <_Bfree>
 80092de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80092e2:	2f00      	cmp	r7, #0
 80092e4:	dc1b      	bgt.n	800931e <_strtod_l+0x76e>
 80092e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	dd21      	ble.n	8009330 <_strtod_l+0x780>
 80092ec:	4631      	mov	r1, r6
 80092ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80092f0:	9805      	ldr	r0, [sp, #20]
 80092f2:	f7ff f991 	bl	8008618 <__pow5mult>
 80092f6:	4606      	mov	r6, r0
 80092f8:	b9d0      	cbnz	r0, 8009330 <_strtod_l+0x780>
 80092fa:	2600      	movs	r6, #0
 80092fc:	e672      	b.n	8008fe4 <_strtod_l+0x434>
 80092fe:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8009302:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8009306:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800930a:	37e2      	adds	r7, #226	@ 0xe2
 800930c:	fa02 f107 	lsl.w	r1, r2, r7
 8009310:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009312:	920c      	str	r2, [sp, #48]	@ 0x30
 8009314:	e7b8      	b.n	8009288 <_strtod_l+0x6d8>
 8009316:	2200      	movs	r2, #0
 8009318:	920b      	str	r2, [sp, #44]	@ 0x2c
 800931a:	2201      	movs	r2, #1
 800931c:	e7f9      	b.n	8009312 <_strtod_l+0x762>
 800931e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009320:	9805      	ldr	r0, [sp, #20]
 8009322:	463a      	mov	r2, r7
 8009324:	f7ff f9d2 	bl	80086cc <__lshift>
 8009328:	9012      	str	r0, [sp, #72]	@ 0x48
 800932a:	2800      	cmp	r0, #0
 800932c:	d1db      	bne.n	80092e6 <_strtod_l+0x736>
 800932e:	e659      	b.n	8008fe4 <_strtod_l+0x434>
 8009330:	f1b8 0f00 	cmp.w	r8, #0
 8009334:	dd07      	ble.n	8009346 <_strtod_l+0x796>
 8009336:	4631      	mov	r1, r6
 8009338:	9805      	ldr	r0, [sp, #20]
 800933a:	4642      	mov	r2, r8
 800933c:	f7ff f9c6 	bl	80086cc <__lshift>
 8009340:	4606      	mov	r6, r0
 8009342:	2800      	cmp	r0, #0
 8009344:	d0d9      	beq.n	80092fa <_strtod_l+0x74a>
 8009346:	f1b9 0f00 	cmp.w	r9, #0
 800934a:	dd08      	ble.n	800935e <_strtod_l+0x7ae>
 800934c:	4629      	mov	r1, r5
 800934e:	9805      	ldr	r0, [sp, #20]
 8009350:	464a      	mov	r2, r9
 8009352:	f7ff f9bb 	bl	80086cc <__lshift>
 8009356:	4605      	mov	r5, r0
 8009358:	2800      	cmp	r0, #0
 800935a:	f43f ae43 	beq.w	8008fe4 <_strtod_l+0x434>
 800935e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009360:	9805      	ldr	r0, [sp, #20]
 8009362:	4632      	mov	r2, r6
 8009364:	f7ff fa3a 	bl	80087dc <__mdiff>
 8009368:	4604      	mov	r4, r0
 800936a:	2800      	cmp	r0, #0
 800936c:	f43f ae3a 	beq.w	8008fe4 <_strtod_l+0x434>
 8009370:	2300      	movs	r3, #0
 8009372:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8009376:	60c3      	str	r3, [r0, #12]
 8009378:	4629      	mov	r1, r5
 800937a:	f7ff fa13 	bl	80087a4 <__mcmp>
 800937e:	2800      	cmp	r0, #0
 8009380:	da4c      	bge.n	800941c <_strtod_l+0x86c>
 8009382:	ea58 080a 	orrs.w	r8, r8, sl
 8009386:	d172      	bne.n	800946e <_strtod_l+0x8be>
 8009388:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800938c:	2b00      	cmp	r3, #0
 800938e:	d16e      	bne.n	800946e <_strtod_l+0x8be>
 8009390:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009394:	0d1b      	lsrs	r3, r3, #20
 8009396:	051b      	lsls	r3, r3, #20
 8009398:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800939c:	d967      	bls.n	800946e <_strtod_l+0x8be>
 800939e:	6963      	ldr	r3, [r4, #20]
 80093a0:	b913      	cbnz	r3, 80093a8 <_strtod_l+0x7f8>
 80093a2:	6923      	ldr	r3, [r4, #16]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	dd62      	ble.n	800946e <_strtod_l+0x8be>
 80093a8:	4621      	mov	r1, r4
 80093aa:	2201      	movs	r2, #1
 80093ac:	9805      	ldr	r0, [sp, #20]
 80093ae:	f7ff f98d 	bl	80086cc <__lshift>
 80093b2:	4629      	mov	r1, r5
 80093b4:	4604      	mov	r4, r0
 80093b6:	f7ff f9f5 	bl	80087a4 <__mcmp>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	dd57      	ble.n	800946e <_strtod_l+0x8be>
 80093be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093c2:	9a06      	ldr	r2, [sp, #24]
 80093c4:	0d1b      	lsrs	r3, r3, #20
 80093c6:	051b      	lsls	r3, r3, #20
 80093c8:	2a00      	cmp	r2, #0
 80093ca:	d06e      	beq.n	80094aa <_strtod_l+0x8fa>
 80093cc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80093d0:	d86b      	bhi.n	80094aa <_strtod_l+0x8fa>
 80093d2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80093d6:	f67f ae99 	bls.w	800910c <_strtod_l+0x55c>
 80093da:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8009408 <_strtod_l+0x858>
 80093de:	ec4b ab16 	vmov	d6, sl, fp
 80093e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009418 <_strtod_l+0x868>)
 80093e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80093e8:	ee17 2a90 	vmov	r2, s15
 80093ec:	4013      	ands	r3, r2
 80093ee:	ec5b ab17 	vmov	sl, fp, d7
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f47f ae01 	bne.w	8008ffa <_strtod_l+0x44a>
 80093f8:	9a05      	ldr	r2, [sp, #20]
 80093fa:	2322      	movs	r3, #34	@ 0x22
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	e5fc      	b.n	8008ffa <_strtod_l+0x44a>
 8009400:	ffc00000 	.word	0xffc00000
 8009404:	41dfffff 	.word	0x41dfffff
 8009408:	00000000 	.word	0x00000000
 800940c:	39500000 	.word	0x39500000
 8009410:	0800af58 	.word	0x0800af58
 8009414:	fffffc02 	.word	0xfffffc02
 8009418:	7ff00000 	.word	0x7ff00000
 800941c:	46d9      	mov	r9, fp
 800941e:	d15d      	bne.n	80094dc <_strtod_l+0x92c>
 8009420:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009424:	f1b8 0f00 	cmp.w	r8, #0
 8009428:	d02a      	beq.n	8009480 <_strtod_l+0x8d0>
 800942a:	4aa9      	ldr	r2, [pc, #676]	@ (80096d0 <_strtod_l+0xb20>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d12a      	bne.n	8009486 <_strtod_l+0x8d6>
 8009430:	9b06      	ldr	r3, [sp, #24]
 8009432:	4652      	mov	r2, sl
 8009434:	b1fb      	cbz	r3, 8009476 <_strtod_l+0x8c6>
 8009436:	4ba7      	ldr	r3, [pc, #668]	@ (80096d4 <_strtod_l+0xb24>)
 8009438:	ea0b 0303 	and.w	r3, fp, r3
 800943c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009440:	f04f 31ff 	mov.w	r1, #4294967295
 8009444:	d81a      	bhi.n	800947c <_strtod_l+0x8cc>
 8009446:	0d1b      	lsrs	r3, r3, #20
 8009448:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800944c:	fa01 f303 	lsl.w	r3, r1, r3
 8009450:	429a      	cmp	r2, r3
 8009452:	d118      	bne.n	8009486 <_strtod_l+0x8d6>
 8009454:	4ba0      	ldr	r3, [pc, #640]	@ (80096d8 <_strtod_l+0xb28>)
 8009456:	4599      	cmp	r9, r3
 8009458:	d102      	bne.n	8009460 <_strtod_l+0x8b0>
 800945a:	3201      	adds	r2, #1
 800945c:	f43f adc2 	beq.w	8008fe4 <_strtod_l+0x434>
 8009460:	4b9c      	ldr	r3, [pc, #624]	@ (80096d4 <_strtod_l+0xb24>)
 8009462:	ea09 0303 	and.w	r3, r9, r3
 8009466:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800946a:	f04f 0a00 	mov.w	sl, #0
 800946e:	9b06      	ldr	r3, [sp, #24]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1b2      	bne.n	80093da <_strtod_l+0x82a>
 8009474:	e5c1      	b.n	8008ffa <_strtod_l+0x44a>
 8009476:	f04f 33ff 	mov.w	r3, #4294967295
 800947a:	e7e9      	b.n	8009450 <_strtod_l+0x8a0>
 800947c:	460b      	mov	r3, r1
 800947e:	e7e7      	b.n	8009450 <_strtod_l+0x8a0>
 8009480:	ea53 030a 	orrs.w	r3, r3, sl
 8009484:	d09b      	beq.n	80093be <_strtod_l+0x80e>
 8009486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009488:	b1c3      	cbz	r3, 80094bc <_strtod_l+0x90c>
 800948a:	ea13 0f09 	tst.w	r3, r9
 800948e:	d0ee      	beq.n	800946e <_strtod_l+0x8be>
 8009490:	9a06      	ldr	r2, [sp, #24]
 8009492:	4650      	mov	r0, sl
 8009494:	4659      	mov	r1, fp
 8009496:	f1b8 0f00 	cmp.w	r8, #0
 800949a:	d013      	beq.n	80094c4 <_strtod_l+0x914>
 800949c:	f7ff fb6d 	bl	8008b7a <sulp>
 80094a0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80094a4:	ec5b ab17 	vmov	sl, fp, d7
 80094a8:	e7e1      	b.n	800946e <_strtod_l+0x8be>
 80094aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80094ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80094b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80094b6:	f04f 3aff 	mov.w	sl, #4294967295
 80094ba:	e7d8      	b.n	800946e <_strtod_l+0x8be>
 80094bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094be:	ea13 0f0a 	tst.w	r3, sl
 80094c2:	e7e4      	b.n	800948e <_strtod_l+0x8de>
 80094c4:	f7ff fb59 	bl	8008b7a <sulp>
 80094c8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80094cc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80094d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d4:	ec5b ab10 	vmov	sl, fp, d0
 80094d8:	d1c9      	bne.n	800946e <_strtod_l+0x8be>
 80094da:	e617      	b.n	800910c <_strtod_l+0x55c>
 80094dc:	4629      	mov	r1, r5
 80094de:	4620      	mov	r0, r4
 80094e0:	f7ff fad8 	bl	8008a94 <__ratio>
 80094e4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80094e8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80094ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f0:	d85d      	bhi.n	80095ae <_strtod_l+0x9fe>
 80094f2:	f1b8 0f00 	cmp.w	r8, #0
 80094f6:	d164      	bne.n	80095c2 <_strtod_l+0xa12>
 80094f8:	f1ba 0f00 	cmp.w	sl, #0
 80094fc:	d14b      	bne.n	8009596 <_strtod_l+0x9e6>
 80094fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009502:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d160      	bne.n	80095cc <_strtod_l+0xa1c>
 800950a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800950e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009516:	d401      	bmi.n	800951c <_strtod_l+0x96c>
 8009518:	ee20 8b08 	vmul.f64	d8, d0, d8
 800951c:	eeb1 ab48 	vneg.f64	d10, d8
 8009520:	486c      	ldr	r0, [pc, #432]	@ (80096d4 <_strtod_l+0xb24>)
 8009522:	496e      	ldr	r1, [pc, #440]	@ (80096dc <_strtod_l+0xb2c>)
 8009524:	ea09 0700 	and.w	r7, r9, r0
 8009528:	428f      	cmp	r7, r1
 800952a:	ec53 2b1a 	vmov	r2, r3, d10
 800952e:	d17d      	bne.n	800962c <_strtod_l+0xa7c>
 8009530:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8009534:	ec4b ab1c 	vmov	d12, sl, fp
 8009538:	eeb0 0b4c 	vmov.f64	d0, d12
 800953c:	f7ff f9e2 	bl	8008904 <__ulp>
 8009540:	4864      	ldr	r0, [pc, #400]	@ (80096d4 <_strtod_l+0xb24>)
 8009542:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8009546:	ee1c 3a90 	vmov	r3, s25
 800954a:	4a65      	ldr	r2, [pc, #404]	@ (80096e0 <_strtod_l+0xb30>)
 800954c:	ea03 0100 	and.w	r1, r3, r0
 8009550:	4291      	cmp	r1, r2
 8009552:	ec5b ab1c 	vmov	sl, fp, d12
 8009556:	d93c      	bls.n	80095d2 <_strtod_l+0xa22>
 8009558:	ee19 2a90 	vmov	r2, s19
 800955c:	4b5e      	ldr	r3, [pc, #376]	@ (80096d8 <_strtod_l+0xb28>)
 800955e:	429a      	cmp	r2, r3
 8009560:	d104      	bne.n	800956c <_strtod_l+0x9bc>
 8009562:	ee19 3a10 	vmov	r3, s18
 8009566:	3301      	adds	r3, #1
 8009568:	f43f ad3c 	beq.w	8008fe4 <_strtod_l+0x434>
 800956c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 80096d8 <_strtod_l+0xb28>
 8009570:	f04f 3aff 	mov.w	sl, #4294967295
 8009574:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009576:	9805      	ldr	r0, [sp, #20]
 8009578:	f7fe fe98 	bl	80082ac <_Bfree>
 800957c:	9805      	ldr	r0, [sp, #20]
 800957e:	4631      	mov	r1, r6
 8009580:	f7fe fe94 	bl	80082ac <_Bfree>
 8009584:	9805      	ldr	r0, [sp, #20]
 8009586:	4629      	mov	r1, r5
 8009588:	f7fe fe90 	bl	80082ac <_Bfree>
 800958c:	9805      	ldr	r0, [sp, #20]
 800958e:	4621      	mov	r1, r4
 8009590:	f7fe fe8c 	bl	80082ac <_Bfree>
 8009594:	e627      	b.n	80091e6 <_strtod_l+0x636>
 8009596:	f1ba 0f01 	cmp.w	sl, #1
 800959a:	d103      	bne.n	80095a4 <_strtod_l+0x9f4>
 800959c:	f1bb 0f00 	cmp.w	fp, #0
 80095a0:	f43f adb4 	beq.w	800910c <_strtod_l+0x55c>
 80095a4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80095a8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80095ac:	e7b8      	b.n	8009520 <_strtod_l+0x970>
 80095ae:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80095b2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80095b6:	f1b8 0f00 	cmp.w	r8, #0
 80095ba:	d0af      	beq.n	800951c <_strtod_l+0x96c>
 80095bc:	eeb0 ab48 	vmov.f64	d10, d8
 80095c0:	e7ae      	b.n	8009520 <_strtod_l+0x970>
 80095c2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80095c6:	eeb0 8b4a 	vmov.f64	d8, d10
 80095ca:	e7a9      	b.n	8009520 <_strtod_l+0x970>
 80095cc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80095d0:	e7a6      	b.n	8009520 <_strtod_l+0x970>
 80095d2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80095d6:	9b06      	ldr	r3, [sp, #24]
 80095d8:	46d9      	mov	r9, fp
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1ca      	bne.n	8009574 <_strtod_l+0x9c4>
 80095de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80095e2:	0d1b      	lsrs	r3, r3, #20
 80095e4:	051b      	lsls	r3, r3, #20
 80095e6:	429f      	cmp	r7, r3
 80095e8:	d1c4      	bne.n	8009574 <_strtod_l+0x9c4>
 80095ea:	ec51 0b18 	vmov	r0, r1, d8
 80095ee:	f7f7 f853 	bl	8000698 <__aeabi_d2lz>
 80095f2:	f7f7 f80b 	bl	800060c <__aeabi_l2d>
 80095f6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80095fa:	ec41 0b17 	vmov	d7, r0, r1
 80095fe:	ea49 090a 	orr.w	r9, r9, sl
 8009602:	ea59 0908 	orrs.w	r9, r9, r8
 8009606:	ee38 8b47 	vsub.f64	d8, d8, d7
 800960a:	d03c      	beq.n	8009686 <_strtod_l+0xad6>
 800960c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80096b8 <_strtod_l+0xb08>
 8009610:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009618:	f53f acef 	bmi.w	8008ffa <_strtod_l+0x44a>
 800961c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 80096c0 <_strtod_l+0xb10>
 8009620:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009628:	dda4      	ble.n	8009574 <_strtod_l+0x9c4>
 800962a:	e4e6      	b.n	8008ffa <_strtod_l+0x44a>
 800962c:	9906      	ldr	r1, [sp, #24]
 800962e:	b1e1      	cbz	r1, 800966a <_strtod_l+0xaba>
 8009630:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8009634:	d819      	bhi.n	800966a <_strtod_l+0xaba>
 8009636:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800963a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963e:	d811      	bhi.n	8009664 <_strtod_l+0xab4>
 8009640:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8009644:	ee18 3a10 	vmov	r3, s16
 8009648:	2b01      	cmp	r3, #1
 800964a:	bf38      	it	cc
 800964c:	2301      	movcc	r3, #1
 800964e:	ee08 3a10 	vmov	s16, r3
 8009652:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8009656:	f1b8 0f00 	cmp.w	r8, #0
 800965a:	d111      	bne.n	8009680 <_strtod_l+0xad0>
 800965c:	eeb1 7b48 	vneg.f64	d7, d8
 8009660:	ec53 2b17 	vmov	r2, r3, d7
 8009664:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8009668:	1bcb      	subs	r3, r1, r7
 800966a:	eeb0 0b49 	vmov.f64	d0, d9
 800966e:	ec43 2b1a 	vmov	d10, r2, r3
 8009672:	f7ff f947 	bl	8008904 <__ulp>
 8009676:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800967a:	ec5b ab19 	vmov	sl, fp, d9
 800967e:	e7aa      	b.n	80095d6 <_strtod_l+0xa26>
 8009680:	eeb0 7b48 	vmov.f64	d7, d8
 8009684:	e7ec      	b.n	8009660 <_strtod_l+0xab0>
 8009686:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80096c8 <_strtod_l+0xb18>
 800968a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800968e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009692:	f57f af6f 	bpl.w	8009574 <_strtod_l+0x9c4>
 8009696:	e4b0      	b.n	8008ffa <_strtod_l+0x44a>
 8009698:	2300      	movs	r3, #0
 800969a:	9308      	str	r3, [sp, #32]
 800969c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800969e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	f7ff bac4 	b.w	8008c2e <_strtod_l+0x7e>
 80096a6:	2a65      	cmp	r2, #101	@ 0x65
 80096a8:	f43f abbf 	beq.w	8008e2a <_strtod_l+0x27a>
 80096ac:	2a45      	cmp	r2, #69	@ 0x45
 80096ae:	f43f abbc 	beq.w	8008e2a <_strtod_l+0x27a>
 80096b2:	2101      	movs	r1, #1
 80096b4:	f7ff bbf4 	b.w	8008ea0 <_strtod_l+0x2f0>
 80096b8:	94a03595 	.word	0x94a03595
 80096bc:	3fdfffff 	.word	0x3fdfffff
 80096c0:	35afe535 	.word	0x35afe535
 80096c4:	3fe00000 	.word	0x3fe00000
 80096c8:	94a03595 	.word	0x94a03595
 80096cc:	3fcfffff 	.word	0x3fcfffff
 80096d0:	000fffff 	.word	0x000fffff
 80096d4:	7ff00000 	.word	0x7ff00000
 80096d8:	7fefffff 	.word	0x7fefffff
 80096dc:	7fe00000 	.word	0x7fe00000
 80096e0:	7c9fffff 	.word	0x7c9fffff

080096e4 <_strtod_r>:
 80096e4:	4b01      	ldr	r3, [pc, #4]	@ (80096ec <_strtod_r+0x8>)
 80096e6:	f7ff ba63 	b.w	8008bb0 <_strtod_l>
 80096ea:	bf00      	nop
 80096ec:	20000074 	.word	0x20000074

080096f0 <_strtol_l.isra.0>:
 80096f0:	2b24      	cmp	r3, #36	@ 0x24
 80096f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f6:	4686      	mov	lr, r0
 80096f8:	4690      	mov	r8, r2
 80096fa:	d801      	bhi.n	8009700 <_strtol_l.isra.0+0x10>
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d106      	bne.n	800970e <_strtol_l.isra.0+0x1e>
 8009700:	f7fd fe78 	bl	80073f4 <__errno>
 8009704:	2316      	movs	r3, #22
 8009706:	6003      	str	r3, [r0, #0]
 8009708:	2000      	movs	r0, #0
 800970a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970e:	4834      	ldr	r0, [pc, #208]	@ (80097e0 <_strtol_l.isra.0+0xf0>)
 8009710:	460d      	mov	r5, r1
 8009712:	462a      	mov	r2, r5
 8009714:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009718:	5d06      	ldrb	r6, [r0, r4]
 800971a:	f016 0608 	ands.w	r6, r6, #8
 800971e:	d1f8      	bne.n	8009712 <_strtol_l.isra.0+0x22>
 8009720:	2c2d      	cmp	r4, #45	@ 0x2d
 8009722:	d110      	bne.n	8009746 <_strtol_l.isra.0+0x56>
 8009724:	782c      	ldrb	r4, [r5, #0]
 8009726:	2601      	movs	r6, #1
 8009728:	1c95      	adds	r5, r2, #2
 800972a:	f033 0210 	bics.w	r2, r3, #16
 800972e:	d115      	bne.n	800975c <_strtol_l.isra.0+0x6c>
 8009730:	2c30      	cmp	r4, #48	@ 0x30
 8009732:	d10d      	bne.n	8009750 <_strtol_l.isra.0+0x60>
 8009734:	782a      	ldrb	r2, [r5, #0]
 8009736:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800973a:	2a58      	cmp	r2, #88	@ 0x58
 800973c:	d108      	bne.n	8009750 <_strtol_l.isra.0+0x60>
 800973e:	786c      	ldrb	r4, [r5, #1]
 8009740:	3502      	adds	r5, #2
 8009742:	2310      	movs	r3, #16
 8009744:	e00a      	b.n	800975c <_strtol_l.isra.0+0x6c>
 8009746:	2c2b      	cmp	r4, #43	@ 0x2b
 8009748:	bf04      	itt	eq
 800974a:	782c      	ldrbeq	r4, [r5, #0]
 800974c:	1c95      	addeq	r5, r2, #2
 800974e:	e7ec      	b.n	800972a <_strtol_l.isra.0+0x3a>
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1f6      	bne.n	8009742 <_strtol_l.isra.0+0x52>
 8009754:	2c30      	cmp	r4, #48	@ 0x30
 8009756:	bf14      	ite	ne
 8009758:	230a      	movne	r3, #10
 800975a:	2308      	moveq	r3, #8
 800975c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009760:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009764:	2200      	movs	r2, #0
 8009766:	fbbc f9f3 	udiv	r9, ip, r3
 800976a:	4610      	mov	r0, r2
 800976c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009770:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009774:	2f09      	cmp	r7, #9
 8009776:	d80f      	bhi.n	8009798 <_strtol_l.isra.0+0xa8>
 8009778:	463c      	mov	r4, r7
 800977a:	42a3      	cmp	r3, r4
 800977c:	dd1b      	ble.n	80097b6 <_strtol_l.isra.0+0xc6>
 800977e:	1c57      	adds	r7, r2, #1
 8009780:	d007      	beq.n	8009792 <_strtol_l.isra.0+0xa2>
 8009782:	4581      	cmp	r9, r0
 8009784:	d314      	bcc.n	80097b0 <_strtol_l.isra.0+0xc0>
 8009786:	d101      	bne.n	800978c <_strtol_l.isra.0+0x9c>
 8009788:	45a2      	cmp	sl, r4
 800978a:	db11      	blt.n	80097b0 <_strtol_l.isra.0+0xc0>
 800978c:	fb00 4003 	mla	r0, r0, r3, r4
 8009790:	2201      	movs	r2, #1
 8009792:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009796:	e7eb      	b.n	8009770 <_strtol_l.isra.0+0x80>
 8009798:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800979c:	2f19      	cmp	r7, #25
 800979e:	d801      	bhi.n	80097a4 <_strtol_l.isra.0+0xb4>
 80097a0:	3c37      	subs	r4, #55	@ 0x37
 80097a2:	e7ea      	b.n	800977a <_strtol_l.isra.0+0x8a>
 80097a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80097a8:	2f19      	cmp	r7, #25
 80097aa:	d804      	bhi.n	80097b6 <_strtol_l.isra.0+0xc6>
 80097ac:	3c57      	subs	r4, #87	@ 0x57
 80097ae:	e7e4      	b.n	800977a <_strtol_l.isra.0+0x8a>
 80097b0:	f04f 32ff 	mov.w	r2, #4294967295
 80097b4:	e7ed      	b.n	8009792 <_strtol_l.isra.0+0xa2>
 80097b6:	1c53      	adds	r3, r2, #1
 80097b8:	d108      	bne.n	80097cc <_strtol_l.isra.0+0xdc>
 80097ba:	2322      	movs	r3, #34	@ 0x22
 80097bc:	f8ce 3000 	str.w	r3, [lr]
 80097c0:	4660      	mov	r0, ip
 80097c2:	f1b8 0f00 	cmp.w	r8, #0
 80097c6:	d0a0      	beq.n	800970a <_strtol_l.isra.0+0x1a>
 80097c8:	1e69      	subs	r1, r5, #1
 80097ca:	e006      	b.n	80097da <_strtol_l.isra.0+0xea>
 80097cc:	b106      	cbz	r6, 80097d0 <_strtol_l.isra.0+0xe0>
 80097ce:	4240      	negs	r0, r0
 80097d0:	f1b8 0f00 	cmp.w	r8, #0
 80097d4:	d099      	beq.n	800970a <_strtol_l.isra.0+0x1a>
 80097d6:	2a00      	cmp	r2, #0
 80097d8:	d1f6      	bne.n	80097c8 <_strtol_l.isra.0+0xd8>
 80097da:	f8c8 1000 	str.w	r1, [r8]
 80097de:	e794      	b.n	800970a <_strtol_l.isra.0+0x1a>
 80097e0:	0800af81 	.word	0x0800af81

080097e4 <_strtol_r>:
 80097e4:	f7ff bf84 	b.w	80096f0 <_strtol_l.isra.0>

080097e8 <__ssputs_r>:
 80097e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ec:	688e      	ldr	r6, [r1, #8]
 80097ee:	461f      	mov	r7, r3
 80097f0:	42be      	cmp	r6, r7
 80097f2:	680b      	ldr	r3, [r1, #0]
 80097f4:	4682      	mov	sl, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	4690      	mov	r8, r2
 80097fa:	d82d      	bhi.n	8009858 <__ssputs_r+0x70>
 80097fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009800:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009804:	d026      	beq.n	8009854 <__ssputs_r+0x6c>
 8009806:	6965      	ldr	r5, [r4, #20]
 8009808:	6909      	ldr	r1, [r1, #16]
 800980a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800980e:	eba3 0901 	sub.w	r9, r3, r1
 8009812:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009816:	1c7b      	adds	r3, r7, #1
 8009818:	444b      	add	r3, r9
 800981a:	106d      	asrs	r5, r5, #1
 800981c:	429d      	cmp	r5, r3
 800981e:	bf38      	it	cc
 8009820:	461d      	movcc	r5, r3
 8009822:	0553      	lsls	r3, r2, #21
 8009824:	d527      	bpl.n	8009876 <__ssputs_r+0x8e>
 8009826:	4629      	mov	r1, r5
 8009828:	f7fe fc74 	bl	8008114 <_malloc_r>
 800982c:	4606      	mov	r6, r0
 800982e:	b360      	cbz	r0, 800988a <__ssputs_r+0xa2>
 8009830:	6921      	ldr	r1, [r4, #16]
 8009832:	464a      	mov	r2, r9
 8009834:	f000 fa18 	bl	8009c68 <memcpy>
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800983e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009842:	81a3      	strh	r3, [r4, #12]
 8009844:	6126      	str	r6, [r4, #16]
 8009846:	6165      	str	r5, [r4, #20]
 8009848:	444e      	add	r6, r9
 800984a:	eba5 0509 	sub.w	r5, r5, r9
 800984e:	6026      	str	r6, [r4, #0]
 8009850:	60a5      	str	r5, [r4, #8]
 8009852:	463e      	mov	r6, r7
 8009854:	42be      	cmp	r6, r7
 8009856:	d900      	bls.n	800985a <__ssputs_r+0x72>
 8009858:	463e      	mov	r6, r7
 800985a:	6820      	ldr	r0, [r4, #0]
 800985c:	4632      	mov	r2, r6
 800985e:	4641      	mov	r1, r8
 8009860:	f000 f9c6 	bl	8009bf0 <memmove>
 8009864:	68a3      	ldr	r3, [r4, #8]
 8009866:	1b9b      	subs	r3, r3, r6
 8009868:	60a3      	str	r3, [r4, #8]
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	4433      	add	r3, r6
 800986e:	6023      	str	r3, [r4, #0]
 8009870:	2000      	movs	r0, #0
 8009872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009876:	462a      	mov	r2, r5
 8009878:	f000 fd8b 	bl	800a392 <_realloc_r>
 800987c:	4606      	mov	r6, r0
 800987e:	2800      	cmp	r0, #0
 8009880:	d1e0      	bne.n	8009844 <__ssputs_r+0x5c>
 8009882:	6921      	ldr	r1, [r4, #16]
 8009884:	4650      	mov	r0, sl
 8009886:	f7fe fbd1 	bl	800802c <_free_r>
 800988a:	230c      	movs	r3, #12
 800988c:	f8ca 3000 	str.w	r3, [sl]
 8009890:	89a3      	ldrh	r3, [r4, #12]
 8009892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009896:	81a3      	strh	r3, [r4, #12]
 8009898:	f04f 30ff 	mov.w	r0, #4294967295
 800989c:	e7e9      	b.n	8009872 <__ssputs_r+0x8a>
	...

080098a0 <_svfiprintf_r>:
 80098a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	4698      	mov	r8, r3
 80098a6:	898b      	ldrh	r3, [r1, #12]
 80098a8:	061b      	lsls	r3, r3, #24
 80098aa:	b09d      	sub	sp, #116	@ 0x74
 80098ac:	4607      	mov	r7, r0
 80098ae:	460d      	mov	r5, r1
 80098b0:	4614      	mov	r4, r2
 80098b2:	d510      	bpl.n	80098d6 <_svfiprintf_r+0x36>
 80098b4:	690b      	ldr	r3, [r1, #16]
 80098b6:	b973      	cbnz	r3, 80098d6 <_svfiprintf_r+0x36>
 80098b8:	2140      	movs	r1, #64	@ 0x40
 80098ba:	f7fe fc2b 	bl	8008114 <_malloc_r>
 80098be:	6028      	str	r0, [r5, #0]
 80098c0:	6128      	str	r0, [r5, #16]
 80098c2:	b930      	cbnz	r0, 80098d2 <_svfiprintf_r+0x32>
 80098c4:	230c      	movs	r3, #12
 80098c6:	603b      	str	r3, [r7, #0]
 80098c8:	f04f 30ff 	mov.w	r0, #4294967295
 80098cc:	b01d      	add	sp, #116	@ 0x74
 80098ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d2:	2340      	movs	r3, #64	@ 0x40
 80098d4:	616b      	str	r3, [r5, #20]
 80098d6:	2300      	movs	r3, #0
 80098d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80098da:	2320      	movs	r3, #32
 80098dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80098e4:	2330      	movs	r3, #48	@ 0x30
 80098e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a84 <_svfiprintf_r+0x1e4>
 80098ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098ee:	f04f 0901 	mov.w	r9, #1
 80098f2:	4623      	mov	r3, r4
 80098f4:	469a      	mov	sl, r3
 80098f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098fa:	b10a      	cbz	r2, 8009900 <_svfiprintf_r+0x60>
 80098fc:	2a25      	cmp	r2, #37	@ 0x25
 80098fe:	d1f9      	bne.n	80098f4 <_svfiprintf_r+0x54>
 8009900:	ebba 0b04 	subs.w	fp, sl, r4
 8009904:	d00b      	beq.n	800991e <_svfiprintf_r+0x7e>
 8009906:	465b      	mov	r3, fp
 8009908:	4622      	mov	r2, r4
 800990a:	4629      	mov	r1, r5
 800990c:	4638      	mov	r0, r7
 800990e:	f7ff ff6b 	bl	80097e8 <__ssputs_r>
 8009912:	3001      	adds	r0, #1
 8009914:	f000 80a7 	beq.w	8009a66 <_svfiprintf_r+0x1c6>
 8009918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800991a:	445a      	add	r2, fp
 800991c:	9209      	str	r2, [sp, #36]	@ 0x24
 800991e:	f89a 3000 	ldrb.w	r3, [sl]
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 809f 	beq.w	8009a66 <_svfiprintf_r+0x1c6>
 8009928:	2300      	movs	r3, #0
 800992a:	f04f 32ff 	mov.w	r2, #4294967295
 800992e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009932:	f10a 0a01 	add.w	sl, sl, #1
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	9307      	str	r3, [sp, #28]
 800993a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800993e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009940:	4654      	mov	r4, sl
 8009942:	2205      	movs	r2, #5
 8009944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009948:	484e      	ldr	r0, [pc, #312]	@ (8009a84 <_svfiprintf_r+0x1e4>)
 800994a:	f7f6 fc79 	bl	8000240 <memchr>
 800994e:	9a04      	ldr	r2, [sp, #16]
 8009950:	b9d8      	cbnz	r0, 800998a <_svfiprintf_r+0xea>
 8009952:	06d0      	lsls	r0, r2, #27
 8009954:	bf44      	itt	mi
 8009956:	2320      	movmi	r3, #32
 8009958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800995c:	0711      	lsls	r1, r2, #28
 800995e:	bf44      	itt	mi
 8009960:	232b      	movmi	r3, #43	@ 0x2b
 8009962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009966:	f89a 3000 	ldrb.w	r3, [sl]
 800996a:	2b2a      	cmp	r3, #42	@ 0x2a
 800996c:	d015      	beq.n	800999a <_svfiprintf_r+0xfa>
 800996e:	9a07      	ldr	r2, [sp, #28]
 8009970:	4654      	mov	r4, sl
 8009972:	2000      	movs	r0, #0
 8009974:	f04f 0c0a 	mov.w	ip, #10
 8009978:	4621      	mov	r1, r4
 800997a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800997e:	3b30      	subs	r3, #48	@ 0x30
 8009980:	2b09      	cmp	r3, #9
 8009982:	d94b      	bls.n	8009a1c <_svfiprintf_r+0x17c>
 8009984:	b1b0      	cbz	r0, 80099b4 <_svfiprintf_r+0x114>
 8009986:	9207      	str	r2, [sp, #28]
 8009988:	e014      	b.n	80099b4 <_svfiprintf_r+0x114>
 800998a:	eba0 0308 	sub.w	r3, r0, r8
 800998e:	fa09 f303 	lsl.w	r3, r9, r3
 8009992:	4313      	orrs	r3, r2
 8009994:	9304      	str	r3, [sp, #16]
 8009996:	46a2      	mov	sl, r4
 8009998:	e7d2      	b.n	8009940 <_svfiprintf_r+0xa0>
 800999a:	9b03      	ldr	r3, [sp, #12]
 800999c:	1d19      	adds	r1, r3, #4
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	9103      	str	r1, [sp, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	bfbb      	ittet	lt
 80099a6:	425b      	neglt	r3, r3
 80099a8:	f042 0202 	orrlt.w	r2, r2, #2
 80099ac:	9307      	strge	r3, [sp, #28]
 80099ae:	9307      	strlt	r3, [sp, #28]
 80099b0:	bfb8      	it	lt
 80099b2:	9204      	strlt	r2, [sp, #16]
 80099b4:	7823      	ldrb	r3, [r4, #0]
 80099b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80099b8:	d10a      	bne.n	80099d0 <_svfiprintf_r+0x130>
 80099ba:	7863      	ldrb	r3, [r4, #1]
 80099bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80099be:	d132      	bne.n	8009a26 <_svfiprintf_r+0x186>
 80099c0:	9b03      	ldr	r3, [sp, #12]
 80099c2:	1d1a      	adds	r2, r3, #4
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	9203      	str	r2, [sp, #12]
 80099c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099cc:	3402      	adds	r4, #2
 80099ce:	9305      	str	r3, [sp, #20]
 80099d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a94 <_svfiprintf_r+0x1f4>
 80099d4:	7821      	ldrb	r1, [r4, #0]
 80099d6:	2203      	movs	r2, #3
 80099d8:	4650      	mov	r0, sl
 80099da:	f7f6 fc31 	bl	8000240 <memchr>
 80099de:	b138      	cbz	r0, 80099f0 <_svfiprintf_r+0x150>
 80099e0:	9b04      	ldr	r3, [sp, #16]
 80099e2:	eba0 000a 	sub.w	r0, r0, sl
 80099e6:	2240      	movs	r2, #64	@ 0x40
 80099e8:	4082      	lsls	r2, r0
 80099ea:	4313      	orrs	r3, r2
 80099ec:	3401      	adds	r4, #1
 80099ee:	9304      	str	r3, [sp, #16]
 80099f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f4:	4824      	ldr	r0, [pc, #144]	@ (8009a88 <_svfiprintf_r+0x1e8>)
 80099f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099fa:	2206      	movs	r2, #6
 80099fc:	f7f6 fc20 	bl	8000240 <memchr>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d036      	beq.n	8009a72 <_svfiprintf_r+0x1d2>
 8009a04:	4b21      	ldr	r3, [pc, #132]	@ (8009a8c <_svfiprintf_r+0x1ec>)
 8009a06:	bb1b      	cbnz	r3, 8009a50 <_svfiprintf_r+0x1b0>
 8009a08:	9b03      	ldr	r3, [sp, #12]
 8009a0a:	3307      	adds	r3, #7
 8009a0c:	f023 0307 	bic.w	r3, r3, #7
 8009a10:	3308      	adds	r3, #8
 8009a12:	9303      	str	r3, [sp, #12]
 8009a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a16:	4433      	add	r3, r6
 8009a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a1a:	e76a      	b.n	80098f2 <_svfiprintf_r+0x52>
 8009a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a20:	460c      	mov	r4, r1
 8009a22:	2001      	movs	r0, #1
 8009a24:	e7a8      	b.n	8009978 <_svfiprintf_r+0xd8>
 8009a26:	2300      	movs	r3, #0
 8009a28:	3401      	adds	r4, #1
 8009a2a:	9305      	str	r3, [sp, #20]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	f04f 0c0a 	mov.w	ip, #10
 8009a32:	4620      	mov	r0, r4
 8009a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a38:	3a30      	subs	r2, #48	@ 0x30
 8009a3a:	2a09      	cmp	r2, #9
 8009a3c:	d903      	bls.n	8009a46 <_svfiprintf_r+0x1a6>
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d0c6      	beq.n	80099d0 <_svfiprintf_r+0x130>
 8009a42:	9105      	str	r1, [sp, #20]
 8009a44:	e7c4      	b.n	80099d0 <_svfiprintf_r+0x130>
 8009a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e7f0      	b.n	8009a32 <_svfiprintf_r+0x192>
 8009a50:	ab03      	add	r3, sp, #12
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	462a      	mov	r2, r5
 8009a56:	4b0e      	ldr	r3, [pc, #56]	@ (8009a90 <_svfiprintf_r+0x1f0>)
 8009a58:	a904      	add	r1, sp, #16
 8009a5a:	4638      	mov	r0, r7
 8009a5c:	f7fc fda4 	bl	80065a8 <_printf_float>
 8009a60:	1c42      	adds	r2, r0, #1
 8009a62:	4606      	mov	r6, r0
 8009a64:	d1d6      	bne.n	8009a14 <_svfiprintf_r+0x174>
 8009a66:	89ab      	ldrh	r3, [r5, #12]
 8009a68:	065b      	lsls	r3, r3, #25
 8009a6a:	f53f af2d 	bmi.w	80098c8 <_svfiprintf_r+0x28>
 8009a6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a70:	e72c      	b.n	80098cc <_svfiprintf_r+0x2c>
 8009a72:	ab03      	add	r3, sp, #12
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	462a      	mov	r2, r5
 8009a78:	4b05      	ldr	r3, [pc, #20]	@ (8009a90 <_svfiprintf_r+0x1f0>)
 8009a7a:	a904      	add	r1, sp, #16
 8009a7c:	4638      	mov	r0, r7
 8009a7e:	f7fd f81b 	bl	8006ab8 <_printf_i>
 8009a82:	e7ed      	b.n	8009a60 <_svfiprintf_r+0x1c0>
 8009a84:	0800ad79 	.word	0x0800ad79
 8009a88:	0800ad83 	.word	0x0800ad83
 8009a8c:	080065a9 	.word	0x080065a9
 8009a90:	080097e9 	.word	0x080097e9
 8009a94:	0800ad7f 	.word	0x0800ad7f

08009a98 <__sflush_r>:
 8009a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa0:	0716      	lsls	r6, r2, #28
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	d454      	bmi.n	8009b52 <__sflush_r+0xba>
 8009aa8:	684b      	ldr	r3, [r1, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	dc02      	bgt.n	8009ab4 <__sflush_r+0x1c>
 8009aae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	dd48      	ble.n	8009b46 <__sflush_r+0xae>
 8009ab4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ab6:	2e00      	cmp	r6, #0
 8009ab8:	d045      	beq.n	8009b46 <__sflush_r+0xae>
 8009aba:	2300      	movs	r3, #0
 8009abc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ac0:	682f      	ldr	r7, [r5, #0]
 8009ac2:	6a21      	ldr	r1, [r4, #32]
 8009ac4:	602b      	str	r3, [r5, #0]
 8009ac6:	d030      	beq.n	8009b2a <__sflush_r+0x92>
 8009ac8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009aca:	89a3      	ldrh	r3, [r4, #12]
 8009acc:	0759      	lsls	r1, r3, #29
 8009ace:	d505      	bpl.n	8009adc <__sflush_r+0x44>
 8009ad0:	6863      	ldr	r3, [r4, #4]
 8009ad2:	1ad2      	subs	r2, r2, r3
 8009ad4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ad6:	b10b      	cbz	r3, 8009adc <__sflush_r+0x44>
 8009ad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ada:	1ad2      	subs	r2, r2, r3
 8009adc:	2300      	movs	r3, #0
 8009ade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ae0:	6a21      	ldr	r1, [r4, #32]
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	47b0      	blx	r6
 8009ae6:	1c43      	adds	r3, r0, #1
 8009ae8:	89a3      	ldrh	r3, [r4, #12]
 8009aea:	d106      	bne.n	8009afa <__sflush_r+0x62>
 8009aec:	6829      	ldr	r1, [r5, #0]
 8009aee:	291d      	cmp	r1, #29
 8009af0:	d82b      	bhi.n	8009b4a <__sflush_r+0xb2>
 8009af2:	4a2a      	ldr	r2, [pc, #168]	@ (8009b9c <__sflush_r+0x104>)
 8009af4:	40ca      	lsrs	r2, r1
 8009af6:	07d6      	lsls	r6, r2, #31
 8009af8:	d527      	bpl.n	8009b4a <__sflush_r+0xb2>
 8009afa:	2200      	movs	r2, #0
 8009afc:	6062      	str	r2, [r4, #4]
 8009afe:	04d9      	lsls	r1, r3, #19
 8009b00:	6922      	ldr	r2, [r4, #16]
 8009b02:	6022      	str	r2, [r4, #0]
 8009b04:	d504      	bpl.n	8009b10 <__sflush_r+0x78>
 8009b06:	1c42      	adds	r2, r0, #1
 8009b08:	d101      	bne.n	8009b0e <__sflush_r+0x76>
 8009b0a:	682b      	ldr	r3, [r5, #0]
 8009b0c:	b903      	cbnz	r3, 8009b10 <__sflush_r+0x78>
 8009b0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b12:	602f      	str	r7, [r5, #0]
 8009b14:	b1b9      	cbz	r1, 8009b46 <__sflush_r+0xae>
 8009b16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b1a:	4299      	cmp	r1, r3
 8009b1c:	d002      	beq.n	8009b24 <__sflush_r+0x8c>
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f7fe fa84 	bl	800802c <_free_r>
 8009b24:	2300      	movs	r3, #0
 8009b26:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b28:	e00d      	b.n	8009b46 <__sflush_r+0xae>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	47b0      	blx	r6
 8009b30:	4602      	mov	r2, r0
 8009b32:	1c50      	adds	r0, r2, #1
 8009b34:	d1c9      	bne.n	8009aca <__sflush_r+0x32>
 8009b36:	682b      	ldr	r3, [r5, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d0c6      	beq.n	8009aca <__sflush_r+0x32>
 8009b3c:	2b1d      	cmp	r3, #29
 8009b3e:	d001      	beq.n	8009b44 <__sflush_r+0xac>
 8009b40:	2b16      	cmp	r3, #22
 8009b42:	d11e      	bne.n	8009b82 <__sflush_r+0xea>
 8009b44:	602f      	str	r7, [r5, #0]
 8009b46:	2000      	movs	r0, #0
 8009b48:	e022      	b.n	8009b90 <__sflush_r+0xf8>
 8009b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b4e:	b21b      	sxth	r3, r3
 8009b50:	e01b      	b.n	8009b8a <__sflush_r+0xf2>
 8009b52:	690f      	ldr	r7, [r1, #16]
 8009b54:	2f00      	cmp	r7, #0
 8009b56:	d0f6      	beq.n	8009b46 <__sflush_r+0xae>
 8009b58:	0793      	lsls	r3, r2, #30
 8009b5a:	680e      	ldr	r6, [r1, #0]
 8009b5c:	bf08      	it	eq
 8009b5e:	694b      	ldreq	r3, [r1, #20]
 8009b60:	600f      	str	r7, [r1, #0]
 8009b62:	bf18      	it	ne
 8009b64:	2300      	movne	r3, #0
 8009b66:	eba6 0807 	sub.w	r8, r6, r7
 8009b6a:	608b      	str	r3, [r1, #8]
 8009b6c:	f1b8 0f00 	cmp.w	r8, #0
 8009b70:	dde9      	ble.n	8009b46 <__sflush_r+0xae>
 8009b72:	6a21      	ldr	r1, [r4, #32]
 8009b74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b76:	4643      	mov	r3, r8
 8009b78:	463a      	mov	r2, r7
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	47b0      	blx	r6
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	dc08      	bgt.n	8009b94 <__sflush_r+0xfc>
 8009b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b8a:	81a3      	strh	r3, [r4, #12]
 8009b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b94:	4407      	add	r7, r0
 8009b96:	eba8 0800 	sub.w	r8, r8, r0
 8009b9a:	e7e7      	b.n	8009b6c <__sflush_r+0xd4>
 8009b9c:	20400001 	.word	0x20400001

08009ba0 <_fflush_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	690b      	ldr	r3, [r1, #16]
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	b913      	cbnz	r3, 8009bb0 <_fflush_r+0x10>
 8009baa:	2500      	movs	r5, #0
 8009bac:	4628      	mov	r0, r5
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	b118      	cbz	r0, 8009bba <_fflush_r+0x1a>
 8009bb2:	6a03      	ldr	r3, [r0, #32]
 8009bb4:	b90b      	cbnz	r3, 8009bba <_fflush_r+0x1a>
 8009bb6:	f7fd fb2f 	bl	8007218 <__sinit>
 8009bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d0f3      	beq.n	8009baa <_fflush_r+0xa>
 8009bc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009bc4:	07d0      	lsls	r0, r2, #31
 8009bc6:	d404      	bmi.n	8009bd2 <_fflush_r+0x32>
 8009bc8:	0599      	lsls	r1, r3, #22
 8009bca:	d402      	bmi.n	8009bd2 <_fflush_r+0x32>
 8009bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bce:	f7fd fc3c 	bl	800744a <__retarget_lock_acquire_recursive>
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	f7ff ff5f 	bl	8009a98 <__sflush_r>
 8009bda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bdc:	07da      	lsls	r2, r3, #31
 8009bde:	4605      	mov	r5, r0
 8009be0:	d4e4      	bmi.n	8009bac <_fflush_r+0xc>
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	059b      	lsls	r3, r3, #22
 8009be6:	d4e1      	bmi.n	8009bac <_fflush_r+0xc>
 8009be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bea:	f7fd fc2f 	bl	800744c <__retarget_lock_release_recursive>
 8009bee:	e7dd      	b.n	8009bac <_fflush_r+0xc>

08009bf0 <memmove>:
 8009bf0:	4288      	cmp	r0, r1
 8009bf2:	b510      	push	{r4, lr}
 8009bf4:	eb01 0402 	add.w	r4, r1, r2
 8009bf8:	d902      	bls.n	8009c00 <memmove+0x10>
 8009bfa:	4284      	cmp	r4, r0
 8009bfc:	4623      	mov	r3, r4
 8009bfe:	d807      	bhi.n	8009c10 <memmove+0x20>
 8009c00:	1e43      	subs	r3, r0, #1
 8009c02:	42a1      	cmp	r1, r4
 8009c04:	d008      	beq.n	8009c18 <memmove+0x28>
 8009c06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c0e:	e7f8      	b.n	8009c02 <memmove+0x12>
 8009c10:	4402      	add	r2, r0
 8009c12:	4601      	mov	r1, r0
 8009c14:	428a      	cmp	r2, r1
 8009c16:	d100      	bne.n	8009c1a <memmove+0x2a>
 8009c18:	bd10      	pop	{r4, pc}
 8009c1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c22:	e7f7      	b.n	8009c14 <memmove+0x24>

08009c24 <strncmp>:
 8009c24:	b510      	push	{r4, lr}
 8009c26:	b16a      	cbz	r2, 8009c44 <strncmp+0x20>
 8009c28:	3901      	subs	r1, #1
 8009c2a:	1884      	adds	r4, r0, r2
 8009c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d103      	bne.n	8009c40 <strncmp+0x1c>
 8009c38:	42a0      	cmp	r0, r4
 8009c3a:	d001      	beq.n	8009c40 <strncmp+0x1c>
 8009c3c:	2a00      	cmp	r2, #0
 8009c3e:	d1f5      	bne.n	8009c2c <strncmp+0x8>
 8009c40:	1ad0      	subs	r0, r2, r3
 8009c42:	bd10      	pop	{r4, pc}
 8009c44:	4610      	mov	r0, r2
 8009c46:	e7fc      	b.n	8009c42 <strncmp+0x1e>

08009c48 <_sbrk_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d06      	ldr	r5, [pc, #24]	@ (8009c64 <_sbrk_r+0x1c>)
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4604      	mov	r4, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	602b      	str	r3, [r5, #0]
 8009c54:	f7f8 fc90 	bl	8002578 <_sbrk>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d102      	bne.n	8009c62 <_sbrk_r+0x1a>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b103      	cbz	r3, 8009c62 <_sbrk_r+0x1a>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	20000564 	.word	0x20000564

08009c68 <memcpy>:
 8009c68:	440a      	add	r2, r1
 8009c6a:	4291      	cmp	r1, r2
 8009c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c70:	d100      	bne.n	8009c74 <memcpy+0xc>
 8009c72:	4770      	bx	lr
 8009c74:	b510      	push	{r4, lr}
 8009c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c7e:	4291      	cmp	r1, r2
 8009c80:	d1f9      	bne.n	8009c76 <memcpy+0xe>
 8009c82:	bd10      	pop	{r4, pc}
 8009c84:	0000      	movs	r0, r0
	...

08009c88 <nan>:
 8009c88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009c90 <nan+0x8>
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	00000000 	.word	0x00000000
 8009c94:	7ff80000 	.word	0x7ff80000

08009c98 <__assert_func>:
 8009c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c9a:	4614      	mov	r4, r2
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4b09      	ldr	r3, [pc, #36]	@ (8009cc4 <__assert_func+0x2c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4605      	mov	r5, r0
 8009ca4:	68d8      	ldr	r0, [r3, #12]
 8009ca6:	b14c      	cbz	r4, 8009cbc <__assert_func+0x24>
 8009ca8:	4b07      	ldr	r3, [pc, #28]	@ (8009cc8 <__assert_func+0x30>)
 8009caa:	9100      	str	r1, [sp, #0]
 8009cac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cb0:	4906      	ldr	r1, [pc, #24]	@ (8009ccc <__assert_func+0x34>)
 8009cb2:	462b      	mov	r3, r5
 8009cb4:	f000 fba8 	bl	800a408 <fiprintf>
 8009cb8:	f000 fbb8 	bl	800a42c <abort>
 8009cbc:	4b04      	ldr	r3, [pc, #16]	@ (8009cd0 <__assert_func+0x38>)
 8009cbe:	461c      	mov	r4, r3
 8009cc0:	e7f3      	b.n	8009caa <__assert_func+0x12>
 8009cc2:	bf00      	nop
 8009cc4:	20000024 	.word	0x20000024
 8009cc8:	0800ad92 	.word	0x0800ad92
 8009ccc:	0800ad9f 	.word	0x0800ad9f
 8009cd0:	0800adcd 	.word	0x0800adcd

08009cd4 <_calloc_r>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	fba1 5402 	umull	r5, r4, r1, r2
 8009cda:	b934      	cbnz	r4, 8009cea <_calloc_r+0x16>
 8009cdc:	4629      	mov	r1, r5
 8009cde:	f7fe fa19 	bl	8008114 <_malloc_r>
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	b928      	cbnz	r0, 8009cf2 <_calloc_r+0x1e>
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	bd70      	pop	{r4, r5, r6, pc}
 8009cea:	220c      	movs	r2, #12
 8009cec:	6002      	str	r2, [r0, #0]
 8009cee:	2600      	movs	r6, #0
 8009cf0:	e7f9      	b.n	8009ce6 <_calloc_r+0x12>
 8009cf2:	462a      	mov	r2, r5
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	f7fd fb2a 	bl	800734e <memset>
 8009cfa:	e7f4      	b.n	8009ce6 <_calloc_r+0x12>

08009cfc <rshift>:
 8009cfc:	6903      	ldr	r3, [r0, #16]
 8009cfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009d02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d06:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009d0a:	f100 0414 	add.w	r4, r0, #20
 8009d0e:	dd45      	ble.n	8009d9c <rshift+0xa0>
 8009d10:	f011 011f 	ands.w	r1, r1, #31
 8009d14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009d18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009d1c:	d10c      	bne.n	8009d38 <rshift+0x3c>
 8009d1e:	f100 0710 	add.w	r7, r0, #16
 8009d22:	4629      	mov	r1, r5
 8009d24:	42b1      	cmp	r1, r6
 8009d26:	d334      	bcc.n	8009d92 <rshift+0x96>
 8009d28:	1a9b      	subs	r3, r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	1eea      	subs	r2, r5, #3
 8009d2e:	4296      	cmp	r6, r2
 8009d30:	bf38      	it	cc
 8009d32:	2300      	movcc	r3, #0
 8009d34:	4423      	add	r3, r4
 8009d36:	e015      	b.n	8009d64 <rshift+0x68>
 8009d38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009d3c:	f1c1 0820 	rsb	r8, r1, #32
 8009d40:	40cf      	lsrs	r7, r1
 8009d42:	f105 0e04 	add.w	lr, r5, #4
 8009d46:	46a1      	mov	r9, r4
 8009d48:	4576      	cmp	r6, lr
 8009d4a:	46f4      	mov	ip, lr
 8009d4c:	d815      	bhi.n	8009d7a <rshift+0x7e>
 8009d4e:	1a9a      	subs	r2, r3, r2
 8009d50:	0092      	lsls	r2, r2, #2
 8009d52:	3a04      	subs	r2, #4
 8009d54:	3501      	adds	r5, #1
 8009d56:	42ae      	cmp	r6, r5
 8009d58:	bf38      	it	cc
 8009d5a:	2200      	movcc	r2, #0
 8009d5c:	18a3      	adds	r3, r4, r2
 8009d5e:	50a7      	str	r7, [r4, r2]
 8009d60:	b107      	cbz	r7, 8009d64 <rshift+0x68>
 8009d62:	3304      	adds	r3, #4
 8009d64:	1b1a      	subs	r2, r3, r4
 8009d66:	42a3      	cmp	r3, r4
 8009d68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d6c:	bf08      	it	eq
 8009d6e:	2300      	moveq	r3, #0
 8009d70:	6102      	str	r2, [r0, #16]
 8009d72:	bf08      	it	eq
 8009d74:	6143      	streq	r3, [r0, #20]
 8009d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d7a:	f8dc c000 	ldr.w	ip, [ip]
 8009d7e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d82:	ea4c 0707 	orr.w	r7, ip, r7
 8009d86:	f849 7b04 	str.w	r7, [r9], #4
 8009d8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d8e:	40cf      	lsrs	r7, r1
 8009d90:	e7da      	b.n	8009d48 <rshift+0x4c>
 8009d92:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d96:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d9a:	e7c3      	b.n	8009d24 <rshift+0x28>
 8009d9c:	4623      	mov	r3, r4
 8009d9e:	e7e1      	b.n	8009d64 <rshift+0x68>

08009da0 <__hexdig_fun>:
 8009da0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009da4:	2b09      	cmp	r3, #9
 8009da6:	d802      	bhi.n	8009dae <__hexdig_fun+0xe>
 8009da8:	3820      	subs	r0, #32
 8009daa:	b2c0      	uxtb	r0, r0
 8009dac:	4770      	bx	lr
 8009dae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009db2:	2b05      	cmp	r3, #5
 8009db4:	d801      	bhi.n	8009dba <__hexdig_fun+0x1a>
 8009db6:	3847      	subs	r0, #71	@ 0x47
 8009db8:	e7f7      	b.n	8009daa <__hexdig_fun+0xa>
 8009dba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009dbe:	2b05      	cmp	r3, #5
 8009dc0:	d801      	bhi.n	8009dc6 <__hexdig_fun+0x26>
 8009dc2:	3827      	subs	r0, #39	@ 0x27
 8009dc4:	e7f1      	b.n	8009daa <__hexdig_fun+0xa>
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	4770      	bx	lr
	...

08009dcc <__gethex>:
 8009dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd0:	b085      	sub	sp, #20
 8009dd2:	468a      	mov	sl, r1
 8009dd4:	9302      	str	r3, [sp, #8]
 8009dd6:	680b      	ldr	r3, [r1, #0]
 8009dd8:	9001      	str	r0, [sp, #4]
 8009dda:	4690      	mov	r8, r2
 8009ddc:	1c9c      	adds	r4, r3, #2
 8009dde:	46a1      	mov	r9, r4
 8009de0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009de4:	2830      	cmp	r0, #48	@ 0x30
 8009de6:	d0fa      	beq.n	8009dde <__gethex+0x12>
 8009de8:	eba9 0303 	sub.w	r3, r9, r3
 8009dec:	f1a3 0b02 	sub.w	fp, r3, #2
 8009df0:	f7ff ffd6 	bl	8009da0 <__hexdig_fun>
 8009df4:	4605      	mov	r5, r0
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d168      	bne.n	8009ecc <__gethex+0x100>
 8009dfa:	49a0      	ldr	r1, [pc, #640]	@ (800a07c <__gethex+0x2b0>)
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	4648      	mov	r0, r9
 8009e00:	f7ff ff10 	bl	8009c24 <strncmp>
 8009e04:	4607      	mov	r7, r0
 8009e06:	2800      	cmp	r0, #0
 8009e08:	d167      	bne.n	8009eda <__gethex+0x10e>
 8009e0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009e0e:	4626      	mov	r6, r4
 8009e10:	f7ff ffc6 	bl	8009da0 <__hexdig_fun>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d062      	beq.n	8009ede <__gethex+0x112>
 8009e18:	4623      	mov	r3, r4
 8009e1a:	7818      	ldrb	r0, [r3, #0]
 8009e1c:	2830      	cmp	r0, #48	@ 0x30
 8009e1e:	4699      	mov	r9, r3
 8009e20:	f103 0301 	add.w	r3, r3, #1
 8009e24:	d0f9      	beq.n	8009e1a <__gethex+0x4e>
 8009e26:	f7ff ffbb 	bl	8009da0 <__hexdig_fun>
 8009e2a:	fab0 f580 	clz	r5, r0
 8009e2e:	096d      	lsrs	r5, r5, #5
 8009e30:	f04f 0b01 	mov.w	fp, #1
 8009e34:	464a      	mov	r2, r9
 8009e36:	4616      	mov	r6, r2
 8009e38:	3201      	adds	r2, #1
 8009e3a:	7830      	ldrb	r0, [r6, #0]
 8009e3c:	f7ff ffb0 	bl	8009da0 <__hexdig_fun>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d1f8      	bne.n	8009e36 <__gethex+0x6a>
 8009e44:	498d      	ldr	r1, [pc, #564]	@ (800a07c <__gethex+0x2b0>)
 8009e46:	2201      	movs	r2, #1
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f7ff feeb 	bl	8009c24 <strncmp>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d13f      	bne.n	8009ed2 <__gethex+0x106>
 8009e52:	b944      	cbnz	r4, 8009e66 <__gethex+0x9a>
 8009e54:	1c74      	adds	r4, r6, #1
 8009e56:	4622      	mov	r2, r4
 8009e58:	4616      	mov	r6, r2
 8009e5a:	3201      	adds	r2, #1
 8009e5c:	7830      	ldrb	r0, [r6, #0]
 8009e5e:	f7ff ff9f 	bl	8009da0 <__hexdig_fun>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d1f8      	bne.n	8009e58 <__gethex+0x8c>
 8009e66:	1ba4      	subs	r4, r4, r6
 8009e68:	00a7      	lsls	r7, r4, #2
 8009e6a:	7833      	ldrb	r3, [r6, #0]
 8009e6c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009e70:	2b50      	cmp	r3, #80	@ 0x50
 8009e72:	d13e      	bne.n	8009ef2 <__gethex+0x126>
 8009e74:	7873      	ldrb	r3, [r6, #1]
 8009e76:	2b2b      	cmp	r3, #43	@ 0x2b
 8009e78:	d033      	beq.n	8009ee2 <__gethex+0x116>
 8009e7a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009e7c:	d034      	beq.n	8009ee8 <__gethex+0x11c>
 8009e7e:	1c71      	adds	r1, r6, #1
 8009e80:	2400      	movs	r4, #0
 8009e82:	7808      	ldrb	r0, [r1, #0]
 8009e84:	f7ff ff8c 	bl	8009da0 <__hexdig_fun>
 8009e88:	1e43      	subs	r3, r0, #1
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	2b18      	cmp	r3, #24
 8009e8e:	d830      	bhi.n	8009ef2 <__gethex+0x126>
 8009e90:	f1a0 0210 	sub.w	r2, r0, #16
 8009e94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e98:	f7ff ff82 	bl	8009da0 <__hexdig_fun>
 8009e9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009ea0:	fa5f fc8c 	uxtb.w	ip, ip
 8009ea4:	f1bc 0f18 	cmp.w	ip, #24
 8009ea8:	f04f 030a 	mov.w	r3, #10
 8009eac:	d91e      	bls.n	8009eec <__gethex+0x120>
 8009eae:	b104      	cbz	r4, 8009eb2 <__gethex+0xe6>
 8009eb0:	4252      	negs	r2, r2
 8009eb2:	4417      	add	r7, r2
 8009eb4:	f8ca 1000 	str.w	r1, [sl]
 8009eb8:	b1ed      	cbz	r5, 8009ef6 <__gethex+0x12a>
 8009eba:	f1bb 0f00 	cmp.w	fp, #0
 8009ebe:	bf0c      	ite	eq
 8009ec0:	2506      	moveq	r5, #6
 8009ec2:	2500      	movne	r5, #0
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	b005      	add	sp, #20
 8009ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ecc:	2500      	movs	r5, #0
 8009ece:	462c      	mov	r4, r5
 8009ed0:	e7b0      	b.n	8009e34 <__gethex+0x68>
 8009ed2:	2c00      	cmp	r4, #0
 8009ed4:	d1c7      	bne.n	8009e66 <__gethex+0x9a>
 8009ed6:	4627      	mov	r7, r4
 8009ed8:	e7c7      	b.n	8009e6a <__gethex+0x9e>
 8009eda:	464e      	mov	r6, r9
 8009edc:	462f      	mov	r7, r5
 8009ede:	2501      	movs	r5, #1
 8009ee0:	e7c3      	b.n	8009e6a <__gethex+0x9e>
 8009ee2:	2400      	movs	r4, #0
 8009ee4:	1cb1      	adds	r1, r6, #2
 8009ee6:	e7cc      	b.n	8009e82 <__gethex+0xb6>
 8009ee8:	2401      	movs	r4, #1
 8009eea:	e7fb      	b.n	8009ee4 <__gethex+0x118>
 8009eec:	fb03 0002 	mla	r0, r3, r2, r0
 8009ef0:	e7ce      	b.n	8009e90 <__gethex+0xc4>
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	e7de      	b.n	8009eb4 <__gethex+0xe8>
 8009ef6:	eba6 0309 	sub.w	r3, r6, r9
 8009efa:	3b01      	subs	r3, #1
 8009efc:	4629      	mov	r1, r5
 8009efe:	2b07      	cmp	r3, #7
 8009f00:	dc0a      	bgt.n	8009f18 <__gethex+0x14c>
 8009f02:	9801      	ldr	r0, [sp, #4]
 8009f04:	f7fe f992 	bl	800822c <_Balloc>
 8009f08:	4604      	mov	r4, r0
 8009f0a:	b940      	cbnz	r0, 8009f1e <__gethex+0x152>
 8009f0c:	4b5c      	ldr	r3, [pc, #368]	@ (800a080 <__gethex+0x2b4>)
 8009f0e:	4602      	mov	r2, r0
 8009f10:	21e4      	movs	r1, #228	@ 0xe4
 8009f12:	485c      	ldr	r0, [pc, #368]	@ (800a084 <__gethex+0x2b8>)
 8009f14:	f7ff fec0 	bl	8009c98 <__assert_func>
 8009f18:	3101      	adds	r1, #1
 8009f1a:	105b      	asrs	r3, r3, #1
 8009f1c:	e7ef      	b.n	8009efe <__gethex+0x132>
 8009f1e:	f100 0a14 	add.w	sl, r0, #20
 8009f22:	2300      	movs	r3, #0
 8009f24:	4655      	mov	r5, sl
 8009f26:	469b      	mov	fp, r3
 8009f28:	45b1      	cmp	r9, r6
 8009f2a:	d337      	bcc.n	8009f9c <__gethex+0x1d0>
 8009f2c:	f845 bb04 	str.w	fp, [r5], #4
 8009f30:	eba5 050a 	sub.w	r5, r5, sl
 8009f34:	10ad      	asrs	r5, r5, #2
 8009f36:	6125      	str	r5, [r4, #16]
 8009f38:	4658      	mov	r0, fp
 8009f3a:	f7fe fa69 	bl	8008410 <__hi0bits>
 8009f3e:	016d      	lsls	r5, r5, #5
 8009f40:	f8d8 6000 	ldr.w	r6, [r8]
 8009f44:	1a2d      	subs	r5, r5, r0
 8009f46:	42b5      	cmp	r5, r6
 8009f48:	dd54      	ble.n	8009ff4 <__gethex+0x228>
 8009f4a:	1bad      	subs	r5, r5, r6
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f7fe fdf2 	bl	8008b38 <__any_on>
 8009f54:	4681      	mov	r9, r0
 8009f56:	b178      	cbz	r0, 8009f78 <__gethex+0x1ac>
 8009f58:	1e6b      	subs	r3, r5, #1
 8009f5a:	1159      	asrs	r1, r3, #5
 8009f5c:	f003 021f 	and.w	r2, r3, #31
 8009f60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009f64:	f04f 0901 	mov.w	r9, #1
 8009f68:	fa09 f202 	lsl.w	r2, r9, r2
 8009f6c:	420a      	tst	r2, r1
 8009f6e:	d003      	beq.n	8009f78 <__gethex+0x1ac>
 8009f70:	454b      	cmp	r3, r9
 8009f72:	dc36      	bgt.n	8009fe2 <__gethex+0x216>
 8009f74:	f04f 0902 	mov.w	r9, #2
 8009f78:	4629      	mov	r1, r5
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f7ff febe 	bl	8009cfc <rshift>
 8009f80:	442f      	add	r7, r5
 8009f82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f86:	42bb      	cmp	r3, r7
 8009f88:	da42      	bge.n	800a010 <__gethex+0x244>
 8009f8a:	9801      	ldr	r0, [sp, #4]
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	f7fe f98d 	bl	80082ac <_Bfree>
 8009f92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f94:	2300      	movs	r3, #0
 8009f96:	6013      	str	r3, [r2, #0]
 8009f98:	25a3      	movs	r5, #163	@ 0xa3
 8009f9a:	e793      	b.n	8009ec4 <__gethex+0xf8>
 8009f9c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009fa0:	2a2e      	cmp	r2, #46	@ 0x2e
 8009fa2:	d012      	beq.n	8009fca <__gethex+0x1fe>
 8009fa4:	2b20      	cmp	r3, #32
 8009fa6:	d104      	bne.n	8009fb2 <__gethex+0x1e6>
 8009fa8:	f845 bb04 	str.w	fp, [r5], #4
 8009fac:	f04f 0b00 	mov.w	fp, #0
 8009fb0:	465b      	mov	r3, fp
 8009fb2:	7830      	ldrb	r0, [r6, #0]
 8009fb4:	9303      	str	r3, [sp, #12]
 8009fb6:	f7ff fef3 	bl	8009da0 <__hexdig_fun>
 8009fba:	9b03      	ldr	r3, [sp, #12]
 8009fbc:	f000 000f 	and.w	r0, r0, #15
 8009fc0:	4098      	lsls	r0, r3
 8009fc2:	ea4b 0b00 	orr.w	fp, fp, r0
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	e7ae      	b.n	8009f28 <__gethex+0x15c>
 8009fca:	45b1      	cmp	r9, r6
 8009fcc:	d8ea      	bhi.n	8009fa4 <__gethex+0x1d8>
 8009fce:	492b      	ldr	r1, [pc, #172]	@ (800a07c <__gethex+0x2b0>)
 8009fd0:	9303      	str	r3, [sp, #12]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f7ff fe25 	bl	8009c24 <strncmp>
 8009fda:	9b03      	ldr	r3, [sp, #12]
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d1e1      	bne.n	8009fa4 <__gethex+0x1d8>
 8009fe0:	e7a2      	b.n	8009f28 <__gethex+0x15c>
 8009fe2:	1ea9      	subs	r1, r5, #2
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f7fe fda7 	bl	8008b38 <__any_on>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d0c2      	beq.n	8009f74 <__gethex+0x1a8>
 8009fee:	f04f 0903 	mov.w	r9, #3
 8009ff2:	e7c1      	b.n	8009f78 <__gethex+0x1ac>
 8009ff4:	da09      	bge.n	800a00a <__gethex+0x23e>
 8009ff6:	1b75      	subs	r5, r6, r5
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	9801      	ldr	r0, [sp, #4]
 8009ffc:	462a      	mov	r2, r5
 8009ffe:	f7fe fb65 	bl	80086cc <__lshift>
 800a002:	1b7f      	subs	r7, r7, r5
 800a004:	4604      	mov	r4, r0
 800a006:	f100 0a14 	add.w	sl, r0, #20
 800a00a:	f04f 0900 	mov.w	r9, #0
 800a00e:	e7b8      	b.n	8009f82 <__gethex+0x1b6>
 800a010:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a014:	42bd      	cmp	r5, r7
 800a016:	dd6f      	ble.n	800a0f8 <__gethex+0x32c>
 800a018:	1bed      	subs	r5, r5, r7
 800a01a:	42ae      	cmp	r6, r5
 800a01c:	dc34      	bgt.n	800a088 <__gethex+0x2bc>
 800a01e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a022:	2b02      	cmp	r3, #2
 800a024:	d022      	beq.n	800a06c <__gethex+0x2a0>
 800a026:	2b03      	cmp	r3, #3
 800a028:	d024      	beq.n	800a074 <__gethex+0x2a8>
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d115      	bne.n	800a05a <__gethex+0x28e>
 800a02e:	42ae      	cmp	r6, r5
 800a030:	d113      	bne.n	800a05a <__gethex+0x28e>
 800a032:	2e01      	cmp	r6, #1
 800a034:	d10b      	bne.n	800a04e <__gethex+0x282>
 800a036:	9a02      	ldr	r2, [sp, #8]
 800a038:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a03c:	6013      	str	r3, [r2, #0]
 800a03e:	2301      	movs	r3, #1
 800a040:	6123      	str	r3, [r4, #16]
 800a042:	f8ca 3000 	str.w	r3, [sl]
 800a046:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a048:	2562      	movs	r5, #98	@ 0x62
 800a04a:	601c      	str	r4, [r3, #0]
 800a04c:	e73a      	b.n	8009ec4 <__gethex+0xf8>
 800a04e:	1e71      	subs	r1, r6, #1
 800a050:	4620      	mov	r0, r4
 800a052:	f7fe fd71 	bl	8008b38 <__any_on>
 800a056:	2800      	cmp	r0, #0
 800a058:	d1ed      	bne.n	800a036 <__gethex+0x26a>
 800a05a:	9801      	ldr	r0, [sp, #4]
 800a05c:	4621      	mov	r1, r4
 800a05e:	f7fe f925 	bl	80082ac <_Bfree>
 800a062:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a064:	2300      	movs	r3, #0
 800a066:	6013      	str	r3, [r2, #0]
 800a068:	2550      	movs	r5, #80	@ 0x50
 800a06a:	e72b      	b.n	8009ec4 <__gethex+0xf8>
 800a06c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1f3      	bne.n	800a05a <__gethex+0x28e>
 800a072:	e7e0      	b.n	800a036 <__gethex+0x26a>
 800a074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1dd      	bne.n	800a036 <__gethex+0x26a>
 800a07a:	e7ee      	b.n	800a05a <__gethex+0x28e>
 800a07c:	0800ad77 	.word	0x0800ad77
 800a080:	0800ad0d 	.word	0x0800ad0d
 800a084:	0800adce 	.word	0x0800adce
 800a088:	1e6f      	subs	r7, r5, #1
 800a08a:	f1b9 0f00 	cmp.w	r9, #0
 800a08e:	d130      	bne.n	800a0f2 <__gethex+0x326>
 800a090:	b127      	cbz	r7, 800a09c <__gethex+0x2d0>
 800a092:	4639      	mov	r1, r7
 800a094:	4620      	mov	r0, r4
 800a096:	f7fe fd4f 	bl	8008b38 <__any_on>
 800a09a:	4681      	mov	r9, r0
 800a09c:	117a      	asrs	r2, r7, #5
 800a09e:	2301      	movs	r3, #1
 800a0a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a0a4:	f007 071f 	and.w	r7, r7, #31
 800a0a8:	40bb      	lsls	r3, r7
 800a0aa:	4213      	tst	r3, r2
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	bf18      	it	ne
 800a0b2:	f049 0902 	orrne.w	r9, r9, #2
 800a0b6:	f7ff fe21 	bl	8009cfc <rshift>
 800a0ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a0be:	1b76      	subs	r6, r6, r5
 800a0c0:	2502      	movs	r5, #2
 800a0c2:	f1b9 0f00 	cmp.w	r9, #0
 800a0c6:	d047      	beq.n	800a158 <__gethex+0x38c>
 800a0c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d015      	beq.n	800a0fc <__gethex+0x330>
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d017      	beq.n	800a104 <__gethex+0x338>
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d109      	bne.n	800a0ec <__gethex+0x320>
 800a0d8:	f019 0f02 	tst.w	r9, #2
 800a0dc:	d006      	beq.n	800a0ec <__gethex+0x320>
 800a0de:	f8da 3000 	ldr.w	r3, [sl]
 800a0e2:	ea49 0903 	orr.w	r9, r9, r3
 800a0e6:	f019 0f01 	tst.w	r9, #1
 800a0ea:	d10e      	bne.n	800a10a <__gethex+0x33e>
 800a0ec:	f045 0510 	orr.w	r5, r5, #16
 800a0f0:	e032      	b.n	800a158 <__gethex+0x38c>
 800a0f2:	f04f 0901 	mov.w	r9, #1
 800a0f6:	e7d1      	b.n	800a09c <__gethex+0x2d0>
 800a0f8:	2501      	movs	r5, #1
 800a0fa:	e7e2      	b.n	800a0c2 <__gethex+0x2f6>
 800a0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0fe:	f1c3 0301 	rsb	r3, r3, #1
 800a102:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a104:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a106:	2b00      	cmp	r3, #0
 800a108:	d0f0      	beq.n	800a0ec <__gethex+0x320>
 800a10a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a10e:	f104 0314 	add.w	r3, r4, #20
 800a112:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a116:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a11a:	f04f 0c00 	mov.w	ip, #0
 800a11e:	4618      	mov	r0, r3
 800a120:	f853 2b04 	ldr.w	r2, [r3], #4
 800a124:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a128:	d01b      	beq.n	800a162 <__gethex+0x396>
 800a12a:	3201      	adds	r2, #1
 800a12c:	6002      	str	r2, [r0, #0]
 800a12e:	2d02      	cmp	r5, #2
 800a130:	f104 0314 	add.w	r3, r4, #20
 800a134:	d13c      	bne.n	800a1b0 <__gethex+0x3e4>
 800a136:	f8d8 2000 	ldr.w	r2, [r8]
 800a13a:	3a01      	subs	r2, #1
 800a13c:	42b2      	cmp	r2, r6
 800a13e:	d109      	bne.n	800a154 <__gethex+0x388>
 800a140:	1171      	asrs	r1, r6, #5
 800a142:	2201      	movs	r2, #1
 800a144:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a148:	f006 061f 	and.w	r6, r6, #31
 800a14c:	fa02 f606 	lsl.w	r6, r2, r6
 800a150:	421e      	tst	r6, r3
 800a152:	d13a      	bne.n	800a1ca <__gethex+0x3fe>
 800a154:	f045 0520 	orr.w	r5, r5, #32
 800a158:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a15a:	601c      	str	r4, [r3, #0]
 800a15c:	9b02      	ldr	r3, [sp, #8]
 800a15e:	601f      	str	r7, [r3, #0]
 800a160:	e6b0      	b.n	8009ec4 <__gethex+0xf8>
 800a162:	4299      	cmp	r1, r3
 800a164:	f843 cc04 	str.w	ip, [r3, #-4]
 800a168:	d8d9      	bhi.n	800a11e <__gethex+0x352>
 800a16a:	68a3      	ldr	r3, [r4, #8]
 800a16c:	459b      	cmp	fp, r3
 800a16e:	db17      	blt.n	800a1a0 <__gethex+0x3d4>
 800a170:	6861      	ldr	r1, [r4, #4]
 800a172:	9801      	ldr	r0, [sp, #4]
 800a174:	3101      	adds	r1, #1
 800a176:	f7fe f859 	bl	800822c <_Balloc>
 800a17a:	4681      	mov	r9, r0
 800a17c:	b918      	cbnz	r0, 800a186 <__gethex+0x3ba>
 800a17e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1e8 <__gethex+0x41c>)
 800a180:	4602      	mov	r2, r0
 800a182:	2184      	movs	r1, #132	@ 0x84
 800a184:	e6c5      	b.n	8009f12 <__gethex+0x146>
 800a186:	6922      	ldr	r2, [r4, #16]
 800a188:	3202      	adds	r2, #2
 800a18a:	f104 010c 	add.w	r1, r4, #12
 800a18e:	0092      	lsls	r2, r2, #2
 800a190:	300c      	adds	r0, #12
 800a192:	f7ff fd69 	bl	8009c68 <memcpy>
 800a196:	4621      	mov	r1, r4
 800a198:	9801      	ldr	r0, [sp, #4]
 800a19a:	f7fe f887 	bl	80082ac <_Bfree>
 800a19e:	464c      	mov	r4, r9
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	1c5a      	adds	r2, r3, #1
 800a1a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1a8:	6122      	str	r2, [r4, #16]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	615a      	str	r2, [r3, #20]
 800a1ae:	e7be      	b.n	800a12e <__gethex+0x362>
 800a1b0:	6922      	ldr	r2, [r4, #16]
 800a1b2:	455a      	cmp	r2, fp
 800a1b4:	dd0b      	ble.n	800a1ce <__gethex+0x402>
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f7ff fd9f 	bl	8009cfc <rshift>
 800a1be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1c2:	3701      	adds	r7, #1
 800a1c4:	42bb      	cmp	r3, r7
 800a1c6:	f6ff aee0 	blt.w	8009f8a <__gethex+0x1be>
 800a1ca:	2501      	movs	r5, #1
 800a1cc:	e7c2      	b.n	800a154 <__gethex+0x388>
 800a1ce:	f016 061f 	ands.w	r6, r6, #31
 800a1d2:	d0fa      	beq.n	800a1ca <__gethex+0x3fe>
 800a1d4:	4453      	add	r3, sl
 800a1d6:	f1c6 0620 	rsb	r6, r6, #32
 800a1da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a1de:	f7fe f917 	bl	8008410 <__hi0bits>
 800a1e2:	42b0      	cmp	r0, r6
 800a1e4:	dbe7      	blt.n	800a1b6 <__gethex+0x3ea>
 800a1e6:	e7f0      	b.n	800a1ca <__gethex+0x3fe>
 800a1e8:	0800ad0d 	.word	0x0800ad0d

0800a1ec <L_shift>:
 800a1ec:	f1c2 0208 	rsb	r2, r2, #8
 800a1f0:	0092      	lsls	r2, r2, #2
 800a1f2:	b570      	push	{r4, r5, r6, lr}
 800a1f4:	f1c2 0620 	rsb	r6, r2, #32
 800a1f8:	6843      	ldr	r3, [r0, #4]
 800a1fa:	6804      	ldr	r4, [r0, #0]
 800a1fc:	fa03 f506 	lsl.w	r5, r3, r6
 800a200:	432c      	orrs	r4, r5
 800a202:	40d3      	lsrs	r3, r2
 800a204:	6004      	str	r4, [r0, #0]
 800a206:	f840 3f04 	str.w	r3, [r0, #4]!
 800a20a:	4288      	cmp	r0, r1
 800a20c:	d3f4      	bcc.n	800a1f8 <L_shift+0xc>
 800a20e:	bd70      	pop	{r4, r5, r6, pc}

0800a210 <__match>:
 800a210:	b530      	push	{r4, r5, lr}
 800a212:	6803      	ldr	r3, [r0, #0]
 800a214:	3301      	adds	r3, #1
 800a216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a21a:	b914      	cbnz	r4, 800a222 <__match+0x12>
 800a21c:	6003      	str	r3, [r0, #0]
 800a21e:	2001      	movs	r0, #1
 800a220:	bd30      	pop	{r4, r5, pc}
 800a222:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a226:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a22a:	2d19      	cmp	r5, #25
 800a22c:	bf98      	it	ls
 800a22e:	3220      	addls	r2, #32
 800a230:	42a2      	cmp	r2, r4
 800a232:	d0f0      	beq.n	800a216 <__match+0x6>
 800a234:	2000      	movs	r0, #0
 800a236:	e7f3      	b.n	800a220 <__match+0x10>

0800a238 <__hexnan>:
 800a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	680b      	ldr	r3, [r1, #0]
 800a23e:	6801      	ldr	r1, [r0, #0]
 800a240:	115e      	asrs	r6, r3, #5
 800a242:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a246:	f013 031f 	ands.w	r3, r3, #31
 800a24a:	b087      	sub	sp, #28
 800a24c:	bf18      	it	ne
 800a24e:	3604      	addne	r6, #4
 800a250:	2500      	movs	r5, #0
 800a252:	1f37      	subs	r7, r6, #4
 800a254:	4682      	mov	sl, r0
 800a256:	4690      	mov	r8, r2
 800a258:	9301      	str	r3, [sp, #4]
 800a25a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a25e:	46b9      	mov	r9, r7
 800a260:	463c      	mov	r4, r7
 800a262:	9502      	str	r5, [sp, #8]
 800a264:	46ab      	mov	fp, r5
 800a266:	784a      	ldrb	r2, [r1, #1]
 800a268:	1c4b      	adds	r3, r1, #1
 800a26a:	9303      	str	r3, [sp, #12]
 800a26c:	b342      	cbz	r2, 800a2c0 <__hexnan+0x88>
 800a26e:	4610      	mov	r0, r2
 800a270:	9105      	str	r1, [sp, #20]
 800a272:	9204      	str	r2, [sp, #16]
 800a274:	f7ff fd94 	bl	8009da0 <__hexdig_fun>
 800a278:	2800      	cmp	r0, #0
 800a27a:	d151      	bne.n	800a320 <__hexnan+0xe8>
 800a27c:	9a04      	ldr	r2, [sp, #16]
 800a27e:	9905      	ldr	r1, [sp, #20]
 800a280:	2a20      	cmp	r2, #32
 800a282:	d818      	bhi.n	800a2b6 <__hexnan+0x7e>
 800a284:	9b02      	ldr	r3, [sp, #8]
 800a286:	459b      	cmp	fp, r3
 800a288:	dd13      	ble.n	800a2b2 <__hexnan+0x7a>
 800a28a:	454c      	cmp	r4, r9
 800a28c:	d206      	bcs.n	800a29c <__hexnan+0x64>
 800a28e:	2d07      	cmp	r5, #7
 800a290:	dc04      	bgt.n	800a29c <__hexnan+0x64>
 800a292:	462a      	mov	r2, r5
 800a294:	4649      	mov	r1, r9
 800a296:	4620      	mov	r0, r4
 800a298:	f7ff ffa8 	bl	800a1ec <L_shift>
 800a29c:	4544      	cmp	r4, r8
 800a29e:	d952      	bls.n	800a346 <__hexnan+0x10e>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	f1a4 0904 	sub.w	r9, r4, #4
 800a2a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2aa:	f8cd b008 	str.w	fp, [sp, #8]
 800a2ae:	464c      	mov	r4, r9
 800a2b0:	461d      	mov	r5, r3
 800a2b2:	9903      	ldr	r1, [sp, #12]
 800a2b4:	e7d7      	b.n	800a266 <__hexnan+0x2e>
 800a2b6:	2a29      	cmp	r2, #41	@ 0x29
 800a2b8:	d157      	bne.n	800a36a <__hexnan+0x132>
 800a2ba:	3102      	adds	r1, #2
 800a2bc:	f8ca 1000 	str.w	r1, [sl]
 800a2c0:	f1bb 0f00 	cmp.w	fp, #0
 800a2c4:	d051      	beq.n	800a36a <__hexnan+0x132>
 800a2c6:	454c      	cmp	r4, r9
 800a2c8:	d206      	bcs.n	800a2d8 <__hexnan+0xa0>
 800a2ca:	2d07      	cmp	r5, #7
 800a2cc:	dc04      	bgt.n	800a2d8 <__hexnan+0xa0>
 800a2ce:	462a      	mov	r2, r5
 800a2d0:	4649      	mov	r1, r9
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f7ff ff8a 	bl	800a1ec <L_shift>
 800a2d8:	4544      	cmp	r4, r8
 800a2da:	d936      	bls.n	800a34a <__hexnan+0x112>
 800a2dc:	f1a8 0204 	sub.w	r2, r8, #4
 800a2e0:	4623      	mov	r3, r4
 800a2e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a2e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a2ea:	429f      	cmp	r7, r3
 800a2ec:	d2f9      	bcs.n	800a2e2 <__hexnan+0xaa>
 800a2ee:	1b3b      	subs	r3, r7, r4
 800a2f0:	f023 0303 	bic.w	r3, r3, #3
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	3401      	adds	r4, #1
 800a2f8:	3e03      	subs	r6, #3
 800a2fa:	42b4      	cmp	r4, r6
 800a2fc:	bf88      	it	hi
 800a2fe:	2304      	movhi	r3, #4
 800a300:	4443      	add	r3, r8
 800a302:	2200      	movs	r2, #0
 800a304:	f843 2b04 	str.w	r2, [r3], #4
 800a308:	429f      	cmp	r7, r3
 800a30a:	d2fb      	bcs.n	800a304 <__hexnan+0xcc>
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	b91b      	cbnz	r3, 800a318 <__hexnan+0xe0>
 800a310:	4547      	cmp	r7, r8
 800a312:	d128      	bne.n	800a366 <__hexnan+0x12e>
 800a314:	2301      	movs	r3, #1
 800a316:	603b      	str	r3, [r7, #0]
 800a318:	2005      	movs	r0, #5
 800a31a:	b007      	add	sp, #28
 800a31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a320:	3501      	adds	r5, #1
 800a322:	2d08      	cmp	r5, #8
 800a324:	f10b 0b01 	add.w	fp, fp, #1
 800a328:	dd06      	ble.n	800a338 <__hexnan+0x100>
 800a32a:	4544      	cmp	r4, r8
 800a32c:	d9c1      	bls.n	800a2b2 <__hexnan+0x7a>
 800a32e:	2300      	movs	r3, #0
 800a330:	f844 3c04 	str.w	r3, [r4, #-4]
 800a334:	2501      	movs	r5, #1
 800a336:	3c04      	subs	r4, #4
 800a338:	6822      	ldr	r2, [r4, #0]
 800a33a:	f000 000f 	and.w	r0, r0, #15
 800a33e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a342:	6020      	str	r0, [r4, #0]
 800a344:	e7b5      	b.n	800a2b2 <__hexnan+0x7a>
 800a346:	2508      	movs	r5, #8
 800a348:	e7b3      	b.n	800a2b2 <__hexnan+0x7a>
 800a34a:	9b01      	ldr	r3, [sp, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d0dd      	beq.n	800a30c <__hexnan+0xd4>
 800a350:	f1c3 0320 	rsb	r3, r3, #32
 800a354:	f04f 32ff 	mov.w	r2, #4294967295
 800a358:	40da      	lsrs	r2, r3
 800a35a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a35e:	4013      	ands	r3, r2
 800a360:	f846 3c04 	str.w	r3, [r6, #-4]
 800a364:	e7d2      	b.n	800a30c <__hexnan+0xd4>
 800a366:	3f04      	subs	r7, #4
 800a368:	e7d0      	b.n	800a30c <__hexnan+0xd4>
 800a36a:	2004      	movs	r0, #4
 800a36c:	e7d5      	b.n	800a31a <__hexnan+0xe2>

0800a36e <__ascii_mbtowc>:
 800a36e:	b082      	sub	sp, #8
 800a370:	b901      	cbnz	r1, 800a374 <__ascii_mbtowc+0x6>
 800a372:	a901      	add	r1, sp, #4
 800a374:	b142      	cbz	r2, 800a388 <__ascii_mbtowc+0x1a>
 800a376:	b14b      	cbz	r3, 800a38c <__ascii_mbtowc+0x1e>
 800a378:	7813      	ldrb	r3, [r2, #0]
 800a37a:	600b      	str	r3, [r1, #0]
 800a37c:	7812      	ldrb	r2, [r2, #0]
 800a37e:	1e10      	subs	r0, r2, #0
 800a380:	bf18      	it	ne
 800a382:	2001      	movne	r0, #1
 800a384:	b002      	add	sp, #8
 800a386:	4770      	bx	lr
 800a388:	4610      	mov	r0, r2
 800a38a:	e7fb      	b.n	800a384 <__ascii_mbtowc+0x16>
 800a38c:	f06f 0001 	mvn.w	r0, #1
 800a390:	e7f8      	b.n	800a384 <__ascii_mbtowc+0x16>

0800a392 <_realloc_r>:
 800a392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a396:	4607      	mov	r7, r0
 800a398:	4614      	mov	r4, r2
 800a39a:	460d      	mov	r5, r1
 800a39c:	b921      	cbnz	r1, 800a3a8 <_realloc_r+0x16>
 800a39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a2:	4611      	mov	r1, r2
 800a3a4:	f7fd beb6 	b.w	8008114 <_malloc_r>
 800a3a8:	b92a      	cbnz	r2, 800a3b6 <_realloc_r+0x24>
 800a3aa:	f7fd fe3f 	bl	800802c <_free_r>
 800a3ae:	4625      	mov	r5, r4
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3b6:	f000 f840 	bl	800a43a <_malloc_usable_size_r>
 800a3ba:	4284      	cmp	r4, r0
 800a3bc:	4606      	mov	r6, r0
 800a3be:	d802      	bhi.n	800a3c6 <_realloc_r+0x34>
 800a3c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3c4:	d8f4      	bhi.n	800a3b0 <_realloc_r+0x1e>
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	4638      	mov	r0, r7
 800a3ca:	f7fd fea3 	bl	8008114 <_malloc_r>
 800a3ce:	4680      	mov	r8, r0
 800a3d0:	b908      	cbnz	r0, 800a3d6 <_realloc_r+0x44>
 800a3d2:	4645      	mov	r5, r8
 800a3d4:	e7ec      	b.n	800a3b0 <_realloc_r+0x1e>
 800a3d6:	42b4      	cmp	r4, r6
 800a3d8:	4622      	mov	r2, r4
 800a3da:	4629      	mov	r1, r5
 800a3dc:	bf28      	it	cs
 800a3de:	4632      	movcs	r2, r6
 800a3e0:	f7ff fc42 	bl	8009c68 <memcpy>
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	f7fd fe20 	bl	800802c <_free_r>
 800a3ec:	e7f1      	b.n	800a3d2 <_realloc_r+0x40>

0800a3ee <__ascii_wctomb>:
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	b141      	cbz	r1, 800a406 <__ascii_wctomb+0x18>
 800a3f4:	2aff      	cmp	r2, #255	@ 0xff
 800a3f6:	d904      	bls.n	800a402 <__ascii_wctomb+0x14>
 800a3f8:	228a      	movs	r2, #138	@ 0x8a
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a400:	4770      	bx	lr
 800a402:	700a      	strb	r2, [r1, #0]
 800a404:	2001      	movs	r0, #1
 800a406:	4770      	bx	lr

0800a408 <fiprintf>:
 800a408:	b40e      	push	{r1, r2, r3}
 800a40a:	b503      	push	{r0, r1, lr}
 800a40c:	4601      	mov	r1, r0
 800a40e:	ab03      	add	r3, sp, #12
 800a410:	4805      	ldr	r0, [pc, #20]	@ (800a428 <fiprintf+0x20>)
 800a412:	f853 2b04 	ldr.w	r2, [r3], #4
 800a416:	6800      	ldr	r0, [r0, #0]
 800a418:	9301      	str	r3, [sp, #4]
 800a41a:	f000 f83f 	bl	800a49c <_vfiprintf_r>
 800a41e:	b002      	add	sp, #8
 800a420:	f85d eb04 	ldr.w	lr, [sp], #4
 800a424:	b003      	add	sp, #12
 800a426:	4770      	bx	lr
 800a428:	20000024 	.word	0x20000024

0800a42c <abort>:
 800a42c:	b508      	push	{r3, lr}
 800a42e:	2006      	movs	r0, #6
 800a430:	f000 fa08 	bl	800a844 <raise>
 800a434:	2001      	movs	r0, #1
 800a436:	f7f8 f826 	bl	8002486 <_exit>

0800a43a <_malloc_usable_size_r>:
 800a43a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a43e:	1f18      	subs	r0, r3, #4
 800a440:	2b00      	cmp	r3, #0
 800a442:	bfbc      	itt	lt
 800a444:	580b      	ldrlt	r3, [r1, r0]
 800a446:	18c0      	addlt	r0, r0, r3
 800a448:	4770      	bx	lr

0800a44a <__sfputc_r>:
 800a44a:	6893      	ldr	r3, [r2, #8]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	2b00      	cmp	r3, #0
 800a450:	b410      	push	{r4}
 800a452:	6093      	str	r3, [r2, #8]
 800a454:	da08      	bge.n	800a468 <__sfputc_r+0x1e>
 800a456:	6994      	ldr	r4, [r2, #24]
 800a458:	42a3      	cmp	r3, r4
 800a45a:	db01      	blt.n	800a460 <__sfputc_r+0x16>
 800a45c:	290a      	cmp	r1, #10
 800a45e:	d103      	bne.n	800a468 <__sfputc_r+0x1e>
 800a460:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a464:	f000 b932 	b.w	800a6cc <__swbuf_r>
 800a468:	6813      	ldr	r3, [r2, #0]
 800a46a:	1c58      	adds	r0, r3, #1
 800a46c:	6010      	str	r0, [r2, #0]
 800a46e:	7019      	strb	r1, [r3, #0]
 800a470:	4608      	mov	r0, r1
 800a472:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <__sfputs_r>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	4606      	mov	r6, r0
 800a47c:	460f      	mov	r7, r1
 800a47e:	4614      	mov	r4, r2
 800a480:	18d5      	adds	r5, r2, r3
 800a482:	42ac      	cmp	r4, r5
 800a484:	d101      	bne.n	800a48a <__sfputs_r+0x12>
 800a486:	2000      	movs	r0, #0
 800a488:	e007      	b.n	800a49a <__sfputs_r+0x22>
 800a48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a48e:	463a      	mov	r2, r7
 800a490:	4630      	mov	r0, r6
 800a492:	f7ff ffda 	bl	800a44a <__sfputc_r>
 800a496:	1c43      	adds	r3, r0, #1
 800a498:	d1f3      	bne.n	800a482 <__sfputs_r+0xa>
 800a49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a49c <_vfiprintf_r>:
 800a49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a0:	460d      	mov	r5, r1
 800a4a2:	b09d      	sub	sp, #116	@ 0x74
 800a4a4:	4614      	mov	r4, r2
 800a4a6:	4698      	mov	r8, r3
 800a4a8:	4606      	mov	r6, r0
 800a4aa:	b118      	cbz	r0, 800a4b4 <_vfiprintf_r+0x18>
 800a4ac:	6a03      	ldr	r3, [r0, #32]
 800a4ae:	b90b      	cbnz	r3, 800a4b4 <_vfiprintf_r+0x18>
 800a4b0:	f7fc feb2 	bl	8007218 <__sinit>
 800a4b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4b6:	07d9      	lsls	r1, r3, #31
 800a4b8:	d405      	bmi.n	800a4c6 <_vfiprintf_r+0x2a>
 800a4ba:	89ab      	ldrh	r3, [r5, #12]
 800a4bc:	059a      	lsls	r2, r3, #22
 800a4be:	d402      	bmi.n	800a4c6 <_vfiprintf_r+0x2a>
 800a4c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4c2:	f7fc ffc2 	bl	800744a <__retarget_lock_acquire_recursive>
 800a4c6:	89ab      	ldrh	r3, [r5, #12]
 800a4c8:	071b      	lsls	r3, r3, #28
 800a4ca:	d501      	bpl.n	800a4d0 <_vfiprintf_r+0x34>
 800a4cc:	692b      	ldr	r3, [r5, #16]
 800a4ce:	b99b      	cbnz	r3, 800a4f8 <_vfiprintf_r+0x5c>
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f000 f938 	bl	800a748 <__swsetup_r>
 800a4d8:	b170      	cbz	r0, 800a4f8 <_vfiprintf_r+0x5c>
 800a4da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4dc:	07dc      	lsls	r4, r3, #31
 800a4de:	d504      	bpl.n	800a4ea <_vfiprintf_r+0x4e>
 800a4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e4:	b01d      	add	sp, #116	@ 0x74
 800a4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ea:	89ab      	ldrh	r3, [r5, #12]
 800a4ec:	0598      	lsls	r0, r3, #22
 800a4ee:	d4f7      	bmi.n	800a4e0 <_vfiprintf_r+0x44>
 800a4f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4f2:	f7fc ffab 	bl	800744c <__retarget_lock_release_recursive>
 800a4f6:	e7f3      	b.n	800a4e0 <_vfiprintf_r+0x44>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4fc:	2320      	movs	r3, #32
 800a4fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a502:	f8cd 800c 	str.w	r8, [sp, #12]
 800a506:	2330      	movs	r3, #48	@ 0x30
 800a508:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a6b8 <_vfiprintf_r+0x21c>
 800a50c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a510:	f04f 0901 	mov.w	r9, #1
 800a514:	4623      	mov	r3, r4
 800a516:	469a      	mov	sl, r3
 800a518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a51c:	b10a      	cbz	r2, 800a522 <_vfiprintf_r+0x86>
 800a51e:	2a25      	cmp	r2, #37	@ 0x25
 800a520:	d1f9      	bne.n	800a516 <_vfiprintf_r+0x7a>
 800a522:	ebba 0b04 	subs.w	fp, sl, r4
 800a526:	d00b      	beq.n	800a540 <_vfiprintf_r+0xa4>
 800a528:	465b      	mov	r3, fp
 800a52a:	4622      	mov	r2, r4
 800a52c:	4629      	mov	r1, r5
 800a52e:	4630      	mov	r0, r6
 800a530:	f7ff ffa2 	bl	800a478 <__sfputs_r>
 800a534:	3001      	adds	r0, #1
 800a536:	f000 80a7 	beq.w	800a688 <_vfiprintf_r+0x1ec>
 800a53a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a53c:	445a      	add	r2, fp
 800a53e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a540:	f89a 3000 	ldrb.w	r3, [sl]
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 809f 	beq.w	800a688 <_vfiprintf_r+0x1ec>
 800a54a:	2300      	movs	r3, #0
 800a54c:	f04f 32ff 	mov.w	r2, #4294967295
 800a550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a554:	f10a 0a01 	add.w	sl, sl, #1
 800a558:	9304      	str	r3, [sp, #16]
 800a55a:	9307      	str	r3, [sp, #28]
 800a55c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a560:	931a      	str	r3, [sp, #104]	@ 0x68
 800a562:	4654      	mov	r4, sl
 800a564:	2205      	movs	r2, #5
 800a566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a56a:	4853      	ldr	r0, [pc, #332]	@ (800a6b8 <_vfiprintf_r+0x21c>)
 800a56c:	f7f5 fe68 	bl	8000240 <memchr>
 800a570:	9a04      	ldr	r2, [sp, #16]
 800a572:	b9d8      	cbnz	r0, 800a5ac <_vfiprintf_r+0x110>
 800a574:	06d1      	lsls	r1, r2, #27
 800a576:	bf44      	itt	mi
 800a578:	2320      	movmi	r3, #32
 800a57a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a57e:	0713      	lsls	r3, r2, #28
 800a580:	bf44      	itt	mi
 800a582:	232b      	movmi	r3, #43	@ 0x2b
 800a584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a588:	f89a 3000 	ldrb.w	r3, [sl]
 800a58c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a58e:	d015      	beq.n	800a5bc <_vfiprintf_r+0x120>
 800a590:	9a07      	ldr	r2, [sp, #28]
 800a592:	4654      	mov	r4, sl
 800a594:	2000      	movs	r0, #0
 800a596:	f04f 0c0a 	mov.w	ip, #10
 800a59a:	4621      	mov	r1, r4
 800a59c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5a0:	3b30      	subs	r3, #48	@ 0x30
 800a5a2:	2b09      	cmp	r3, #9
 800a5a4:	d94b      	bls.n	800a63e <_vfiprintf_r+0x1a2>
 800a5a6:	b1b0      	cbz	r0, 800a5d6 <_vfiprintf_r+0x13a>
 800a5a8:	9207      	str	r2, [sp, #28]
 800a5aa:	e014      	b.n	800a5d6 <_vfiprintf_r+0x13a>
 800a5ac:	eba0 0308 	sub.w	r3, r0, r8
 800a5b0:	fa09 f303 	lsl.w	r3, r9, r3
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	9304      	str	r3, [sp, #16]
 800a5b8:	46a2      	mov	sl, r4
 800a5ba:	e7d2      	b.n	800a562 <_vfiprintf_r+0xc6>
 800a5bc:	9b03      	ldr	r3, [sp, #12]
 800a5be:	1d19      	adds	r1, r3, #4
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	9103      	str	r1, [sp, #12]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	bfbb      	ittet	lt
 800a5c8:	425b      	neglt	r3, r3
 800a5ca:	f042 0202 	orrlt.w	r2, r2, #2
 800a5ce:	9307      	strge	r3, [sp, #28]
 800a5d0:	9307      	strlt	r3, [sp, #28]
 800a5d2:	bfb8      	it	lt
 800a5d4:	9204      	strlt	r2, [sp, #16]
 800a5d6:	7823      	ldrb	r3, [r4, #0]
 800a5d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5da:	d10a      	bne.n	800a5f2 <_vfiprintf_r+0x156>
 800a5dc:	7863      	ldrb	r3, [r4, #1]
 800a5de:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5e0:	d132      	bne.n	800a648 <_vfiprintf_r+0x1ac>
 800a5e2:	9b03      	ldr	r3, [sp, #12]
 800a5e4:	1d1a      	adds	r2, r3, #4
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	9203      	str	r2, [sp, #12]
 800a5ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5ee:	3402      	adds	r4, #2
 800a5f0:	9305      	str	r3, [sp, #20]
 800a5f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a6c8 <_vfiprintf_r+0x22c>
 800a5f6:	7821      	ldrb	r1, [r4, #0]
 800a5f8:	2203      	movs	r2, #3
 800a5fa:	4650      	mov	r0, sl
 800a5fc:	f7f5 fe20 	bl	8000240 <memchr>
 800a600:	b138      	cbz	r0, 800a612 <_vfiprintf_r+0x176>
 800a602:	9b04      	ldr	r3, [sp, #16]
 800a604:	eba0 000a 	sub.w	r0, r0, sl
 800a608:	2240      	movs	r2, #64	@ 0x40
 800a60a:	4082      	lsls	r2, r0
 800a60c:	4313      	orrs	r3, r2
 800a60e:	3401      	adds	r4, #1
 800a610:	9304      	str	r3, [sp, #16]
 800a612:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a616:	4829      	ldr	r0, [pc, #164]	@ (800a6bc <_vfiprintf_r+0x220>)
 800a618:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a61c:	2206      	movs	r2, #6
 800a61e:	f7f5 fe0f 	bl	8000240 <memchr>
 800a622:	2800      	cmp	r0, #0
 800a624:	d03f      	beq.n	800a6a6 <_vfiprintf_r+0x20a>
 800a626:	4b26      	ldr	r3, [pc, #152]	@ (800a6c0 <_vfiprintf_r+0x224>)
 800a628:	bb1b      	cbnz	r3, 800a672 <_vfiprintf_r+0x1d6>
 800a62a:	9b03      	ldr	r3, [sp, #12]
 800a62c:	3307      	adds	r3, #7
 800a62e:	f023 0307 	bic.w	r3, r3, #7
 800a632:	3308      	adds	r3, #8
 800a634:	9303      	str	r3, [sp, #12]
 800a636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a638:	443b      	add	r3, r7
 800a63a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a63c:	e76a      	b.n	800a514 <_vfiprintf_r+0x78>
 800a63e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a642:	460c      	mov	r4, r1
 800a644:	2001      	movs	r0, #1
 800a646:	e7a8      	b.n	800a59a <_vfiprintf_r+0xfe>
 800a648:	2300      	movs	r3, #0
 800a64a:	3401      	adds	r4, #1
 800a64c:	9305      	str	r3, [sp, #20]
 800a64e:	4619      	mov	r1, r3
 800a650:	f04f 0c0a 	mov.w	ip, #10
 800a654:	4620      	mov	r0, r4
 800a656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a65a:	3a30      	subs	r2, #48	@ 0x30
 800a65c:	2a09      	cmp	r2, #9
 800a65e:	d903      	bls.n	800a668 <_vfiprintf_r+0x1cc>
 800a660:	2b00      	cmp	r3, #0
 800a662:	d0c6      	beq.n	800a5f2 <_vfiprintf_r+0x156>
 800a664:	9105      	str	r1, [sp, #20]
 800a666:	e7c4      	b.n	800a5f2 <_vfiprintf_r+0x156>
 800a668:	fb0c 2101 	mla	r1, ip, r1, r2
 800a66c:	4604      	mov	r4, r0
 800a66e:	2301      	movs	r3, #1
 800a670:	e7f0      	b.n	800a654 <_vfiprintf_r+0x1b8>
 800a672:	ab03      	add	r3, sp, #12
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	462a      	mov	r2, r5
 800a678:	4b12      	ldr	r3, [pc, #72]	@ (800a6c4 <_vfiprintf_r+0x228>)
 800a67a:	a904      	add	r1, sp, #16
 800a67c:	4630      	mov	r0, r6
 800a67e:	f7fb ff93 	bl	80065a8 <_printf_float>
 800a682:	4607      	mov	r7, r0
 800a684:	1c78      	adds	r0, r7, #1
 800a686:	d1d6      	bne.n	800a636 <_vfiprintf_r+0x19a>
 800a688:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a68a:	07d9      	lsls	r1, r3, #31
 800a68c:	d405      	bmi.n	800a69a <_vfiprintf_r+0x1fe>
 800a68e:	89ab      	ldrh	r3, [r5, #12]
 800a690:	059a      	lsls	r2, r3, #22
 800a692:	d402      	bmi.n	800a69a <_vfiprintf_r+0x1fe>
 800a694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a696:	f7fc fed9 	bl	800744c <__retarget_lock_release_recursive>
 800a69a:	89ab      	ldrh	r3, [r5, #12]
 800a69c:	065b      	lsls	r3, r3, #25
 800a69e:	f53f af1f 	bmi.w	800a4e0 <_vfiprintf_r+0x44>
 800a6a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6a4:	e71e      	b.n	800a4e4 <_vfiprintf_r+0x48>
 800a6a6:	ab03      	add	r3, sp, #12
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	462a      	mov	r2, r5
 800a6ac:	4b05      	ldr	r3, [pc, #20]	@ (800a6c4 <_vfiprintf_r+0x228>)
 800a6ae:	a904      	add	r1, sp, #16
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f7fc fa01 	bl	8006ab8 <_printf_i>
 800a6b6:	e7e4      	b.n	800a682 <_vfiprintf_r+0x1e6>
 800a6b8:	0800ad79 	.word	0x0800ad79
 800a6bc:	0800ad83 	.word	0x0800ad83
 800a6c0:	080065a9 	.word	0x080065a9
 800a6c4:	0800a479 	.word	0x0800a479
 800a6c8:	0800ad7f 	.word	0x0800ad7f

0800a6cc <__swbuf_r>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	460e      	mov	r6, r1
 800a6d0:	4614      	mov	r4, r2
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	b118      	cbz	r0, 800a6de <__swbuf_r+0x12>
 800a6d6:	6a03      	ldr	r3, [r0, #32]
 800a6d8:	b90b      	cbnz	r3, 800a6de <__swbuf_r+0x12>
 800a6da:	f7fc fd9d 	bl	8007218 <__sinit>
 800a6de:	69a3      	ldr	r3, [r4, #24]
 800a6e0:	60a3      	str	r3, [r4, #8]
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	071a      	lsls	r2, r3, #28
 800a6e6:	d501      	bpl.n	800a6ec <__swbuf_r+0x20>
 800a6e8:	6923      	ldr	r3, [r4, #16]
 800a6ea:	b943      	cbnz	r3, 800a6fe <__swbuf_r+0x32>
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f000 f82a 	bl	800a748 <__swsetup_r>
 800a6f4:	b118      	cbz	r0, 800a6fe <__swbuf_r+0x32>
 800a6f6:	f04f 37ff 	mov.w	r7, #4294967295
 800a6fa:	4638      	mov	r0, r7
 800a6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	6922      	ldr	r2, [r4, #16]
 800a702:	1a98      	subs	r0, r3, r2
 800a704:	6963      	ldr	r3, [r4, #20]
 800a706:	b2f6      	uxtb	r6, r6
 800a708:	4283      	cmp	r3, r0
 800a70a:	4637      	mov	r7, r6
 800a70c:	dc05      	bgt.n	800a71a <__swbuf_r+0x4e>
 800a70e:	4621      	mov	r1, r4
 800a710:	4628      	mov	r0, r5
 800a712:	f7ff fa45 	bl	8009ba0 <_fflush_r>
 800a716:	2800      	cmp	r0, #0
 800a718:	d1ed      	bne.n	800a6f6 <__swbuf_r+0x2a>
 800a71a:	68a3      	ldr	r3, [r4, #8]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	60a3      	str	r3, [r4, #8]
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	6022      	str	r2, [r4, #0]
 800a726:	701e      	strb	r6, [r3, #0]
 800a728:	6962      	ldr	r2, [r4, #20]
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d004      	beq.n	800a73a <__swbuf_r+0x6e>
 800a730:	89a3      	ldrh	r3, [r4, #12]
 800a732:	07db      	lsls	r3, r3, #31
 800a734:	d5e1      	bpl.n	800a6fa <__swbuf_r+0x2e>
 800a736:	2e0a      	cmp	r6, #10
 800a738:	d1df      	bne.n	800a6fa <__swbuf_r+0x2e>
 800a73a:	4621      	mov	r1, r4
 800a73c:	4628      	mov	r0, r5
 800a73e:	f7ff fa2f 	bl	8009ba0 <_fflush_r>
 800a742:	2800      	cmp	r0, #0
 800a744:	d0d9      	beq.n	800a6fa <__swbuf_r+0x2e>
 800a746:	e7d6      	b.n	800a6f6 <__swbuf_r+0x2a>

0800a748 <__swsetup_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4b29      	ldr	r3, [pc, #164]	@ (800a7f0 <__swsetup_r+0xa8>)
 800a74c:	4605      	mov	r5, r0
 800a74e:	6818      	ldr	r0, [r3, #0]
 800a750:	460c      	mov	r4, r1
 800a752:	b118      	cbz	r0, 800a75c <__swsetup_r+0x14>
 800a754:	6a03      	ldr	r3, [r0, #32]
 800a756:	b90b      	cbnz	r3, 800a75c <__swsetup_r+0x14>
 800a758:	f7fc fd5e 	bl	8007218 <__sinit>
 800a75c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a760:	0719      	lsls	r1, r3, #28
 800a762:	d422      	bmi.n	800a7aa <__swsetup_r+0x62>
 800a764:	06da      	lsls	r2, r3, #27
 800a766:	d407      	bmi.n	800a778 <__swsetup_r+0x30>
 800a768:	2209      	movs	r2, #9
 800a76a:	602a      	str	r2, [r5, #0]
 800a76c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a770:	81a3      	strh	r3, [r4, #12]
 800a772:	f04f 30ff 	mov.w	r0, #4294967295
 800a776:	e033      	b.n	800a7e0 <__swsetup_r+0x98>
 800a778:	0758      	lsls	r0, r3, #29
 800a77a:	d512      	bpl.n	800a7a2 <__swsetup_r+0x5a>
 800a77c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a77e:	b141      	cbz	r1, 800a792 <__swsetup_r+0x4a>
 800a780:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a784:	4299      	cmp	r1, r3
 800a786:	d002      	beq.n	800a78e <__swsetup_r+0x46>
 800a788:	4628      	mov	r0, r5
 800a78a:	f7fd fc4f 	bl	800802c <_free_r>
 800a78e:	2300      	movs	r3, #0
 800a790:	6363      	str	r3, [r4, #52]	@ 0x34
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a798:	81a3      	strh	r3, [r4, #12]
 800a79a:	2300      	movs	r3, #0
 800a79c:	6063      	str	r3, [r4, #4]
 800a79e:	6923      	ldr	r3, [r4, #16]
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	89a3      	ldrh	r3, [r4, #12]
 800a7a4:	f043 0308 	orr.w	r3, r3, #8
 800a7a8:	81a3      	strh	r3, [r4, #12]
 800a7aa:	6923      	ldr	r3, [r4, #16]
 800a7ac:	b94b      	cbnz	r3, 800a7c2 <__swsetup_r+0x7a>
 800a7ae:	89a3      	ldrh	r3, [r4, #12]
 800a7b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a7b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7b8:	d003      	beq.n	800a7c2 <__swsetup_r+0x7a>
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f000 f883 	bl	800a8c8 <__smakebuf_r>
 800a7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7c6:	f013 0201 	ands.w	r2, r3, #1
 800a7ca:	d00a      	beq.n	800a7e2 <__swsetup_r+0x9a>
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	60a2      	str	r2, [r4, #8]
 800a7d0:	6962      	ldr	r2, [r4, #20]
 800a7d2:	4252      	negs	r2, r2
 800a7d4:	61a2      	str	r2, [r4, #24]
 800a7d6:	6922      	ldr	r2, [r4, #16]
 800a7d8:	b942      	cbnz	r2, 800a7ec <__swsetup_r+0xa4>
 800a7da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a7de:	d1c5      	bne.n	800a76c <__swsetup_r+0x24>
 800a7e0:	bd38      	pop	{r3, r4, r5, pc}
 800a7e2:	0799      	lsls	r1, r3, #30
 800a7e4:	bf58      	it	pl
 800a7e6:	6962      	ldrpl	r2, [r4, #20]
 800a7e8:	60a2      	str	r2, [r4, #8]
 800a7ea:	e7f4      	b.n	800a7d6 <__swsetup_r+0x8e>
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	e7f7      	b.n	800a7e0 <__swsetup_r+0x98>
 800a7f0:	20000024 	.word	0x20000024

0800a7f4 <_raise_r>:
 800a7f4:	291f      	cmp	r1, #31
 800a7f6:	b538      	push	{r3, r4, r5, lr}
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	d904      	bls.n	800a808 <_raise_r+0x14>
 800a7fe:	2316      	movs	r3, #22
 800a800:	6003      	str	r3, [r0, #0]
 800a802:	f04f 30ff 	mov.w	r0, #4294967295
 800a806:	bd38      	pop	{r3, r4, r5, pc}
 800a808:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a80a:	b112      	cbz	r2, 800a812 <_raise_r+0x1e>
 800a80c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a810:	b94b      	cbnz	r3, 800a826 <_raise_r+0x32>
 800a812:	4628      	mov	r0, r5
 800a814:	f000 f830 	bl	800a878 <_getpid_r>
 800a818:	4622      	mov	r2, r4
 800a81a:	4601      	mov	r1, r0
 800a81c:	4628      	mov	r0, r5
 800a81e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a822:	f000 b817 	b.w	800a854 <_kill_r>
 800a826:	2b01      	cmp	r3, #1
 800a828:	d00a      	beq.n	800a840 <_raise_r+0x4c>
 800a82a:	1c59      	adds	r1, r3, #1
 800a82c:	d103      	bne.n	800a836 <_raise_r+0x42>
 800a82e:	2316      	movs	r3, #22
 800a830:	6003      	str	r3, [r0, #0]
 800a832:	2001      	movs	r0, #1
 800a834:	e7e7      	b.n	800a806 <_raise_r+0x12>
 800a836:	2100      	movs	r1, #0
 800a838:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a83c:	4620      	mov	r0, r4
 800a83e:	4798      	blx	r3
 800a840:	2000      	movs	r0, #0
 800a842:	e7e0      	b.n	800a806 <_raise_r+0x12>

0800a844 <raise>:
 800a844:	4b02      	ldr	r3, [pc, #8]	@ (800a850 <raise+0xc>)
 800a846:	4601      	mov	r1, r0
 800a848:	6818      	ldr	r0, [r3, #0]
 800a84a:	f7ff bfd3 	b.w	800a7f4 <_raise_r>
 800a84e:	bf00      	nop
 800a850:	20000024 	.word	0x20000024

0800a854 <_kill_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	4d07      	ldr	r5, [pc, #28]	@ (800a874 <_kill_r+0x20>)
 800a858:	2300      	movs	r3, #0
 800a85a:	4604      	mov	r4, r0
 800a85c:	4608      	mov	r0, r1
 800a85e:	4611      	mov	r1, r2
 800a860:	602b      	str	r3, [r5, #0]
 800a862:	f7f7 fe00 	bl	8002466 <_kill>
 800a866:	1c43      	adds	r3, r0, #1
 800a868:	d102      	bne.n	800a870 <_kill_r+0x1c>
 800a86a:	682b      	ldr	r3, [r5, #0]
 800a86c:	b103      	cbz	r3, 800a870 <_kill_r+0x1c>
 800a86e:	6023      	str	r3, [r4, #0]
 800a870:	bd38      	pop	{r3, r4, r5, pc}
 800a872:	bf00      	nop
 800a874:	20000564 	.word	0x20000564

0800a878 <_getpid_r>:
 800a878:	f7f7 bded 	b.w	8002456 <_getpid>

0800a87c <__swhatbuf_r>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	460c      	mov	r4, r1
 800a880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a884:	2900      	cmp	r1, #0
 800a886:	b096      	sub	sp, #88	@ 0x58
 800a888:	4615      	mov	r5, r2
 800a88a:	461e      	mov	r6, r3
 800a88c:	da0d      	bge.n	800a8aa <__swhatbuf_r+0x2e>
 800a88e:	89a3      	ldrh	r3, [r4, #12]
 800a890:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a894:	f04f 0100 	mov.w	r1, #0
 800a898:	bf14      	ite	ne
 800a89a:	2340      	movne	r3, #64	@ 0x40
 800a89c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	6031      	str	r1, [r6, #0]
 800a8a4:	602b      	str	r3, [r5, #0]
 800a8a6:	b016      	add	sp, #88	@ 0x58
 800a8a8:	bd70      	pop	{r4, r5, r6, pc}
 800a8aa:	466a      	mov	r2, sp
 800a8ac:	f000 f848 	bl	800a940 <_fstat_r>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	dbec      	blt.n	800a88e <__swhatbuf_r+0x12>
 800a8b4:	9901      	ldr	r1, [sp, #4]
 800a8b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a8ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a8be:	4259      	negs	r1, r3
 800a8c0:	4159      	adcs	r1, r3
 800a8c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8c6:	e7eb      	b.n	800a8a0 <__swhatbuf_r+0x24>

0800a8c8 <__smakebuf_r>:
 800a8c8:	898b      	ldrh	r3, [r1, #12]
 800a8ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8cc:	079d      	lsls	r5, r3, #30
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	d507      	bpl.n	800a8e4 <__smakebuf_r+0x1c>
 800a8d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a8d8:	6023      	str	r3, [r4, #0]
 800a8da:	6123      	str	r3, [r4, #16]
 800a8dc:	2301      	movs	r3, #1
 800a8de:	6163      	str	r3, [r4, #20]
 800a8e0:	b003      	add	sp, #12
 800a8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8e4:	ab01      	add	r3, sp, #4
 800a8e6:	466a      	mov	r2, sp
 800a8e8:	f7ff ffc8 	bl	800a87c <__swhatbuf_r>
 800a8ec:	9f00      	ldr	r7, [sp, #0]
 800a8ee:	4605      	mov	r5, r0
 800a8f0:	4639      	mov	r1, r7
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	f7fd fc0e 	bl	8008114 <_malloc_r>
 800a8f8:	b948      	cbnz	r0, 800a90e <__smakebuf_r+0x46>
 800a8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8fe:	059a      	lsls	r2, r3, #22
 800a900:	d4ee      	bmi.n	800a8e0 <__smakebuf_r+0x18>
 800a902:	f023 0303 	bic.w	r3, r3, #3
 800a906:	f043 0302 	orr.w	r3, r3, #2
 800a90a:	81a3      	strh	r3, [r4, #12]
 800a90c:	e7e2      	b.n	800a8d4 <__smakebuf_r+0xc>
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	6020      	str	r0, [r4, #0]
 800a912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a916:	81a3      	strh	r3, [r4, #12]
 800a918:	9b01      	ldr	r3, [sp, #4]
 800a91a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a91e:	b15b      	cbz	r3, 800a938 <__smakebuf_r+0x70>
 800a920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a924:	4630      	mov	r0, r6
 800a926:	f000 f81d 	bl	800a964 <_isatty_r>
 800a92a:	b128      	cbz	r0, 800a938 <__smakebuf_r+0x70>
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	f023 0303 	bic.w	r3, r3, #3
 800a932:	f043 0301 	orr.w	r3, r3, #1
 800a936:	81a3      	strh	r3, [r4, #12]
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	431d      	orrs	r5, r3
 800a93c:	81a5      	strh	r5, [r4, #12]
 800a93e:	e7cf      	b.n	800a8e0 <__smakebuf_r+0x18>

0800a940 <_fstat_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d07      	ldr	r5, [pc, #28]	@ (800a960 <_fstat_r+0x20>)
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	4608      	mov	r0, r1
 800a94a:	4611      	mov	r1, r2
 800a94c:	602b      	str	r3, [r5, #0]
 800a94e:	f7f7 fdea 	bl	8002526 <_fstat>
 800a952:	1c43      	adds	r3, r0, #1
 800a954:	d102      	bne.n	800a95c <_fstat_r+0x1c>
 800a956:	682b      	ldr	r3, [r5, #0]
 800a958:	b103      	cbz	r3, 800a95c <_fstat_r+0x1c>
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	bd38      	pop	{r3, r4, r5, pc}
 800a95e:	bf00      	nop
 800a960:	20000564 	.word	0x20000564

0800a964 <_isatty_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4d06      	ldr	r5, [pc, #24]	@ (800a980 <_isatty_r+0x1c>)
 800a968:	2300      	movs	r3, #0
 800a96a:	4604      	mov	r4, r0
 800a96c:	4608      	mov	r0, r1
 800a96e:	602b      	str	r3, [r5, #0]
 800a970:	f7f7 fde9 	bl	8002546 <_isatty>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d102      	bne.n	800a97e <_isatty_r+0x1a>
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	b103      	cbz	r3, 800a97e <_isatty_r+0x1a>
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	20000564 	.word	0x20000564

0800a984 <_init>:
 800a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a986:	bf00      	nop
 800a988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a98a:	bc08      	pop	{r3}
 800a98c:	469e      	mov	lr, r3
 800a98e:	4770      	bx	lr

0800a990 <_fini>:
 800a990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a992:	bf00      	nop
 800a994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a996:	bc08      	pop	{r3}
 800a998:	469e      	mov	lr, r3
 800a99a:	4770      	bx	lr
