
Lab07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c9c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08008ea0  08008ea0  00009ea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009304  08009304  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009304  08009304  0000a304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800930c  0800930c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800930c  0800930c  0000a30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009310  08009310  0000a310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009314  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001d4  080094e8  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  080094e8  0000b42c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f726  00000000  00000000  0000b202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002275  00000000  00000000  0001a928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  0001cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abf  00000000  00000000  0001d978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d64  00000000  00000000  0001e437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011aec  00000000  00000000  0004719b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd251  00000000  00000000  00058c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c74  00000000  00000000  00155f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0015ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08008e84 	.word	0x08008e84

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08008e84 	.word	0x08008e84

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9c0 	b.w	8000a00 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	468e      	mov	lr, r1
 8000710:	4604      	mov	r4, r0
 8000712:	4688      	mov	r8, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d962      	bls.n	80007e4 <__udivmoddi4+0xdc>
 800071e:	fab2 f682 	clz	r6, r2
 8000722:	b14e      	cbz	r6, 8000738 <__udivmoddi4+0x30>
 8000724:	f1c6 0320 	rsb	r3, r6, #32
 8000728:	fa01 f806 	lsl.w	r8, r1, r6
 800072c:	fa20 f303 	lsr.w	r3, r0, r3
 8000730:	40b7      	lsls	r7, r6
 8000732:	ea43 0808 	orr.w	r8, r3, r8
 8000736:	40b4      	lsls	r4, r6
 8000738:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800073c:	fa1f fc87 	uxth.w	ip, r7
 8000740:	fbb8 f1fe 	udiv	r1, r8, lr
 8000744:	0c23      	lsrs	r3, r4, #16
 8000746:	fb0e 8811 	mls	r8, lr, r1, r8
 800074a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800074e:	fb01 f20c 	mul.w	r2, r1, ip
 8000752:	429a      	cmp	r2, r3
 8000754:	d909      	bls.n	800076a <__udivmoddi4+0x62>
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	f101 30ff 	add.w	r0, r1, #4294967295
 800075c:	f080 80ea 	bcs.w	8000934 <__udivmoddi4+0x22c>
 8000760:	429a      	cmp	r2, r3
 8000762:	f240 80e7 	bls.w	8000934 <__udivmoddi4+0x22c>
 8000766:	3902      	subs	r1, #2
 8000768:	443b      	add	r3, r7
 800076a:	1a9a      	subs	r2, r3, r2
 800076c:	b2a3      	uxth	r3, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800077a:	fb00 fc0c 	mul.w	ip, r0, ip
 800077e:	459c      	cmp	ip, r3
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x8e>
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	f100 32ff 	add.w	r2, r0, #4294967295
 8000788:	f080 80d6 	bcs.w	8000938 <__udivmoddi4+0x230>
 800078c:	459c      	cmp	ip, r3
 800078e:	f240 80d3 	bls.w	8000938 <__udivmoddi4+0x230>
 8000792:	443b      	add	r3, r7
 8000794:	3802      	subs	r0, #2
 8000796:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079a:	eba3 030c 	sub.w	r3, r3, ip
 800079e:	2100      	movs	r1, #0
 80007a0:	b11d      	cbz	r5, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40f3      	lsrs	r3, r6
 80007a4:	2200      	movs	r2, #0
 80007a6:	e9c5 3200 	strd	r3, r2, [r5]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d905      	bls.n	80007be <__udivmoddi4+0xb6>
 80007b2:	b10d      	cbz	r5, 80007b8 <__udivmoddi4+0xb0>
 80007b4:	e9c5 0100 	strd	r0, r1, [r5]
 80007b8:	2100      	movs	r1, #0
 80007ba:	4608      	mov	r0, r1
 80007bc:	e7f5      	b.n	80007aa <__udivmoddi4+0xa2>
 80007be:	fab3 f183 	clz	r1, r3
 80007c2:	2900      	cmp	r1, #0
 80007c4:	d146      	bne.n	8000854 <__udivmoddi4+0x14c>
 80007c6:	4573      	cmp	r3, lr
 80007c8:	d302      	bcc.n	80007d0 <__udivmoddi4+0xc8>
 80007ca:	4282      	cmp	r2, r0
 80007cc:	f200 8105 	bhi.w	80009da <__udivmoddi4+0x2d2>
 80007d0:	1a84      	subs	r4, r0, r2
 80007d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007d6:	2001      	movs	r0, #1
 80007d8:	4690      	mov	r8, r2
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d0e5      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007de:	e9c5 4800 	strd	r4, r8, [r5]
 80007e2:	e7e2      	b.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f000 8090 	beq.w	800090a <__udivmoddi4+0x202>
 80007ea:	fab2 f682 	clz	r6, r2
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	f040 80a4 	bne.w	800093c <__udivmoddi4+0x234>
 80007f4:	1a8a      	subs	r2, r1, r2
 80007f6:	0c03      	lsrs	r3, r0, #16
 80007f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fc:	b280      	uxth	r0, r0
 80007fe:	b2bc      	uxth	r4, r7
 8000800:	2101      	movs	r1, #1
 8000802:	fbb2 fcfe 	udiv	ip, r2, lr
 8000806:	fb0e 221c 	mls	r2, lr, ip, r2
 800080a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800080e:	fb04 f20c 	mul.w	r2, r4, ip
 8000812:	429a      	cmp	r2, r3
 8000814:	d907      	bls.n	8000826 <__udivmoddi4+0x11e>
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	f10c 38ff 	add.w	r8, ip, #4294967295
 800081c:	d202      	bcs.n	8000824 <__udivmoddi4+0x11c>
 800081e:	429a      	cmp	r2, r3
 8000820:	f200 80e0 	bhi.w	80009e4 <__udivmoddi4+0x2dc>
 8000824:	46c4      	mov	ip, r8
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	fbb3 f2fe 	udiv	r2, r3, lr
 800082c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000830:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000834:	fb02 f404 	mul.w	r4, r2, r4
 8000838:	429c      	cmp	r4, r3
 800083a:	d907      	bls.n	800084c <__udivmoddi4+0x144>
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x142>
 8000844:	429c      	cmp	r4, r3
 8000846:	f200 80ca 	bhi.w	80009de <__udivmoddi4+0x2d6>
 800084a:	4602      	mov	r2, r0
 800084c:	1b1b      	subs	r3, r3, r4
 800084e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000852:	e7a5      	b.n	80007a0 <__udivmoddi4+0x98>
 8000854:	f1c1 0620 	rsb	r6, r1, #32
 8000858:	408b      	lsls	r3, r1
 800085a:	fa22 f706 	lsr.w	r7, r2, r6
 800085e:	431f      	orrs	r7, r3
 8000860:	fa0e f401 	lsl.w	r4, lr, r1
 8000864:	fa20 f306 	lsr.w	r3, r0, r6
 8000868:	fa2e fe06 	lsr.w	lr, lr, r6
 800086c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000870:	4323      	orrs	r3, r4
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	fa1f fc87 	uxth.w	ip, r7
 800087a:	fbbe f0f9 	udiv	r0, lr, r9
 800087e:	0c1c      	lsrs	r4, r3, #16
 8000880:	fb09 ee10 	mls	lr, r9, r0, lr
 8000884:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000888:	fb00 fe0c 	mul.w	lr, r0, ip
 800088c:	45a6      	cmp	lr, r4
 800088e:	fa02 f201 	lsl.w	r2, r2, r1
 8000892:	d909      	bls.n	80008a8 <__udivmoddi4+0x1a0>
 8000894:	193c      	adds	r4, r7, r4
 8000896:	f100 3aff 	add.w	sl, r0, #4294967295
 800089a:	f080 809c 	bcs.w	80009d6 <__udivmoddi4+0x2ce>
 800089e:	45a6      	cmp	lr, r4
 80008a0:	f240 8099 	bls.w	80009d6 <__udivmoddi4+0x2ce>
 80008a4:	3802      	subs	r0, #2
 80008a6:	443c      	add	r4, r7
 80008a8:	eba4 040e 	sub.w	r4, r4, lr
 80008ac:	fa1f fe83 	uxth.w	lr, r3
 80008b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b4:	fb09 4413 	mls	r4, r9, r3, r4
 80008b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c0:	45a4      	cmp	ip, r4
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x1ce>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008ca:	f080 8082 	bcs.w	80009d2 <__udivmoddi4+0x2ca>
 80008ce:	45a4      	cmp	ip, r4
 80008d0:	d97f      	bls.n	80009d2 <__udivmoddi4+0x2ca>
 80008d2:	3b02      	subs	r3, #2
 80008d4:	443c      	add	r4, r7
 80008d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008da:	eba4 040c 	sub.w	r4, r4, ip
 80008de:	fba0 ec02 	umull	lr, ip, r0, r2
 80008e2:	4564      	cmp	r4, ip
 80008e4:	4673      	mov	r3, lr
 80008e6:	46e1      	mov	r9, ip
 80008e8:	d362      	bcc.n	80009b0 <__udivmoddi4+0x2a8>
 80008ea:	d05f      	beq.n	80009ac <__udivmoddi4+0x2a4>
 80008ec:	b15d      	cbz	r5, 8000906 <__udivmoddi4+0x1fe>
 80008ee:	ebb8 0203 	subs.w	r2, r8, r3
 80008f2:	eb64 0409 	sbc.w	r4, r4, r9
 80008f6:	fa04 f606 	lsl.w	r6, r4, r6
 80008fa:	fa22 f301 	lsr.w	r3, r2, r1
 80008fe:	431e      	orrs	r6, r3
 8000900:	40cc      	lsrs	r4, r1
 8000902:	e9c5 6400 	strd	r6, r4, [r5]
 8000906:	2100      	movs	r1, #0
 8000908:	e74f      	b.n	80007aa <__udivmoddi4+0xa2>
 800090a:	fbb1 fcf2 	udiv	ip, r1, r2
 800090e:	0c01      	lsrs	r1, r0, #16
 8000910:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000914:	b280      	uxth	r0, r0
 8000916:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800091a:	463b      	mov	r3, r7
 800091c:	4638      	mov	r0, r7
 800091e:	463c      	mov	r4, r7
 8000920:	46b8      	mov	r8, r7
 8000922:	46be      	mov	lr, r7
 8000924:	2620      	movs	r6, #32
 8000926:	fbb1 f1f7 	udiv	r1, r1, r7
 800092a:	eba2 0208 	sub.w	r2, r2, r8
 800092e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000932:	e766      	b.n	8000802 <__udivmoddi4+0xfa>
 8000934:	4601      	mov	r1, r0
 8000936:	e718      	b.n	800076a <__udivmoddi4+0x62>
 8000938:	4610      	mov	r0, r2
 800093a:	e72c      	b.n	8000796 <__udivmoddi4+0x8e>
 800093c:	f1c6 0220 	rsb	r2, r6, #32
 8000940:	fa2e f302 	lsr.w	r3, lr, r2
 8000944:	40b7      	lsls	r7, r6
 8000946:	40b1      	lsls	r1, r6
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000950:	430a      	orrs	r2, r1
 8000952:	fbb3 f8fe 	udiv	r8, r3, lr
 8000956:	b2bc      	uxth	r4, r7
 8000958:	fb0e 3318 	mls	r3, lr, r8, r3
 800095c:	0c11      	lsrs	r1, r2, #16
 800095e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000962:	fb08 f904 	mul.w	r9, r8, r4
 8000966:	40b0      	lsls	r0, r6
 8000968:	4589      	cmp	r9, r1
 800096a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800096e:	b280      	uxth	r0, r0
 8000970:	d93e      	bls.n	80009f0 <__udivmoddi4+0x2e8>
 8000972:	1879      	adds	r1, r7, r1
 8000974:	f108 3cff 	add.w	ip, r8, #4294967295
 8000978:	d201      	bcs.n	800097e <__udivmoddi4+0x276>
 800097a:	4589      	cmp	r9, r1
 800097c:	d81f      	bhi.n	80009be <__udivmoddi4+0x2b6>
 800097e:	eba1 0109 	sub.w	r1, r1, r9
 8000982:	fbb1 f9fe 	udiv	r9, r1, lr
 8000986:	fb09 f804 	mul.w	r8, r9, r4
 800098a:	fb0e 1119 	mls	r1, lr, r9, r1
 800098e:	b292      	uxth	r2, r2
 8000990:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000994:	4542      	cmp	r2, r8
 8000996:	d229      	bcs.n	80009ec <__udivmoddi4+0x2e4>
 8000998:	18ba      	adds	r2, r7, r2
 800099a:	f109 31ff 	add.w	r1, r9, #4294967295
 800099e:	d2c4      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a0:	4542      	cmp	r2, r8
 80009a2:	d2c2      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a4:	f1a9 0102 	sub.w	r1, r9, #2
 80009a8:	443a      	add	r2, r7
 80009aa:	e7be      	b.n	800092a <__udivmoddi4+0x222>
 80009ac:	45f0      	cmp	r8, lr
 80009ae:	d29d      	bcs.n	80008ec <__udivmoddi4+0x1e4>
 80009b0:	ebbe 0302 	subs.w	r3, lr, r2
 80009b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009b8:	3801      	subs	r0, #1
 80009ba:	46e1      	mov	r9, ip
 80009bc:	e796      	b.n	80008ec <__udivmoddi4+0x1e4>
 80009be:	eba7 0909 	sub.w	r9, r7, r9
 80009c2:	4449      	add	r1, r9
 80009c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009cc:	fb09 f804 	mul.w	r8, r9, r4
 80009d0:	e7db      	b.n	800098a <__udivmoddi4+0x282>
 80009d2:	4673      	mov	r3, lr
 80009d4:	e77f      	b.n	80008d6 <__udivmoddi4+0x1ce>
 80009d6:	4650      	mov	r0, sl
 80009d8:	e766      	b.n	80008a8 <__udivmoddi4+0x1a0>
 80009da:	4608      	mov	r0, r1
 80009dc:	e6fd      	b.n	80007da <__udivmoddi4+0xd2>
 80009de:	443b      	add	r3, r7
 80009e0:	3a02      	subs	r2, #2
 80009e2:	e733      	b.n	800084c <__udivmoddi4+0x144>
 80009e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e8:	443b      	add	r3, r7
 80009ea:	e71c      	b.n	8000826 <__udivmoddi4+0x11e>
 80009ec:	4649      	mov	r1, r9
 80009ee:	e79c      	b.n	800092a <__udivmoddi4+0x222>
 80009f0:	eba1 0109 	sub.w	r1, r1, r9
 80009f4:	46c4      	mov	ip, r8
 80009f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fa:	fb09 f804 	mul.w	r8, r9, r4
 80009fe:	e7c4      	b.n	800098a <__udivmoddi4+0x282>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a14      	ldr	r2, [pc, #80]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <MX_GPIO_Init+0x5c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <setPWM>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setPWM(uint8_t duty, uint32_t channel) {
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
    uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim2);
 8000a70:	4b1f      	ldr	r3, [pc, #124]	@ (8000af0 <setPWM+0x8c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a76:	60fb      	str	r3, [r7, #12]
    uint32_t pulse = (duty * period) / 100;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	fb02 f303 	mul.w	r3, r2, r3
 8000a80:	4a1c      	ldr	r2, [pc, #112]	@ (8000af4 <setPWM+0x90>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	60bb      	str	r3, [r7, #8]
    __HAL_TIM_SET_COMPARE(&htim2, channel, pulse);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d104      	bne.n	8000a9a <setPWM+0x36>
 8000a90:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <setPWM+0x8c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a98:	e023      	b.n	8000ae2 <setPWM+0x7e>
    __HAL_TIM_SET_COMPARE(&htim2, channel, pulse);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	d104      	bne.n	8000aaa <setPWM+0x46>
 8000aa0:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <setPWM+0x8c>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000aa8:	e01b      	b.n	8000ae2 <setPWM+0x7e>
    __HAL_TIM_SET_COMPARE(&htim2, channel, pulse);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	2b08      	cmp	r3, #8
 8000aae:	d104      	bne.n	8000aba <setPWM+0x56>
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <setPWM+0x8c>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000ab8:	e013      	b.n	8000ae2 <setPWM+0x7e>
    __HAL_TIM_SET_COMPARE(&htim2, channel, pulse);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	2b0c      	cmp	r3, #12
 8000abe:	d104      	bne.n	8000aca <setPWM+0x66>
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <setPWM+0x8c>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ac8:	e00b      	b.n	8000ae2 <setPWM+0x7e>
    __HAL_TIM_SET_COMPARE(&htim2, channel, pulse);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b10      	cmp	r3, #16
 8000ace:	d104      	bne.n	8000ada <setPWM+0x76>
 8000ad0:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <setPWM+0x8c>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000ad8:	e003      	b.n	8000ae2 <setPWM+0x7e>
    __HAL_TIM_SET_COMPARE(&htim2, channel, pulse);
 8000ada:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <setPWM+0x8c>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000208 	.word	0x20000208
 8000af4:	51eb851f 	.word	0x51eb851f

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	@ 0x50
 8000afc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000afe:	f000 f9b9 	bl	8000e74 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b02:	f000 fccc 	bl	800149e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b06:	f000 f947 	bl	8000d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0a:	f7ff ff7b 	bl	8000a04 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b0e:	f000 fb0f 	bl	8001130 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000b12:	f000 fc0b 	bl	800132c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Red
 8000b16:	2100      	movs	r1, #0
 8000b18:	4891      	ldr	r0, [pc, #580]	@ (8000d60 <main+0x268>)
 8000b1a:	f002 f9eb 	bl	8002ef4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Green
 8000b1e:	210c      	movs	r1, #12
 8000b20:	488f      	ldr	r0, [pc, #572]	@ (8000d60 <main+0x268>)
 8000b22:	f002 f9e7 	bl	8002ef4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Blue
 8000b26:	2108      	movs	r1, #8
 8000b28:	488d      	ldr	r0, [pc, #564]	@ (8000d60 <main+0x268>)
 8000b2a:	f002 f9e3 	bl	8002ef4 <HAL_TIM_PWM_Start>

    /* USER CODE BEGIN 3 */
//	  const char *input = "\tInput => ";
//	  HAL_UART_Transmit(&huart3, (uint8_t*)input, strlen(input), HAL_MAX_DELAY);

	  HAL_UART_Receive(&huart3, &ch, 1, HAL_MAX_DELAY);
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	2201      	movs	r2, #1
 8000b34:	498b      	ldr	r1, [pc, #556]	@ (8000d64 <main+0x26c>)
 8000b36:	488c      	ldr	r0, [pc, #560]	@ (8000d68 <main+0x270>)
 8000b38:	f003 f9dd 	bl	8003ef6 <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart3, &ch, 1, HAL_MAX_DELAY);
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b40:	2201      	movs	r2, #1
 8000b42:	4988      	ldr	r1, [pc, #544]	@ (8000d64 <main+0x26c>)
 8000b44:	4888      	ldr	r0, [pc, #544]	@ (8000d68 <main+0x270>)
 8000b46:	f003 f94d 	bl	8003de4 <HAL_UART_Transmit>

	  const char *nl = "\r\n";
 8000b4a:	4b88      	ldr	r3, [pc, #544]	@ (8000d6c <main+0x274>)
 8000b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  HAL_UART_Transmit(&huart3, (uint8_t*)nl, strlen(nl), HAL_MAX_DELAY);
 8000b4e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000b50:	f7ff fbc6 	bl	80002e0 <strlen>
 8000b54:	4603      	mov	r3, r0
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000b5e:	4882      	ldr	r0, [pc, #520]	@ (8000d68 <main+0x270>)
 8000b60:	f003 f940 	bl	8003de4 <HAL_UART_Transmit>

	  if (ch == 'r') {
 8000b64:	4b7f      	ldr	r3, [pc, #508]	@ (8000d64 <main+0x26c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b72      	cmp	r3, #114	@ 0x72
 8000b6a:	d129      	bne.n	8000bc0 <main+0xc8>
		  dutyR = (dutyR + 0.2);
 8000b6c:	4b80      	ldr	r3, [pc, #512]	@ (8000d70 <main+0x278>)
 8000b6e:	edd3 7a00 	vldr	s15, [r3]
 8000b72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b76:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8000d58 <main+0x260>
 8000b7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b7e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b82:	4b7b      	ldr	r3, [pc, #492]	@ (8000d70 <main+0x278>)
 8000b84:	edc3 7a00 	vstr	s15, [r3]
		  if (dutyR > 1){
 8000b88:	4b79      	ldr	r3, [pc, #484]	@ (8000d70 <main+0x278>)
 8000b8a:	edd3 7a00 	vldr	s15, [r3]
 8000b8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9a:	dd03      	ble.n	8000ba4 <main+0xac>
			  dutyR = 0;
 8000b9c:	4b74      	ldr	r3, [pc, #464]	@ (8000d70 <main+0x278>)
 8000b9e:	f04f 0200 	mov.w	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
		  }
		  setPWM(dutyR, TIM_CHANNEL_1);
 8000ba4:	4b72      	ldr	r3, [pc, #456]	@ (8000d70 <main+0x278>)
 8000ba6:	edd3 7a00 	vldr	s15, [r3]
 8000baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bae:	edc7 7a01 	vstr	s15, [r7, #4]
 8000bb2:	793b      	ldrb	r3, [r7, #4]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff53 	bl	8000a64 <setPWM>
 8000bbe:	e05a      	b.n	8000c76 <main+0x17e>
	  }
	  else if (ch == 'g') {
 8000bc0:	4b68      	ldr	r3, [pc, #416]	@ (8000d64 <main+0x26c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b67      	cmp	r3, #103	@ 0x67
 8000bc6:	d129      	bne.n	8000c1c <main+0x124>

		  dutyG = (dutyG + 0.2);
 8000bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8000d74 <main+0x27c>)
 8000bca:	edd3 7a00 	vldr	s15, [r3]
 8000bce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd2:	ed9f 6b61 	vldr	d6, [pc, #388]	@ 8000d58 <main+0x260>
 8000bd6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bda:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bde:	4b65      	ldr	r3, [pc, #404]	@ (8000d74 <main+0x27c>)
 8000be0:	edc3 7a00 	vstr	s15, [r3]
		  if (dutyG > 1){
 8000be4:	4b63      	ldr	r3, [pc, #396]	@ (8000d74 <main+0x27c>)
 8000be6:	edd3 7a00 	vldr	s15, [r3]
 8000bea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf6:	dd03      	ble.n	8000c00 <main+0x108>
		  	  dutyG = 0;
 8000bf8:	4b5e      	ldr	r3, [pc, #376]	@ (8000d74 <main+0x27c>)
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
		  }
		  setPWM(dutyG, TIM_CHANNEL_4);
 8000c00:	4b5c      	ldr	r3, [pc, #368]	@ (8000d74 <main+0x27c>)
 8000c02:	edd3 7a00 	vldr	s15, [r3]
 8000c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c0a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c0e:	793b      	ldrb	r3, [r7, #4]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	210c      	movs	r1, #12
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff25 	bl	8000a64 <setPWM>
 8000c1a:	e02c      	b.n	8000c76 <main+0x17e>
	  }
	  else if (ch == 'b') {
 8000c1c:	4b51      	ldr	r3, [pc, #324]	@ (8000d64 <main+0x26c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b62      	cmp	r3, #98	@ 0x62
 8000c22:	d128      	bne.n	8000c76 <main+0x17e>
	  	  dutyB = (dutyB + 0.2);
 8000c24:	4b54      	ldr	r3, [pc, #336]	@ (8000d78 <main+0x280>)
 8000c26:	edd3 7a00 	vldr	s15, [r3]
 8000c2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c2e:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8000d58 <main+0x260>
 8000c32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8000d78 <main+0x280>)
 8000c3c:	edc3 7a00 	vstr	s15, [r3]
	  	  if (dutyB > 1){
 8000c40:	4b4d      	ldr	r3, [pc, #308]	@ (8000d78 <main+0x280>)
 8000c42:	edd3 7a00 	vldr	s15, [r3]
 8000c46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c52:	dd03      	ble.n	8000c5c <main+0x164>
	  		  dutyB = 0;
 8000c54:	4b48      	ldr	r3, [pc, #288]	@ (8000d78 <main+0x280>)
 8000c56:	f04f 0200 	mov.w	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
	  	  }
	  	  setPWM(dutyB, TIM_CHANNEL_3);
 8000c5c:	4b46      	ldr	r3, [pc, #280]	@ (8000d78 <main+0x280>)
 8000c5e:	edd3 7a00 	vldr	s15, [r3]
 8000c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c66:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c6a:	793b      	ldrb	r3, [r7, #4]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2108      	movs	r1, #8
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fef7 	bl	8000a64 <setPWM>
	  }

      char msg[50];
      sprintf(msg, "R=%.2f, G=%.2f, B=%.2f\r\n", dutyR, dutyG, dutyB);
 8000c76:	4b3e      	ldr	r3, [pc, #248]	@ (8000d70 <main+0x278>)
 8000c78:	edd3 7a00 	vldr	s15, [r3]
 8000c7c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000c80:	4b3c      	ldr	r3, [pc, #240]	@ (8000d74 <main+0x27c>)
 8000c82:	edd3 7a00 	vldr	s15, [r3]
 8000c86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d78 <main+0x280>)
 8000c8c:	edd3 6a00 	vldr	s13, [r3]
 8000c90:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000c94:	f107 0008 	add.w	r0, r7, #8
 8000c98:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c9c:	ed8d 7b00 	vstr	d7, [sp]
 8000ca0:	ec53 2b15 	vmov	r2, r3, d5
 8000ca4:	4935      	ldr	r1, [pc, #212]	@ (8000d7c <main+0x284>)
 8000ca6:	f004 fd6d 	bl	8005784 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000caa:	f107 0308 	add.w	r3, r7, #8
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fb16 	bl	80002e0 <strlen>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	f107 0108 	add.w	r1, r7, #8
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	4829      	ldr	r0, [pc, #164]	@ (8000d68 <main+0x270>)
 8000cc2:	f003 f88f 	bl	8003de4 <HAL_UART_Transmit>

	  htim2.Instance -> CCR1 = (10000-1) * dutyR;
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d70 <main+0x278>)
 8000cc8:	edd3 7a00 	vldr	s15, [r3]
 8000ccc:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d80 <main+0x288>
 8000cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd4:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <main+0x268>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cdc:	ee17 2a90 	vmov	r2, s15
 8000ce0:	635a      	str	r2, [r3, #52]	@ 0x34
	  htim2.Instance -> CCR4 = (10000-1) * dutyG;
 8000ce2:	4b24      	ldr	r3, [pc, #144]	@ (8000d74 <main+0x27c>)
 8000ce4:	edd3 7a00 	vldr	s15, [r3]
 8000ce8:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000d80 <main+0x288>
 8000cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <main+0x268>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf8:	ee17 2a90 	vmov	r2, s15
 8000cfc:	641a      	str	r2, [r3, #64]	@ 0x40
	  htim2.Instance -> CCR3 = (10000-1) * dutyB;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <main+0x280>)
 8000d00:	edd3 7a00 	vldr	s15, [r3]
 8000d04:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000d80 <main+0x288>
 8000d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <main+0x268>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d14:	ee17 2a90 	vmov	r2, s15
 8000d18:	63da      	str	r2, [r3, #60]	@ 0x3c
//	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
//	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
//	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
//	  HAL_Delay(100);
//	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	  pwmR = (GPIOA->IDR & GPIO_PIN_0) >> 0;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <main+0x28c>)
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <main+0x290>)
 8000d28:	701a      	strb	r2, [r3, #0]
	  pwmG = ((GPIOA->IDR & GPIO_PIN_3) >> 3) + 2;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <main+0x28c>)
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	08db      	lsrs	r3, r3, #3
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	3302      	adds	r3, #2
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <main+0x294>)
 8000d3e:	701a      	strb	r2, [r3, #0]
	  pwmB = ((GPIOB->IDR & GPIO_PIN_10) >> 10) + 4;
 8000d40:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <main+0x298>)
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	0a9b      	lsrs	r3, r3, #10
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	3304      	adds	r3, #4
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <main+0x29c>)
 8000d54:	701a      	strb	r2, [r3, #0]
  {
 8000d56:	e6ea      	b.n	8000b2e <main+0x36>
 8000d58:	9999999a 	.word	0x9999999a
 8000d5c:	3fc99999 	.word	0x3fc99999
 8000d60:	20000208 	.word	0x20000208
 8000d64:	20000200 	.word	0x20000200
 8000d68:	20000254 	.word	0x20000254
 8000d6c:	08008ea0 	.word	0x08008ea0
 8000d70:	200001f4 	.word	0x200001f4
 8000d74:	200001f8 	.word	0x200001f8
 8000d78:	200001fc 	.word	0x200001fc
 8000d7c:	08008ea4 	.word	0x08008ea4
 8000d80:	461c3c00 	.word	0x461c3c00
 8000d84:	40020000 	.word	0x40020000
 8000d88:	200001f0 	.word	0x200001f0
 8000d8c:	200001f1 	.word	0x200001f1
 8000d90:	40020400 	.word	0x40020400
 8000d94:	200001f2 	.word	0x200001f2

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b094      	sub	sp, #80	@ 0x50
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	2234      	movs	r2, #52	@ 0x34
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f004 fd51 	bl	800584e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8000e6c <SystemClock_Config+0xd4>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8000e6c <SystemClock_Config+0xd4>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc8:	4b28      	ldr	r3, [pc, #160]	@ (8000e6c <SystemClock_Config+0xd4>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd4:	4b26      	ldr	r3, [pc, #152]	@ (8000e70 <SystemClock_Config+0xd8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a25      	ldr	r2, [pc, #148]	@ (8000e70 <SystemClock_Config+0xd8>)
 8000dda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <SystemClock_Config+0xd8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df0:	2301      	movs	r3, #1
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df4:	2310      	movs	r3, #16
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e00:	2308      	movs	r3, #8
 8000e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e04:	23d8      	movs	r3, #216	@ 0xd8
 8000e06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fef7 	bl	8001c0c <HAL_RCC_OscConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e24:	f000 f852 	bl	8000ecc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e28:	f000 fea0 	bl	8001b6c <HAL_PWREx_EnableOverDrive>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e32:	f000 f84b 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e36:	230f      	movs	r3, #15
 8000e38:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e42:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e4c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	2107      	movs	r1, #7
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 f987 	bl	8002168 <HAL_RCC_ClockConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000e60:	f000 f834 	bl	8000ecc <Error_Handler>
  }
}
 8000e64:	bf00      	nop
 8000e66:	3750      	adds	r7, #80	@ 0x50
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40007000 	.word	0x40007000

08000e74 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e86:	f000 fc4d 	bl	8001724 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e96:	231f      	movs	r3, #31
 8000e98:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e9a:	2387      	movs	r3, #135	@ 0x87
 8000e9c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fc6b 	bl	8001794 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ebe:	2004      	movs	r0, #4
 8000ec0:	f000 fc48 	bl	8001754 <HAL_MPU_Enable>

}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <Error_Handler+0x8>

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <HAL_MspInit+0x44>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f1c <HAL_MspInit+0x44>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <HAL_MspInit+0x44>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <HAL_MspInit+0x44>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	4a08      	ldr	r2, [pc, #32]	@ (8000f1c <HAL_MspInit+0x44>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <HAL_MspInit+0x44>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <NMI_Handler+0x4>

08000f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <MemManage_Handler+0x4>

08000f38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f76:	f000 facf 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  return 1;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_kill>:

int _kill(int pid, int sig)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f98:	f004 fcac 	bl	80058f4 <__errno>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2216      	movs	r2, #22
 8000fa0:	601a      	str	r2, [r3, #0]
  return -1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_exit>:

void _exit (int status)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fb6:	f04f 31ff 	mov.w	r1, #4294967295
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffe7 	bl	8000f8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <_exit+0x12>

08000fc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	e00a      	b.n	8000fec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fd6:	f3af 8000 	nop.w
 8000fda:	4601      	mov	r1, r0
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	60ba      	str	r2, [r7, #8]
 8000fe2:	b2ca      	uxtb	r2, r1
 8000fe4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dbf0      	blt.n	8000fd6 <_read+0x12>
  }

  return len;
 8000ff4:	687b      	ldr	r3, [r7, #4]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	e009      	b.n	8001024 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	60ba      	str	r2, [r7, #8]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbf1      	blt.n	8001010 <_write+0x12>
  }
  return len;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_close>:

int _close(int file)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800105e:	605a      	str	r2, [r3, #4]
  return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <_isatty>:

int _isatty(int file)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	@ (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f004 fc10 	bl	80058f4 <__errno>
 80010d4:	4603      	mov	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a05      	ldr	r2, [pc, #20]	@ (8001104 <_sbrk+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20080000 	.word	0x20080000
 8001100:	00000400 	.word	0x00000400
 8001104:	20000204 	.word	0x20000204
 8001108:	20000430 	.word	0x20000430

0800110c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	@ (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	@ 0x38
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
 800115e:	615a      	str	r2, [r3, #20]
 8001160:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001162:	4b38      	ldr	r3, [pc, #224]	@ (8001244 <MX_TIM2_Init+0x114>)
 8001164:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001168:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 800116a:	4b36      	ldr	r3, [pc, #216]	@ (8001244 <MX_TIM2_Init+0x114>)
 800116c:	226b      	movs	r2, #107	@ 0x6b
 800116e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b34      	ldr	r3, [pc, #208]	@ (8001244 <MX_TIM2_Init+0x114>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001176:	4b33      	ldr	r3, [pc, #204]	@ (8001244 <MX_TIM2_Init+0x114>)
 8001178:	f242 720f 	movw	r2, #9999	@ 0x270f
 800117c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117e:	4b31      	ldr	r3, [pc, #196]	@ (8001244 <MX_TIM2_Init+0x114>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <MX_TIM2_Init+0x114>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800118a:	482e      	ldr	r0, [pc, #184]	@ (8001244 <MX_TIM2_Init+0x114>)
 800118c:	f001 fdfa 	bl	8002d84 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001196:	f7ff fe99 	bl	8000ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4827      	ldr	r0, [pc, #156]	@ (8001244 <MX_TIM2_Init+0x114>)
 80011a8:	f002 f8b2 	bl	8003310 <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011b2:	f7ff fe8b 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011b6:	4823      	ldr	r0, [pc, #140]	@ (8001244 <MX_TIM2_Init+0x114>)
 80011b8:	f001 fe3b 	bl	8002e32 <HAL_TIM_PWM_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011c2:	f7ff fe83 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	481b      	ldr	r0, [pc, #108]	@ (8001244 <MX_TIM2_Init+0x114>)
 80011d6:	f002 fd29 	bl	8003c2c <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011e0:	f7ff fe74 	bl	8000ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e4:	2360      	movs	r3, #96	@ 0x60
 80011e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	4619      	mov	r1, r3
 80011fa:	4812      	ldr	r0, [pc, #72]	@ (8001244 <MX_TIM2_Init+0x114>)
 80011fc:	f001 ff74 	bl	80030e8 <HAL_TIM_PWM_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001206:	f7ff fe61 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	2208      	movs	r2, #8
 800120e:	4619      	mov	r1, r3
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <MX_TIM2_Init+0x114>)
 8001212:	f001 ff69 	bl	80030e8 <HAL_TIM_PWM_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800121c:	f7ff fe56 	bl	8000ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001220:	463b      	mov	r3, r7
 8001222:	220c      	movs	r2, #12
 8001224:	4619      	mov	r1, r3
 8001226:	4807      	ldr	r0, [pc, #28]	@ (8001244 <MX_TIM2_Init+0x114>)
 8001228:	f001 ff5e 	bl	80030e8 <HAL_TIM_PWM_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8001232:	f7ff fe4b 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001236:	4803      	ldr	r0, [pc, #12]	@ (8001244 <MX_TIM2_Init+0x114>)
 8001238:	f000 f824 	bl	8001284 <HAL_TIM_MspPostInit>

}
 800123c:	bf00      	nop
 800123e:	3738      	adds	r7, #56	@ 0x38
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000208 	.word	0x20000208

08001248 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001258:	d10b      	bne.n	8001272 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <HAL_TIM_Base_MspInit+0x38>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	4a08      	ldr	r2, [pc, #32]	@ (8001280 <HAL_TIM_Base_MspInit+0x38>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6413      	str	r3, [r2, #64]	@ 0x40
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_TIM_Base_MspInit+0x38>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800

08001284 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012a4:	d138      	bne.n	8001318 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <HAL_TIM_MspPostInit+0x9c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001320 <HAL_TIM_MspPostInit+0x9c>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <HAL_TIM_MspPostInit+0x9c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <HAL_TIM_MspPostInit+0x9c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a17      	ldr	r2, [pc, #92]	@ (8001320 <HAL_TIM_MspPostInit+0x9c>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_TIM_MspPostInit+0x9c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80012d6:	2309      	movs	r3, #9
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012e6:	2301      	movs	r3, #1
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	480c      	ldr	r0, [pc, #48]	@ (8001324 <HAL_TIM_MspPostInit+0xa0>)
 80012f2:	f000 fa8f 	bl	8001814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001308:	2301      	movs	r3, #1
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <HAL_TIM_MspPostInit+0xa4>)
 8001314:	f000 fa7e 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	@ 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020400 	.word	0x40020400

0800132c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001330:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <MX_USART3_UART_Init+0x58>)
 8001332:	4a15      	ldr	r2, [pc, #84]	@ (8001388 <MX_USART3_UART_Init+0x5c>)
 8001334:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001336:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <MX_USART3_UART_Init+0x58>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <MX_USART3_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <MX_USART3_UART_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <MX_USART3_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <MX_USART3_UART_Init+0x58>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <MX_USART3_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_USART3_UART_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <MX_USART3_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <MX_USART3_UART_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	@ (8001384 <MX_USART3_UART_Init+0x58>)
 8001370:	f002 fcea 	bl	8003d48 <HAL_UART_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800137a:	f7ff fda7 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000254 	.word	0x20000254
 8001388:	40004800 	.word	0x40004800

0800138c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0ae      	sub	sp, #184	@ 0xb8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2290      	movs	r2, #144	@ 0x90
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f004 fa4e 	bl	800584e <memset>
  if(uartHandle->Instance==USART3)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a22      	ldr	r2, [pc, #136]	@ (8001440 <HAL_UART_MspInit+0xb4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d13c      	bne.n	8001436 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013c0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 f8b2 	bl	8002534 <HAL_RCCEx_PeriphCLKConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013d6:	f7ff fd79 	bl	8000ecc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013da:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <HAL_UART_MspInit+0xb8>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	4a19      	ldr	r2, [pc, #100]	@ (8001444 <HAL_UART_MspInit+0xb8>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <HAL_UART_MspInit+0xb8>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <HAL_UART_MspInit+0xb8>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a13      	ldr	r2, [pc, #76]	@ (8001444 <HAL_UART_MspInit+0xb8>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <HAL_UART_MspInit+0xb8>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800140a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800140e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001424:	2307      	movs	r3, #7
 8001426:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	@ (8001448 <HAL_UART_MspInit+0xbc>)
 8001432:	f000 f9ef 	bl	8001814 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001436:	bf00      	nop
 8001438:	37b8      	adds	r7, #184	@ 0xb8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40004800 	.word	0x40004800
 8001444:	40023800 	.word	0x40023800
 8001448:	40020c00 	.word	0x40020c00

0800144c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001484 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001450:	f7ff fe5c 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001454:	480c      	ldr	r0, [pc, #48]	@ (8001488 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001456:	490d      	ldr	r1, [pc, #52]	@ (800148c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001458:	4a0d      	ldr	r2, [pc, #52]	@ (8001490 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800146c:	4c0a      	ldr	r4, [pc, #40]	@ (8001498 <LoopFillZerobss+0x22>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800147a:	f004 fa41 	bl	8005900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147e:	f7ff fb3b 	bl	8000af8 <main>
  bx  lr    
 8001482:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001484:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001490:	08009314 	.word	0x08009314
  ldr r2, =_sbss
 8001494:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001498:	2000042c 	.word	0x2000042c

0800149c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC_IRQHandler>

0800149e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a2:	2003      	movs	r0, #3
 80014a4:	f000 f90a 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a8:	200f      	movs	r0, #15
 80014aa:	f000 f805 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ae:	f7ff fd13 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f917 	bl	800170a <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 f8ed 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20000008 	.word	0x20000008
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000008 	.word	0x20000008
 800153c:	200002dc 	.word	0x200002dc

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	200002dc 	.word	0x200002dc

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <__NVIC_SetPriorityGrouping+0x40>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 8001582:	4313      	orrs	r3, r2
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <__NVIC_SetPriorityGrouping+0x40>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00
 800159c:	05fa0000 	.word	0x05fa0000

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	@ (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	@ (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	@ 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	@ 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff47 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff5c 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff8e 	bl	8001610 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffb0 	bl	8001678 <SysTick_Config>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001728:	f3bf 8f5f 	dmb	sy
}
 800172c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800172e:	4b07      	ldr	r3, [pc, #28]	@ (800174c <HAL_MPU_Disable+0x28>)
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	4a06      	ldr	r2, [pc, #24]	@ (800174c <HAL_MPU_Disable+0x28>)
 8001734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001738:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800173a:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <HAL_MPU_Disable+0x2c>)
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00
 8001750:	e000ed90 	.word	0xe000ed90

08001754 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800175c:	4a0b      	ldr	r2, [pc, #44]	@ (800178c <HAL_MPU_Enable+0x38>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <HAL_MPU_Enable+0x3c>)
 8001768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176a:	4a09      	ldr	r2, [pc, #36]	@ (8001790 <HAL_MPU_Enable+0x3c>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001770:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001772:	f3bf 8f4f 	dsb	sy
}
 8001776:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001778:	f3bf 8f6f 	isb	sy
}
 800177c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed90 	.word	0xe000ed90
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	785a      	ldrb	r2, [r3, #1]
 80017a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <HAL_MPU_ConfigRegion+0x7c>)
 80017a2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80017a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <HAL_MPU_ConfigRegion+0x7c>)
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	4a19      	ldr	r2, [pc, #100]	@ (8001810 <HAL_MPU_ConfigRegion+0x7c>)
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80017b0:	4a17      	ldr	r2, [pc, #92]	@ (8001810 <HAL_MPU_ConfigRegion+0x7c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7b1b      	ldrb	r3, [r3, #12]
 80017bc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7adb      	ldrb	r3, [r3, #11]
 80017c2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7a9b      	ldrb	r3, [r3, #10]
 80017ca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7b5b      	ldrb	r3, [r3, #13]
 80017d2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7b9b      	ldrb	r3, [r3, #14]
 80017da:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7bdb      	ldrb	r3, [r3, #15]
 80017e2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	7a5b      	ldrb	r3, [r3, #9]
 80017ea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7a1b      	ldrb	r3, [r3, #8]
 80017f2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017f4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017fc:	4a04      	ldr	r2, [pc, #16]	@ (8001810 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017fe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001800:	6113      	str	r3, [r2, #16]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed90 	.word	0xe000ed90

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	@ 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	e175      	b.n	8001b20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001834:	2201      	movs	r2, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	429a      	cmp	r2, r3
 800184e:	f040 8164 	bne.w	8001b1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d005      	beq.n	800186a <HAL_GPIO_Init+0x56>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d130      	bne.n	80018cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 0201 	and.w	r2, r3, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d017      	beq.n	8001908 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d123      	bne.n	800195c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3208      	adds	r2, #8
 800191c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	08da      	lsrs	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3208      	adds	r2, #8
 8001956:	69b9      	ldr	r1, [r7, #24]
 8001958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0203 	and.w	r2, r3, #3
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80be 	beq.w	8001b1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	4b66      	ldr	r3, [pc, #408]	@ (8001b38 <HAL_GPIO_Init+0x324>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	4a65      	ldr	r2, [pc, #404]	@ (8001b38 <HAL_GPIO_Init+0x324>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019aa:	4b63      	ldr	r3, [pc, #396]	@ (8001b38 <HAL_GPIO_Init+0x324>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019b6:	4a61      	ldr	r2, [pc, #388]	@ (8001b3c <HAL_GPIO_Init+0x328>)
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	220f      	movs	r2, #15
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a58      	ldr	r2, [pc, #352]	@ (8001b40 <HAL_GPIO_Init+0x32c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d037      	beq.n	8001a52 <HAL_GPIO_Init+0x23e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a57      	ldr	r2, [pc, #348]	@ (8001b44 <HAL_GPIO_Init+0x330>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d031      	beq.n	8001a4e <HAL_GPIO_Init+0x23a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a56      	ldr	r2, [pc, #344]	@ (8001b48 <HAL_GPIO_Init+0x334>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d02b      	beq.n	8001a4a <HAL_GPIO_Init+0x236>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a55      	ldr	r2, [pc, #340]	@ (8001b4c <HAL_GPIO_Init+0x338>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d025      	beq.n	8001a46 <HAL_GPIO_Init+0x232>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a54      	ldr	r2, [pc, #336]	@ (8001b50 <HAL_GPIO_Init+0x33c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d01f      	beq.n	8001a42 <HAL_GPIO_Init+0x22e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a53      	ldr	r2, [pc, #332]	@ (8001b54 <HAL_GPIO_Init+0x340>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d019      	beq.n	8001a3e <HAL_GPIO_Init+0x22a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a52      	ldr	r2, [pc, #328]	@ (8001b58 <HAL_GPIO_Init+0x344>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_GPIO_Init+0x226>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a51      	ldr	r2, [pc, #324]	@ (8001b5c <HAL_GPIO_Init+0x348>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00d      	beq.n	8001a36 <HAL_GPIO_Init+0x222>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a50      	ldr	r2, [pc, #320]	@ (8001b60 <HAL_GPIO_Init+0x34c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d007      	beq.n	8001a32 <HAL_GPIO_Init+0x21e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4f      	ldr	r2, [pc, #316]	@ (8001b64 <HAL_GPIO_Init+0x350>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_GPIO_Init+0x21a>
 8001a2a:	2309      	movs	r3, #9
 8001a2c:	e012      	b.n	8001a54 <HAL_GPIO_Init+0x240>
 8001a2e:	230a      	movs	r3, #10
 8001a30:	e010      	b.n	8001a54 <HAL_GPIO_Init+0x240>
 8001a32:	2308      	movs	r3, #8
 8001a34:	e00e      	b.n	8001a54 <HAL_GPIO_Init+0x240>
 8001a36:	2307      	movs	r3, #7
 8001a38:	e00c      	b.n	8001a54 <HAL_GPIO_Init+0x240>
 8001a3a:	2306      	movs	r3, #6
 8001a3c:	e00a      	b.n	8001a54 <HAL_GPIO_Init+0x240>
 8001a3e:	2305      	movs	r3, #5
 8001a40:	e008      	b.n	8001a54 <HAL_GPIO_Init+0x240>
 8001a42:	2304      	movs	r3, #4
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x240>
 8001a46:	2303      	movs	r3, #3
 8001a48:	e004      	b.n	8001a54 <HAL_GPIO_Init+0x240>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e002      	b.n	8001a54 <HAL_GPIO_Init+0x240>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_GPIO_Init+0x240>
 8001a52:	2300      	movs	r3, #0
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	f002 0203 	and.w	r2, r2, #3
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	4093      	lsls	r3, r2
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a64:	4935      	ldr	r1, [pc, #212]	@ (8001b3c <HAL_GPIO_Init+0x328>)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a72:	4b3d      	ldr	r3, [pc, #244]	@ (8001b68 <HAL_GPIO_Init+0x354>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a96:	4a34      	ldr	r2, [pc, #208]	@ (8001b68 <HAL_GPIO_Init+0x354>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a9c:	4b32      	ldr	r3, [pc, #200]	@ (8001b68 <HAL_GPIO_Init+0x354>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac0:	4a29      	ldr	r2, [pc, #164]	@ (8001b68 <HAL_GPIO_Init+0x354>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ac6:	4b28      	ldr	r3, [pc, #160]	@ (8001b68 <HAL_GPIO_Init+0x354>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aea:	4a1f      	ldr	r2, [pc, #124]	@ (8001b68 <HAL_GPIO_Init+0x354>)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <HAL_GPIO_Init+0x354>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b14:	4a14      	ldr	r2, [pc, #80]	@ (8001b68 <HAL_GPIO_Init+0x354>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	2b0f      	cmp	r3, #15
 8001b24:	f67f ae86 	bls.w	8001834 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3724      	adds	r7, #36	@ 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40013800 	.word	0x40013800
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40020400 	.word	0x40020400
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40020c00 	.word	0x40020c00
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40021400 	.word	0x40021400
 8001b58:	40021800 	.word	0x40021800
 8001b5c:	40021c00 	.word	0x40021c00
 8001b60:	40022000 	.word	0x40022000
 8001b64:	40022400 	.word	0x40022400
 8001b68:	40013c00 	.word	0x40013c00

08001b6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4b23      	ldr	r3, [pc, #140]	@ (8001c04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a22      	ldr	r2, [pc, #136]	@ (8001c04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b20      	ldr	r3, [pc, #128]	@ (8001c04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1d      	ldr	r2, [pc, #116]	@ (8001c08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b9a:	f7ff fcd1 	bl	8001540 <HAL_GetTick>
 8001b9e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ba0:	e009      	b.n	8001bb6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ba2:	f7ff fccd 	bl	8001540 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bb0:	d901      	bls.n	8001bb6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e022      	b.n	8001bfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bb6:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc2:	d1ee      	bne.n	8001ba2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001bc4:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd0:	f7ff fcb6 	bl	8001540 <HAL_GetTick>
 8001bd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bd6:	e009      	b.n	8001bec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bd8:	f7ff fcb2 	bl	8001540 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001be6:	d901      	bls.n	8001bec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e007      	b.n	8001bfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001bf8:	d1ee      	bne.n	8001bd8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40007000 	.word	0x40007000

08001c0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e29b      	b.n	800215a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8087 	beq.w	8001d3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c30:	4b96      	ldr	r3, [pc, #600]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d00c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3c:	4b93      	ldr	r3, [pc, #588]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d112      	bne.n	8001c6e <HAL_RCC_OscConfig+0x62>
 8001c48:	4b90      	ldr	r3, [pc, #576]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c54:	d10b      	bne.n	8001c6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c56:	4b8d      	ldr	r3, [pc, #564]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d06c      	beq.n	8001d3c <HAL_RCC_OscConfig+0x130>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d168      	bne.n	8001d3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e275      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x7a>
 8001c78:	4b84      	ldr	r3, [pc, #528]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a83      	ldr	r2, [pc, #524]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	e02e      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd8>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x9c>
 8001c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7e      	ldr	r2, [pc, #504]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a7b      	ldr	r2, [pc, #492]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001ca0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e01d      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0xc0>
 8001cb2:	4b76      	ldr	r3, [pc, #472]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a75      	ldr	r2, [pc, #468]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b73      	ldr	r3, [pc, #460]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a72      	ldr	r2, [pc, #456]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd8>
 8001ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b6c      	ldr	r3, [pc, #432]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6b      	ldr	r2, [pc, #428]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001cde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d013      	beq.n	8001d14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff fc28 	bl	8001540 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fc24 	bl	8001540 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	@ 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e229      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	4b61      	ldr	r3, [pc, #388]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0xe8>
 8001d12:	e014      	b.n	8001d3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff fc14 	bl	8001540 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fc10 	bl	8001540 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	@ 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e215      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	4b57      	ldr	r3, [pc, #348]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x110>
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d069      	beq.n	8001e1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4a:	4b50      	ldr	r3, [pc, #320]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d56:	4b4d      	ldr	r3, [pc, #308]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d11c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x190>
 8001d62:	4b4a      	ldr	r3, [pc, #296]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d116      	bne.n	8001d9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	4b47      	ldr	r3, [pc, #284]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_RCC_OscConfig+0x17a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e1e9      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d86:	4b41      	ldr	r3, [pc, #260]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	493d      	ldr	r1, [pc, #244]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	e040      	b.n	8001e1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d023      	beq.n	8001dec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da4:	4b39      	ldr	r3, [pc, #228]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a38      	ldr	r2, [pc, #224]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff fbc6 	bl	8001540 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db8:	f7ff fbc2 	bl	8001540 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e1c7      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dca:	4b30      	ldr	r3, [pc, #192]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4929      	ldr	r1, [pc, #164]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
 8001dea:	e018      	b.n	8001e1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dec:	4b27      	ldr	r3, [pc, #156]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a26      	ldr	r2, [pc, #152]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff fba2 	bl	8001540 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff fb9e 	bl	8001540 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e1a3      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d038      	beq.n	8001e9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d019      	beq.n	8001e66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e32:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e36:	4a15      	ldr	r2, [pc, #84]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fb7f 	bl	8001540 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e46:	f7ff fb7b 	bl	8001540 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e180      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x23a>
 8001e64:	e01a      	b.n	8001e9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e6a:	4a08      	ldr	r2, [pc, #32]	@ (8001e8c <HAL_RCC_OscConfig+0x280>)
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e72:	f7ff fb65 	bl	8001540 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7a:	f7ff fb61 	bl	8001540 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d903      	bls.n	8001e90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e166      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
 8001e8c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	4b92      	ldr	r3, [pc, #584]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ee      	bne.n	8001e7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80a4 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eaa:	4b8c      	ldr	r3, [pc, #560]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	4b89      	ldr	r3, [pc, #548]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	4a88      	ldr	r2, [pc, #544]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec2:	4b86      	ldr	r3, [pc, #536]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed2:	4b83      	ldr	r3, [pc, #524]	@ (80020e0 <HAL_RCC_OscConfig+0x4d4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d118      	bne.n	8001f10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ede:	4b80      	ldr	r3, [pc, #512]	@ (80020e0 <HAL_RCC_OscConfig+0x4d4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a7f      	ldr	r2, [pc, #508]	@ (80020e0 <HAL_RCC_OscConfig+0x4d4>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fb29 	bl	8001540 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef2:	f7ff fb25 	bl	8001540 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b64      	cmp	r3, #100	@ 0x64
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e12a      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f04:	4b76      	ldr	r3, [pc, #472]	@ (80020e0 <HAL_RCC_OscConfig+0x4d4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x31a>
 8001f18:	4b70      	ldr	r3, [pc, #448]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1c:	4a6f      	ldr	r2, [pc, #444]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f24:	e02d      	b.n	8001f82 <HAL_RCC_OscConfig+0x376>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x33c>
 8001f2e:	4b6b      	ldr	r3, [pc, #428]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f32:	4a6a      	ldr	r2, [pc, #424]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f3a:	4b68      	ldr	r3, [pc, #416]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3e:	4a67      	ldr	r2, [pc, #412]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001f40:	f023 0304 	bic.w	r3, r3, #4
 8001f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f46:	e01c      	b.n	8001f82 <HAL_RCC_OscConfig+0x376>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d10c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x35e>
 8001f50:	4b62      	ldr	r3, [pc, #392]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f54:	4a61      	ldr	r2, [pc, #388]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f5c:	4b5f      	ldr	r3, [pc, #380]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f60:	4a5e      	ldr	r2, [pc, #376]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f68:	e00b      	b.n	8001f82 <HAL_RCC_OscConfig+0x376>
 8001f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6e:	4a5b      	ldr	r2, [pc, #364]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f76:	4b59      	ldr	r3, [pc, #356]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7a:	4a58      	ldr	r2, [pc, #352]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d015      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7ff fad9 	bl	8001540 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7ff fad5 	bl	8001540 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0d8      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	4b4c      	ldr	r3, [pc, #304]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ee      	beq.n	8001f92 <HAL_RCC_OscConfig+0x386>
 8001fb4:	e014      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fac3 	bl	8001540 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff fabf 	bl	8001540 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0c2      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd4:	4b41      	ldr	r3, [pc, #260]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1ee      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d105      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	4a3c      	ldr	r2, [pc, #240]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001fec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80ae 	beq.w	8002158 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ffc:	4b37      	ldr	r3, [pc, #220]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d06d      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d14b      	bne.n	80020a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b32      	ldr	r3, [pc, #200]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a31      	ldr	r2, [pc, #196]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8002016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800201a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff fa90 	bl	8001540 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002024:	f7ff fa8c 	bl	8001540 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e091      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002036:	4b29      	ldr	r3, [pc, #164]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69da      	ldr	r2, [r3, #28]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	019b      	lsls	r3, r3, #6
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	085b      	lsrs	r3, r3, #1
 800205a:	3b01      	subs	r3, #1
 800205c:	041b      	lsls	r3, r3, #16
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002064:	061b      	lsls	r3, r3, #24
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206c:	071b      	lsls	r3, r3, #28
 800206e:	491b      	ldr	r1, [pc, #108]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002074:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a18      	ldr	r2, [pc, #96]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 800207a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800207e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7ff fa5e 	bl	8001540 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002088:	f7ff fa5a 	bl	8001540 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e05f      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x47c>
 80020a6:	e057      	b.n	8002158 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0b      	ldr	r2, [pc, #44]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 80020ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7ff fa44 	bl	8001540 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020bc:	f7ff fa40 	bl	8001540 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e045      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ce:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <HAL_RCC_OscConfig+0x4d0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x4b0>
 80020da:	e03d      	b.n	8002158 <HAL_RCC_OscConfig+0x54c>
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80020e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <HAL_RCC_OscConfig+0x558>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d030      	beq.n	8002154 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d129      	bne.n	8002154 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d122      	bne.n	8002154 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002114:	4013      	ands	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800211a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800211c:	4293      	cmp	r3, r2
 800211e:	d119      	bne.n	8002154 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212a:	085b      	lsrs	r3, r3, #1
 800212c:	3b01      	subs	r3, #1
 800212e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d10f      	bne.n	8002154 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002140:	429a      	cmp	r2, r3
 8002142:	d107      	bne.n	8002154 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800

08002168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0d0      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b6a      	ldr	r3, [pc, #424]	@ (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d910      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b67      	ldr	r3, [pc, #412]	@ (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 020f 	bic.w	r2, r3, #15
 8002196:	4965      	ldr	r1, [pc, #404]	@ (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	@ (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a58      	ldr	r2, [pc, #352]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 80021ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a52      	ldr	r2, [pc, #328]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 80021e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d040      	beq.n	800228c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d115      	bne.n	800224a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b41      	ldr	r3, [pc, #260]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e073      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	4b3d      	ldr	r3, [pc, #244]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06b      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224a:	4b39      	ldr	r3, [pc, #228]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f023 0203 	bic.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4936      	ldr	r1, [pc, #216]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 8002258:	4313      	orrs	r3, r2
 800225a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800225c:	f7ff f970 	bl	8001540 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	e00a      	b.n	800227a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002264:	f7ff f96c 	bl	8001540 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e053      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	4b2d      	ldr	r3, [pc, #180]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 020c 	and.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	429a      	cmp	r2, r3
 800228a:	d1eb      	bne.n	8002264 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800228c:	4b27      	ldr	r3, [pc, #156]	@ (800232c <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d210      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b24      	ldr	r3, [pc, #144]	@ (800232c <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 020f 	bic.w	r2, r3, #15
 80022a2:	4922      	ldr	r1, [pc, #136]	@ (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	@ (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022e6:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	@ (8002334 <HAL_RCC_ClockConfig+0x1cc>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <HAL_RCC_ClockConfig+0x1d0>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <HAL_RCC_ClockConfig+0x1d4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff f8cc 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00
 8002330:	40023800 	.word	0x40023800
 8002334:	08008ec0 	.word	0x08008ec0
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002344:	b090      	sub	sp, #64	@ 0x40
 8002346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	637b      	str	r3, [r7, #52]	@ 0x34
 800234c:	2300      	movs	r3, #0
 800234e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002350:	2300      	movs	r3, #0
 8002352:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002358:	4b59      	ldr	r3, [pc, #356]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d00d      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x40>
 8002364:	2b08      	cmp	r3, #8
 8002366:	f200 80a1 	bhi.w	80024ac <HAL_RCC_GetSysClockFreq+0x16c>
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x34>
 800236e:	2b04      	cmp	r3, #4
 8002370:	d003      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x3a>
 8002372:	e09b      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b53      	ldr	r3, [pc, #332]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002376:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002378:	e09b      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800237a:	4b53      	ldr	r3, [pc, #332]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800237c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800237e:	e098      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002380:	4b4f      	ldr	r3, [pc, #316]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002388:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800238a:	4b4d      	ldr	r3, [pc, #308]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d028      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002396:	4b4a      	ldr	r3, [pc, #296]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	2200      	movs	r2, #0
 800239e:	623b      	str	r3, [r7, #32]
 80023a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023a8:	2100      	movs	r1, #0
 80023aa:	4b47      	ldr	r3, [pc, #284]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023ac:	fb03 f201 	mul.w	r2, r3, r1
 80023b0:	2300      	movs	r3, #0
 80023b2:	fb00 f303 	mul.w	r3, r0, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	4a43      	ldr	r2, [pc, #268]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023ba:	fba0 1202 	umull	r1, r2, r0, r2
 80023be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023c0:	460a      	mov	r2, r1
 80023c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80023c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023c6:	4413      	add	r3, r2
 80023c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023cc:	2200      	movs	r2, #0
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	61fa      	str	r2, [r7, #28]
 80023d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023da:	f7fe f945 	bl	8000668 <__aeabi_uldivmod>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4613      	mov	r3, r2
 80023e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023e6:	e053      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e8:	4b35      	ldr	r3, [pc, #212]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	099b      	lsrs	r3, r3, #6
 80023ee:	2200      	movs	r2, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	617a      	str	r2, [r7, #20]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023fa:	f04f 0b00 	mov.w	fp, #0
 80023fe:	4652      	mov	r2, sl
 8002400:	465b      	mov	r3, fp
 8002402:	f04f 0000 	mov.w	r0, #0
 8002406:	f04f 0100 	mov.w	r1, #0
 800240a:	0159      	lsls	r1, r3, #5
 800240c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002410:	0150      	lsls	r0, r2, #5
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	ebb2 080a 	subs.w	r8, r2, sl
 800241a:	eb63 090b 	sbc.w	r9, r3, fp
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800242a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800242e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002432:	ebb2 0408 	subs.w	r4, r2, r8
 8002436:	eb63 0509 	sbc.w	r5, r3, r9
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	00eb      	lsls	r3, r5, #3
 8002444:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002448:	00e2      	lsls	r2, r4, #3
 800244a:	4614      	mov	r4, r2
 800244c:	461d      	mov	r5, r3
 800244e:	eb14 030a 	adds.w	r3, r4, sl
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	eb45 030b 	adc.w	r3, r5, fp
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002466:	4629      	mov	r1, r5
 8002468:	028b      	lsls	r3, r1, #10
 800246a:	4621      	mov	r1, r4
 800246c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002470:	4621      	mov	r1, r4
 8002472:	028a      	lsls	r2, r1, #10
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800247a:	2200      	movs	r2, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	60fa      	str	r2, [r7, #12]
 8002480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002484:	f7fe f8f0 	bl	8000668 <__aeabi_uldivmod>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4613      	mov	r3, r2
 800248e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	3301      	adds	r3, #1
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80024a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024aa:	e002      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024ac:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80024ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3740      	adds	r7, #64	@ 0x40
 80024b8:	46bd      	mov	sp, r7
 80024ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	00f42400 	.word	0x00f42400
 80024c8:	017d7840 	.word	0x017d7840

080024cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d0:	4b03      	ldr	r3, [pc, #12]	@ (80024e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000000 	.word	0x20000000

080024e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024e8:	f7ff fff0 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b05      	ldr	r3, [pc, #20]	@ (8002504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0a9b      	lsrs	r3, r3, #10
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4903      	ldr	r1, [pc, #12]	@ (8002508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	08008ed0 	.word	0x08008ed0

0800250c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002510:	f7ff ffdc 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b05      	ldr	r3, [pc, #20]	@ (800252c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0b5b      	lsrs	r3, r3, #13
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4903      	ldr	r1, [pc, #12]	@ (8002530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	08008ed0 	.word	0x08008ed0

08002534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d012      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800255c:	4b69      	ldr	r3, [pc, #420]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a68      	ldr	r2, [pc, #416]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002562:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002566:	6093      	str	r3, [r2, #8]
 8002568:	4b66      	ldr	r3, [pc, #408]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002570:	4964      	ldr	r1, [pc, #400]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800257e:	2301      	movs	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d017      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800258e:	4b5d      	ldr	r3, [pc, #372]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002594:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259c:	4959      	ldr	r1, [pc, #356]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025ac:	d101      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d017      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	494a      	ldr	r1, [pc, #296]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025e8:	d101      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80025ea:	2301      	movs	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002606:	2301      	movs	r3, #1
 8002608:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 808b 	beq.w	800272e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b3a      	ldr	r3, [pc, #232]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	4a39      	ldr	r2, [pc, #228]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002622:	6413      	str	r3, [r2, #64]	@ 0x40
 8002624:	4b37      	ldr	r3, [pc, #220]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002630:	4b35      	ldr	r3, [pc, #212]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a34      	ldr	r2, [pc, #208]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263c:	f7fe ff80 	bl	8001540 <HAL_GetTick>
 8002640:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002644:	f7fe ff7c 	bl	8001540 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	@ 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e38f      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002656:	4b2c      	ldr	r3, [pc, #176]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002662:	4b28      	ldr	r3, [pc, #160]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800266a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d035      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d02e      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002680:	4b20      	ldr	r3, [pc, #128]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002688:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800268a:	4b1e      	ldr	r3, [pc, #120]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268e:	4a1d      	ldr	r2, [pc, #116]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002694:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002696:	4b1b      	ldr	r3, [pc, #108]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269a:	4a1a      	ldr	r2, [pc, #104]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026a2:	4a18      	ldr	r2, [pc, #96]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026a8:	4b16      	ldr	r3, [pc, #88]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d114      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe ff44 	bl	8001540 <HAL_GetTick>
 80026b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7fe ff40 	bl	8001540 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e351      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0ee      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026ea:	d111      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80026ec:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026f8:	4b04      	ldr	r3, [pc, #16]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026fa:	400b      	ands	r3, r1
 80026fc:	4901      	ldr	r1, [pc, #4]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
 8002702:	e00b      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002704:	40023800 	.word	0x40023800
 8002708:	40007000 	.word	0x40007000
 800270c:	0ffffcff 	.word	0x0ffffcff
 8002710:	4bac      	ldr	r3, [pc, #688]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4aab      	ldr	r2, [pc, #684]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002716:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800271a:	6093      	str	r3, [r2, #8]
 800271c:	4ba9      	ldr	r3, [pc, #676]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800271e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002728:	49a6      	ldr	r1, [pc, #664]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800272a:	4313      	orrs	r3, r2
 800272c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800273a:	4ba2      	ldr	r3, [pc, #648]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800273c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002740:	4aa0      	ldr	r2, [pc, #640]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002742:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002746:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800274a:	4b9e      	ldr	r3, [pc, #632]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800274c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002754:	499b      	ldr	r1, [pc, #620]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002768:	4b96      	ldr	r3, [pc, #600]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002776:	4993      	ldr	r1, [pc, #588]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800278a:	4b8e      	ldr	r3, [pc, #568]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002790:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002798:	498a      	ldr	r1, [pc, #552]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027ac:	4b85      	ldr	r3, [pc, #532]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ba:	4982      	ldr	r1, [pc, #520]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027ce:	4b7d      	ldr	r3, [pc, #500]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027dc:	4979      	ldr	r1, [pc, #484]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027f0:	4b74      	ldr	r3, [pc, #464]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	4971      	ldr	r1, [pc, #452]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002812:	4b6c      	ldr	r3, [pc, #432]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002818:	f023 020c 	bic.w	r2, r3, #12
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002820:	4968      	ldr	r1, [pc, #416]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002834:	4b63      	ldr	r3, [pc, #396]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002842:	4960      	ldr	r1, [pc, #384]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002856:	4b5b      	ldr	r3, [pc, #364]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002864:	4957      	ldr	r1, [pc, #348]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002878:	4b52      	ldr	r3, [pc, #328]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002886:	494f      	ldr	r1, [pc, #316]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800289a:	4b4a      	ldr	r3, [pc, #296]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a8:	4946      	ldr	r1, [pc, #280]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028bc:	4b41      	ldr	r3, [pc, #260]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ca:	493e      	ldr	r1, [pc, #248]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028de:	4b39      	ldr	r3, [pc, #228]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ec:	4935      	ldr	r1, [pc, #212]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002900:	4b30      	ldr	r3, [pc, #192]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002906:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800290e:	492d      	ldr	r1, [pc, #180]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d011      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002922:	4b28      	ldr	r3, [pc, #160]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002928:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002930:	4924      	ldr	r1, [pc, #144]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800293c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002940:	d101      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002962:	4b18      	ldr	r3, [pc, #96]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002968:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002970:	4914      	ldr	r1, [pc, #80]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00b      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002984:	4b0f      	ldr	r3, [pc, #60]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002994:	490b      	ldr	r1, [pc, #44]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00f      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80029a8:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ae:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029b8:	4902      	ldr	r1, [pc, #8]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80029c0:	e002      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00b      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029d4:	4b8a      	ldr	r3, [pc, #552]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e4:	4986      	ldr	r1, [pc, #536]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80029f8:	4b81      	ldr	r3, [pc, #516]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029fe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a08:	497d      	ldr	r1, [pc, #500]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d006      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80d6 	beq.w	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a24:	4b76      	ldr	r3, [pc, #472]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a75      	ldr	r2, [pc, #468]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a30:	f7fe fd86 	bl	8001540 <HAL_GetTick>
 8002a34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a38:	f7fe fd82 	bl	8001540 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	@ 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e195      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a4a:	4b6d      	ldr	r3, [pc, #436]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d021      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11d      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a6a:	4b65      	ldr	r3, [pc, #404]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a78:	4b61      	ldr	r3, [pc, #388]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a7e:	0e1b      	lsrs	r3, r3, #24
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	019a      	lsls	r2, r3, #6
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	041b      	lsls	r3, r3, #16
 8002a90:	431a      	orrs	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	071b      	lsls	r3, r3, #28
 8002a9e:	4958      	ldr	r1, [pc, #352]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d004      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d02e      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ad0:	d129      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ae0:	4b47      	ldr	r3, [pc, #284]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae6:	0f1b      	lsrs	r3, r3, #28
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	019a      	lsls	r2, r3, #6
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	041b      	lsls	r3, r3, #16
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	061b      	lsls	r3, r3, #24
 8002b00:	431a      	orrs	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	071b      	lsls	r3, r3, #28
 8002b06:	493e      	ldr	r1, [pc, #248]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b14:	f023 021f 	bic.w	r2, r3, #31
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	4938      	ldr	r1, [pc, #224]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01d      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b32:	4b33      	ldr	r3, [pc, #204]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b38:	0e1b      	lsrs	r3, r3, #24
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b40:	4b2f      	ldr	r3, [pc, #188]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b46:	0f1b      	lsrs	r3, r3, #28
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	019a      	lsls	r2, r3, #6
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	061b      	lsls	r3, r3, #24
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	071b      	lsls	r3, r3, #28
 8002b66:	4926      	ldr	r1, [pc, #152]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d011      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	019a      	lsls	r2, r3, #6
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	071b      	lsls	r3, r3, #28
 8002b96:	491a      	ldr	r1, [pc, #104]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b9e:	4b18      	ldr	r3, [pc, #96]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a17      	ldr	r2, [pc, #92]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002baa:	f7fe fcc9 	bl	8001540 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bb2:	f7fe fcc5 	bl	8001540 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b64      	cmp	r3, #100	@ 0x64
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0d8      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	f040 80ce 	bne.w	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002bd8:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a08      	ldr	r2, [pc, #32]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be4:	f7fe fcac 	bl	8001540 <HAL_GetTick>
 8002be8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bea:	e00b      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bec:	f7fe fca8 	bl	8001540 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	@ 0x64
 8002bf8:	d904      	bls.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e0bb      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c04:	4b5e      	ldr	r3, [pc, #376]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c10:	d0ec      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d02e      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d12a      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c3a:	4b51      	ldr	r3, [pc, #324]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c48:	4b4d      	ldr	r3, [pc, #308]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4e:	0f1b      	lsrs	r3, r3, #28
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	019a      	lsls	r2, r3, #6
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	061b      	lsls	r3, r3, #24
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	071b      	lsls	r3, r3, #28
 8002c6e:	4944      	ldr	r1, [pc, #272]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c76:	4b42      	ldr	r3, [pc, #264]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c7c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	493d      	ldr	r1, [pc, #244]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d022      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ca0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ca4:	d11d      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ca6:	4b36      	ldr	r3, [pc, #216]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cac:	0e1b      	lsrs	r3, r3, #24
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cb4:	4b32      	ldr	r3, [pc, #200]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cba:	0f1b      	lsrs	r3, r3, #28
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	019a      	lsls	r2, r3, #6
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	061b      	lsls	r3, r3, #24
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	071b      	lsls	r3, r3, #28
 8002cda:	4929      	ldr	r1, [pc, #164]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d028      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cee:	4b24      	ldr	r3, [pc, #144]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf4:	0e1b      	lsrs	r3, r3, #24
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cfc:	4b20      	ldr	r3, [pc, #128]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	019a      	lsls	r2, r3, #6
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	431a      	orrs	r2, r3
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	061b      	lsls	r3, r3, #24
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	071b      	lsls	r3, r3, #28
 8002d22:	4917      	ldr	r1, [pc, #92]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d2a:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	4911      	ldr	r1, [pc, #68]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0e      	ldr	r2, [pc, #56]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fbf8 	bl	8001540 <HAL_GetTick>
 8002d50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d54:	f7fe fbf4 	bl	8001540 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	@ 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e007      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d72:	d1ef      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800

08002d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e049      	b.n	8002e2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe fa4c 	bl	8001248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f000 fb6e 	bl	80034a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e049      	b.n	8002ed8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f841 	bl	8002ee0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2202      	movs	r2, #2
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f000 fb17 	bl	80034a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <HAL_TIM_PWM_Start+0x24>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	e03c      	b.n	8002f92 <HAL_TIM_PWM_Start+0x9e>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d109      	bne.n	8002f32 <HAL_TIM_PWM_Start+0x3e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	bf14      	ite	ne
 8002f2a:	2301      	movne	r3, #1
 8002f2c:	2300      	moveq	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	e02f      	b.n	8002f92 <HAL_TIM_PWM_Start+0x9e>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d109      	bne.n	8002f4c <HAL_TIM_PWM_Start+0x58>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	e022      	b.n	8002f92 <HAL_TIM_PWM_Start+0x9e>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b0c      	cmp	r3, #12
 8002f50:	d109      	bne.n	8002f66 <HAL_TIM_PWM_Start+0x72>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	e015      	b.n	8002f92 <HAL_TIM_PWM_Start+0x9e>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d109      	bne.n	8002f80 <HAL_TIM_PWM_Start+0x8c>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e008      	b.n	8002f92 <HAL_TIM_PWM_Start+0x9e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e092      	b.n	80030c0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d104      	bne.n	8002faa <HAL_TIM_PWM_Start+0xb6>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fa8:	e023      	b.n	8002ff2 <HAL_TIM_PWM_Start+0xfe>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d104      	bne.n	8002fba <HAL_TIM_PWM_Start+0xc6>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fb8:	e01b      	b.n	8002ff2 <HAL_TIM_PWM_Start+0xfe>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d104      	bne.n	8002fca <HAL_TIM_PWM_Start+0xd6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fc8:	e013      	b.n	8002ff2 <HAL_TIM_PWM_Start+0xfe>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	d104      	bne.n	8002fda <HAL_TIM_PWM_Start+0xe6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fd8:	e00b      	b.n	8002ff2 <HAL_TIM_PWM_Start+0xfe>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d104      	bne.n	8002fea <HAL_TIM_PWM_Start+0xf6>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fe8:	e003      	b.n	8002ff2 <HAL_TIM_PWM_Start+0xfe>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	6839      	ldr	r1, [r7, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fdf0 	bl	8003be0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a30      	ldr	r2, [pc, #192]	@ (80030c8 <HAL_TIM_PWM_Start+0x1d4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d004      	beq.n	8003014 <HAL_TIM_PWM_Start+0x120>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2f      	ldr	r2, [pc, #188]	@ (80030cc <HAL_TIM_PWM_Start+0x1d8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d101      	bne.n	8003018 <HAL_TIM_PWM_Start+0x124>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <HAL_TIM_PWM_Start+0x126>
 8003018:	2300      	movs	r3, #0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d007      	beq.n	800302e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800302c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a25      	ldr	r2, [pc, #148]	@ (80030c8 <HAL_TIM_PWM_Start+0x1d4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d022      	beq.n	800307e <HAL_TIM_PWM_Start+0x18a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003040:	d01d      	beq.n	800307e <HAL_TIM_PWM_Start+0x18a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a22      	ldr	r2, [pc, #136]	@ (80030d0 <HAL_TIM_PWM_Start+0x1dc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d018      	beq.n	800307e <HAL_TIM_PWM_Start+0x18a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a20      	ldr	r2, [pc, #128]	@ (80030d4 <HAL_TIM_PWM_Start+0x1e0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_TIM_PWM_Start+0x18a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1f      	ldr	r2, [pc, #124]	@ (80030d8 <HAL_TIM_PWM_Start+0x1e4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00e      	beq.n	800307e <HAL_TIM_PWM_Start+0x18a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a19      	ldr	r2, [pc, #100]	@ (80030cc <HAL_TIM_PWM_Start+0x1d8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d009      	beq.n	800307e <HAL_TIM_PWM_Start+0x18a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1b      	ldr	r2, [pc, #108]	@ (80030dc <HAL_TIM_PWM_Start+0x1e8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <HAL_TIM_PWM_Start+0x18a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a19      	ldr	r2, [pc, #100]	@ (80030e0 <HAL_TIM_PWM_Start+0x1ec>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d115      	bne.n	80030aa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	4b17      	ldr	r3, [pc, #92]	@ (80030e4 <HAL_TIM_PWM_Start+0x1f0>)
 8003086:	4013      	ands	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b06      	cmp	r3, #6
 800308e:	d015      	beq.n	80030bc <HAL_TIM_PWM_Start+0x1c8>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003096:	d011      	beq.n	80030bc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a8:	e008      	b.n	80030bc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e000      	b.n	80030be <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40010000 	.word	0x40010000
 80030cc:	40010400 	.word	0x40010400
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40000800 	.word	0x40000800
 80030d8:	40000c00 	.word	0x40000c00
 80030dc:	40014000 	.word	0x40014000
 80030e0:	40001800 	.word	0x40001800
 80030e4:	00010007 	.word	0x00010007

080030e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003102:	2302      	movs	r3, #2
 8003104:	e0ff      	b.n	8003306 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b14      	cmp	r3, #20
 8003112:	f200 80f0 	bhi.w	80032f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003116:	a201      	add	r2, pc, #4	@ (adr r2, 800311c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311c:	08003171 	.word	0x08003171
 8003120:	080032f7 	.word	0x080032f7
 8003124:	080032f7 	.word	0x080032f7
 8003128:	080032f7 	.word	0x080032f7
 800312c:	080031b1 	.word	0x080031b1
 8003130:	080032f7 	.word	0x080032f7
 8003134:	080032f7 	.word	0x080032f7
 8003138:	080032f7 	.word	0x080032f7
 800313c:	080031f3 	.word	0x080031f3
 8003140:	080032f7 	.word	0x080032f7
 8003144:	080032f7 	.word	0x080032f7
 8003148:	080032f7 	.word	0x080032f7
 800314c:	08003233 	.word	0x08003233
 8003150:	080032f7 	.word	0x080032f7
 8003154:	080032f7 	.word	0x080032f7
 8003158:	080032f7 	.word	0x080032f7
 800315c:	08003275 	.word	0x08003275
 8003160:	080032f7 	.word	0x080032f7
 8003164:	080032f7 	.word	0x080032f7
 8003168:	080032f7 	.word	0x080032f7
 800316c:	080032b5 	.word	0x080032b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fa3a 	bl	80035f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0208 	orr.w	r2, r2, #8
 800318a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0204 	bic.w	r2, r2, #4
 800319a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6999      	ldr	r1, [r3, #24]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	619a      	str	r2, [r3, #24]
      break;
 80031ae:	e0a5      	b.n	80032fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fa8c 	bl	80036d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6999      	ldr	r1, [r3, #24]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	021a      	lsls	r2, r3, #8
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	619a      	str	r2, [r3, #24]
      break;
 80031f0:	e084      	b.n	80032fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fae3 	bl	80037c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0208 	orr.w	r2, r2, #8
 800320c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0204 	bic.w	r2, r2, #4
 800321c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69d9      	ldr	r1, [r3, #28]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	61da      	str	r2, [r3, #28]
      break;
 8003230:	e064      	b.n	80032fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fb39 	bl	80038b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800324c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800325c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69d9      	ldr	r1, [r3, #28]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	021a      	lsls	r2, r3, #8
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	61da      	str	r2, [r3, #28]
      break;
 8003272:	e043      	b.n	80032fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fb70 	bl	8003960 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0208 	orr.w	r2, r2, #8
 800328e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0204 	bic.w	r2, r2, #4
 800329e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80032b2:	e023      	b.n	80032fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fba2 	bl	8003a04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	021a      	lsls	r2, r3, #8
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80032f4:	e002      	b.n	80032fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	75fb      	strb	r3, [r7, #23]
      break;
 80032fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003304:	7dfb      	ldrb	r3, [r7, #23]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop

08003310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_TIM_ConfigClockSource+0x1c>
 8003328:	2302      	movs	r3, #2
 800332a:	e0b4      	b.n	8003496 <HAL_TIM_ConfigClockSource+0x186>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	4b56      	ldr	r3, [pc, #344]	@ (80034a0 <HAL_TIM_ConfigClockSource+0x190>)
 8003348:	4013      	ands	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003364:	d03e      	beq.n	80033e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800336a:	f200 8087 	bhi.w	800347c <HAL_TIM_ConfigClockSource+0x16c>
 800336e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003372:	f000 8086 	beq.w	8003482 <HAL_TIM_ConfigClockSource+0x172>
 8003376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800337a:	d87f      	bhi.n	800347c <HAL_TIM_ConfigClockSource+0x16c>
 800337c:	2b70      	cmp	r3, #112	@ 0x70
 800337e:	d01a      	beq.n	80033b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003380:	2b70      	cmp	r3, #112	@ 0x70
 8003382:	d87b      	bhi.n	800347c <HAL_TIM_ConfigClockSource+0x16c>
 8003384:	2b60      	cmp	r3, #96	@ 0x60
 8003386:	d050      	beq.n	800342a <HAL_TIM_ConfigClockSource+0x11a>
 8003388:	2b60      	cmp	r3, #96	@ 0x60
 800338a:	d877      	bhi.n	800347c <HAL_TIM_ConfigClockSource+0x16c>
 800338c:	2b50      	cmp	r3, #80	@ 0x50
 800338e:	d03c      	beq.n	800340a <HAL_TIM_ConfigClockSource+0xfa>
 8003390:	2b50      	cmp	r3, #80	@ 0x50
 8003392:	d873      	bhi.n	800347c <HAL_TIM_ConfigClockSource+0x16c>
 8003394:	2b40      	cmp	r3, #64	@ 0x40
 8003396:	d058      	beq.n	800344a <HAL_TIM_ConfigClockSource+0x13a>
 8003398:	2b40      	cmp	r3, #64	@ 0x40
 800339a:	d86f      	bhi.n	800347c <HAL_TIM_ConfigClockSource+0x16c>
 800339c:	2b30      	cmp	r3, #48	@ 0x30
 800339e:	d064      	beq.n	800346a <HAL_TIM_ConfigClockSource+0x15a>
 80033a0:	2b30      	cmp	r3, #48	@ 0x30
 80033a2:	d86b      	bhi.n	800347c <HAL_TIM_ConfigClockSource+0x16c>
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d060      	beq.n	800346a <HAL_TIM_ConfigClockSource+0x15a>
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d867      	bhi.n	800347c <HAL_TIM_ConfigClockSource+0x16c>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d05c      	beq.n	800346a <HAL_TIM_ConfigClockSource+0x15a>
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d05a      	beq.n	800346a <HAL_TIM_ConfigClockSource+0x15a>
 80033b4:	e062      	b.n	800347c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033c6:	f000 fbeb 	bl	8003ba0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	609a      	str	r2, [r3, #8]
      break;
 80033e2:	e04f      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033f4:	f000 fbd4 	bl	8003ba0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003406:	609a      	str	r2, [r3, #8]
      break;
 8003408:	e03c      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003416:	461a      	mov	r2, r3
 8003418:	f000 fb48 	bl	8003aac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2150      	movs	r1, #80	@ 0x50
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fba1 	bl	8003b6a <TIM_ITRx_SetConfig>
      break;
 8003428:	e02c      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003436:	461a      	mov	r2, r3
 8003438:	f000 fb67 	bl	8003b0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2160      	movs	r1, #96	@ 0x60
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fb91 	bl	8003b6a <TIM_ITRx_SetConfig>
      break;
 8003448:	e01c      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003456:	461a      	mov	r2, r3
 8003458:	f000 fb28 	bl	8003aac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2140      	movs	r1, #64	@ 0x40
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fb81 	bl	8003b6a <TIM_ITRx_SetConfig>
      break;
 8003468:	e00c      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4619      	mov	r1, r3
 8003474:	4610      	mov	r0, r2
 8003476:	f000 fb78 	bl	8003b6a <TIM_ITRx_SetConfig>
      break;
 800347a:	e003      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
      break;
 8003480:	e000      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003482:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	fffeff88 	.word	0xfffeff88

080034a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a43      	ldr	r2, [pc, #268]	@ (80035c4 <TIM_Base_SetConfig+0x120>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d013      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c2:	d00f      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a40      	ldr	r2, [pc, #256]	@ (80035c8 <TIM_Base_SetConfig+0x124>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00b      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3f      	ldr	r2, [pc, #252]	@ (80035cc <TIM_Base_SetConfig+0x128>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d007      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a3e      	ldr	r2, [pc, #248]	@ (80035d0 <TIM_Base_SetConfig+0x12c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d003      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a3d      	ldr	r2, [pc, #244]	@ (80035d4 <TIM_Base_SetConfig+0x130>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a32      	ldr	r2, [pc, #200]	@ (80035c4 <TIM_Base_SetConfig+0x120>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d02b      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003504:	d027      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2f      	ldr	r2, [pc, #188]	@ (80035c8 <TIM_Base_SetConfig+0x124>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d023      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a2e      	ldr	r2, [pc, #184]	@ (80035cc <TIM_Base_SetConfig+0x128>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01f      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a2d      	ldr	r2, [pc, #180]	@ (80035d0 <TIM_Base_SetConfig+0x12c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01b      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2c      	ldr	r2, [pc, #176]	@ (80035d4 <TIM_Base_SetConfig+0x130>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d017      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2b      	ldr	r2, [pc, #172]	@ (80035d8 <TIM_Base_SetConfig+0x134>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2a      	ldr	r2, [pc, #168]	@ (80035dc <TIM_Base_SetConfig+0x138>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00f      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a29      	ldr	r2, [pc, #164]	@ (80035e0 <TIM_Base_SetConfig+0x13c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00b      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a28      	ldr	r2, [pc, #160]	@ (80035e4 <TIM_Base_SetConfig+0x140>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d007      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a27      	ldr	r2, [pc, #156]	@ (80035e8 <TIM_Base_SetConfig+0x144>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d003      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a26      	ldr	r2, [pc, #152]	@ (80035ec <TIM_Base_SetConfig+0x148>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d108      	bne.n	8003568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800355c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a0e      	ldr	r2, [pc, #56]	@ (80035c4 <TIM_Base_SetConfig+0x120>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <TIM_Base_SetConfig+0xf2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a10      	ldr	r2, [pc, #64]	@ (80035d4 <TIM_Base_SetConfig+0x130>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d103      	bne.n	800359e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f043 0204 	orr.w	r2, r3, #4
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40000c00 	.word	0x40000c00
 80035d4:	40010400 	.word	0x40010400
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40014400 	.word	0x40014400
 80035e0:	40014800 	.word	0x40014800
 80035e4:	40001800 	.word	0x40001800
 80035e8:	40001c00 	.word	0x40001c00
 80035ec:	40002000 	.word	0x40002000

080035f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f023 0201 	bic.w	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4b2b      	ldr	r3, [pc, #172]	@ (80036c8 <TIM_OC1_SetConfig+0xd8>)
 800361c:	4013      	ands	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0303 	bic.w	r3, r3, #3
 8003626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f023 0302 	bic.w	r3, r3, #2
 8003638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a21      	ldr	r2, [pc, #132]	@ (80036cc <TIM_OC1_SetConfig+0xdc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d003      	beq.n	8003654 <TIM_OC1_SetConfig+0x64>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a20      	ldr	r2, [pc, #128]	@ (80036d0 <TIM_OC1_SetConfig+0xe0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d10c      	bne.n	800366e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f023 0308 	bic.w	r3, r3, #8
 800365a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a16      	ldr	r2, [pc, #88]	@ (80036cc <TIM_OC1_SetConfig+0xdc>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_OC1_SetConfig+0x8e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a15      	ldr	r2, [pc, #84]	@ (80036d0 <TIM_OC1_SetConfig+0xe0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d111      	bne.n	80036a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800368c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	621a      	str	r2, [r3, #32]
}
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	fffeff8f 	.word	0xfffeff8f
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40010400 	.word	0x40010400

080036d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f023 0210 	bic.w	r2, r3, #16
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4b2e      	ldr	r3, [pc, #184]	@ (80037b8 <TIM_OC2_SetConfig+0xe4>)
 8003700:	4013      	ands	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800370a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0320 	bic.w	r3, r3, #32
 800371e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a23      	ldr	r2, [pc, #140]	@ (80037bc <TIM_OC2_SetConfig+0xe8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_OC2_SetConfig+0x68>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a22      	ldr	r2, [pc, #136]	@ (80037c0 <TIM_OC2_SetConfig+0xec>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d10d      	bne.n	8003758 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003756:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a18      	ldr	r2, [pc, #96]	@ (80037bc <TIM_OC2_SetConfig+0xe8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_OC2_SetConfig+0x94>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a17      	ldr	r2, [pc, #92]	@ (80037c0 <TIM_OC2_SetConfig+0xec>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d113      	bne.n	8003790 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800376e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	621a      	str	r2, [r3, #32]
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	feff8fff 	.word	0xfeff8fff
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40010400 	.word	0x40010400

080037c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4b2d      	ldr	r3, [pc, #180]	@ (80038a4 <TIM_OC3_SetConfig+0xe0>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0303 	bic.w	r3, r3, #3
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800380c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a22      	ldr	r2, [pc, #136]	@ (80038a8 <TIM_OC3_SetConfig+0xe4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d003      	beq.n	800382a <TIM_OC3_SetConfig+0x66>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a21      	ldr	r2, [pc, #132]	@ (80038ac <TIM_OC3_SetConfig+0xe8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d10d      	bne.n	8003846 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a17      	ldr	r2, [pc, #92]	@ (80038a8 <TIM_OC3_SetConfig+0xe4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d003      	beq.n	8003856 <TIM_OC3_SetConfig+0x92>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a16      	ldr	r2, [pc, #88]	@ (80038ac <TIM_OC3_SetConfig+0xe8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d113      	bne.n	800387e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800385c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	621a      	str	r2, [r3, #32]
}
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	fffeff8f 	.word	0xfffeff8f
 80038a8:	40010000 	.word	0x40010000
 80038ac:	40010400 	.word	0x40010400

080038b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4b1e      	ldr	r3, [pc, #120]	@ (8003954 <TIM_OC4_SetConfig+0xa4>)
 80038dc:	4013      	ands	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	021b      	lsls	r3, r3, #8
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	031b      	lsls	r3, r3, #12
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a13      	ldr	r2, [pc, #76]	@ (8003958 <TIM_OC4_SetConfig+0xa8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d003      	beq.n	8003918 <TIM_OC4_SetConfig+0x68>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a12      	ldr	r2, [pc, #72]	@ (800395c <TIM_OC4_SetConfig+0xac>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d109      	bne.n	800392c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800391e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	019b      	lsls	r3, r3, #6
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	feff8fff 	.word	0xfeff8fff
 8003958:	40010000 	.word	0x40010000
 800395c:	40010400 	.word	0x40010400

08003960 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <TIM_OC5_SetConfig+0x98>)
 800398c:	4013      	ands	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80039a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	041b      	lsls	r3, r3, #16
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a12      	ldr	r2, [pc, #72]	@ (80039fc <TIM_OC5_SetConfig+0x9c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_OC5_SetConfig+0x5e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a11      	ldr	r2, [pc, #68]	@ (8003a00 <TIM_OC5_SetConfig+0xa0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d109      	bne.n	80039d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	621a      	str	r2, [r3, #32]
}
 80039ec:	bf00      	nop
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	fffeff8f 	.word	0xfffeff8f
 80039fc:	40010000 	.word	0x40010000
 8003a00:	40010400 	.word	0x40010400

08003a04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa0 <TIM_OC6_SetConfig+0x9c>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	051b      	lsls	r3, r3, #20
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a13      	ldr	r2, [pc, #76]	@ (8003aa4 <TIM_OC6_SetConfig+0xa0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d003      	beq.n	8003a64 <TIM_OC6_SetConfig+0x60>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a12      	ldr	r2, [pc, #72]	@ (8003aa8 <TIM_OC6_SetConfig+0xa4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d109      	bne.n	8003a78 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	029b      	lsls	r3, r3, #10
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	feff8fff 	.word	0xfeff8fff
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	40010400 	.word	0x40010400

08003aac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f023 0201 	bic.w	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f023 030a 	bic.w	r3, r3, #10
 8003ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	621a      	str	r2, [r3, #32]
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b087      	sub	sp, #28
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f023 0210 	bic.w	r2, r3, #16
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	031b      	lsls	r3, r3, #12
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f043 0307 	orr.w	r3, r3, #7
 8003b8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	609a      	str	r2, [r3, #8]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	021a      	lsls	r2, r3, #8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	609a      	str	r2, [r3, #8]
}
 8003bd4:	bf00      	nop
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1a      	ldr	r2, [r3, #32]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	401a      	ands	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1a      	ldr	r2, [r3, #32]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	fa01 f303 	lsl.w	r3, r1, r3
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e06d      	b.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a30      	ldr	r2, [pc, #192]	@ (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a2f      	ldr	r2, [pc, #188]	@ (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d108      	bne.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a20      	ldr	r2, [pc, #128]	@ (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d022      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb6:	d01d      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d018      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d013      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a15      	ldr	r2, [pc, #84]	@ (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a16      	ldr	r2, [pc, #88]	@ (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a15      	ldr	r2, [pc, #84]	@ (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d10c      	bne.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	40010400 	.word	0x40010400
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800
 8003d3c:	40000c00 	.word	0x40000c00
 8003d40:	40014000 	.word	0x40014000
 8003d44:	40001800 	.word	0x40001800

08003d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e040      	b.n	8003ddc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fd fb0e 	bl	800138c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	@ 0x24
 8003d74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0201 	bic.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fbde 	bl	8004550 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f977 	bl	8004088 <UART_SetConfig>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e01b      	b.n	8003ddc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fc5d 	bl	8004694 <UART_CheckIdleState>
 8003dda:	4603      	mov	r3, r0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	@ 0x28
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	d177      	bne.n	8003eec <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_UART_Transmit+0x24>
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e070      	b.n	8003eee <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2221      	movs	r2, #33	@ 0x21
 8003e18:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e1a:	f7fd fb91 	bl	8001540 <HAL_GetTick>
 8003e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	88fa      	ldrh	r2, [r7, #6]
 8003e24:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	88fa      	ldrh	r2, [r7, #6]
 8003e2c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e38:	d108      	bne.n	8003e4c <HAL_UART_Transmit+0x68>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d104      	bne.n	8003e4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	e003      	b.n	8003e54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e54:	e02f      	b.n	8003eb6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2180      	movs	r1, #128	@ 0x80
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fcbf 	bl	80047e4 <UART_WaitOnFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e03b      	b.n	8003eee <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10b      	bne.n	8003e94 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	3302      	adds	r3, #2
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	e007      	b.n	8003ea4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	781a      	ldrb	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1c9      	bne.n	8003e56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2140      	movs	r1, #64	@ 0x40
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fc89 	bl	80047e4 <UART_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d004      	beq.n	8003ee2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e005      	b.n	8003eee <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3720      	adds	r7, #32
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b08a      	sub	sp, #40	@ 0x28
 8003efa:	af02      	add	r7, sp, #8
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	f040 80b5 	bne.w	800407c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_UART_Receive+0x28>
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e0ad      	b.n	800407e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2222      	movs	r2, #34	@ 0x22
 8003f2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f38:	f7fd fb02 	bl	8001540 <HAL_GetTick>
 8003f3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	88fa      	ldrh	r2, [r7, #6]
 8003f42:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	88fa      	ldrh	r2, [r7, #6]
 8003f4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f56:	d10e      	bne.n	8003f76 <HAL_UART_Receive+0x80>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d105      	bne.n	8003f6c <HAL_UART_Receive+0x76>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003f66:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f6a:	e02d      	b.n	8003fc8 <HAL_UART_Receive+0xd2>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	22ff      	movs	r2, #255	@ 0xff
 8003f70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f74:	e028      	b.n	8003fc8 <HAL_UART_Receive+0xd2>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10d      	bne.n	8003f9a <HAL_UART_Receive+0xa4>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <HAL_UART_Receive+0x9a>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	22ff      	movs	r2, #255	@ 0xff
 8003f8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f8e:	e01b      	b.n	8003fc8 <HAL_UART_Receive+0xd2>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	227f      	movs	r2, #127	@ 0x7f
 8003f94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f98:	e016      	b.n	8003fc8 <HAL_UART_Receive+0xd2>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fa2:	d10d      	bne.n	8003fc0 <HAL_UART_Receive+0xca>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d104      	bne.n	8003fb6 <HAL_UART_Receive+0xc0>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	227f      	movs	r2, #127	@ 0x7f
 8003fb0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003fb4:	e008      	b.n	8003fc8 <HAL_UART_Receive+0xd2>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	223f      	movs	r2, #63	@ 0x3f
 8003fba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003fbe:	e003      	b.n	8003fc8 <HAL_UART_Receive+0xd2>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003fce:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fd8:	d108      	bne.n	8003fec <HAL_UART_Receive+0xf6>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	e003      	b.n	8003ff4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003ff4:	e036      	b.n	8004064 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2120      	movs	r1, #32
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 fbef 	bl	80047e4 <UART_WaitOnFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e032      	b.n	800407e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10c      	bne.n	8004038 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	b29a      	uxth	r2, r3
 8004026:	8a7b      	ldrh	r3, [r7, #18]
 8004028:	4013      	ands	r3, r2
 800402a:	b29a      	uxth	r2, r3
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	3302      	adds	r3, #2
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	e00c      	b.n	8004052 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403e:	b2da      	uxtb	r2, r3
 8004040:	8a7b      	ldrh	r3, [r7, #18]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	4013      	ands	r3, r2
 8004046:	b2da      	uxtb	r2, r3
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	3301      	adds	r3, #1
 8004050:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1c2      	bne.n	8003ff6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	e000      	b.n	800407e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800407c:	2302      	movs	r3, #2
  }
}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4ba6      	ldr	r3, [pc, #664]	@ (800434c <UART_SetConfig+0x2c4>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	6979      	ldr	r1, [r7, #20]
 80040bc:	430b      	orrs	r3, r1
 80040be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a94      	ldr	r2, [pc, #592]	@ (8004350 <UART_SetConfig+0x2c8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d120      	bne.n	8004146 <UART_SetConfig+0xbe>
 8004104:	4b93      	ldr	r3, [pc, #588]	@ (8004354 <UART_SetConfig+0x2cc>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b03      	cmp	r3, #3
 8004110:	d816      	bhi.n	8004140 <UART_SetConfig+0xb8>
 8004112:	a201      	add	r2, pc, #4	@ (adr r2, 8004118 <UART_SetConfig+0x90>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	08004129 	.word	0x08004129
 800411c:	08004135 	.word	0x08004135
 8004120:	0800412f 	.word	0x0800412f
 8004124:	0800413b 	.word	0x0800413b
 8004128:	2301      	movs	r3, #1
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e150      	b.n	80043d0 <UART_SetConfig+0x348>
 800412e:	2302      	movs	r3, #2
 8004130:	77fb      	strb	r3, [r7, #31]
 8004132:	e14d      	b.n	80043d0 <UART_SetConfig+0x348>
 8004134:	2304      	movs	r3, #4
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e14a      	b.n	80043d0 <UART_SetConfig+0x348>
 800413a:	2308      	movs	r3, #8
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	e147      	b.n	80043d0 <UART_SetConfig+0x348>
 8004140:	2310      	movs	r3, #16
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e144      	b.n	80043d0 <UART_SetConfig+0x348>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a83      	ldr	r2, [pc, #524]	@ (8004358 <UART_SetConfig+0x2d0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d132      	bne.n	80041b6 <UART_SetConfig+0x12e>
 8004150:	4b80      	ldr	r3, [pc, #512]	@ (8004354 <UART_SetConfig+0x2cc>)
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d828      	bhi.n	80041b0 <UART_SetConfig+0x128>
 800415e:	a201      	add	r2, pc, #4	@ (adr r2, 8004164 <UART_SetConfig+0xdc>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	08004199 	.word	0x08004199
 8004168:	080041b1 	.word	0x080041b1
 800416c:	080041b1 	.word	0x080041b1
 8004170:	080041b1 	.word	0x080041b1
 8004174:	080041a5 	.word	0x080041a5
 8004178:	080041b1 	.word	0x080041b1
 800417c:	080041b1 	.word	0x080041b1
 8004180:	080041b1 	.word	0x080041b1
 8004184:	0800419f 	.word	0x0800419f
 8004188:	080041b1 	.word	0x080041b1
 800418c:	080041b1 	.word	0x080041b1
 8004190:	080041b1 	.word	0x080041b1
 8004194:	080041ab 	.word	0x080041ab
 8004198:	2300      	movs	r3, #0
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e118      	b.n	80043d0 <UART_SetConfig+0x348>
 800419e:	2302      	movs	r3, #2
 80041a0:	77fb      	strb	r3, [r7, #31]
 80041a2:	e115      	b.n	80043d0 <UART_SetConfig+0x348>
 80041a4:	2304      	movs	r3, #4
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	e112      	b.n	80043d0 <UART_SetConfig+0x348>
 80041aa:	2308      	movs	r3, #8
 80041ac:	77fb      	strb	r3, [r7, #31]
 80041ae:	e10f      	b.n	80043d0 <UART_SetConfig+0x348>
 80041b0:	2310      	movs	r3, #16
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e10c      	b.n	80043d0 <UART_SetConfig+0x348>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a68      	ldr	r2, [pc, #416]	@ (800435c <UART_SetConfig+0x2d4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d120      	bne.n	8004202 <UART_SetConfig+0x17a>
 80041c0:	4b64      	ldr	r3, [pc, #400]	@ (8004354 <UART_SetConfig+0x2cc>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041ca:	2b30      	cmp	r3, #48	@ 0x30
 80041cc:	d013      	beq.n	80041f6 <UART_SetConfig+0x16e>
 80041ce:	2b30      	cmp	r3, #48	@ 0x30
 80041d0:	d814      	bhi.n	80041fc <UART_SetConfig+0x174>
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d009      	beq.n	80041ea <UART_SetConfig+0x162>
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d810      	bhi.n	80041fc <UART_SetConfig+0x174>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <UART_SetConfig+0x15c>
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d006      	beq.n	80041f0 <UART_SetConfig+0x168>
 80041e2:	e00b      	b.n	80041fc <UART_SetConfig+0x174>
 80041e4:	2300      	movs	r3, #0
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e0f2      	b.n	80043d0 <UART_SetConfig+0x348>
 80041ea:	2302      	movs	r3, #2
 80041ec:	77fb      	strb	r3, [r7, #31]
 80041ee:	e0ef      	b.n	80043d0 <UART_SetConfig+0x348>
 80041f0:	2304      	movs	r3, #4
 80041f2:	77fb      	strb	r3, [r7, #31]
 80041f4:	e0ec      	b.n	80043d0 <UART_SetConfig+0x348>
 80041f6:	2308      	movs	r3, #8
 80041f8:	77fb      	strb	r3, [r7, #31]
 80041fa:	e0e9      	b.n	80043d0 <UART_SetConfig+0x348>
 80041fc:	2310      	movs	r3, #16
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e0e6      	b.n	80043d0 <UART_SetConfig+0x348>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a56      	ldr	r2, [pc, #344]	@ (8004360 <UART_SetConfig+0x2d8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d120      	bne.n	800424e <UART_SetConfig+0x1c6>
 800420c:	4b51      	ldr	r3, [pc, #324]	@ (8004354 <UART_SetConfig+0x2cc>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004212:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004216:	2bc0      	cmp	r3, #192	@ 0xc0
 8004218:	d013      	beq.n	8004242 <UART_SetConfig+0x1ba>
 800421a:	2bc0      	cmp	r3, #192	@ 0xc0
 800421c:	d814      	bhi.n	8004248 <UART_SetConfig+0x1c0>
 800421e:	2b80      	cmp	r3, #128	@ 0x80
 8004220:	d009      	beq.n	8004236 <UART_SetConfig+0x1ae>
 8004222:	2b80      	cmp	r3, #128	@ 0x80
 8004224:	d810      	bhi.n	8004248 <UART_SetConfig+0x1c0>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <UART_SetConfig+0x1a8>
 800422a:	2b40      	cmp	r3, #64	@ 0x40
 800422c:	d006      	beq.n	800423c <UART_SetConfig+0x1b4>
 800422e:	e00b      	b.n	8004248 <UART_SetConfig+0x1c0>
 8004230:	2300      	movs	r3, #0
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e0cc      	b.n	80043d0 <UART_SetConfig+0x348>
 8004236:	2302      	movs	r3, #2
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e0c9      	b.n	80043d0 <UART_SetConfig+0x348>
 800423c:	2304      	movs	r3, #4
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e0c6      	b.n	80043d0 <UART_SetConfig+0x348>
 8004242:	2308      	movs	r3, #8
 8004244:	77fb      	strb	r3, [r7, #31]
 8004246:	e0c3      	b.n	80043d0 <UART_SetConfig+0x348>
 8004248:	2310      	movs	r3, #16
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e0c0      	b.n	80043d0 <UART_SetConfig+0x348>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a44      	ldr	r2, [pc, #272]	@ (8004364 <UART_SetConfig+0x2dc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d125      	bne.n	80042a4 <UART_SetConfig+0x21c>
 8004258:	4b3e      	ldr	r3, [pc, #248]	@ (8004354 <UART_SetConfig+0x2cc>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004266:	d017      	beq.n	8004298 <UART_SetConfig+0x210>
 8004268:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800426c:	d817      	bhi.n	800429e <UART_SetConfig+0x216>
 800426e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004272:	d00b      	beq.n	800428c <UART_SetConfig+0x204>
 8004274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004278:	d811      	bhi.n	800429e <UART_SetConfig+0x216>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <UART_SetConfig+0x1fe>
 800427e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004282:	d006      	beq.n	8004292 <UART_SetConfig+0x20a>
 8004284:	e00b      	b.n	800429e <UART_SetConfig+0x216>
 8004286:	2300      	movs	r3, #0
 8004288:	77fb      	strb	r3, [r7, #31]
 800428a:	e0a1      	b.n	80043d0 <UART_SetConfig+0x348>
 800428c:	2302      	movs	r3, #2
 800428e:	77fb      	strb	r3, [r7, #31]
 8004290:	e09e      	b.n	80043d0 <UART_SetConfig+0x348>
 8004292:	2304      	movs	r3, #4
 8004294:	77fb      	strb	r3, [r7, #31]
 8004296:	e09b      	b.n	80043d0 <UART_SetConfig+0x348>
 8004298:	2308      	movs	r3, #8
 800429a:	77fb      	strb	r3, [r7, #31]
 800429c:	e098      	b.n	80043d0 <UART_SetConfig+0x348>
 800429e:	2310      	movs	r3, #16
 80042a0:	77fb      	strb	r3, [r7, #31]
 80042a2:	e095      	b.n	80043d0 <UART_SetConfig+0x348>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a2f      	ldr	r2, [pc, #188]	@ (8004368 <UART_SetConfig+0x2e0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d125      	bne.n	80042fa <UART_SetConfig+0x272>
 80042ae:	4b29      	ldr	r3, [pc, #164]	@ (8004354 <UART_SetConfig+0x2cc>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042bc:	d017      	beq.n	80042ee <UART_SetConfig+0x266>
 80042be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042c2:	d817      	bhi.n	80042f4 <UART_SetConfig+0x26c>
 80042c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042c8:	d00b      	beq.n	80042e2 <UART_SetConfig+0x25a>
 80042ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042ce:	d811      	bhi.n	80042f4 <UART_SetConfig+0x26c>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <UART_SetConfig+0x254>
 80042d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042d8:	d006      	beq.n	80042e8 <UART_SetConfig+0x260>
 80042da:	e00b      	b.n	80042f4 <UART_SetConfig+0x26c>
 80042dc:	2301      	movs	r3, #1
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e076      	b.n	80043d0 <UART_SetConfig+0x348>
 80042e2:	2302      	movs	r3, #2
 80042e4:	77fb      	strb	r3, [r7, #31]
 80042e6:	e073      	b.n	80043d0 <UART_SetConfig+0x348>
 80042e8:	2304      	movs	r3, #4
 80042ea:	77fb      	strb	r3, [r7, #31]
 80042ec:	e070      	b.n	80043d0 <UART_SetConfig+0x348>
 80042ee:	2308      	movs	r3, #8
 80042f0:	77fb      	strb	r3, [r7, #31]
 80042f2:	e06d      	b.n	80043d0 <UART_SetConfig+0x348>
 80042f4:	2310      	movs	r3, #16
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e06a      	b.n	80043d0 <UART_SetConfig+0x348>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1b      	ldr	r2, [pc, #108]	@ (800436c <UART_SetConfig+0x2e4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d138      	bne.n	8004376 <UART_SetConfig+0x2ee>
 8004304:	4b13      	ldr	r3, [pc, #76]	@ (8004354 <UART_SetConfig+0x2cc>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800430a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800430e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004312:	d017      	beq.n	8004344 <UART_SetConfig+0x2bc>
 8004314:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004318:	d82a      	bhi.n	8004370 <UART_SetConfig+0x2e8>
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800431e:	d00b      	beq.n	8004338 <UART_SetConfig+0x2b0>
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004324:	d824      	bhi.n	8004370 <UART_SetConfig+0x2e8>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <UART_SetConfig+0x2aa>
 800432a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800432e:	d006      	beq.n	800433e <UART_SetConfig+0x2b6>
 8004330:	e01e      	b.n	8004370 <UART_SetConfig+0x2e8>
 8004332:	2300      	movs	r3, #0
 8004334:	77fb      	strb	r3, [r7, #31]
 8004336:	e04b      	b.n	80043d0 <UART_SetConfig+0x348>
 8004338:	2302      	movs	r3, #2
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e048      	b.n	80043d0 <UART_SetConfig+0x348>
 800433e:	2304      	movs	r3, #4
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e045      	b.n	80043d0 <UART_SetConfig+0x348>
 8004344:	2308      	movs	r3, #8
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e042      	b.n	80043d0 <UART_SetConfig+0x348>
 800434a:	bf00      	nop
 800434c:	efff69f3 	.word	0xefff69f3
 8004350:	40011000 	.word	0x40011000
 8004354:	40023800 	.word	0x40023800
 8004358:	40004400 	.word	0x40004400
 800435c:	40004800 	.word	0x40004800
 8004360:	40004c00 	.word	0x40004c00
 8004364:	40005000 	.word	0x40005000
 8004368:	40011400 	.word	0x40011400
 800436c:	40007800 	.word	0x40007800
 8004370:	2310      	movs	r3, #16
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e02c      	b.n	80043d0 <UART_SetConfig+0x348>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a72      	ldr	r2, [pc, #456]	@ (8004544 <UART_SetConfig+0x4bc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d125      	bne.n	80043cc <UART_SetConfig+0x344>
 8004380:	4b71      	ldr	r3, [pc, #452]	@ (8004548 <UART_SetConfig+0x4c0>)
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004386:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800438a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800438e:	d017      	beq.n	80043c0 <UART_SetConfig+0x338>
 8004390:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004394:	d817      	bhi.n	80043c6 <UART_SetConfig+0x33e>
 8004396:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800439a:	d00b      	beq.n	80043b4 <UART_SetConfig+0x32c>
 800439c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043a0:	d811      	bhi.n	80043c6 <UART_SetConfig+0x33e>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <UART_SetConfig+0x326>
 80043a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043aa:	d006      	beq.n	80043ba <UART_SetConfig+0x332>
 80043ac:	e00b      	b.n	80043c6 <UART_SetConfig+0x33e>
 80043ae:	2300      	movs	r3, #0
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e00d      	b.n	80043d0 <UART_SetConfig+0x348>
 80043b4:	2302      	movs	r3, #2
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e00a      	b.n	80043d0 <UART_SetConfig+0x348>
 80043ba:	2304      	movs	r3, #4
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e007      	b.n	80043d0 <UART_SetConfig+0x348>
 80043c0:	2308      	movs	r3, #8
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e004      	b.n	80043d0 <UART_SetConfig+0x348>
 80043c6:	2310      	movs	r3, #16
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e001      	b.n	80043d0 <UART_SetConfig+0x348>
 80043cc:	2310      	movs	r3, #16
 80043ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043d8:	d15b      	bne.n	8004492 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80043da:	7ffb      	ldrb	r3, [r7, #31]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d828      	bhi.n	8004432 <UART_SetConfig+0x3aa>
 80043e0:	a201      	add	r2, pc, #4	@ (adr r2, 80043e8 <UART_SetConfig+0x360>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	08004415 	.word	0x08004415
 80043f0:	0800441d 	.word	0x0800441d
 80043f4:	08004433 	.word	0x08004433
 80043f8:	08004423 	.word	0x08004423
 80043fc:	08004433 	.word	0x08004433
 8004400:	08004433 	.word	0x08004433
 8004404:	08004433 	.word	0x08004433
 8004408:	0800442b 	.word	0x0800442b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800440c:	f7fe f86a 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8004410:	61b8      	str	r0, [r7, #24]
        break;
 8004412:	e013      	b.n	800443c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004414:	f7fe f87a 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 8004418:	61b8      	str	r0, [r7, #24]
        break;
 800441a:	e00f      	b.n	800443c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800441c:	4b4b      	ldr	r3, [pc, #300]	@ (800454c <UART_SetConfig+0x4c4>)
 800441e:	61bb      	str	r3, [r7, #24]
        break;
 8004420:	e00c      	b.n	800443c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004422:	f7fd ff8d 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 8004426:	61b8      	str	r0, [r7, #24]
        break;
 8004428:	e008      	b.n	800443c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800442a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800442e:	61bb      	str	r3, [r7, #24]
        break;
 8004430:	e004      	b.n	800443c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	77bb      	strb	r3, [r7, #30]
        break;
 800443a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d074      	beq.n	800452c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	005a      	lsls	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	085b      	lsrs	r3, r3, #1
 800444c:	441a      	add	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	fbb2 f3f3 	udiv	r3, r2, r3
 8004456:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b0f      	cmp	r3, #15
 800445c:	d916      	bls.n	800448c <UART_SetConfig+0x404>
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004464:	d212      	bcs.n	800448c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	b29b      	uxth	r3, r3
 800446a:	f023 030f 	bic.w	r3, r3, #15
 800446e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	b29b      	uxth	r3, r3
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	b29a      	uxth	r2, r3
 800447c:	89fb      	ldrh	r3, [r7, #14]
 800447e:	4313      	orrs	r3, r2
 8004480:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	89fa      	ldrh	r2, [r7, #14]
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	e04f      	b.n	800452c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	77bb      	strb	r3, [r7, #30]
 8004490:	e04c      	b.n	800452c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004492:	7ffb      	ldrb	r3, [r7, #31]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d828      	bhi.n	80044ea <UART_SetConfig+0x462>
 8004498:	a201      	add	r2, pc, #4	@ (adr r2, 80044a0 <UART_SetConfig+0x418>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044c5 	.word	0x080044c5
 80044a4:	080044cd 	.word	0x080044cd
 80044a8:	080044d5 	.word	0x080044d5
 80044ac:	080044eb 	.word	0x080044eb
 80044b0:	080044db 	.word	0x080044db
 80044b4:	080044eb 	.word	0x080044eb
 80044b8:	080044eb 	.word	0x080044eb
 80044bc:	080044eb 	.word	0x080044eb
 80044c0:	080044e3 	.word	0x080044e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c4:	f7fe f80e 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 80044c8:	61b8      	str	r0, [r7, #24]
        break;
 80044ca:	e013      	b.n	80044f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7fe f81e 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 80044d0:	61b8      	str	r0, [r7, #24]
        break;
 80044d2:	e00f      	b.n	80044f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d4:	4b1d      	ldr	r3, [pc, #116]	@ (800454c <UART_SetConfig+0x4c4>)
 80044d6:	61bb      	str	r3, [r7, #24]
        break;
 80044d8:	e00c      	b.n	80044f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044da:	f7fd ff31 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80044de:	61b8      	str	r0, [r7, #24]
        break;
 80044e0:	e008      	b.n	80044f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044e6:	61bb      	str	r3, [r7, #24]
        break;
 80044e8:	e004      	b.n	80044f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	77bb      	strb	r3, [r7, #30]
        break;
 80044f2:	bf00      	nop
    }

    if (pclk != 0U)
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d018      	beq.n	800452c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	085a      	lsrs	r2, r3, #1
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	441a      	add	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	fbb2 f3f3 	udiv	r3, r2, r3
 800450c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b0f      	cmp	r3, #15
 8004512:	d909      	bls.n	8004528 <UART_SetConfig+0x4a0>
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800451a:	d205      	bcs.n	8004528 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	b29a      	uxth	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	e001      	b.n	800452c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004538:	7fbb      	ldrb	r3, [r7, #30]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40007c00 	.word	0x40007c00
 8004548:	40023800 	.word	0x40023800
 800454c:	00f42400 	.word	0x00f42400

08004550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01a      	beq.n	8004666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800464e:	d10a      	bne.n	8004666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	605a      	str	r2, [r3, #4]
  }
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b098      	sub	sp, #96	@ 0x60
 8004698:	af02      	add	r7, sp, #8
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046a4:	f7fc ff4c 	bl	8001540 <HAL_GetTick>
 80046a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d12e      	bne.n	8004716 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c0:	2200      	movs	r2, #0
 80046c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f88c 	bl	80047e4 <UART_WaitOnFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d021      	beq.n	8004716 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046da:	e853 3f00 	ldrex	r3, [r3]
 80046de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e6      	bne.n	80046d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e062      	b.n	80047dc <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b04      	cmp	r3, #4
 8004722:	d149      	bne.n	80047b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004724:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800472c:	2200      	movs	r2, #0
 800472e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f856 	bl	80047e4 <UART_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d03c      	beq.n	80047b8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	623b      	str	r3, [r7, #32]
   return(result);
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800475c:	633b      	str	r3, [r7, #48]	@ 0x30
 800475e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e6      	bne.n	800473e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3308      	adds	r3, #8
 8004776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3308      	adds	r3, #8
 800478e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004790:	61fa      	str	r2, [r7, #28]
 8004792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	69b9      	ldr	r1, [r7, #24]
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	617b      	str	r3, [r7, #20]
   return(result);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e5      	bne.n	8004770 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e011      	b.n	80047dc <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3758      	adds	r7, #88	@ 0x58
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f4:	e04f      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d04b      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fe:	f7fc fe9f 	bl	8001540 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <UART_WaitOnFlagUntilTimeout+0x30>
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e04e      	b.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d037      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b80      	cmp	r3, #128	@ 0x80
 800482a:	d034      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0xb2>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b40      	cmp	r3, #64	@ 0x40
 8004830:	d031      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b08      	cmp	r3, #8
 800483e:	d110      	bne.n	8004862 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2208      	movs	r2, #8
 8004846:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f838 	bl	80048be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2208      	movs	r2, #8
 8004852:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e029      	b.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800486c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004870:	d111      	bne.n	8004896 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800487a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f81e 	bl	80048be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e00f      	b.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4013      	ands	r3, r2
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d0a0      	beq.n	80047f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048be:	b480      	push	{r7}
 80048c0:	b095      	sub	sp, #84	@ 0x54
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80048e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e6      	bne.n	80048c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3308      	adds	r3, #8
 80048fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	61fb      	str	r3, [r7, #28]
   return(result);
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3308      	adds	r3, #8
 8004916:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004918:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800491a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800491e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e5      	bne.n	80048f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004930:	2b01      	cmp	r3, #1
 8004932:	d118      	bne.n	8004966 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	60bb      	str	r3, [r7, #8]
   return(result);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f023 0310 	bic.w	r3, r3, #16
 8004948:	647b      	str	r3, [r7, #68]	@ 0x44
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6979      	ldr	r1, [r7, #20]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	613b      	str	r3, [r7, #16]
   return(result);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e6      	bne.n	8004934 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800497a:	bf00      	nop
 800497c:	3754      	adds	r7, #84	@ 0x54
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <__cvt>:
 8004986:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004988:	ed2d 8b02 	vpush	{d8}
 800498c:	eeb0 8b40 	vmov.f64	d8, d0
 8004990:	b085      	sub	sp, #20
 8004992:	4617      	mov	r7, r2
 8004994:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004996:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004998:	ee18 2a90 	vmov	r2, s17
 800499c:	f025 0520 	bic.w	r5, r5, #32
 80049a0:	2a00      	cmp	r2, #0
 80049a2:	bfb6      	itet	lt
 80049a4:	222d      	movlt	r2, #45	@ 0x2d
 80049a6:	2200      	movge	r2, #0
 80049a8:	eeb1 8b40 	vneglt.f64	d8, d0
 80049ac:	2d46      	cmp	r5, #70	@ 0x46
 80049ae:	460c      	mov	r4, r1
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	d004      	beq.n	80049be <__cvt+0x38>
 80049b4:	2d45      	cmp	r5, #69	@ 0x45
 80049b6:	d100      	bne.n	80049ba <__cvt+0x34>
 80049b8:	3401      	adds	r4, #1
 80049ba:	2102      	movs	r1, #2
 80049bc:	e000      	b.n	80049c0 <__cvt+0x3a>
 80049be:	2103      	movs	r1, #3
 80049c0:	ab03      	add	r3, sp, #12
 80049c2:	9301      	str	r3, [sp, #4]
 80049c4:	ab02      	add	r3, sp, #8
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	4622      	mov	r2, r4
 80049ca:	4633      	mov	r3, r6
 80049cc:	eeb0 0b48 	vmov.f64	d0, d8
 80049d0:	f001 f84e 	bl	8005a70 <_dtoa_r>
 80049d4:	2d47      	cmp	r5, #71	@ 0x47
 80049d6:	d114      	bne.n	8004a02 <__cvt+0x7c>
 80049d8:	07fb      	lsls	r3, r7, #31
 80049da:	d50a      	bpl.n	80049f2 <__cvt+0x6c>
 80049dc:	1902      	adds	r2, r0, r4
 80049de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80049e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e6:	bf08      	it	eq
 80049e8:	9203      	streq	r2, [sp, #12]
 80049ea:	2130      	movs	r1, #48	@ 0x30
 80049ec:	9b03      	ldr	r3, [sp, #12]
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d319      	bcc.n	8004a26 <__cvt+0xa0>
 80049f2:	9b03      	ldr	r3, [sp, #12]
 80049f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80049f6:	1a1b      	subs	r3, r3, r0
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	b005      	add	sp, #20
 80049fc:	ecbd 8b02 	vpop	{d8}
 8004a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a02:	2d46      	cmp	r5, #70	@ 0x46
 8004a04:	eb00 0204 	add.w	r2, r0, r4
 8004a08:	d1e9      	bne.n	80049de <__cvt+0x58>
 8004a0a:	7803      	ldrb	r3, [r0, #0]
 8004a0c:	2b30      	cmp	r3, #48	@ 0x30
 8004a0e:	d107      	bne.n	8004a20 <__cvt+0x9a>
 8004a10:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a18:	bf1c      	itt	ne
 8004a1a:	f1c4 0401 	rsbne	r4, r4, #1
 8004a1e:	6034      	strne	r4, [r6, #0]
 8004a20:	6833      	ldr	r3, [r6, #0]
 8004a22:	441a      	add	r2, r3
 8004a24:	e7db      	b.n	80049de <__cvt+0x58>
 8004a26:	1c5c      	adds	r4, r3, #1
 8004a28:	9403      	str	r4, [sp, #12]
 8004a2a:	7019      	strb	r1, [r3, #0]
 8004a2c:	e7de      	b.n	80049ec <__cvt+0x66>

08004a2e <__exponent>:
 8004a2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a30:	2900      	cmp	r1, #0
 8004a32:	bfba      	itte	lt
 8004a34:	4249      	neglt	r1, r1
 8004a36:	232d      	movlt	r3, #45	@ 0x2d
 8004a38:	232b      	movge	r3, #43	@ 0x2b
 8004a3a:	2909      	cmp	r1, #9
 8004a3c:	7002      	strb	r2, [r0, #0]
 8004a3e:	7043      	strb	r3, [r0, #1]
 8004a40:	dd29      	ble.n	8004a96 <__exponent+0x68>
 8004a42:	f10d 0307 	add.w	r3, sp, #7
 8004a46:	461d      	mov	r5, r3
 8004a48:	270a      	movs	r7, #10
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a50:	fb07 1416 	mls	r4, r7, r6, r1
 8004a54:	3430      	adds	r4, #48	@ 0x30
 8004a56:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	2c63      	cmp	r4, #99	@ 0x63
 8004a5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a62:	4631      	mov	r1, r6
 8004a64:	dcf1      	bgt.n	8004a4a <__exponent+0x1c>
 8004a66:	3130      	adds	r1, #48	@ 0x30
 8004a68:	1e94      	subs	r4, r2, #2
 8004a6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a6e:	1c41      	adds	r1, r0, #1
 8004a70:	4623      	mov	r3, r4
 8004a72:	42ab      	cmp	r3, r5
 8004a74:	d30a      	bcc.n	8004a8c <__exponent+0x5e>
 8004a76:	f10d 0309 	add.w	r3, sp, #9
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	42ac      	cmp	r4, r5
 8004a7e:	bf88      	it	hi
 8004a80:	2300      	movhi	r3, #0
 8004a82:	3302      	adds	r3, #2
 8004a84:	4403      	add	r3, r0
 8004a86:	1a18      	subs	r0, r3, r0
 8004a88:	b003      	add	sp, #12
 8004a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a90:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a94:	e7ed      	b.n	8004a72 <__exponent+0x44>
 8004a96:	2330      	movs	r3, #48	@ 0x30
 8004a98:	3130      	adds	r1, #48	@ 0x30
 8004a9a:	7083      	strb	r3, [r0, #2]
 8004a9c:	70c1      	strb	r1, [r0, #3]
 8004a9e:	1d03      	adds	r3, r0, #4
 8004aa0:	e7f1      	b.n	8004a86 <__exponent+0x58>
 8004aa2:	0000      	movs	r0, r0
 8004aa4:	0000      	movs	r0, r0
	...

08004aa8 <_printf_float>:
 8004aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aac:	b08d      	sub	sp, #52	@ 0x34
 8004aae:	460c      	mov	r4, r1
 8004ab0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ab4:	4616      	mov	r6, r2
 8004ab6:	461f      	mov	r7, r3
 8004ab8:	4605      	mov	r5, r0
 8004aba:	f000 fed1 	bl	8005860 <_localeconv_r>
 8004abe:	f8d0 b000 	ldr.w	fp, [r0]
 8004ac2:	4658      	mov	r0, fp
 8004ac4:	f7fb fc0c 	bl	80002e0 <strlen>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	930a      	str	r3, [sp, #40]	@ 0x28
 8004acc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004ad4:	6822      	ldr	r2, [r4, #0]
 8004ad6:	9005      	str	r0, [sp, #20]
 8004ad8:	3307      	adds	r3, #7
 8004ada:	f023 0307 	bic.w	r3, r3, #7
 8004ade:	f103 0108 	add.w	r1, r3, #8
 8004ae2:	f8c8 1000 	str.w	r1, [r8]
 8004ae6:	ed93 0b00 	vldr	d0, [r3]
 8004aea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8004d48 <_printf_float+0x2a0>
 8004aee:	eeb0 7bc0 	vabs.f64	d7, d0
 8004af2:	eeb4 7b46 	vcmp.f64	d7, d6
 8004af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8004afe:	dd24      	ble.n	8004b4a <_printf_float+0xa2>
 8004b00:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b08:	d502      	bpl.n	8004b10 <_printf_float+0x68>
 8004b0a:	232d      	movs	r3, #45	@ 0x2d
 8004b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b10:	498f      	ldr	r1, [pc, #572]	@ (8004d50 <_printf_float+0x2a8>)
 8004b12:	4b90      	ldr	r3, [pc, #576]	@ (8004d54 <_printf_float+0x2ac>)
 8004b14:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004b18:	bf8c      	ite	hi
 8004b1a:	4688      	movhi	r8, r1
 8004b1c:	4698      	movls	r8, r3
 8004b1e:	f022 0204 	bic.w	r2, r2, #4
 8004b22:	2303      	movs	r3, #3
 8004b24:	6123      	str	r3, [r4, #16]
 8004b26:	6022      	str	r2, [r4, #0]
 8004b28:	f04f 0a00 	mov.w	sl, #0
 8004b2c:	9700      	str	r7, [sp, #0]
 8004b2e:	4633      	mov	r3, r6
 8004b30:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004b32:	4621      	mov	r1, r4
 8004b34:	4628      	mov	r0, r5
 8004b36:	f000 f9d1 	bl	8004edc <_printf_common>
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	f040 8089 	bne.w	8004c52 <_printf_float+0x1aa>
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295
 8004b44:	b00d      	add	sp, #52	@ 0x34
 8004b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4a:	eeb4 0b40 	vcmp.f64	d0, d0
 8004b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b52:	d709      	bvc.n	8004b68 <_printf_float+0xc0>
 8004b54:	ee10 3a90 	vmov	r3, s1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bfbc      	itt	lt
 8004b5c:	232d      	movlt	r3, #45	@ 0x2d
 8004b5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b62:	497d      	ldr	r1, [pc, #500]	@ (8004d58 <_printf_float+0x2b0>)
 8004b64:	4b7d      	ldr	r3, [pc, #500]	@ (8004d5c <_printf_float+0x2b4>)
 8004b66:	e7d5      	b.n	8004b14 <_printf_float+0x6c>
 8004b68:	6863      	ldr	r3, [r4, #4]
 8004b6a:	1c59      	adds	r1, r3, #1
 8004b6c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8004b70:	d139      	bne.n	8004be6 <_printf_float+0x13e>
 8004b72:	2306      	movs	r3, #6
 8004b74:	6063      	str	r3, [r4, #4]
 8004b76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	6022      	str	r2, [r4, #0]
 8004b7e:	9303      	str	r3, [sp, #12]
 8004b80:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b82:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004b86:	ab09      	add	r3, sp, #36	@ 0x24
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	6861      	ldr	r1, [r4, #4]
 8004b8c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004b90:	4628      	mov	r0, r5
 8004b92:	f7ff fef8 	bl	8004986 <__cvt>
 8004b96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b9c:	4680      	mov	r8, r0
 8004b9e:	d129      	bne.n	8004bf4 <_printf_float+0x14c>
 8004ba0:	1cc8      	adds	r0, r1, #3
 8004ba2:	db02      	blt.n	8004baa <_printf_float+0x102>
 8004ba4:	6863      	ldr	r3, [r4, #4]
 8004ba6:	4299      	cmp	r1, r3
 8004ba8:	dd41      	ble.n	8004c2e <_printf_float+0x186>
 8004baa:	f1a9 0902 	sub.w	r9, r9, #2
 8004bae:	fa5f f989 	uxtb.w	r9, r9
 8004bb2:	3901      	subs	r1, #1
 8004bb4:	464a      	mov	r2, r9
 8004bb6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004bba:	9109      	str	r1, [sp, #36]	@ 0x24
 8004bbc:	f7ff ff37 	bl	8004a2e <__exponent>
 8004bc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004bc2:	1813      	adds	r3, r2, r0
 8004bc4:	2a01      	cmp	r2, #1
 8004bc6:	4682      	mov	sl, r0
 8004bc8:	6123      	str	r3, [r4, #16]
 8004bca:	dc02      	bgt.n	8004bd2 <_printf_float+0x12a>
 8004bcc:	6822      	ldr	r2, [r4, #0]
 8004bce:	07d2      	lsls	r2, r2, #31
 8004bd0:	d501      	bpl.n	8004bd6 <_printf_float+0x12e>
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	6123      	str	r3, [r4, #16]
 8004bd6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0a6      	beq.n	8004b2c <_printf_float+0x84>
 8004bde:	232d      	movs	r3, #45	@ 0x2d
 8004be0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004be4:	e7a2      	b.n	8004b2c <_printf_float+0x84>
 8004be6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004bea:	d1c4      	bne.n	8004b76 <_printf_float+0xce>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1c2      	bne.n	8004b76 <_printf_float+0xce>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e7bf      	b.n	8004b74 <_printf_float+0xcc>
 8004bf4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004bf8:	d9db      	bls.n	8004bb2 <_printf_float+0x10a>
 8004bfa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8004bfe:	d118      	bne.n	8004c32 <_printf_float+0x18a>
 8004c00:	2900      	cmp	r1, #0
 8004c02:	6863      	ldr	r3, [r4, #4]
 8004c04:	dd0b      	ble.n	8004c1e <_printf_float+0x176>
 8004c06:	6121      	str	r1, [r4, #16]
 8004c08:	b913      	cbnz	r3, 8004c10 <_printf_float+0x168>
 8004c0a:	6822      	ldr	r2, [r4, #0]
 8004c0c:	07d0      	lsls	r0, r2, #31
 8004c0e:	d502      	bpl.n	8004c16 <_printf_float+0x16e>
 8004c10:	3301      	adds	r3, #1
 8004c12:	440b      	add	r3, r1
 8004c14:	6123      	str	r3, [r4, #16]
 8004c16:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c18:	f04f 0a00 	mov.w	sl, #0
 8004c1c:	e7db      	b.n	8004bd6 <_printf_float+0x12e>
 8004c1e:	b913      	cbnz	r3, 8004c26 <_printf_float+0x17e>
 8004c20:	6822      	ldr	r2, [r4, #0]
 8004c22:	07d2      	lsls	r2, r2, #31
 8004c24:	d501      	bpl.n	8004c2a <_printf_float+0x182>
 8004c26:	3302      	adds	r3, #2
 8004c28:	e7f4      	b.n	8004c14 <_printf_float+0x16c>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e7f2      	b.n	8004c14 <_printf_float+0x16c>
 8004c2e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8004c32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c34:	4299      	cmp	r1, r3
 8004c36:	db05      	blt.n	8004c44 <_printf_float+0x19c>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	6121      	str	r1, [r4, #16]
 8004c3c:	07d8      	lsls	r0, r3, #31
 8004c3e:	d5ea      	bpl.n	8004c16 <_printf_float+0x16e>
 8004c40:	1c4b      	adds	r3, r1, #1
 8004c42:	e7e7      	b.n	8004c14 <_printf_float+0x16c>
 8004c44:	2900      	cmp	r1, #0
 8004c46:	bfd4      	ite	le
 8004c48:	f1c1 0202 	rsble	r2, r1, #2
 8004c4c:	2201      	movgt	r2, #1
 8004c4e:	4413      	add	r3, r2
 8004c50:	e7e0      	b.n	8004c14 <_printf_float+0x16c>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	055a      	lsls	r2, r3, #21
 8004c56:	d407      	bmi.n	8004c68 <_printf_float+0x1c0>
 8004c58:	6923      	ldr	r3, [r4, #16]
 8004c5a:	4642      	mov	r2, r8
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	4628      	mov	r0, r5
 8004c60:	47b8      	blx	r7
 8004c62:	3001      	adds	r0, #1
 8004c64:	d12a      	bne.n	8004cbc <_printf_float+0x214>
 8004c66:	e76b      	b.n	8004b40 <_printf_float+0x98>
 8004c68:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004c6c:	f240 80e0 	bls.w	8004e30 <_printf_float+0x388>
 8004c70:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004c74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7c:	d133      	bne.n	8004ce6 <_printf_float+0x23e>
 8004c7e:	4a38      	ldr	r2, [pc, #224]	@ (8004d60 <_printf_float+0x2b8>)
 8004c80:	2301      	movs	r3, #1
 8004c82:	4631      	mov	r1, r6
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b8      	blx	r7
 8004c88:	3001      	adds	r0, #1
 8004c8a:	f43f af59 	beq.w	8004b40 <_printf_float+0x98>
 8004c8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004c92:	4543      	cmp	r3, r8
 8004c94:	db02      	blt.n	8004c9c <_printf_float+0x1f4>
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	07d8      	lsls	r0, r3, #31
 8004c9a:	d50f      	bpl.n	8004cbc <_printf_float+0x214>
 8004c9c:	9b05      	ldr	r3, [sp, #20]
 8004c9e:	465a      	mov	r2, fp
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	f43f af4a 	beq.w	8004b40 <_printf_float+0x98>
 8004cac:	f04f 0900 	mov.w	r9, #0
 8004cb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8004cb4:	f104 0a1a 	add.w	sl, r4, #26
 8004cb8:	45c8      	cmp	r8, r9
 8004cba:	dc09      	bgt.n	8004cd0 <_printf_float+0x228>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	079b      	lsls	r3, r3, #30
 8004cc0:	f100 8107 	bmi.w	8004ed2 <_printf_float+0x42a>
 8004cc4:	68e0      	ldr	r0, [r4, #12]
 8004cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cc8:	4298      	cmp	r0, r3
 8004cca:	bfb8      	it	lt
 8004ccc:	4618      	movlt	r0, r3
 8004cce:	e739      	b.n	8004b44 <_printf_float+0x9c>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4652      	mov	r2, sl
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	47b8      	blx	r7
 8004cda:	3001      	adds	r0, #1
 8004cdc:	f43f af30 	beq.w	8004b40 <_printf_float+0x98>
 8004ce0:	f109 0901 	add.w	r9, r9, #1
 8004ce4:	e7e8      	b.n	8004cb8 <_printf_float+0x210>
 8004ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	dc3b      	bgt.n	8004d64 <_printf_float+0x2bc>
 8004cec:	4a1c      	ldr	r2, [pc, #112]	@ (8004d60 <_printf_float+0x2b8>)
 8004cee:	2301      	movs	r3, #1
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	47b8      	blx	r7
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	f43f af22 	beq.w	8004b40 <_printf_float+0x98>
 8004cfc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004d00:	ea59 0303 	orrs.w	r3, r9, r3
 8004d04:	d102      	bne.n	8004d0c <_printf_float+0x264>
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	07d9      	lsls	r1, r3, #31
 8004d0a:	d5d7      	bpl.n	8004cbc <_printf_float+0x214>
 8004d0c:	9b05      	ldr	r3, [sp, #20]
 8004d0e:	465a      	mov	r2, fp
 8004d10:	4631      	mov	r1, r6
 8004d12:	4628      	mov	r0, r5
 8004d14:	47b8      	blx	r7
 8004d16:	3001      	adds	r0, #1
 8004d18:	f43f af12 	beq.w	8004b40 <_printf_float+0x98>
 8004d1c:	f04f 0a00 	mov.w	sl, #0
 8004d20:	f104 0b1a 	add.w	fp, r4, #26
 8004d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d26:	425b      	negs	r3, r3
 8004d28:	4553      	cmp	r3, sl
 8004d2a:	dc01      	bgt.n	8004d30 <_printf_float+0x288>
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	e794      	b.n	8004c5a <_printf_float+0x1b2>
 8004d30:	2301      	movs	r3, #1
 8004d32:	465a      	mov	r2, fp
 8004d34:	4631      	mov	r1, r6
 8004d36:	4628      	mov	r0, r5
 8004d38:	47b8      	blx	r7
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	f43f af00 	beq.w	8004b40 <_printf_float+0x98>
 8004d40:	f10a 0a01 	add.w	sl, sl, #1
 8004d44:	e7ee      	b.n	8004d24 <_printf_float+0x27c>
 8004d46:	bf00      	nop
 8004d48:	ffffffff 	.word	0xffffffff
 8004d4c:	7fefffff 	.word	0x7fefffff
 8004d50:	08008edc 	.word	0x08008edc
 8004d54:	08008ed8 	.word	0x08008ed8
 8004d58:	08008ee4 	.word	0x08008ee4
 8004d5c:	08008ee0 	.word	0x08008ee0
 8004d60:	08008ee8 	.word	0x08008ee8
 8004d64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d6a:	4553      	cmp	r3, sl
 8004d6c:	bfa8      	it	ge
 8004d6e:	4653      	movge	r3, sl
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	4699      	mov	r9, r3
 8004d74:	dc37      	bgt.n	8004de6 <_printf_float+0x33e>
 8004d76:	2300      	movs	r3, #0
 8004d78:	9307      	str	r3, [sp, #28]
 8004d7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d7e:	f104 021a 	add.w	r2, r4, #26
 8004d82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d84:	9907      	ldr	r1, [sp, #28]
 8004d86:	9306      	str	r3, [sp, #24]
 8004d88:	eba3 0309 	sub.w	r3, r3, r9
 8004d8c:	428b      	cmp	r3, r1
 8004d8e:	dc31      	bgt.n	8004df4 <_printf_float+0x34c>
 8004d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d92:	459a      	cmp	sl, r3
 8004d94:	dc3b      	bgt.n	8004e0e <_printf_float+0x366>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	07da      	lsls	r2, r3, #31
 8004d9a:	d438      	bmi.n	8004e0e <_printf_float+0x366>
 8004d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d9e:	ebaa 0903 	sub.w	r9, sl, r3
 8004da2:	9b06      	ldr	r3, [sp, #24]
 8004da4:	ebaa 0303 	sub.w	r3, sl, r3
 8004da8:	4599      	cmp	r9, r3
 8004daa:	bfa8      	it	ge
 8004dac:	4699      	movge	r9, r3
 8004dae:	f1b9 0f00 	cmp.w	r9, #0
 8004db2:	dc34      	bgt.n	8004e1e <_printf_float+0x376>
 8004db4:	f04f 0800 	mov.w	r8, #0
 8004db8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dbc:	f104 0b1a 	add.w	fp, r4, #26
 8004dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dc2:	ebaa 0303 	sub.w	r3, sl, r3
 8004dc6:	eba3 0309 	sub.w	r3, r3, r9
 8004dca:	4543      	cmp	r3, r8
 8004dcc:	f77f af76 	ble.w	8004cbc <_printf_float+0x214>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	465a      	mov	r2, fp
 8004dd4:	4631      	mov	r1, r6
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f43f aeb0 	beq.w	8004b40 <_printf_float+0x98>
 8004de0:	f108 0801 	add.w	r8, r8, #1
 8004de4:	e7ec      	b.n	8004dc0 <_printf_float+0x318>
 8004de6:	4642      	mov	r2, r8
 8004de8:	4631      	mov	r1, r6
 8004dea:	4628      	mov	r0, r5
 8004dec:	47b8      	blx	r7
 8004dee:	3001      	adds	r0, #1
 8004df0:	d1c1      	bne.n	8004d76 <_printf_float+0x2ce>
 8004df2:	e6a5      	b.n	8004b40 <_printf_float+0x98>
 8004df4:	2301      	movs	r3, #1
 8004df6:	4631      	mov	r1, r6
 8004df8:	4628      	mov	r0, r5
 8004dfa:	9206      	str	r2, [sp, #24]
 8004dfc:	47b8      	blx	r7
 8004dfe:	3001      	adds	r0, #1
 8004e00:	f43f ae9e 	beq.w	8004b40 <_printf_float+0x98>
 8004e04:	9b07      	ldr	r3, [sp, #28]
 8004e06:	9a06      	ldr	r2, [sp, #24]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	9307      	str	r3, [sp, #28]
 8004e0c:	e7b9      	b.n	8004d82 <_printf_float+0x2da>
 8004e0e:	9b05      	ldr	r3, [sp, #20]
 8004e10:	465a      	mov	r2, fp
 8004e12:	4631      	mov	r1, r6
 8004e14:	4628      	mov	r0, r5
 8004e16:	47b8      	blx	r7
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d1bf      	bne.n	8004d9c <_printf_float+0x2f4>
 8004e1c:	e690      	b.n	8004b40 <_printf_float+0x98>
 8004e1e:	9a06      	ldr	r2, [sp, #24]
 8004e20:	464b      	mov	r3, r9
 8004e22:	4442      	add	r2, r8
 8004e24:	4631      	mov	r1, r6
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b8      	blx	r7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d1c2      	bne.n	8004db4 <_printf_float+0x30c>
 8004e2e:	e687      	b.n	8004b40 <_printf_float+0x98>
 8004e30:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8004e34:	f1b9 0f01 	cmp.w	r9, #1
 8004e38:	dc01      	bgt.n	8004e3e <_printf_float+0x396>
 8004e3a:	07db      	lsls	r3, r3, #31
 8004e3c:	d536      	bpl.n	8004eac <_printf_float+0x404>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4642      	mov	r2, r8
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f ae79 	beq.w	8004b40 <_printf_float+0x98>
 8004e4e:	9b05      	ldr	r3, [sp, #20]
 8004e50:	465a      	mov	r2, fp
 8004e52:	4631      	mov	r1, r6
 8004e54:	4628      	mov	r0, r5
 8004e56:	47b8      	blx	r7
 8004e58:	3001      	adds	r0, #1
 8004e5a:	f43f ae71 	beq.w	8004b40 <_printf_float+0x98>
 8004e5e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004e62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6a:	f109 39ff 	add.w	r9, r9, #4294967295
 8004e6e:	d018      	beq.n	8004ea2 <_printf_float+0x3fa>
 8004e70:	464b      	mov	r3, r9
 8004e72:	f108 0201 	add.w	r2, r8, #1
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d10c      	bne.n	8004e9a <_printf_float+0x3f2>
 8004e80:	e65e      	b.n	8004b40 <_printf_float+0x98>
 8004e82:	2301      	movs	r3, #1
 8004e84:	465a      	mov	r2, fp
 8004e86:	4631      	mov	r1, r6
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b8      	blx	r7
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	f43f ae57 	beq.w	8004b40 <_printf_float+0x98>
 8004e92:	f108 0801 	add.w	r8, r8, #1
 8004e96:	45c8      	cmp	r8, r9
 8004e98:	dbf3      	blt.n	8004e82 <_printf_float+0x3da>
 8004e9a:	4653      	mov	r3, sl
 8004e9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ea0:	e6dc      	b.n	8004c5c <_printf_float+0x1b4>
 8004ea2:	f04f 0800 	mov.w	r8, #0
 8004ea6:	f104 0b1a 	add.w	fp, r4, #26
 8004eaa:	e7f4      	b.n	8004e96 <_printf_float+0x3ee>
 8004eac:	2301      	movs	r3, #1
 8004eae:	4642      	mov	r2, r8
 8004eb0:	e7e1      	b.n	8004e76 <_printf_float+0x3ce>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	464a      	mov	r2, r9
 8004eb6:	4631      	mov	r1, r6
 8004eb8:	4628      	mov	r0, r5
 8004eba:	47b8      	blx	r7
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	f43f ae3f 	beq.w	8004b40 <_printf_float+0x98>
 8004ec2:	f108 0801 	add.w	r8, r8, #1
 8004ec6:	68e3      	ldr	r3, [r4, #12]
 8004ec8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004eca:	1a5b      	subs	r3, r3, r1
 8004ecc:	4543      	cmp	r3, r8
 8004ece:	dcf0      	bgt.n	8004eb2 <_printf_float+0x40a>
 8004ed0:	e6f8      	b.n	8004cc4 <_printf_float+0x21c>
 8004ed2:	f04f 0800 	mov.w	r8, #0
 8004ed6:	f104 0919 	add.w	r9, r4, #25
 8004eda:	e7f4      	b.n	8004ec6 <_printf_float+0x41e>

08004edc <_printf_common>:
 8004edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee0:	4616      	mov	r6, r2
 8004ee2:	4698      	mov	r8, r3
 8004ee4:	688a      	ldr	r2, [r1, #8]
 8004ee6:	690b      	ldr	r3, [r1, #16]
 8004ee8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004eec:	4293      	cmp	r3, r2
 8004eee:	bfb8      	it	lt
 8004ef0:	4613      	movlt	r3, r2
 8004ef2:	6033      	str	r3, [r6, #0]
 8004ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ef8:	4607      	mov	r7, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	b10a      	cbz	r2, 8004f02 <_printf_common+0x26>
 8004efe:	3301      	adds	r3, #1
 8004f00:	6033      	str	r3, [r6, #0]
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	0699      	lsls	r1, r3, #26
 8004f06:	bf42      	ittt	mi
 8004f08:	6833      	ldrmi	r3, [r6, #0]
 8004f0a:	3302      	addmi	r3, #2
 8004f0c:	6033      	strmi	r3, [r6, #0]
 8004f0e:	6825      	ldr	r5, [r4, #0]
 8004f10:	f015 0506 	ands.w	r5, r5, #6
 8004f14:	d106      	bne.n	8004f24 <_printf_common+0x48>
 8004f16:	f104 0a19 	add.w	sl, r4, #25
 8004f1a:	68e3      	ldr	r3, [r4, #12]
 8004f1c:	6832      	ldr	r2, [r6, #0]
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	42ab      	cmp	r3, r5
 8004f22:	dc26      	bgt.n	8004f72 <_printf_common+0x96>
 8004f24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f28:	6822      	ldr	r2, [r4, #0]
 8004f2a:	3b00      	subs	r3, #0
 8004f2c:	bf18      	it	ne
 8004f2e:	2301      	movne	r3, #1
 8004f30:	0692      	lsls	r2, r2, #26
 8004f32:	d42b      	bmi.n	8004f8c <_printf_common+0xb0>
 8004f34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f38:	4641      	mov	r1, r8
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	47c8      	blx	r9
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d01e      	beq.n	8004f80 <_printf_common+0xa4>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	6922      	ldr	r2, [r4, #16]
 8004f46:	f003 0306 	and.w	r3, r3, #6
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	bf02      	ittt	eq
 8004f4e:	68e5      	ldreq	r5, [r4, #12]
 8004f50:	6833      	ldreq	r3, [r6, #0]
 8004f52:	1aed      	subeq	r5, r5, r3
 8004f54:	68a3      	ldr	r3, [r4, #8]
 8004f56:	bf0c      	ite	eq
 8004f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f5c:	2500      	movne	r5, #0
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	bfc4      	itt	gt
 8004f62:	1a9b      	subgt	r3, r3, r2
 8004f64:	18ed      	addgt	r5, r5, r3
 8004f66:	2600      	movs	r6, #0
 8004f68:	341a      	adds	r4, #26
 8004f6a:	42b5      	cmp	r5, r6
 8004f6c:	d11a      	bne.n	8004fa4 <_printf_common+0xc8>
 8004f6e:	2000      	movs	r0, #0
 8004f70:	e008      	b.n	8004f84 <_printf_common+0xa8>
 8004f72:	2301      	movs	r3, #1
 8004f74:	4652      	mov	r2, sl
 8004f76:	4641      	mov	r1, r8
 8004f78:	4638      	mov	r0, r7
 8004f7a:	47c8      	blx	r9
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d103      	bne.n	8004f88 <_printf_common+0xac>
 8004f80:	f04f 30ff 	mov.w	r0, #4294967295
 8004f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f88:	3501      	adds	r5, #1
 8004f8a:	e7c6      	b.n	8004f1a <_printf_common+0x3e>
 8004f8c:	18e1      	adds	r1, r4, r3
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	2030      	movs	r0, #48	@ 0x30
 8004f92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f96:	4422      	add	r2, r4
 8004f98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	e7c7      	b.n	8004f34 <_printf_common+0x58>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	4641      	mov	r1, r8
 8004faa:	4638      	mov	r0, r7
 8004fac:	47c8      	blx	r9
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d0e6      	beq.n	8004f80 <_printf_common+0xa4>
 8004fb2:	3601      	adds	r6, #1
 8004fb4:	e7d9      	b.n	8004f6a <_printf_common+0x8e>
	...

08004fb8 <_printf_i>:
 8004fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fbc:	7e0f      	ldrb	r7, [r1, #24]
 8004fbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fc0:	2f78      	cmp	r7, #120	@ 0x78
 8004fc2:	4691      	mov	r9, r2
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	469a      	mov	sl, r3
 8004fca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fce:	d807      	bhi.n	8004fe0 <_printf_i+0x28>
 8004fd0:	2f62      	cmp	r7, #98	@ 0x62
 8004fd2:	d80a      	bhi.n	8004fea <_printf_i+0x32>
 8004fd4:	2f00      	cmp	r7, #0
 8004fd6:	f000 80d1 	beq.w	800517c <_printf_i+0x1c4>
 8004fda:	2f58      	cmp	r7, #88	@ 0x58
 8004fdc:	f000 80b8 	beq.w	8005150 <_printf_i+0x198>
 8004fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fe8:	e03a      	b.n	8005060 <_printf_i+0xa8>
 8004fea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fee:	2b15      	cmp	r3, #21
 8004ff0:	d8f6      	bhi.n	8004fe0 <_printf_i+0x28>
 8004ff2:	a101      	add	r1, pc, #4	@ (adr r1, 8004ff8 <_printf_i+0x40>)
 8004ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ff8:	08005051 	.word	0x08005051
 8004ffc:	08005065 	.word	0x08005065
 8005000:	08004fe1 	.word	0x08004fe1
 8005004:	08004fe1 	.word	0x08004fe1
 8005008:	08004fe1 	.word	0x08004fe1
 800500c:	08004fe1 	.word	0x08004fe1
 8005010:	08005065 	.word	0x08005065
 8005014:	08004fe1 	.word	0x08004fe1
 8005018:	08004fe1 	.word	0x08004fe1
 800501c:	08004fe1 	.word	0x08004fe1
 8005020:	08004fe1 	.word	0x08004fe1
 8005024:	08005163 	.word	0x08005163
 8005028:	0800508f 	.word	0x0800508f
 800502c:	0800511d 	.word	0x0800511d
 8005030:	08004fe1 	.word	0x08004fe1
 8005034:	08004fe1 	.word	0x08004fe1
 8005038:	08005185 	.word	0x08005185
 800503c:	08004fe1 	.word	0x08004fe1
 8005040:	0800508f 	.word	0x0800508f
 8005044:	08004fe1 	.word	0x08004fe1
 8005048:	08004fe1 	.word	0x08004fe1
 800504c:	08005125 	.word	0x08005125
 8005050:	6833      	ldr	r3, [r6, #0]
 8005052:	1d1a      	adds	r2, r3, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6032      	str	r2, [r6, #0]
 8005058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800505c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005060:	2301      	movs	r3, #1
 8005062:	e09c      	b.n	800519e <_printf_i+0x1e6>
 8005064:	6833      	ldr	r3, [r6, #0]
 8005066:	6820      	ldr	r0, [r4, #0]
 8005068:	1d19      	adds	r1, r3, #4
 800506a:	6031      	str	r1, [r6, #0]
 800506c:	0606      	lsls	r6, r0, #24
 800506e:	d501      	bpl.n	8005074 <_printf_i+0xbc>
 8005070:	681d      	ldr	r5, [r3, #0]
 8005072:	e003      	b.n	800507c <_printf_i+0xc4>
 8005074:	0645      	lsls	r5, r0, #25
 8005076:	d5fb      	bpl.n	8005070 <_printf_i+0xb8>
 8005078:	f9b3 5000 	ldrsh.w	r5, [r3]
 800507c:	2d00      	cmp	r5, #0
 800507e:	da03      	bge.n	8005088 <_printf_i+0xd0>
 8005080:	232d      	movs	r3, #45	@ 0x2d
 8005082:	426d      	negs	r5, r5
 8005084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005088:	4858      	ldr	r0, [pc, #352]	@ (80051ec <_printf_i+0x234>)
 800508a:	230a      	movs	r3, #10
 800508c:	e011      	b.n	80050b2 <_printf_i+0xfa>
 800508e:	6821      	ldr	r1, [r4, #0]
 8005090:	6833      	ldr	r3, [r6, #0]
 8005092:	0608      	lsls	r0, r1, #24
 8005094:	f853 5b04 	ldr.w	r5, [r3], #4
 8005098:	d402      	bmi.n	80050a0 <_printf_i+0xe8>
 800509a:	0649      	lsls	r1, r1, #25
 800509c:	bf48      	it	mi
 800509e:	b2ad      	uxthmi	r5, r5
 80050a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80050a2:	4852      	ldr	r0, [pc, #328]	@ (80051ec <_printf_i+0x234>)
 80050a4:	6033      	str	r3, [r6, #0]
 80050a6:	bf14      	ite	ne
 80050a8:	230a      	movne	r3, #10
 80050aa:	2308      	moveq	r3, #8
 80050ac:	2100      	movs	r1, #0
 80050ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050b2:	6866      	ldr	r6, [r4, #4]
 80050b4:	60a6      	str	r6, [r4, #8]
 80050b6:	2e00      	cmp	r6, #0
 80050b8:	db05      	blt.n	80050c6 <_printf_i+0x10e>
 80050ba:	6821      	ldr	r1, [r4, #0]
 80050bc:	432e      	orrs	r6, r5
 80050be:	f021 0104 	bic.w	r1, r1, #4
 80050c2:	6021      	str	r1, [r4, #0]
 80050c4:	d04b      	beq.n	800515e <_printf_i+0x1a6>
 80050c6:	4616      	mov	r6, r2
 80050c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80050cc:	fb03 5711 	mls	r7, r3, r1, r5
 80050d0:	5dc7      	ldrb	r7, [r0, r7]
 80050d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050d6:	462f      	mov	r7, r5
 80050d8:	42bb      	cmp	r3, r7
 80050da:	460d      	mov	r5, r1
 80050dc:	d9f4      	bls.n	80050c8 <_printf_i+0x110>
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d10b      	bne.n	80050fa <_printf_i+0x142>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	07df      	lsls	r7, r3, #31
 80050e6:	d508      	bpl.n	80050fa <_printf_i+0x142>
 80050e8:	6923      	ldr	r3, [r4, #16]
 80050ea:	6861      	ldr	r1, [r4, #4]
 80050ec:	4299      	cmp	r1, r3
 80050ee:	bfde      	ittt	le
 80050f0:	2330      	movle	r3, #48	@ 0x30
 80050f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050fa:	1b92      	subs	r2, r2, r6
 80050fc:	6122      	str	r2, [r4, #16]
 80050fe:	f8cd a000 	str.w	sl, [sp]
 8005102:	464b      	mov	r3, r9
 8005104:	aa03      	add	r2, sp, #12
 8005106:	4621      	mov	r1, r4
 8005108:	4640      	mov	r0, r8
 800510a:	f7ff fee7 	bl	8004edc <_printf_common>
 800510e:	3001      	adds	r0, #1
 8005110:	d14a      	bne.n	80051a8 <_printf_i+0x1f0>
 8005112:	f04f 30ff 	mov.w	r0, #4294967295
 8005116:	b004      	add	sp, #16
 8005118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	f043 0320 	orr.w	r3, r3, #32
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	4832      	ldr	r0, [pc, #200]	@ (80051f0 <_printf_i+0x238>)
 8005126:	2778      	movs	r7, #120	@ 0x78
 8005128:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	6831      	ldr	r1, [r6, #0]
 8005130:	061f      	lsls	r7, r3, #24
 8005132:	f851 5b04 	ldr.w	r5, [r1], #4
 8005136:	d402      	bmi.n	800513e <_printf_i+0x186>
 8005138:	065f      	lsls	r7, r3, #25
 800513a:	bf48      	it	mi
 800513c:	b2ad      	uxthmi	r5, r5
 800513e:	6031      	str	r1, [r6, #0]
 8005140:	07d9      	lsls	r1, r3, #31
 8005142:	bf44      	itt	mi
 8005144:	f043 0320 	orrmi.w	r3, r3, #32
 8005148:	6023      	strmi	r3, [r4, #0]
 800514a:	b11d      	cbz	r5, 8005154 <_printf_i+0x19c>
 800514c:	2310      	movs	r3, #16
 800514e:	e7ad      	b.n	80050ac <_printf_i+0xf4>
 8005150:	4826      	ldr	r0, [pc, #152]	@ (80051ec <_printf_i+0x234>)
 8005152:	e7e9      	b.n	8005128 <_printf_i+0x170>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	f023 0320 	bic.w	r3, r3, #32
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	e7f6      	b.n	800514c <_printf_i+0x194>
 800515e:	4616      	mov	r6, r2
 8005160:	e7bd      	b.n	80050de <_printf_i+0x126>
 8005162:	6833      	ldr	r3, [r6, #0]
 8005164:	6825      	ldr	r5, [r4, #0]
 8005166:	6961      	ldr	r1, [r4, #20]
 8005168:	1d18      	adds	r0, r3, #4
 800516a:	6030      	str	r0, [r6, #0]
 800516c:	062e      	lsls	r6, r5, #24
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	d501      	bpl.n	8005176 <_printf_i+0x1be>
 8005172:	6019      	str	r1, [r3, #0]
 8005174:	e002      	b.n	800517c <_printf_i+0x1c4>
 8005176:	0668      	lsls	r0, r5, #25
 8005178:	d5fb      	bpl.n	8005172 <_printf_i+0x1ba>
 800517a:	8019      	strh	r1, [r3, #0]
 800517c:	2300      	movs	r3, #0
 800517e:	6123      	str	r3, [r4, #16]
 8005180:	4616      	mov	r6, r2
 8005182:	e7bc      	b.n	80050fe <_printf_i+0x146>
 8005184:	6833      	ldr	r3, [r6, #0]
 8005186:	1d1a      	adds	r2, r3, #4
 8005188:	6032      	str	r2, [r6, #0]
 800518a:	681e      	ldr	r6, [r3, #0]
 800518c:	6862      	ldr	r2, [r4, #4]
 800518e:	2100      	movs	r1, #0
 8005190:	4630      	mov	r0, r6
 8005192:	f7fb f855 	bl	8000240 <memchr>
 8005196:	b108      	cbz	r0, 800519c <_printf_i+0x1e4>
 8005198:	1b80      	subs	r0, r0, r6
 800519a:	6060      	str	r0, [r4, #4]
 800519c:	6863      	ldr	r3, [r4, #4]
 800519e:	6123      	str	r3, [r4, #16]
 80051a0:	2300      	movs	r3, #0
 80051a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051a6:	e7aa      	b.n	80050fe <_printf_i+0x146>
 80051a8:	6923      	ldr	r3, [r4, #16]
 80051aa:	4632      	mov	r2, r6
 80051ac:	4649      	mov	r1, r9
 80051ae:	4640      	mov	r0, r8
 80051b0:	47d0      	blx	sl
 80051b2:	3001      	adds	r0, #1
 80051b4:	d0ad      	beq.n	8005112 <_printf_i+0x15a>
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	079b      	lsls	r3, r3, #30
 80051ba:	d413      	bmi.n	80051e4 <_printf_i+0x22c>
 80051bc:	68e0      	ldr	r0, [r4, #12]
 80051be:	9b03      	ldr	r3, [sp, #12]
 80051c0:	4298      	cmp	r0, r3
 80051c2:	bfb8      	it	lt
 80051c4:	4618      	movlt	r0, r3
 80051c6:	e7a6      	b.n	8005116 <_printf_i+0x15e>
 80051c8:	2301      	movs	r3, #1
 80051ca:	4632      	mov	r2, r6
 80051cc:	4649      	mov	r1, r9
 80051ce:	4640      	mov	r0, r8
 80051d0:	47d0      	blx	sl
 80051d2:	3001      	adds	r0, #1
 80051d4:	d09d      	beq.n	8005112 <_printf_i+0x15a>
 80051d6:	3501      	adds	r5, #1
 80051d8:	68e3      	ldr	r3, [r4, #12]
 80051da:	9903      	ldr	r1, [sp, #12]
 80051dc:	1a5b      	subs	r3, r3, r1
 80051de:	42ab      	cmp	r3, r5
 80051e0:	dcf2      	bgt.n	80051c8 <_printf_i+0x210>
 80051e2:	e7eb      	b.n	80051bc <_printf_i+0x204>
 80051e4:	2500      	movs	r5, #0
 80051e6:	f104 0619 	add.w	r6, r4, #25
 80051ea:	e7f5      	b.n	80051d8 <_printf_i+0x220>
 80051ec:	08008eea 	.word	0x08008eea
 80051f0:	08008efb 	.word	0x08008efb

080051f4 <_scanf_float>:
 80051f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f8:	b087      	sub	sp, #28
 80051fa:	4691      	mov	r9, r2
 80051fc:	9303      	str	r3, [sp, #12]
 80051fe:	688b      	ldr	r3, [r1, #8]
 8005200:	1e5a      	subs	r2, r3, #1
 8005202:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005206:	bf81      	itttt	hi
 8005208:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800520c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005210:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005214:	608b      	strhi	r3, [r1, #8]
 8005216:	680b      	ldr	r3, [r1, #0]
 8005218:	460a      	mov	r2, r1
 800521a:	f04f 0500 	mov.w	r5, #0
 800521e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005222:	f842 3b1c 	str.w	r3, [r2], #28
 8005226:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800522a:	4680      	mov	r8, r0
 800522c:	460c      	mov	r4, r1
 800522e:	bf98      	it	ls
 8005230:	f04f 0b00 	movls.w	fp, #0
 8005234:	9201      	str	r2, [sp, #4]
 8005236:	4616      	mov	r6, r2
 8005238:	46aa      	mov	sl, r5
 800523a:	462f      	mov	r7, r5
 800523c:	9502      	str	r5, [sp, #8]
 800523e:	68a2      	ldr	r2, [r4, #8]
 8005240:	b15a      	cbz	r2, 800525a <_scanf_float+0x66>
 8005242:	f8d9 3000 	ldr.w	r3, [r9]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b4e      	cmp	r3, #78	@ 0x4e
 800524a:	d863      	bhi.n	8005314 <_scanf_float+0x120>
 800524c:	2b40      	cmp	r3, #64	@ 0x40
 800524e:	d83b      	bhi.n	80052c8 <_scanf_float+0xd4>
 8005250:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005254:	b2c8      	uxtb	r0, r1
 8005256:	280e      	cmp	r0, #14
 8005258:	d939      	bls.n	80052ce <_scanf_float+0xda>
 800525a:	b11f      	cbz	r7, 8005264 <_scanf_float+0x70>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005262:	6023      	str	r3, [r4, #0]
 8005264:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005268:	f1ba 0f01 	cmp.w	sl, #1
 800526c:	f200 8114 	bhi.w	8005498 <_scanf_float+0x2a4>
 8005270:	9b01      	ldr	r3, [sp, #4]
 8005272:	429e      	cmp	r6, r3
 8005274:	f200 8105 	bhi.w	8005482 <_scanf_float+0x28e>
 8005278:	2001      	movs	r0, #1
 800527a:	b007      	add	sp, #28
 800527c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005280:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005284:	2a0d      	cmp	r2, #13
 8005286:	d8e8      	bhi.n	800525a <_scanf_float+0x66>
 8005288:	a101      	add	r1, pc, #4	@ (adr r1, 8005290 <_scanf_float+0x9c>)
 800528a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800528e:	bf00      	nop
 8005290:	080053d9 	.word	0x080053d9
 8005294:	0800525b 	.word	0x0800525b
 8005298:	0800525b 	.word	0x0800525b
 800529c:	0800525b 	.word	0x0800525b
 80052a0:	08005435 	.word	0x08005435
 80052a4:	0800540f 	.word	0x0800540f
 80052a8:	0800525b 	.word	0x0800525b
 80052ac:	0800525b 	.word	0x0800525b
 80052b0:	080053e7 	.word	0x080053e7
 80052b4:	0800525b 	.word	0x0800525b
 80052b8:	0800525b 	.word	0x0800525b
 80052bc:	0800525b 	.word	0x0800525b
 80052c0:	0800525b 	.word	0x0800525b
 80052c4:	080053a3 	.word	0x080053a3
 80052c8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80052cc:	e7da      	b.n	8005284 <_scanf_float+0x90>
 80052ce:	290e      	cmp	r1, #14
 80052d0:	d8c3      	bhi.n	800525a <_scanf_float+0x66>
 80052d2:	a001      	add	r0, pc, #4	@ (adr r0, 80052d8 <_scanf_float+0xe4>)
 80052d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80052d8:	08005393 	.word	0x08005393
 80052dc:	0800525b 	.word	0x0800525b
 80052e0:	08005393 	.word	0x08005393
 80052e4:	08005423 	.word	0x08005423
 80052e8:	0800525b 	.word	0x0800525b
 80052ec:	08005335 	.word	0x08005335
 80052f0:	08005379 	.word	0x08005379
 80052f4:	08005379 	.word	0x08005379
 80052f8:	08005379 	.word	0x08005379
 80052fc:	08005379 	.word	0x08005379
 8005300:	08005379 	.word	0x08005379
 8005304:	08005379 	.word	0x08005379
 8005308:	08005379 	.word	0x08005379
 800530c:	08005379 	.word	0x08005379
 8005310:	08005379 	.word	0x08005379
 8005314:	2b6e      	cmp	r3, #110	@ 0x6e
 8005316:	d809      	bhi.n	800532c <_scanf_float+0x138>
 8005318:	2b60      	cmp	r3, #96	@ 0x60
 800531a:	d8b1      	bhi.n	8005280 <_scanf_float+0x8c>
 800531c:	2b54      	cmp	r3, #84	@ 0x54
 800531e:	d07b      	beq.n	8005418 <_scanf_float+0x224>
 8005320:	2b59      	cmp	r3, #89	@ 0x59
 8005322:	d19a      	bne.n	800525a <_scanf_float+0x66>
 8005324:	2d07      	cmp	r5, #7
 8005326:	d198      	bne.n	800525a <_scanf_float+0x66>
 8005328:	2508      	movs	r5, #8
 800532a:	e02f      	b.n	800538c <_scanf_float+0x198>
 800532c:	2b74      	cmp	r3, #116	@ 0x74
 800532e:	d073      	beq.n	8005418 <_scanf_float+0x224>
 8005330:	2b79      	cmp	r3, #121	@ 0x79
 8005332:	e7f6      	b.n	8005322 <_scanf_float+0x12e>
 8005334:	6821      	ldr	r1, [r4, #0]
 8005336:	05c8      	lsls	r0, r1, #23
 8005338:	d51e      	bpl.n	8005378 <_scanf_float+0x184>
 800533a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800533e:	6021      	str	r1, [r4, #0]
 8005340:	3701      	adds	r7, #1
 8005342:	f1bb 0f00 	cmp.w	fp, #0
 8005346:	d003      	beq.n	8005350 <_scanf_float+0x15c>
 8005348:	3201      	adds	r2, #1
 800534a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800534e:	60a2      	str	r2, [r4, #8]
 8005350:	68a3      	ldr	r3, [r4, #8]
 8005352:	3b01      	subs	r3, #1
 8005354:	60a3      	str	r3, [r4, #8]
 8005356:	6923      	ldr	r3, [r4, #16]
 8005358:	3301      	adds	r3, #1
 800535a:	6123      	str	r3, [r4, #16]
 800535c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005360:	3b01      	subs	r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	f8c9 3004 	str.w	r3, [r9, #4]
 8005368:	f340 8082 	ble.w	8005470 <_scanf_float+0x27c>
 800536c:	f8d9 3000 	ldr.w	r3, [r9]
 8005370:	3301      	adds	r3, #1
 8005372:	f8c9 3000 	str.w	r3, [r9]
 8005376:	e762      	b.n	800523e <_scanf_float+0x4a>
 8005378:	eb1a 0105 	adds.w	r1, sl, r5
 800537c:	f47f af6d 	bne.w	800525a <_scanf_float+0x66>
 8005380:	6822      	ldr	r2, [r4, #0]
 8005382:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005386:	6022      	str	r2, [r4, #0]
 8005388:	460d      	mov	r5, r1
 800538a:	468a      	mov	sl, r1
 800538c:	f806 3b01 	strb.w	r3, [r6], #1
 8005390:	e7de      	b.n	8005350 <_scanf_float+0x15c>
 8005392:	6822      	ldr	r2, [r4, #0]
 8005394:	0610      	lsls	r0, r2, #24
 8005396:	f57f af60 	bpl.w	800525a <_scanf_float+0x66>
 800539a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800539e:	6022      	str	r2, [r4, #0]
 80053a0:	e7f4      	b.n	800538c <_scanf_float+0x198>
 80053a2:	f1ba 0f00 	cmp.w	sl, #0
 80053a6:	d10c      	bne.n	80053c2 <_scanf_float+0x1ce>
 80053a8:	b977      	cbnz	r7, 80053c8 <_scanf_float+0x1d4>
 80053aa:	6822      	ldr	r2, [r4, #0]
 80053ac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80053b0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80053b4:	d108      	bne.n	80053c8 <_scanf_float+0x1d4>
 80053b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80053ba:	6022      	str	r2, [r4, #0]
 80053bc:	f04f 0a01 	mov.w	sl, #1
 80053c0:	e7e4      	b.n	800538c <_scanf_float+0x198>
 80053c2:	f1ba 0f02 	cmp.w	sl, #2
 80053c6:	d050      	beq.n	800546a <_scanf_float+0x276>
 80053c8:	2d01      	cmp	r5, #1
 80053ca:	d002      	beq.n	80053d2 <_scanf_float+0x1de>
 80053cc:	2d04      	cmp	r5, #4
 80053ce:	f47f af44 	bne.w	800525a <_scanf_float+0x66>
 80053d2:	3501      	adds	r5, #1
 80053d4:	b2ed      	uxtb	r5, r5
 80053d6:	e7d9      	b.n	800538c <_scanf_float+0x198>
 80053d8:	f1ba 0f01 	cmp.w	sl, #1
 80053dc:	f47f af3d 	bne.w	800525a <_scanf_float+0x66>
 80053e0:	f04f 0a02 	mov.w	sl, #2
 80053e4:	e7d2      	b.n	800538c <_scanf_float+0x198>
 80053e6:	b975      	cbnz	r5, 8005406 <_scanf_float+0x212>
 80053e8:	2f00      	cmp	r7, #0
 80053ea:	f47f af37 	bne.w	800525c <_scanf_float+0x68>
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80053f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80053f8:	f040 80fc 	bne.w	80055f4 <_scanf_float+0x400>
 80053fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005400:	6022      	str	r2, [r4, #0]
 8005402:	2501      	movs	r5, #1
 8005404:	e7c2      	b.n	800538c <_scanf_float+0x198>
 8005406:	2d03      	cmp	r5, #3
 8005408:	d0e3      	beq.n	80053d2 <_scanf_float+0x1de>
 800540a:	2d05      	cmp	r5, #5
 800540c:	e7df      	b.n	80053ce <_scanf_float+0x1da>
 800540e:	2d02      	cmp	r5, #2
 8005410:	f47f af23 	bne.w	800525a <_scanf_float+0x66>
 8005414:	2503      	movs	r5, #3
 8005416:	e7b9      	b.n	800538c <_scanf_float+0x198>
 8005418:	2d06      	cmp	r5, #6
 800541a:	f47f af1e 	bne.w	800525a <_scanf_float+0x66>
 800541e:	2507      	movs	r5, #7
 8005420:	e7b4      	b.n	800538c <_scanf_float+0x198>
 8005422:	6822      	ldr	r2, [r4, #0]
 8005424:	0591      	lsls	r1, r2, #22
 8005426:	f57f af18 	bpl.w	800525a <_scanf_float+0x66>
 800542a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800542e:	6022      	str	r2, [r4, #0]
 8005430:	9702      	str	r7, [sp, #8]
 8005432:	e7ab      	b.n	800538c <_scanf_float+0x198>
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800543a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800543e:	d005      	beq.n	800544c <_scanf_float+0x258>
 8005440:	0550      	lsls	r0, r2, #21
 8005442:	f57f af0a 	bpl.w	800525a <_scanf_float+0x66>
 8005446:	2f00      	cmp	r7, #0
 8005448:	f000 80d4 	beq.w	80055f4 <_scanf_float+0x400>
 800544c:	0591      	lsls	r1, r2, #22
 800544e:	bf58      	it	pl
 8005450:	9902      	ldrpl	r1, [sp, #8]
 8005452:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005456:	bf58      	it	pl
 8005458:	1a79      	subpl	r1, r7, r1
 800545a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800545e:	bf58      	it	pl
 8005460:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005464:	6022      	str	r2, [r4, #0]
 8005466:	2700      	movs	r7, #0
 8005468:	e790      	b.n	800538c <_scanf_float+0x198>
 800546a:	f04f 0a03 	mov.w	sl, #3
 800546e:	e78d      	b.n	800538c <_scanf_float+0x198>
 8005470:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005474:	4649      	mov	r1, r9
 8005476:	4640      	mov	r0, r8
 8005478:	4798      	blx	r3
 800547a:	2800      	cmp	r0, #0
 800547c:	f43f aedf 	beq.w	800523e <_scanf_float+0x4a>
 8005480:	e6eb      	b.n	800525a <_scanf_float+0x66>
 8005482:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005486:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800548a:	464a      	mov	r2, r9
 800548c:	4640      	mov	r0, r8
 800548e:	4798      	blx	r3
 8005490:	6923      	ldr	r3, [r4, #16]
 8005492:	3b01      	subs	r3, #1
 8005494:	6123      	str	r3, [r4, #16]
 8005496:	e6eb      	b.n	8005270 <_scanf_float+0x7c>
 8005498:	1e6b      	subs	r3, r5, #1
 800549a:	2b06      	cmp	r3, #6
 800549c:	d824      	bhi.n	80054e8 <_scanf_float+0x2f4>
 800549e:	2d02      	cmp	r5, #2
 80054a0:	d836      	bhi.n	8005510 <_scanf_float+0x31c>
 80054a2:	9b01      	ldr	r3, [sp, #4]
 80054a4:	429e      	cmp	r6, r3
 80054a6:	f67f aee7 	bls.w	8005278 <_scanf_float+0x84>
 80054aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054b2:	464a      	mov	r2, r9
 80054b4:	4640      	mov	r0, r8
 80054b6:	4798      	blx	r3
 80054b8:	6923      	ldr	r3, [r4, #16]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	6123      	str	r3, [r4, #16]
 80054be:	e7f0      	b.n	80054a2 <_scanf_float+0x2ae>
 80054c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054c4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80054c8:	464a      	mov	r2, r9
 80054ca:	4640      	mov	r0, r8
 80054cc:	4798      	blx	r3
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	6123      	str	r3, [r4, #16]
 80054d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054d8:	fa5f fa8a 	uxtb.w	sl, sl
 80054dc:	f1ba 0f02 	cmp.w	sl, #2
 80054e0:	d1ee      	bne.n	80054c0 <_scanf_float+0x2cc>
 80054e2:	3d03      	subs	r5, #3
 80054e4:	b2ed      	uxtb	r5, r5
 80054e6:	1b76      	subs	r6, r6, r5
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	05da      	lsls	r2, r3, #23
 80054ec:	d530      	bpl.n	8005550 <_scanf_float+0x35c>
 80054ee:	055b      	lsls	r3, r3, #21
 80054f0:	d511      	bpl.n	8005516 <_scanf_float+0x322>
 80054f2:	9b01      	ldr	r3, [sp, #4]
 80054f4:	429e      	cmp	r6, r3
 80054f6:	f67f aebf 	bls.w	8005278 <_scanf_float+0x84>
 80054fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005502:	464a      	mov	r2, r9
 8005504:	4640      	mov	r0, r8
 8005506:	4798      	blx	r3
 8005508:	6923      	ldr	r3, [r4, #16]
 800550a:	3b01      	subs	r3, #1
 800550c:	6123      	str	r3, [r4, #16]
 800550e:	e7f0      	b.n	80054f2 <_scanf_float+0x2fe>
 8005510:	46aa      	mov	sl, r5
 8005512:	46b3      	mov	fp, r6
 8005514:	e7de      	b.n	80054d4 <_scanf_float+0x2e0>
 8005516:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800551a:	6923      	ldr	r3, [r4, #16]
 800551c:	2965      	cmp	r1, #101	@ 0x65
 800551e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005522:	f106 35ff 	add.w	r5, r6, #4294967295
 8005526:	6123      	str	r3, [r4, #16]
 8005528:	d00c      	beq.n	8005544 <_scanf_float+0x350>
 800552a:	2945      	cmp	r1, #69	@ 0x45
 800552c:	d00a      	beq.n	8005544 <_scanf_float+0x350>
 800552e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005532:	464a      	mov	r2, r9
 8005534:	4640      	mov	r0, r8
 8005536:	4798      	blx	r3
 8005538:	6923      	ldr	r3, [r4, #16]
 800553a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800553e:	3b01      	subs	r3, #1
 8005540:	1eb5      	subs	r5, r6, #2
 8005542:	6123      	str	r3, [r4, #16]
 8005544:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005548:	464a      	mov	r2, r9
 800554a:	4640      	mov	r0, r8
 800554c:	4798      	blx	r3
 800554e:	462e      	mov	r6, r5
 8005550:	6822      	ldr	r2, [r4, #0]
 8005552:	f012 0210 	ands.w	r2, r2, #16
 8005556:	d001      	beq.n	800555c <_scanf_float+0x368>
 8005558:	2000      	movs	r0, #0
 800555a:	e68e      	b.n	800527a <_scanf_float+0x86>
 800555c:	7032      	strb	r2, [r6, #0]
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005568:	d123      	bne.n	80055b2 <_scanf_float+0x3be>
 800556a:	9b02      	ldr	r3, [sp, #8]
 800556c:	429f      	cmp	r7, r3
 800556e:	d00a      	beq.n	8005586 <_scanf_float+0x392>
 8005570:	1bda      	subs	r2, r3, r7
 8005572:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005576:	429e      	cmp	r6, r3
 8005578:	bf28      	it	cs
 800557a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800557e:	491e      	ldr	r1, [pc, #120]	@ (80055f8 <_scanf_float+0x404>)
 8005580:	4630      	mov	r0, r6
 8005582:	f000 f8ff 	bl	8005784 <siprintf>
 8005586:	9901      	ldr	r1, [sp, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	4640      	mov	r0, r8
 800558c:	f002 fb2a 	bl	8007be4 <_strtod_r>
 8005590:	9b03      	ldr	r3, [sp, #12]
 8005592:	6821      	ldr	r1, [r4, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f011 0f02 	tst.w	r1, #2
 800559a:	f103 0204 	add.w	r2, r3, #4
 800559e:	d015      	beq.n	80055cc <_scanf_float+0x3d8>
 80055a0:	9903      	ldr	r1, [sp, #12]
 80055a2:	600a      	str	r2, [r1, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	ed83 0b00 	vstr	d0, [r3]
 80055aa:	68e3      	ldr	r3, [r4, #12]
 80055ac:	3301      	adds	r3, #1
 80055ae:	60e3      	str	r3, [r4, #12]
 80055b0:	e7d2      	b.n	8005558 <_scanf_float+0x364>
 80055b2:	9b04      	ldr	r3, [sp, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0e6      	beq.n	8005586 <_scanf_float+0x392>
 80055b8:	9905      	ldr	r1, [sp, #20]
 80055ba:	230a      	movs	r3, #10
 80055bc:	3101      	adds	r1, #1
 80055be:	4640      	mov	r0, r8
 80055c0:	f002 fb90 	bl	8007ce4 <_strtol_r>
 80055c4:	9b04      	ldr	r3, [sp, #16]
 80055c6:	9e05      	ldr	r6, [sp, #20]
 80055c8:	1ac2      	subs	r2, r0, r3
 80055ca:	e7d2      	b.n	8005572 <_scanf_float+0x37e>
 80055cc:	f011 0f04 	tst.w	r1, #4
 80055d0:	9903      	ldr	r1, [sp, #12]
 80055d2:	600a      	str	r2, [r1, #0]
 80055d4:	d1e6      	bne.n	80055a4 <_scanf_float+0x3b0>
 80055d6:	eeb4 0b40 	vcmp.f64	d0, d0
 80055da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055de:	681d      	ldr	r5, [r3, #0]
 80055e0:	d705      	bvc.n	80055ee <_scanf_float+0x3fa>
 80055e2:	4806      	ldr	r0, [pc, #24]	@ (80055fc <_scanf_float+0x408>)
 80055e4:	f000 f9b4 	bl	8005950 <nanf>
 80055e8:	ed85 0a00 	vstr	s0, [r5]
 80055ec:	e7dd      	b.n	80055aa <_scanf_float+0x3b6>
 80055ee:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80055f2:	e7f9      	b.n	80055e8 <_scanf_float+0x3f4>
 80055f4:	2700      	movs	r7, #0
 80055f6:	e635      	b.n	8005264 <_scanf_float+0x70>
 80055f8:	08008f0c 	.word	0x08008f0c
 80055fc:	0800904d 	.word	0x0800904d

08005600 <std>:
 8005600:	2300      	movs	r3, #0
 8005602:	b510      	push	{r4, lr}
 8005604:	4604      	mov	r4, r0
 8005606:	e9c0 3300 	strd	r3, r3, [r0]
 800560a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800560e:	6083      	str	r3, [r0, #8]
 8005610:	8181      	strh	r1, [r0, #12]
 8005612:	6643      	str	r3, [r0, #100]	@ 0x64
 8005614:	81c2      	strh	r2, [r0, #14]
 8005616:	6183      	str	r3, [r0, #24]
 8005618:	4619      	mov	r1, r3
 800561a:	2208      	movs	r2, #8
 800561c:	305c      	adds	r0, #92	@ 0x5c
 800561e:	f000 f916 	bl	800584e <memset>
 8005622:	4b0d      	ldr	r3, [pc, #52]	@ (8005658 <std+0x58>)
 8005624:	6263      	str	r3, [r4, #36]	@ 0x24
 8005626:	4b0d      	ldr	r3, [pc, #52]	@ (800565c <std+0x5c>)
 8005628:	62a3      	str	r3, [r4, #40]	@ 0x28
 800562a:	4b0d      	ldr	r3, [pc, #52]	@ (8005660 <std+0x60>)
 800562c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800562e:	4b0d      	ldr	r3, [pc, #52]	@ (8005664 <std+0x64>)
 8005630:	6323      	str	r3, [r4, #48]	@ 0x30
 8005632:	4b0d      	ldr	r3, [pc, #52]	@ (8005668 <std+0x68>)
 8005634:	6224      	str	r4, [r4, #32]
 8005636:	429c      	cmp	r4, r3
 8005638:	d006      	beq.n	8005648 <std+0x48>
 800563a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800563e:	4294      	cmp	r4, r2
 8005640:	d002      	beq.n	8005648 <std+0x48>
 8005642:	33d0      	adds	r3, #208	@ 0xd0
 8005644:	429c      	cmp	r4, r3
 8005646:	d105      	bne.n	8005654 <std+0x54>
 8005648:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800564c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005650:	f000 b97a 	b.w	8005948 <__retarget_lock_init_recursive>
 8005654:	bd10      	pop	{r4, pc}
 8005656:	bf00      	nop
 8005658:	080057c9 	.word	0x080057c9
 800565c:	080057eb 	.word	0x080057eb
 8005660:	08005823 	.word	0x08005823
 8005664:	08005847 	.word	0x08005847
 8005668:	200002e0 	.word	0x200002e0

0800566c <stdio_exit_handler>:
 800566c:	4a02      	ldr	r2, [pc, #8]	@ (8005678 <stdio_exit_handler+0xc>)
 800566e:	4903      	ldr	r1, [pc, #12]	@ (800567c <stdio_exit_handler+0x10>)
 8005670:	4803      	ldr	r0, [pc, #12]	@ (8005680 <stdio_exit_handler+0x14>)
 8005672:	f000 b869 	b.w	8005748 <_fwalk_sglue>
 8005676:	bf00      	nop
 8005678:	2000000c 	.word	0x2000000c
 800567c:	080080a1 	.word	0x080080a1
 8005680:	2000001c 	.word	0x2000001c

08005684 <cleanup_stdio>:
 8005684:	6841      	ldr	r1, [r0, #4]
 8005686:	4b0c      	ldr	r3, [pc, #48]	@ (80056b8 <cleanup_stdio+0x34>)
 8005688:	4299      	cmp	r1, r3
 800568a:	b510      	push	{r4, lr}
 800568c:	4604      	mov	r4, r0
 800568e:	d001      	beq.n	8005694 <cleanup_stdio+0x10>
 8005690:	f002 fd06 	bl	80080a0 <_fflush_r>
 8005694:	68a1      	ldr	r1, [r4, #8]
 8005696:	4b09      	ldr	r3, [pc, #36]	@ (80056bc <cleanup_stdio+0x38>)
 8005698:	4299      	cmp	r1, r3
 800569a:	d002      	beq.n	80056a2 <cleanup_stdio+0x1e>
 800569c:	4620      	mov	r0, r4
 800569e:	f002 fcff 	bl	80080a0 <_fflush_r>
 80056a2:	68e1      	ldr	r1, [r4, #12]
 80056a4:	4b06      	ldr	r3, [pc, #24]	@ (80056c0 <cleanup_stdio+0x3c>)
 80056a6:	4299      	cmp	r1, r3
 80056a8:	d004      	beq.n	80056b4 <cleanup_stdio+0x30>
 80056aa:	4620      	mov	r0, r4
 80056ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056b0:	f002 bcf6 	b.w	80080a0 <_fflush_r>
 80056b4:	bd10      	pop	{r4, pc}
 80056b6:	bf00      	nop
 80056b8:	200002e0 	.word	0x200002e0
 80056bc:	20000348 	.word	0x20000348
 80056c0:	200003b0 	.word	0x200003b0

080056c4 <global_stdio_init.part.0>:
 80056c4:	b510      	push	{r4, lr}
 80056c6:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <global_stdio_init.part.0+0x30>)
 80056c8:	4c0b      	ldr	r4, [pc, #44]	@ (80056f8 <global_stdio_init.part.0+0x34>)
 80056ca:	4a0c      	ldr	r2, [pc, #48]	@ (80056fc <global_stdio_init.part.0+0x38>)
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	4620      	mov	r0, r4
 80056d0:	2200      	movs	r2, #0
 80056d2:	2104      	movs	r1, #4
 80056d4:	f7ff ff94 	bl	8005600 <std>
 80056d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056dc:	2201      	movs	r2, #1
 80056de:	2109      	movs	r1, #9
 80056e0:	f7ff ff8e 	bl	8005600 <std>
 80056e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056e8:	2202      	movs	r2, #2
 80056ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ee:	2112      	movs	r1, #18
 80056f0:	f7ff bf86 	b.w	8005600 <std>
 80056f4:	20000418 	.word	0x20000418
 80056f8:	200002e0 	.word	0x200002e0
 80056fc:	0800566d 	.word	0x0800566d

08005700 <__sfp_lock_acquire>:
 8005700:	4801      	ldr	r0, [pc, #4]	@ (8005708 <__sfp_lock_acquire+0x8>)
 8005702:	f000 b922 	b.w	800594a <__retarget_lock_acquire_recursive>
 8005706:	bf00      	nop
 8005708:	20000421 	.word	0x20000421

0800570c <__sfp_lock_release>:
 800570c:	4801      	ldr	r0, [pc, #4]	@ (8005714 <__sfp_lock_release+0x8>)
 800570e:	f000 b91d 	b.w	800594c <__retarget_lock_release_recursive>
 8005712:	bf00      	nop
 8005714:	20000421 	.word	0x20000421

08005718 <__sinit>:
 8005718:	b510      	push	{r4, lr}
 800571a:	4604      	mov	r4, r0
 800571c:	f7ff fff0 	bl	8005700 <__sfp_lock_acquire>
 8005720:	6a23      	ldr	r3, [r4, #32]
 8005722:	b11b      	cbz	r3, 800572c <__sinit+0x14>
 8005724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005728:	f7ff bff0 	b.w	800570c <__sfp_lock_release>
 800572c:	4b04      	ldr	r3, [pc, #16]	@ (8005740 <__sinit+0x28>)
 800572e:	6223      	str	r3, [r4, #32]
 8005730:	4b04      	ldr	r3, [pc, #16]	@ (8005744 <__sinit+0x2c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1f5      	bne.n	8005724 <__sinit+0xc>
 8005738:	f7ff ffc4 	bl	80056c4 <global_stdio_init.part.0>
 800573c:	e7f2      	b.n	8005724 <__sinit+0xc>
 800573e:	bf00      	nop
 8005740:	08005685 	.word	0x08005685
 8005744:	20000418 	.word	0x20000418

08005748 <_fwalk_sglue>:
 8005748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800574c:	4607      	mov	r7, r0
 800574e:	4688      	mov	r8, r1
 8005750:	4614      	mov	r4, r2
 8005752:	2600      	movs	r6, #0
 8005754:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005758:	f1b9 0901 	subs.w	r9, r9, #1
 800575c:	d505      	bpl.n	800576a <_fwalk_sglue+0x22>
 800575e:	6824      	ldr	r4, [r4, #0]
 8005760:	2c00      	cmp	r4, #0
 8005762:	d1f7      	bne.n	8005754 <_fwalk_sglue+0xc>
 8005764:	4630      	mov	r0, r6
 8005766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800576a:	89ab      	ldrh	r3, [r5, #12]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d907      	bls.n	8005780 <_fwalk_sglue+0x38>
 8005770:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005774:	3301      	adds	r3, #1
 8005776:	d003      	beq.n	8005780 <_fwalk_sglue+0x38>
 8005778:	4629      	mov	r1, r5
 800577a:	4638      	mov	r0, r7
 800577c:	47c0      	blx	r8
 800577e:	4306      	orrs	r6, r0
 8005780:	3568      	adds	r5, #104	@ 0x68
 8005782:	e7e9      	b.n	8005758 <_fwalk_sglue+0x10>

08005784 <siprintf>:
 8005784:	b40e      	push	{r1, r2, r3}
 8005786:	b510      	push	{r4, lr}
 8005788:	b09d      	sub	sp, #116	@ 0x74
 800578a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800578c:	9002      	str	r0, [sp, #8]
 800578e:	9006      	str	r0, [sp, #24]
 8005790:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005794:	480a      	ldr	r0, [pc, #40]	@ (80057c0 <siprintf+0x3c>)
 8005796:	9107      	str	r1, [sp, #28]
 8005798:	9104      	str	r1, [sp, #16]
 800579a:	490a      	ldr	r1, [pc, #40]	@ (80057c4 <siprintf+0x40>)
 800579c:	f853 2b04 	ldr.w	r2, [r3], #4
 80057a0:	9105      	str	r1, [sp, #20]
 80057a2:	2400      	movs	r4, #0
 80057a4:	a902      	add	r1, sp, #8
 80057a6:	6800      	ldr	r0, [r0, #0]
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80057ac:	f002 faf8 	bl	8007da0 <_svfiprintf_r>
 80057b0:	9b02      	ldr	r3, [sp, #8]
 80057b2:	701c      	strb	r4, [r3, #0]
 80057b4:	b01d      	add	sp, #116	@ 0x74
 80057b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ba:	b003      	add	sp, #12
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	20000018 	.word	0x20000018
 80057c4:	ffff0208 	.word	0xffff0208

080057c8 <__sread>:
 80057c8:	b510      	push	{r4, lr}
 80057ca:	460c      	mov	r4, r1
 80057cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d0:	f000 f86c 	bl	80058ac <_read_r>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	bfab      	itete	ge
 80057d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057da:	89a3      	ldrhlt	r3, [r4, #12]
 80057dc:	181b      	addge	r3, r3, r0
 80057de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057e2:	bfac      	ite	ge
 80057e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057e6:	81a3      	strhlt	r3, [r4, #12]
 80057e8:	bd10      	pop	{r4, pc}

080057ea <__swrite>:
 80057ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ee:	461f      	mov	r7, r3
 80057f0:	898b      	ldrh	r3, [r1, #12]
 80057f2:	05db      	lsls	r3, r3, #23
 80057f4:	4605      	mov	r5, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	4616      	mov	r6, r2
 80057fa:	d505      	bpl.n	8005808 <__swrite+0x1e>
 80057fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005800:	2302      	movs	r3, #2
 8005802:	2200      	movs	r2, #0
 8005804:	f000 f840 	bl	8005888 <_lseek_r>
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800580e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005812:	81a3      	strh	r3, [r4, #12]
 8005814:	4632      	mov	r2, r6
 8005816:	463b      	mov	r3, r7
 8005818:	4628      	mov	r0, r5
 800581a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800581e:	f000 b857 	b.w	80058d0 <_write_r>

08005822 <__sseek>:
 8005822:	b510      	push	{r4, lr}
 8005824:	460c      	mov	r4, r1
 8005826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582a:	f000 f82d 	bl	8005888 <_lseek_r>
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	bf15      	itete	ne
 8005834:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005836:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800583a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800583e:	81a3      	strheq	r3, [r4, #12]
 8005840:	bf18      	it	ne
 8005842:	81a3      	strhne	r3, [r4, #12]
 8005844:	bd10      	pop	{r4, pc}

08005846 <__sclose>:
 8005846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584a:	f000 b80d 	b.w	8005868 <_close_r>

0800584e <memset>:
 800584e:	4402      	add	r2, r0
 8005850:	4603      	mov	r3, r0
 8005852:	4293      	cmp	r3, r2
 8005854:	d100      	bne.n	8005858 <memset+0xa>
 8005856:	4770      	bx	lr
 8005858:	f803 1b01 	strb.w	r1, [r3], #1
 800585c:	e7f9      	b.n	8005852 <memset+0x4>
	...

08005860 <_localeconv_r>:
 8005860:	4800      	ldr	r0, [pc, #0]	@ (8005864 <_localeconv_r+0x4>)
 8005862:	4770      	bx	lr
 8005864:	20000158 	.word	0x20000158

08005868 <_close_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	4d06      	ldr	r5, [pc, #24]	@ (8005884 <_close_r+0x1c>)
 800586c:	2300      	movs	r3, #0
 800586e:	4604      	mov	r4, r0
 8005870:	4608      	mov	r0, r1
 8005872:	602b      	str	r3, [r5, #0]
 8005874:	f7fb fbdf 	bl	8001036 <_close>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d102      	bne.n	8005882 <_close_r+0x1a>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	b103      	cbz	r3, 8005882 <_close_r+0x1a>
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	bd38      	pop	{r3, r4, r5, pc}
 8005884:	2000041c 	.word	0x2000041c

08005888 <_lseek_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4d07      	ldr	r5, [pc, #28]	@ (80058a8 <_lseek_r+0x20>)
 800588c:	4604      	mov	r4, r0
 800588e:	4608      	mov	r0, r1
 8005890:	4611      	mov	r1, r2
 8005892:	2200      	movs	r2, #0
 8005894:	602a      	str	r2, [r5, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	f7fb fbf4 	bl	8001084 <_lseek>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d102      	bne.n	80058a6 <_lseek_r+0x1e>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	b103      	cbz	r3, 80058a6 <_lseek_r+0x1e>
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	2000041c 	.word	0x2000041c

080058ac <_read_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4d07      	ldr	r5, [pc, #28]	@ (80058cc <_read_r+0x20>)
 80058b0:	4604      	mov	r4, r0
 80058b2:	4608      	mov	r0, r1
 80058b4:	4611      	mov	r1, r2
 80058b6:	2200      	movs	r2, #0
 80058b8:	602a      	str	r2, [r5, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f7fb fb82 	bl	8000fc4 <_read>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d102      	bne.n	80058ca <_read_r+0x1e>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	b103      	cbz	r3, 80058ca <_read_r+0x1e>
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	bd38      	pop	{r3, r4, r5, pc}
 80058cc:	2000041c 	.word	0x2000041c

080058d0 <_write_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4d07      	ldr	r5, [pc, #28]	@ (80058f0 <_write_r+0x20>)
 80058d4:	4604      	mov	r4, r0
 80058d6:	4608      	mov	r0, r1
 80058d8:	4611      	mov	r1, r2
 80058da:	2200      	movs	r2, #0
 80058dc:	602a      	str	r2, [r5, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	f7fb fb8d 	bl	8000ffe <_write>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_write_r+0x1e>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_write_r+0x1e>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	2000041c 	.word	0x2000041c

080058f4 <__errno>:
 80058f4:	4b01      	ldr	r3, [pc, #4]	@ (80058fc <__errno+0x8>)
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000018 	.word	0x20000018

08005900 <__libc_init_array>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	4d0d      	ldr	r5, [pc, #52]	@ (8005938 <__libc_init_array+0x38>)
 8005904:	4c0d      	ldr	r4, [pc, #52]	@ (800593c <__libc_init_array+0x3c>)
 8005906:	1b64      	subs	r4, r4, r5
 8005908:	10a4      	asrs	r4, r4, #2
 800590a:	2600      	movs	r6, #0
 800590c:	42a6      	cmp	r6, r4
 800590e:	d109      	bne.n	8005924 <__libc_init_array+0x24>
 8005910:	4d0b      	ldr	r5, [pc, #44]	@ (8005940 <__libc_init_array+0x40>)
 8005912:	4c0c      	ldr	r4, [pc, #48]	@ (8005944 <__libc_init_array+0x44>)
 8005914:	f003 fab6 	bl	8008e84 <_init>
 8005918:	1b64      	subs	r4, r4, r5
 800591a:	10a4      	asrs	r4, r4, #2
 800591c:	2600      	movs	r6, #0
 800591e:	42a6      	cmp	r6, r4
 8005920:	d105      	bne.n	800592e <__libc_init_array+0x2e>
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	f855 3b04 	ldr.w	r3, [r5], #4
 8005928:	4798      	blx	r3
 800592a:	3601      	adds	r6, #1
 800592c:	e7ee      	b.n	800590c <__libc_init_array+0xc>
 800592e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005932:	4798      	blx	r3
 8005934:	3601      	adds	r6, #1
 8005936:	e7f2      	b.n	800591e <__libc_init_array+0x1e>
 8005938:	0800930c 	.word	0x0800930c
 800593c:	0800930c 	.word	0x0800930c
 8005940:	0800930c 	.word	0x0800930c
 8005944:	08009310 	.word	0x08009310

08005948 <__retarget_lock_init_recursive>:
 8005948:	4770      	bx	lr

0800594a <__retarget_lock_acquire_recursive>:
 800594a:	4770      	bx	lr

0800594c <__retarget_lock_release_recursive>:
 800594c:	4770      	bx	lr
	...

08005950 <nanf>:
 8005950:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005958 <nanf+0x8>
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	7fc00000 	.word	0x7fc00000

0800595c <quorem>:
 800595c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005960:	6903      	ldr	r3, [r0, #16]
 8005962:	690c      	ldr	r4, [r1, #16]
 8005964:	42a3      	cmp	r3, r4
 8005966:	4607      	mov	r7, r0
 8005968:	db7e      	blt.n	8005a68 <quorem+0x10c>
 800596a:	3c01      	subs	r4, #1
 800596c:	f101 0814 	add.w	r8, r1, #20
 8005970:	00a3      	lsls	r3, r4, #2
 8005972:	f100 0514 	add.w	r5, r0, #20
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005982:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005986:	3301      	adds	r3, #1
 8005988:	429a      	cmp	r2, r3
 800598a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800598e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005992:	d32e      	bcc.n	80059f2 <quorem+0x96>
 8005994:	f04f 0a00 	mov.w	sl, #0
 8005998:	46c4      	mov	ip, r8
 800599a:	46ae      	mov	lr, r5
 800599c:	46d3      	mov	fp, sl
 800599e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80059a2:	b298      	uxth	r0, r3
 80059a4:	fb06 a000 	mla	r0, r6, r0, sl
 80059a8:	0c02      	lsrs	r2, r0, #16
 80059aa:	0c1b      	lsrs	r3, r3, #16
 80059ac:	fb06 2303 	mla	r3, r6, r3, r2
 80059b0:	f8de 2000 	ldr.w	r2, [lr]
 80059b4:	b280      	uxth	r0, r0
 80059b6:	b292      	uxth	r2, r2
 80059b8:	1a12      	subs	r2, r2, r0
 80059ba:	445a      	add	r2, fp
 80059bc:	f8de 0000 	ldr.w	r0, [lr]
 80059c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80059ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80059ce:	b292      	uxth	r2, r2
 80059d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80059d4:	45e1      	cmp	r9, ip
 80059d6:	f84e 2b04 	str.w	r2, [lr], #4
 80059da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80059de:	d2de      	bcs.n	800599e <quorem+0x42>
 80059e0:	9b00      	ldr	r3, [sp, #0]
 80059e2:	58eb      	ldr	r3, [r5, r3]
 80059e4:	b92b      	cbnz	r3, 80059f2 <quorem+0x96>
 80059e6:	9b01      	ldr	r3, [sp, #4]
 80059e8:	3b04      	subs	r3, #4
 80059ea:	429d      	cmp	r5, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	d32f      	bcc.n	8005a50 <quorem+0xf4>
 80059f0:	613c      	str	r4, [r7, #16]
 80059f2:	4638      	mov	r0, r7
 80059f4:	f001 f956 	bl	8006ca4 <__mcmp>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	db25      	blt.n	8005a48 <quorem+0xec>
 80059fc:	4629      	mov	r1, r5
 80059fe:	2000      	movs	r0, #0
 8005a00:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a04:	f8d1 c000 	ldr.w	ip, [r1]
 8005a08:	fa1f fe82 	uxth.w	lr, r2
 8005a0c:	fa1f f38c 	uxth.w	r3, ip
 8005a10:	eba3 030e 	sub.w	r3, r3, lr
 8005a14:	4403      	add	r3, r0
 8005a16:	0c12      	lsrs	r2, r2, #16
 8005a18:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005a1c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a26:	45c1      	cmp	r9, r8
 8005a28:	f841 3b04 	str.w	r3, [r1], #4
 8005a2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a30:	d2e6      	bcs.n	8005a00 <quorem+0xa4>
 8005a32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a3a:	b922      	cbnz	r2, 8005a46 <quorem+0xea>
 8005a3c:	3b04      	subs	r3, #4
 8005a3e:	429d      	cmp	r5, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	d30b      	bcc.n	8005a5c <quorem+0x100>
 8005a44:	613c      	str	r4, [r7, #16]
 8005a46:	3601      	adds	r6, #1
 8005a48:	4630      	mov	r0, r6
 8005a4a:	b003      	add	sp, #12
 8005a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	3b04      	subs	r3, #4
 8005a54:	2a00      	cmp	r2, #0
 8005a56:	d1cb      	bne.n	80059f0 <quorem+0x94>
 8005a58:	3c01      	subs	r4, #1
 8005a5a:	e7c6      	b.n	80059ea <quorem+0x8e>
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	3b04      	subs	r3, #4
 8005a60:	2a00      	cmp	r2, #0
 8005a62:	d1ef      	bne.n	8005a44 <quorem+0xe8>
 8005a64:	3c01      	subs	r4, #1
 8005a66:	e7ea      	b.n	8005a3e <quorem+0xe2>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	e7ee      	b.n	8005a4a <quorem+0xee>
 8005a6c:	0000      	movs	r0, r0
	...

08005a70 <_dtoa_r>:
 8005a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	ed2d 8b02 	vpush	{d8}
 8005a78:	69c7      	ldr	r7, [r0, #28]
 8005a7a:	b091      	sub	sp, #68	@ 0x44
 8005a7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a80:	ec55 4b10 	vmov	r4, r5, d0
 8005a84:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8005a86:	9107      	str	r1, [sp, #28]
 8005a88:	4681      	mov	r9, r0
 8005a8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a8c:	930d      	str	r3, [sp, #52]	@ 0x34
 8005a8e:	b97f      	cbnz	r7, 8005ab0 <_dtoa_r+0x40>
 8005a90:	2010      	movs	r0, #16
 8005a92:	f000 fd95 	bl	80065c0 <malloc>
 8005a96:	4602      	mov	r2, r0
 8005a98:	f8c9 001c 	str.w	r0, [r9, #28]
 8005a9c:	b920      	cbnz	r0, 8005aa8 <_dtoa_r+0x38>
 8005a9e:	4ba0      	ldr	r3, [pc, #640]	@ (8005d20 <_dtoa_r+0x2b0>)
 8005aa0:	21ef      	movs	r1, #239	@ 0xef
 8005aa2:	48a0      	ldr	r0, [pc, #640]	@ (8005d24 <_dtoa_r+0x2b4>)
 8005aa4:	f002 fb78 	bl	8008198 <__assert_func>
 8005aa8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005aac:	6007      	str	r7, [r0, #0]
 8005aae:	60c7      	str	r7, [r0, #12]
 8005ab0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	b159      	cbz	r1, 8005ad0 <_dtoa_r+0x60>
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	604a      	str	r2, [r1, #4]
 8005abc:	2301      	movs	r3, #1
 8005abe:	4093      	lsls	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]
 8005ac2:	4648      	mov	r0, r9
 8005ac4:	f000 fe72 	bl	80067ac <_Bfree>
 8005ac8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	1e2b      	subs	r3, r5, #0
 8005ad2:	bfbb      	ittet	lt
 8005ad4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ad8:	9303      	strlt	r3, [sp, #12]
 8005ada:	2300      	movge	r3, #0
 8005adc:	2201      	movlt	r2, #1
 8005ade:	bfac      	ite	ge
 8005ae0:	6033      	strge	r3, [r6, #0]
 8005ae2:	6032      	strlt	r2, [r6, #0]
 8005ae4:	4b90      	ldr	r3, [pc, #576]	@ (8005d28 <_dtoa_r+0x2b8>)
 8005ae6:	9e03      	ldr	r6, [sp, #12]
 8005ae8:	43b3      	bics	r3, r6
 8005aea:	d110      	bne.n	8005b0e <_dtoa_r+0x9e>
 8005aec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005aee:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8005af8:	4323      	orrs	r3, r4
 8005afa:	f000 84e6 	beq.w	80064ca <_dtoa_r+0xa5a>
 8005afe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005b00:	4f8a      	ldr	r7, [pc, #552]	@ (8005d2c <_dtoa_r+0x2bc>)
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 84e8 	beq.w	80064d8 <_dtoa_r+0xa68>
 8005b08:	1cfb      	adds	r3, r7, #3
 8005b0a:	f000 bce3 	b.w	80064d4 <_dtoa_r+0xa64>
 8005b0e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005b12:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b1a:	d10a      	bne.n	8005b32 <_dtoa_r+0xc2>
 8005b1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b1e:	2301      	movs	r3, #1
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005b24:	b113      	cbz	r3, 8005b2c <_dtoa_r+0xbc>
 8005b26:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005b28:	4b81      	ldr	r3, [pc, #516]	@ (8005d30 <_dtoa_r+0x2c0>)
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	4f81      	ldr	r7, [pc, #516]	@ (8005d34 <_dtoa_r+0x2c4>)
 8005b2e:	f000 bcd3 	b.w	80064d8 <_dtoa_r+0xa68>
 8005b32:	aa0e      	add	r2, sp, #56	@ 0x38
 8005b34:	a90f      	add	r1, sp, #60	@ 0x3c
 8005b36:	4648      	mov	r0, r9
 8005b38:	eeb0 0b48 	vmov.f64	d0, d8
 8005b3c:	f001 f9d2 	bl	8006ee4 <__d2b>
 8005b40:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8005b44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b46:	9001      	str	r0, [sp, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d045      	beq.n	8005bd8 <_dtoa_r+0x168>
 8005b4c:	eeb0 7b48 	vmov.f64	d7, d8
 8005b50:	ee18 1a90 	vmov	r1, s17
 8005b54:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005b58:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8005b5c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005b60:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005b64:	2500      	movs	r5, #0
 8005b66:	ee07 1a90 	vmov	s15, r1
 8005b6a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8005b6e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005d08 <_dtoa_r+0x298>
 8005b72:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b76:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005d10 <_dtoa_r+0x2a0>
 8005b7a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005b7e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005d18 <_dtoa_r+0x2a8>
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005b8a:	eeb0 7b46 	vmov.f64	d7, d6
 8005b8e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005b92:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005b96:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9e:	ee16 8a90 	vmov	r8, s13
 8005ba2:	d508      	bpl.n	8005bb6 <_dtoa_r+0x146>
 8005ba4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005ba8:	eeb4 6b47 	vcmp.f64	d6, d7
 8005bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb0:	bf18      	it	ne
 8005bb2:	f108 38ff 	addne.w	r8, r8, #4294967295
 8005bb6:	f1b8 0f16 	cmp.w	r8, #22
 8005bba:	d82b      	bhi.n	8005c14 <_dtoa_r+0x1a4>
 8005bbc:	495e      	ldr	r1, [pc, #376]	@ (8005d38 <_dtoa_r+0x2c8>)
 8005bbe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8005bc2:	ed91 7b00 	vldr	d7, [r1]
 8005bc6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bce:	d501      	bpl.n	8005bd4 <_dtoa_r+0x164>
 8005bd0:	f108 38ff 	add.w	r8, r8, #4294967295
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	e01e      	b.n	8005c16 <_dtoa_r+0x1a6>
 8005bd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bda:	4413      	add	r3, r2
 8005bdc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8005be0:	2920      	cmp	r1, #32
 8005be2:	bfc1      	itttt	gt
 8005be4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8005be8:	408e      	lslgt	r6, r1
 8005bea:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8005bee:	fa24 f101 	lsrgt.w	r1, r4, r1
 8005bf2:	bfd6      	itet	le
 8005bf4:	f1c1 0120 	rsble	r1, r1, #32
 8005bf8:	4331      	orrgt	r1, r6
 8005bfa:	fa04 f101 	lslle.w	r1, r4, r1
 8005bfe:	ee07 1a90 	vmov	s15, r1
 8005c02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005c06:	3b01      	subs	r3, #1
 8005c08:	ee17 1a90 	vmov	r1, s15
 8005c0c:	2501      	movs	r5, #1
 8005c0e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8005c12:	e7a8      	b.n	8005b66 <_dtoa_r+0xf6>
 8005c14:	2101      	movs	r1, #1
 8005c16:	1ad2      	subs	r2, r2, r3
 8005c18:	1e53      	subs	r3, r2, #1
 8005c1a:	9306      	str	r3, [sp, #24]
 8005c1c:	bf45      	ittet	mi
 8005c1e:	f1c2 0301 	rsbmi	r3, r2, #1
 8005c22:	9304      	strmi	r3, [sp, #16]
 8005c24:	2300      	movpl	r3, #0
 8005c26:	2300      	movmi	r3, #0
 8005c28:	bf4c      	ite	mi
 8005c2a:	9306      	strmi	r3, [sp, #24]
 8005c2c:	9304      	strpl	r3, [sp, #16]
 8005c2e:	f1b8 0f00 	cmp.w	r8, #0
 8005c32:	910c      	str	r1, [sp, #48]	@ 0x30
 8005c34:	db18      	blt.n	8005c68 <_dtoa_r+0x1f8>
 8005c36:	9b06      	ldr	r3, [sp, #24]
 8005c38:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005c3c:	4443      	add	r3, r8
 8005c3e:	9306      	str	r3, [sp, #24]
 8005c40:	2300      	movs	r3, #0
 8005c42:	9a07      	ldr	r2, [sp, #28]
 8005c44:	2a09      	cmp	r2, #9
 8005c46:	d845      	bhi.n	8005cd4 <_dtoa_r+0x264>
 8005c48:	2a05      	cmp	r2, #5
 8005c4a:	bfc4      	itt	gt
 8005c4c:	3a04      	subgt	r2, #4
 8005c4e:	9207      	strgt	r2, [sp, #28]
 8005c50:	9a07      	ldr	r2, [sp, #28]
 8005c52:	f1a2 0202 	sub.w	r2, r2, #2
 8005c56:	bfcc      	ite	gt
 8005c58:	2400      	movgt	r4, #0
 8005c5a:	2401      	movle	r4, #1
 8005c5c:	2a03      	cmp	r2, #3
 8005c5e:	d844      	bhi.n	8005cea <_dtoa_r+0x27a>
 8005c60:	e8df f002 	tbb	[pc, r2]
 8005c64:	0b173634 	.word	0x0b173634
 8005c68:	9b04      	ldr	r3, [sp, #16]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	eba3 0308 	sub.w	r3, r3, r8
 8005c70:	9304      	str	r3, [sp, #16]
 8005c72:	920a      	str	r2, [sp, #40]	@ 0x28
 8005c74:	f1c8 0300 	rsb	r3, r8, #0
 8005c78:	e7e3      	b.n	8005c42 <_dtoa_r+0x1d2>
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	9208      	str	r2, [sp, #32]
 8005c7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c80:	eb08 0b02 	add.w	fp, r8, r2
 8005c84:	f10b 0a01 	add.w	sl, fp, #1
 8005c88:	4652      	mov	r2, sl
 8005c8a:	2a01      	cmp	r2, #1
 8005c8c:	bfb8      	it	lt
 8005c8e:	2201      	movlt	r2, #1
 8005c90:	e006      	b.n	8005ca0 <_dtoa_r+0x230>
 8005c92:	2201      	movs	r2, #1
 8005c94:	9208      	str	r2, [sp, #32]
 8005c96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c98:	2a00      	cmp	r2, #0
 8005c9a:	dd29      	ble.n	8005cf0 <_dtoa_r+0x280>
 8005c9c:	4693      	mov	fp, r2
 8005c9e:	4692      	mov	sl, r2
 8005ca0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	2004      	movs	r0, #4
 8005ca8:	f100 0614 	add.w	r6, r0, #20
 8005cac:	4296      	cmp	r6, r2
 8005cae:	d926      	bls.n	8005cfe <_dtoa_r+0x28e>
 8005cb0:	6079      	str	r1, [r7, #4]
 8005cb2:	4648      	mov	r0, r9
 8005cb4:	9305      	str	r3, [sp, #20]
 8005cb6:	f000 fd39 	bl	800672c <_Balloc>
 8005cba:	9b05      	ldr	r3, [sp, #20]
 8005cbc:	4607      	mov	r7, r0
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d13e      	bne.n	8005d40 <_dtoa_r+0x2d0>
 8005cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d3c <_dtoa_r+0x2cc>)
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	f240 11af 	movw	r1, #431	@ 0x1af
 8005cca:	e6ea      	b.n	8005aa2 <_dtoa_r+0x32>
 8005ccc:	2200      	movs	r2, #0
 8005cce:	e7e1      	b.n	8005c94 <_dtoa_r+0x224>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	e7d3      	b.n	8005c7c <_dtoa_r+0x20c>
 8005cd4:	2401      	movs	r4, #1
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8005cdc:	f04f 3bff 	mov.w	fp, #4294967295
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	46da      	mov	sl, fp
 8005ce4:	2212      	movs	r2, #18
 8005ce6:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ce8:	e7da      	b.n	8005ca0 <_dtoa_r+0x230>
 8005cea:	2201      	movs	r2, #1
 8005cec:	9208      	str	r2, [sp, #32]
 8005cee:	e7f5      	b.n	8005cdc <_dtoa_r+0x26c>
 8005cf0:	f04f 0b01 	mov.w	fp, #1
 8005cf4:	46da      	mov	sl, fp
 8005cf6:	465a      	mov	r2, fp
 8005cf8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8005cfc:	e7d0      	b.n	8005ca0 <_dtoa_r+0x230>
 8005cfe:	3101      	adds	r1, #1
 8005d00:	0040      	lsls	r0, r0, #1
 8005d02:	e7d1      	b.n	8005ca8 <_dtoa_r+0x238>
 8005d04:	f3af 8000 	nop.w
 8005d08:	636f4361 	.word	0x636f4361
 8005d0c:	3fd287a7 	.word	0x3fd287a7
 8005d10:	8b60c8b3 	.word	0x8b60c8b3
 8005d14:	3fc68a28 	.word	0x3fc68a28
 8005d18:	509f79fb 	.word	0x509f79fb
 8005d1c:	3fd34413 	.word	0x3fd34413
 8005d20:	08008f1e 	.word	0x08008f1e
 8005d24:	08008f35 	.word	0x08008f35
 8005d28:	7ff00000 	.word	0x7ff00000
 8005d2c:	08008f1a 	.word	0x08008f1a
 8005d30:	08008ee9 	.word	0x08008ee9
 8005d34:	08008ee8 	.word	0x08008ee8
 8005d38:	080090e8 	.word	0x080090e8
 8005d3c:	08008f8d 	.word	0x08008f8d
 8005d40:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8005d44:	f1ba 0f0e 	cmp.w	sl, #14
 8005d48:	6010      	str	r0, [r2, #0]
 8005d4a:	d86e      	bhi.n	8005e2a <_dtoa_r+0x3ba>
 8005d4c:	2c00      	cmp	r4, #0
 8005d4e:	d06c      	beq.n	8005e2a <_dtoa_r+0x3ba>
 8005d50:	f1b8 0f00 	cmp.w	r8, #0
 8005d54:	f340 80b4 	ble.w	8005ec0 <_dtoa_r+0x450>
 8005d58:	4ac8      	ldr	r2, [pc, #800]	@ (800607c <_dtoa_r+0x60c>)
 8005d5a:	f008 010f 	and.w	r1, r8, #15
 8005d5e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005d62:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8005d66:	ed92 7b00 	vldr	d7, [r2]
 8005d6a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8005d6e:	f000 809b 	beq.w	8005ea8 <_dtoa_r+0x438>
 8005d72:	4ac3      	ldr	r2, [pc, #780]	@ (8006080 <_dtoa_r+0x610>)
 8005d74:	ed92 6b08 	vldr	d6, [r2, #32]
 8005d78:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005d7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005d80:	f001 010f 	and.w	r1, r1, #15
 8005d84:	2203      	movs	r2, #3
 8005d86:	48be      	ldr	r0, [pc, #760]	@ (8006080 <_dtoa_r+0x610>)
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	f040 808f 	bne.w	8005eac <_dtoa_r+0x43c>
 8005d8e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005d92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005d96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005d9a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005d9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005da0:	2900      	cmp	r1, #0
 8005da2:	f000 80b3 	beq.w	8005f0c <_dtoa_r+0x49c>
 8005da6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005daa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db2:	f140 80ab 	bpl.w	8005f0c <_dtoa_r+0x49c>
 8005db6:	f1ba 0f00 	cmp.w	sl, #0
 8005dba:	f000 80a7 	beq.w	8005f0c <_dtoa_r+0x49c>
 8005dbe:	f1bb 0f00 	cmp.w	fp, #0
 8005dc2:	dd30      	ble.n	8005e26 <_dtoa_r+0x3b6>
 8005dc4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8005dc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005dcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005dd0:	f108 31ff 	add.w	r1, r8, #4294967295
 8005dd4:	9105      	str	r1, [sp, #20]
 8005dd6:	3201      	adds	r2, #1
 8005dd8:	465c      	mov	r4, fp
 8005dda:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005dde:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8005de2:	ee07 2a90 	vmov	s15, r2
 8005de6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005dea:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005dee:	ee15 2a90 	vmov	r2, s11
 8005df2:	ec51 0b15 	vmov	r0, r1, d5
 8005df6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8005dfa:	2c00      	cmp	r4, #0
 8005dfc:	f040 808a 	bne.w	8005f14 <_dtoa_r+0x4a4>
 8005e00:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005e04:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005e08:	ec41 0b17 	vmov	d7, r0, r1
 8005e0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e14:	f300 826a 	bgt.w	80062ec <_dtoa_r+0x87c>
 8005e18:	eeb1 7b47 	vneg.f64	d7, d7
 8005e1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e24:	d423      	bmi.n	8005e6e <_dtoa_r+0x3fe>
 8005e26:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005e2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005e2c:	2a00      	cmp	r2, #0
 8005e2e:	f2c0 8129 	blt.w	8006084 <_dtoa_r+0x614>
 8005e32:	f1b8 0f0e 	cmp.w	r8, #14
 8005e36:	f300 8125 	bgt.w	8006084 <_dtoa_r+0x614>
 8005e3a:	4b90      	ldr	r3, [pc, #576]	@ (800607c <_dtoa_r+0x60c>)
 8005e3c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005e40:	ed93 6b00 	vldr	d6, [r3]
 8005e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f280 80c8 	bge.w	8005fdc <_dtoa_r+0x56c>
 8005e4c:	f1ba 0f00 	cmp.w	sl, #0
 8005e50:	f300 80c4 	bgt.w	8005fdc <_dtoa_r+0x56c>
 8005e54:	d10b      	bne.n	8005e6e <_dtoa_r+0x3fe>
 8005e56:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005e5a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005e5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e6a:	f2c0 823c 	blt.w	80062e6 <_dtoa_r+0x876>
 8005e6e:	2400      	movs	r4, #0
 8005e70:	4625      	mov	r5, r4
 8005e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e74:	43db      	mvns	r3, r3
 8005e76:	9305      	str	r3, [sp, #20]
 8005e78:	463e      	mov	r6, r7
 8005e7a:	f04f 0800 	mov.w	r8, #0
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4648      	mov	r0, r9
 8005e82:	f000 fc93 	bl	80067ac <_Bfree>
 8005e86:	2d00      	cmp	r5, #0
 8005e88:	f000 80a2 	beq.w	8005fd0 <_dtoa_r+0x560>
 8005e8c:	f1b8 0f00 	cmp.w	r8, #0
 8005e90:	d005      	beq.n	8005e9e <_dtoa_r+0x42e>
 8005e92:	45a8      	cmp	r8, r5
 8005e94:	d003      	beq.n	8005e9e <_dtoa_r+0x42e>
 8005e96:	4641      	mov	r1, r8
 8005e98:	4648      	mov	r0, r9
 8005e9a:	f000 fc87 	bl	80067ac <_Bfree>
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	4648      	mov	r0, r9
 8005ea2:	f000 fc83 	bl	80067ac <_Bfree>
 8005ea6:	e093      	b.n	8005fd0 <_dtoa_r+0x560>
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	e76c      	b.n	8005d86 <_dtoa_r+0x316>
 8005eac:	07cc      	lsls	r4, r1, #31
 8005eae:	d504      	bpl.n	8005eba <_dtoa_r+0x44a>
 8005eb0:	ed90 6b00 	vldr	d6, [r0]
 8005eb4:	3201      	adds	r2, #1
 8005eb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005eba:	1049      	asrs	r1, r1, #1
 8005ebc:	3008      	adds	r0, #8
 8005ebe:	e763      	b.n	8005d88 <_dtoa_r+0x318>
 8005ec0:	d022      	beq.n	8005f08 <_dtoa_r+0x498>
 8005ec2:	f1c8 0100 	rsb	r1, r8, #0
 8005ec6:	4a6d      	ldr	r2, [pc, #436]	@ (800607c <_dtoa_r+0x60c>)
 8005ec8:	f001 000f 	and.w	r0, r1, #15
 8005ecc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005ed0:	ed92 7b00 	vldr	d7, [r2]
 8005ed4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005ed8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005edc:	4868      	ldr	r0, [pc, #416]	@ (8006080 <_dtoa_r+0x610>)
 8005ede:	1109      	asrs	r1, r1, #4
 8005ee0:	2400      	movs	r4, #0
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	b929      	cbnz	r1, 8005ef2 <_dtoa_r+0x482>
 8005ee6:	2c00      	cmp	r4, #0
 8005ee8:	f43f af57 	beq.w	8005d9a <_dtoa_r+0x32a>
 8005eec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ef0:	e753      	b.n	8005d9a <_dtoa_r+0x32a>
 8005ef2:	07ce      	lsls	r6, r1, #31
 8005ef4:	d505      	bpl.n	8005f02 <_dtoa_r+0x492>
 8005ef6:	ed90 6b00 	vldr	d6, [r0]
 8005efa:	3201      	adds	r2, #1
 8005efc:	2401      	movs	r4, #1
 8005efe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005f02:	1049      	asrs	r1, r1, #1
 8005f04:	3008      	adds	r0, #8
 8005f06:	e7ed      	b.n	8005ee4 <_dtoa_r+0x474>
 8005f08:	2202      	movs	r2, #2
 8005f0a:	e746      	b.n	8005d9a <_dtoa_r+0x32a>
 8005f0c:	f8cd 8014 	str.w	r8, [sp, #20]
 8005f10:	4654      	mov	r4, sl
 8005f12:	e762      	b.n	8005dda <_dtoa_r+0x36a>
 8005f14:	4a59      	ldr	r2, [pc, #356]	@ (800607c <_dtoa_r+0x60c>)
 8005f16:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005f1a:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005f1e:	9a08      	ldr	r2, [sp, #32]
 8005f20:	ec41 0b17 	vmov	d7, r0, r1
 8005f24:	443c      	add	r4, r7
 8005f26:	b34a      	cbz	r2, 8005f7c <_dtoa_r+0x50c>
 8005f28:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8005f2c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8005f30:	463e      	mov	r6, r7
 8005f32:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005f36:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005f3a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005f3e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005f42:	ee14 2a90 	vmov	r2, s9
 8005f46:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005f4a:	3230      	adds	r2, #48	@ 0x30
 8005f4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005f50:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f58:	f806 2b01 	strb.w	r2, [r6], #1
 8005f5c:	d438      	bmi.n	8005fd0 <_dtoa_r+0x560>
 8005f5e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005f62:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6a:	d46e      	bmi.n	800604a <_dtoa_r+0x5da>
 8005f6c:	42a6      	cmp	r6, r4
 8005f6e:	f43f af5a 	beq.w	8005e26 <_dtoa_r+0x3b6>
 8005f72:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005f76:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005f7a:	e7e0      	b.n	8005f3e <_dtoa_r+0x4ce>
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	463e      	mov	r6, r7
 8005f80:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005f84:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005f88:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005f8c:	ee14 2a90 	vmov	r2, s9
 8005f90:	3230      	adds	r2, #48	@ 0x30
 8005f92:	f806 2b01 	strb.w	r2, [r6], #1
 8005f96:	42a6      	cmp	r6, r4
 8005f98:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005f9c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005fa0:	d119      	bne.n	8005fd6 <_dtoa_r+0x566>
 8005fa2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8005fa6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005faa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb2:	dc4a      	bgt.n	800604a <_dtoa_r+0x5da>
 8005fb4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005fb8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc0:	f57f af31 	bpl.w	8005e26 <_dtoa_r+0x3b6>
 8005fc4:	460e      	mov	r6, r1
 8005fc6:	3901      	subs	r1, #1
 8005fc8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005fcc:	2b30      	cmp	r3, #48	@ 0x30
 8005fce:	d0f9      	beq.n	8005fc4 <_dtoa_r+0x554>
 8005fd0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8005fd4:	e027      	b.n	8006026 <_dtoa_r+0x5b6>
 8005fd6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005fda:	e7d5      	b.n	8005f88 <_dtoa_r+0x518>
 8005fdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fe0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8005fe4:	463e      	mov	r6, r7
 8005fe6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005fea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005fee:	ee15 3a10 	vmov	r3, s10
 8005ff2:	3330      	adds	r3, #48	@ 0x30
 8005ff4:	f806 3b01 	strb.w	r3, [r6], #1
 8005ff8:	1bf3      	subs	r3, r6, r7
 8005ffa:	459a      	cmp	sl, r3
 8005ffc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006000:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006004:	d132      	bne.n	800606c <_dtoa_r+0x5fc>
 8006006:	ee37 7b07 	vadd.f64	d7, d7, d7
 800600a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800600e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006012:	dc18      	bgt.n	8006046 <_dtoa_r+0x5d6>
 8006014:	eeb4 7b46 	vcmp.f64	d7, d6
 8006018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800601c:	d103      	bne.n	8006026 <_dtoa_r+0x5b6>
 800601e:	ee15 3a10 	vmov	r3, s10
 8006022:	07db      	lsls	r3, r3, #31
 8006024:	d40f      	bmi.n	8006046 <_dtoa_r+0x5d6>
 8006026:	9901      	ldr	r1, [sp, #4]
 8006028:	4648      	mov	r0, r9
 800602a:	f000 fbbf 	bl	80067ac <_Bfree>
 800602e:	2300      	movs	r3, #0
 8006030:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006032:	7033      	strb	r3, [r6, #0]
 8006034:	f108 0301 	add.w	r3, r8, #1
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 824b 	beq.w	80064d8 <_dtoa_r+0xa68>
 8006042:	601e      	str	r6, [r3, #0]
 8006044:	e248      	b.n	80064d8 <_dtoa_r+0xa68>
 8006046:	f8cd 8014 	str.w	r8, [sp, #20]
 800604a:	4633      	mov	r3, r6
 800604c:	461e      	mov	r6, r3
 800604e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006052:	2a39      	cmp	r2, #57	@ 0x39
 8006054:	d106      	bne.n	8006064 <_dtoa_r+0x5f4>
 8006056:	429f      	cmp	r7, r3
 8006058:	d1f8      	bne.n	800604c <_dtoa_r+0x5dc>
 800605a:	9a05      	ldr	r2, [sp, #20]
 800605c:	3201      	adds	r2, #1
 800605e:	9205      	str	r2, [sp, #20]
 8006060:	2230      	movs	r2, #48	@ 0x30
 8006062:	703a      	strb	r2, [r7, #0]
 8006064:	781a      	ldrb	r2, [r3, #0]
 8006066:	3201      	adds	r2, #1
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e7b1      	b.n	8005fd0 <_dtoa_r+0x560>
 800606c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006070:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006078:	d1b5      	bne.n	8005fe6 <_dtoa_r+0x576>
 800607a:	e7d4      	b.n	8006026 <_dtoa_r+0x5b6>
 800607c:	080090e8 	.word	0x080090e8
 8006080:	080090c0 	.word	0x080090c0
 8006084:	9908      	ldr	r1, [sp, #32]
 8006086:	2900      	cmp	r1, #0
 8006088:	f000 80e9 	beq.w	800625e <_dtoa_r+0x7ee>
 800608c:	9907      	ldr	r1, [sp, #28]
 800608e:	2901      	cmp	r1, #1
 8006090:	f300 80cb 	bgt.w	800622a <_dtoa_r+0x7ba>
 8006094:	2d00      	cmp	r5, #0
 8006096:	f000 80c4 	beq.w	8006222 <_dtoa_r+0x7b2>
 800609a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800609e:	9e04      	ldr	r6, [sp, #16]
 80060a0:	461c      	mov	r4, r3
 80060a2:	9305      	str	r3, [sp, #20]
 80060a4:	9b04      	ldr	r3, [sp, #16]
 80060a6:	4413      	add	r3, r2
 80060a8:	9304      	str	r3, [sp, #16]
 80060aa:	9b06      	ldr	r3, [sp, #24]
 80060ac:	2101      	movs	r1, #1
 80060ae:	4413      	add	r3, r2
 80060b0:	4648      	mov	r0, r9
 80060b2:	9306      	str	r3, [sp, #24]
 80060b4:	f000 fc78 	bl	80069a8 <__i2b>
 80060b8:	9b05      	ldr	r3, [sp, #20]
 80060ba:	4605      	mov	r5, r0
 80060bc:	b166      	cbz	r6, 80060d8 <_dtoa_r+0x668>
 80060be:	9a06      	ldr	r2, [sp, #24]
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	dd09      	ble.n	80060d8 <_dtoa_r+0x668>
 80060c4:	42b2      	cmp	r2, r6
 80060c6:	9904      	ldr	r1, [sp, #16]
 80060c8:	bfa8      	it	ge
 80060ca:	4632      	movge	r2, r6
 80060cc:	1a89      	subs	r1, r1, r2
 80060ce:	9104      	str	r1, [sp, #16]
 80060d0:	9906      	ldr	r1, [sp, #24]
 80060d2:	1ab6      	subs	r6, r6, r2
 80060d4:	1a8a      	subs	r2, r1, r2
 80060d6:	9206      	str	r2, [sp, #24]
 80060d8:	b30b      	cbz	r3, 800611e <_dtoa_r+0x6ae>
 80060da:	9a08      	ldr	r2, [sp, #32]
 80060dc:	2a00      	cmp	r2, #0
 80060de:	f000 80c5 	beq.w	800626c <_dtoa_r+0x7fc>
 80060e2:	2c00      	cmp	r4, #0
 80060e4:	f000 80bf 	beq.w	8006266 <_dtoa_r+0x7f6>
 80060e8:	4629      	mov	r1, r5
 80060ea:	4622      	mov	r2, r4
 80060ec:	4648      	mov	r0, r9
 80060ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060f0:	f000 fd12 	bl	8006b18 <__pow5mult>
 80060f4:	9a01      	ldr	r2, [sp, #4]
 80060f6:	4601      	mov	r1, r0
 80060f8:	4605      	mov	r5, r0
 80060fa:	4648      	mov	r0, r9
 80060fc:	f000 fc6a 	bl	80069d4 <__multiply>
 8006100:	9901      	ldr	r1, [sp, #4]
 8006102:	9005      	str	r0, [sp, #20]
 8006104:	4648      	mov	r0, r9
 8006106:	f000 fb51 	bl	80067ac <_Bfree>
 800610a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800610c:	1b1b      	subs	r3, r3, r4
 800610e:	f000 80b0 	beq.w	8006272 <_dtoa_r+0x802>
 8006112:	9905      	ldr	r1, [sp, #20]
 8006114:	461a      	mov	r2, r3
 8006116:	4648      	mov	r0, r9
 8006118:	f000 fcfe 	bl	8006b18 <__pow5mult>
 800611c:	9001      	str	r0, [sp, #4]
 800611e:	2101      	movs	r1, #1
 8006120:	4648      	mov	r0, r9
 8006122:	f000 fc41 	bl	80069a8 <__i2b>
 8006126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006128:	4604      	mov	r4, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 81da 	beq.w	80064e4 <_dtoa_r+0xa74>
 8006130:	461a      	mov	r2, r3
 8006132:	4601      	mov	r1, r0
 8006134:	4648      	mov	r0, r9
 8006136:	f000 fcef 	bl	8006b18 <__pow5mult>
 800613a:	9b07      	ldr	r3, [sp, #28]
 800613c:	2b01      	cmp	r3, #1
 800613e:	4604      	mov	r4, r0
 8006140:	f300 80a0 	bgt.w	8006284 <_dtoa_r+0x814>
 8006144:	9b02      	ldr	r3, [sp, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	f040 8096 	bne.w	8006278 <_dtoa_r+0x808>
 800614c:	9b03      	ldr	r3, [sp, #12]
 800614e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006152:	2a00      	cmp	r2, #0
 8006154:	f040 8092 	bne.w	800627c <_dtoa_r+0x80c>
 8006158:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800615c:	0d12      	lsrs	r2, r2, #20
 800615e:	0512      	lsls	r2, r2, #20
 8006160:	2a00      	cmp	r2, #0
 8006162:	f000 808d 	beq.w	8006280 <_dtoa_r+0x810>
 8006166:	9b04      	ldr	r3, [sp, #16]
 8006168:	3301      	adds	r3, #1
 800616a:	9304      	str	r3, [sp, #16]
 800616c:	9b06      	ldr	r3, [sp, #24]
 800616e:	3301      	adds	r3, #1
 8006170:	9306      	str	r3, [sp, #24]
 8006172:	2301      	movs	r3, #1
 8006174:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006176:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 81b9 	beq.w	80064f0 <_dtoa_r+0xa80>
 800617e:	6922      	ldr	r2, [r4, #16]
 8006180:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006184:	6910      	ldr	r0, [r2, #16]
 8006186:	f000 fbc3 	bl	8006910 <__hi0bits>
 800618a:	f1c0 0020 	rsb	r0, r0, #32
 800618e:	9b06      	ldr	r3, [sp, #24]
 8006190:	4418      	add	r0, r3
 8006192:	f010 001f 	ands.w	r0, r0, #31
 8006196:	f000 8081 	beq.w	800629c <_dtoa_r+0x82c>
 800619a:	f1c0 0220 	rsb	r2, r0, #32
 800619e:	2a04      	cmp	r2, #4
 80061a0:	dd73      	ble.n	800628a <_dtoa_r+0x81a>
 80061a2:	9b04      	ldr	r3, [sp, #16]
 80061a4:	f1c0 001c 	rsb	r0, r0, #28
 80061a8:	4403      	add	r3, r0
 80061aa:	9304      	str	r3, [sp, #16]
 80061ac:	9b06      	ldr	r3, [sp, #24]
 80061ae:	4406      	add	r6, r0
 80061b0:	4403      	add	r3, r0
 80061b2:	9306      	str	r3, [sp, #24]
 80061b4:	9b04      	ldr	r3, [sp, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	dd05      	ble.n	80061c6 <_dtoa_r+0x756>
 80061ba:	9901      	ldr	r1, [sp, #4]
 80061bc:	461a      	mov	r2, r3
 80061be:	4648      	mov	r0, r9
 80061c0:	f000 fd04 	bl	8006bcc <__lshift>
 80061c4:	9001      	str	r0, [sp, #4]
 80061c6:	9b06      	ldr	r3, [sp, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	dd05      	ble.n	80061d8 <_dtoa_r+0x768>
 80061cc:	4621      	mov	r1, r4
 80061ce:	461a      	mov	r2, r3
 80061d0:	4648      	mov	r0, r9
 80061d2:	f000 fcfb 	bl	8006bcc <__lshift>
 80061d6:	4604      	mov	r4, r0
 80061d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d060      	beq.n	80062a0 <_dtoa_r+0x830>
 80061de:	9801      	ldr	r0, [sp, #4]
 80061e0:	4621      	mov	r1, r4
 80061e2:	f000 fd5f 	bl	8006ca4 <__mcmp>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	da5a      	bge.n	80062a0 <_dtoa_r+0x830>
 80061ea:	f108 33ff 	add.w	r3, r8, #4294967295
 80061ee:	9305      	str	r3, [sp, #20]
 80061f0:	9901      	ldr	r1, [sp, #4]
 80061f2:	2300      	movs	r3, #0
 80061f4:	220a      	movs	r2, #10
 80061f6:	4648      	mov	r0, r9
 80061f8:	f000 fafa 	bl	80067f0 <__multadd>
 80061fc:	9b08      	ldr	r3, [sp, #32]
 80061fe:	9001      	str	r0, [sp, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8177 	beq.w	80064f4 <_dtoa_r+0xa84>
 8006206:	4629      	mov	r1, r5
 8006208:	2300      	movs	r3, #0
 800620a:	220a      	movs	r2, #10
 800620c:	4648      	mov	r0, r9
 800620e:	f000 faef 	bl	80067f0 <__multadd>
 8006212:	f1bb 0f00 	cmp.w	fp, #0
 8006216:	4605      	mov	r5, r0
 8006218:	dc6e      	bgt.n	80062f8 <_dtoa_r+0x888>
 800621a:	9b07      	ldr	r3, [sp, #28]
 800621c:	2b02      	cmp	r3, #2
 800621e:	dc48      	bgt.n	80062b2 <_dtoa_r+0x842>
 8006220:	e06a      	b.n	80062f8 <_dtoa_r+0x888>
 8006222:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006224:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006228:	e739      	b.n	800609e <_dtoa_r+0x62e>
 800622a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800622e:	42a3      	cmp	r3, r4
 8006230:	db07      	blt.n	8006242 <_dtoa_r+0x7d2>
 8006232:	f1ba 0f00 	cmp.w	sl, #0
 8006236:	eba3 0404 	sub.w	r4, r3, r4
 800623a:	db0b      	blt.n	8006254 <_dtoa_r+0x7e4>
 800623c:	9e04      	ldr	r6, [sp, #16]
 800623e:	4652      	mov	r2, sl
 8006240:	e72f      	b.n	80060a2 <_dtoa_r+0x632>
 8006242:	1ae2      	subs	r2, r4, r3
 8006244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006246:	9e04      	ldr	r6, [sp, #16]
 8006248:	4413      	add	r3, r2
 800624a:	930a      	str	r3, [sp, #40]	@ 0x28
 800624c:	4652      	mov	r2, sl
 800624e:	4623      	mov	r3, r4
 8006250:	2400      	movs	r4, #0
 8006252:	e726      	b.n	80060a2 <_dtoa_r+0x632>
 8006254:	9a04      	ldr	r2, [sp, #16]
 8006256:	eba2 060a 	sub.w	r6, r2, sl
 800625a:	2200      	movs	r2, #0
 800625c:	e721      	b.n	80060a2 <_dtoa_r+0x632>
 800625e:	9e04      	ldr	r6, [sp, #16]
 8006260:	9d08      	ldr	r5, [sp, #32]
 8006262:	461c      	mov	r4, r3
 8006264:	e72a      	b.n	80060bc <_dtoa_r+0x64c>
 8006266:	9a01      	ldr	r2, [sp, #4]
 8006268:	9205      	str	r2, [sp, #20]
 800626a:	e752      	b.n	8006112 <_dtoa_r+0x6a2>
 800626c:	9901      	ldr	r1, [sp, #4]
 800626e:	461a      	mov	r2, r3
 8006270:	e751      	b.n	8006116 <_dtoa_r+0x6a6>
 8006272:	9b05      	ldr	r3, [sp, #20]
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	e752      	b.n	800611e <_dtoa_r+0x6ae>
 8006278:	2300      	movs	r3, #0
 800627a:	e77b      	b.n	8006174 <_dtoa_r+0x704>
 800627c:	9b02      	ldr	r3, [sp, #8]
 800627e:	e779      	b.n	8006174 <_dtoa_r+0x704>
 8006280:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006282:	e778      	b.n	8006176 <_dtoa_r+0x706>
 8006284:	2300      	movs	r3, #0
 8006286:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006288:	e779      	b.n	800617e <_dtoa_r+0x70e>
 800628a:	d093      	beq.n	80061b4 <_dtoa_r+0x744>
 800628c:	9b04      	ldr	r3, [sp, #16]
 800628e:	321c      	adds	r2, #28
 8006290:	4413      	add	r3, r2
 8006292:	9304      	str	r3, [sp, #16]
 8006294:	9b06      	ldr	r3, [sp, #24]
 8006296:	4416      	add	r6, r2
 8006298:	4413      	add	r3, r2
 800629a:	e78a      	b.n	80061b2 <_dtoa_r+0x742>
 800629c:	4602      	mov	r2, r0
 800629e:	e7f5      	b.n	800628c <_dtoa_r+0x81c>
 80062a0:	f1ba 0f00 	cmp.w	sl, #0
 80062a4:	f8cd 8014 	str.w	r8, [sp, #20]
 80062a8:	46d3      	mov	fp, sl
 80062aa:	dc21      	bgt.n	80062f0 <_dtoa_r+0x880>
 80062ac:	9b07      	ldr	r3, [sp, #28]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	dd1e      	ble.n	80062f0 <_dtoa_r+0x880>
 80062b2:	f1bb 0f00 	cmp.w	fp, #0
 80062b6:	f47f addc 	bne.w	8005e72 <_dtoa_r+0x402>
 80062ba:	4621      	mov	r1, r4
 80062bc:	465b      	mov	r3, fp
 80062be:	2205      	movs	r2, #5
 80062c0:	4648      	mov	r0, r9
 80062c2:	f000 fa95 	bl	80067f0 <__multadd>
 80062c6:	4601      	mov	r1, r0
 80062c8:	4604      	mov	r4, r0
 80062ca:	9801      	ldr	r0, [sp, #4]
 80062cc:	f000 fcea 	bl	8006ca4 <__mcmp>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	f77f adce 	ble.w	8005e72 <_dtoa_r+0x402>
 80062d6:	463e      	mov	r6, r7
 80062d8:	2331      	movs	r3, #49	@ 0x31
 80062da:	f806 3b01 	strb.w	r3, [r6], #1
 80062de:	9b05      	ldr	r3, [sp, #20]
 80062e0:	3301      	adds	r3, #1
 80062e2:	9305      	str	r3, [sp, #20]
 80062e4:	e5c9      	b.n	8005e7a <_dtoa_r+0x40a>
 80062e6:	f8cd 8014 	str.w	r8, [sp, #20]
 80062ea:	4654      	mov	r4, sl
 80062ec:	4625      	mov	r5, r4
 80062ee:	e7f2      	b.n	80062d6 <_dtoa_r+0x866>
 80062f0:	9b08      	ldr	r3, [sp, #32]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 8102 	beq.w	80064fc <_dtoa_r+0xa8c>
 80062f8:	2e00      	cmp	r6, #0
 80062fa:	dd05      	ble.n	8006308 <_dtoa_r+0x898>
 80062fc:	4629      	mov	r1, r5
 80062fe:	4632      	mov	r2, r6
 8006300:	4648      	mov	r0, r9
 8006302:	f000 fc63 	bl	8006bcc <__lshift>
 8006306:	4605      	mov	r5, r0
 8006308:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d058      	beq.n	80063c0 <_dtoa_r+0x950>
 800630e:	6869      	ldr	r1, [r5, #4]
 8006310:	4648      	mov	r0, r9
 8006312:	f000 fa0b 	bl	800672c <_Balloc>
 8006316:	4606      	mov	r6, r0
 8006318:	b928      	cbnz	r0, 8006326 <_dtoa_r+0x8b6>
 800631a:	4b82      	ldr	r3, [pc, #520]	@ (8006524 <_dtoa_r+0xab4>)
 800631c:	4602      	mov	r2, r0
 800631e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006322:	f7ff bbbe 	b.w	8005aa2 <_dtoa_r+0x32>
 8006326:	692a      	ldr	r2, [r5, #16]
 8006328:	3202      	adds	r2, #2
 800632a:	0092      	lsls	r2, r2, #2
 800632c:	f105 010c 	add.w	r1, r5, #12
 8006330:	300c      	adds	r0, #12
 8006332:	f001 ff19 	bl	8008168 <memcpy>
 8006336:	2201      	movs	r2, #1
 8006338:	4631      	mov	r1, r6
 800633a:	4648      	mov	r0, r9
 800633c:	f000 fc46 	bl	8006bcc <__lshift>
 8006340:	1c7b      	adds	r3, r7, #1
 8006342:	9304      	str	r3, [sp, #16]
 8006344:	eb07 030b 	add.w	r3, r7, fp
 8006348:	9309      	str	r3, [sp, #36]	@ 0x24
 800634a:	9b02      	ldr	r3, [sp, #8]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	46a8      	mov	r8, r5
 8006352:	9308      	str	r3, [sp, #32]
 8006354:	4605      	mov	r5, r0
 8006356:	9b04      	ldr	r3, [sp, #16]
 8006358:	9801      	ldr	r0, [sp, #4]
 800635a:	4621      	mov	r1, r4
 800635c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006360:	f7ff fafc 	bl	800595c <quorem>
 8006364:	4641      	mov	r1, r8
 8006366:	9002      	str	r0, [sp, #8]
 8006368:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800636c:	9801      	ldr	r0, [sp, #4]
 800636e:	f000 fc99 	bl	8006ca4 <__mcmp>
 8006372:	462a      	mov	r2, r5
 8006374:	9006      	str	r0, [sp, #24]
 8006376:	4621      	mov	r1, r4
 8006378:	4648      	mov	r0, r9
 800637a:	f000 fcaf 	bl	8006cdc <__mdiff>
 800637e:	68c2      	ldr	r2, [r0, #12]
 8006380:	4606      	mov	r6, r0
 8006382:	b9fa      	cbnz	r2, 80063c4 <_dtoa_r+0x954>
 8006384:	4601      	mov	r1, r0
 8006386:	9801      	ldr	r0, [sp, #4]
 8006388:	f000 fc8c 	bl	8006ca4 <__mcmp>
 800638c:	4602      	mov	r2, r0
 800638e:	4631      	mov	r1, r6
 8006390:	4648      	mov	r0, r9
 8006392:	920a      	str	r2, [sp, #40]	@ 0x28
 8006394:	f000 fa0a 	bl	80067ac <_Bfree>
 8006398:	9b07      	ldr	r3, [sp, #28]
 800639a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800639c:	9e04      	ldr	r6, [sp, #16]
 800639e:	ea42 0103 	orr.w	r1, r2, r3
 80063a2:	9b08      	ldr	r3, [sp, #32]
 80063a4:	4319      	orrs	r1, r3
 80063a6:	d10f      	bne.n	80063c8 <_dtoa_r+0x958>
 80063a8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80063ac:	d028      	beq.n	8006400 <_dtoa_r+0x990>
 80063ae:	9b06      	ldr	r3, [sp, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	dd02      	ble.n	80063ba <_dtoa_r+0x94a>
 80063b4:	9b02      	ldr	r3, [sp, #8]
 80063b6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80063ba:	f88b a000 	strb.w	sl, [fp]
 80063be:	e55e      	b.n	8005e7e <_dtoa_r+0x40e>
 80063c0:	4628      	mov	r0, r5
 80063c2:	e7bd      	b.n	8006340 <_dtoa_r+0x8d0>
 80063c4:	2201      	movs	r2, #1
 80063c6:	e7e2      	b.n	800638e <_dtoa_r+0x91e>
 80063c8:	9b06      	ldr	r3, [sp, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	db04      	blt.n	80063d8 <_dtoa_r+0x968>
 80063ce:	9907      	ldr	r1, [sp, #28]
 80063d0:	430b      	orrs	r3, r1
 80063d2:	9908      	ldr	r1, [sp, #32]
 80063d4:	430b      	orrs	r3, r1
 80063d6:	d120      	bne.n	800641a <_dtoa_r+0x9aa>
 80063d8:	2a00      	cmp	r2, #0
 80063da:	ddee      	ble.n	80063ba <_dtoa_r+0x94a>
 80063dc:	9901      	ldr	r1, [sp, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	4648      	mov	r0, r9
 80063e2:	f000 fbf3 	bl	8006bcc <__lshift>
 80063e6:	4621      	mov	r1, r4
 80063e8:	9001      	str	r0, [sp, #4]
 80063ea:	f000 fc5b 	bl	8006ca4 <__mcmp>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	dc03      	bgt.n	80063fa <_dtoa_r+0x98a>
 80063f2:	d1e2      	bne.n	80063ba <_dtoa_r+0x94a>
 80063f4:	f01a 0f01 	tst.w	sl, #1
 80063f8:	d0df      	beq.n	80063ba <_dtoa_r+0x94a>
 80063fa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80063fe:	d1d9      	bne.n	80063b4 <_dtoa_r+0x944>
 8006400:	2339      	movs	r3, #57	@ 0x39
 8006402:	f88b 3000 	strb.w	r3, [fp]
 8006406:	4633      	mov	r3, r6
 8006408:	461e      	mov	r6, r3
 800640a:	3b01      	subs	r3, #1
 800640c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006410:	2a39      	cmp	r2, #57	@ 0x39
 8006412:	d052      	beq.n	80064ba <_dtoa_r+0xa4a>
 8006414:	3201      	adds	r2, #1
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	e531      	b.n	8005e7e <_dtoa_r+0x40e>
 800641a:	2a00      	cmp	r2, #0
 800641c:	dd07      	ble.n	800642e <_dtoa_r+0x9be>
 800641e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006422:	d0ed      	beq.n	8006400 <_dtoa_r+0x990>
 8006424:	f10a 0301 	add.w	r3, sl, #1
 8006428:	f88b 3000 	strb.w	r3, [fp]
 800642c:	e527      	b.n	8005e7e <_dtoa_r+0x40e>
 800642e:	9b04      	ldr	r3, [sp, #16]
 8006430:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006432:	f803 ac01 	strb.w	sl, [r3, #-1]
 8006436:	4293      	cmp	r3, r2
 8006438:	d029      	beq.n	800648e <_dtoa_r+0xa1e>
 800643a:	9901      	ldr	r1, [sp, #4]
 800643c:	2300      	movs	r3, #0
 800643e:	220a      	movs	r2, #10
 8006440:	4648      	mov	r0, r9
 8006442:	f000 f9d5 	bl	80067f0 <__multadd>
 8006446:	45a8      	cmp	r8, r5
 8006448:	9001      	str	r0, [sp, #4]
 800644a:	f04f 0300 	mov.w	r3, #0
 800644e:	f04f 020a 	mov.w	r2, #10
 8006452:	4641      	mov	r1, r8
 8006454:	4648      	mov	r0, r9
 8006456:	d107      	bne.n	8006468 <_dtoa_r+0x9f8>
 8006458:	f000 f9ca 	bl	80067f0 <__multadd>
 800645c:	4680      	mov	r8, r0
 800645e:	4605      	mov	r5, r0
 8006460:	9b04      	ldr	r3, [sp, #16]
 8006462:	3301      	adds	r3, #1
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	e776      	b.n	8006356 <_dtoa_r+0x8e6>
 8006468:	f000 f9c2 	bl	80067f0 <__multadd>
 800646c:	4629      	mov	r1, r5
 800646e:	4680      	mov	r8, r0
 8006470:	2300      	movs	r3, #0
 8006472:	220a      	movs	r2, #10
 8006474:	4648      	mov	r0, r9
 8006476:	f000 f9bb 	bl	80067f0 <__multadd>
 800647a:	4605      	mov	r5, r0
 800647c:	e7f0      	b.n	8006460 <_dtoa_r+0x9f0>
 800647e:	f1bb 0f00 	cmp.w	fp, #0
 8006482:	bfcc      	ite	gt
 8006484:	465e      	movgt	r6, fp
 8006486:	2601      	movle	r6, #1
 8006488:	443e      	add	r6, r7
 800648a:	f04f 0800 	mov.w	r8, #0
 800648e:	9901      	ldr	r1, [sp, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	4648      	mov	r0, r9
 8006494:	f000 fb9a 	bl	8006bcc <__lshift>
 8006498:	4621      	mov	r1, r4
 800649a:	9001      	str	r0, [sp, #4]
 800649c:	f000 fc02 	bl	8006ca4 <__mcmp>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	dcb0      	bgt.n	8006406 <_dtoa_r+0x996>
 80064a4:	d102      	bne.n	80064ac <_dtoa_r+0xa3c>
 80064a6:	f01a 0f01 	tst.w	sl, #1
 80064aa:	d1ac      	bne.n	8006406 <_dtoa_r+0x996>
 80064ac:	4633      	mov	r3, r6
 80064ae:	461e      	mov	r6, r3
 80064b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064b4:	2a30      	cmp	r2, #48	@ 0x30
 80064b6:	d0fa      	beq.n	80064ae <_dtoa_r+0xa3e>
 80064b8:	e4e1      	b.n	8005e7e <_dtoa_r+0x40e>
 80064ba:	429f      	cmp	r7, r3
 80064bc:	d1a4      	bne.n	8006408 <_dtoa_r+0x998>
 80064be:	9b05      	ldr	r3, [sp, #20]
 80064c0:	3301      	adds	r3, #1
 80064c2:	9305      	str	r3, [sp, #20]
 80064c4:	2331      	movs	r3, #49	@ 0x31
 80064c6:	703b      	strb	r3, [r7, #0]
 80064c8:	e4d9      	b.n	8005e7e <_dtoa_r+0x40e>
 80064ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80064cc:	4f16      	ldr	r7, [pc, #88]	@ (8006528 <_dtoa_r+0xab8>)
 80064ce:	b11b      	cbz	r3, 80064d8 <_dtoa_r+0xa68>
 80064d0:	f107 0308 	add.w	r3, r7, #8
 80064d4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	4638      	mov	r0, r7
 80064da:	b011      	add	sp, #68	@ 0x44
 80064dc:	ecbd 8b02 	vpop	{d8}
 80064e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e4:	9b07      	ldr	r3, [sp, #28]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	f77f ae2c 	ble.w	8006144 <_dtoa_r+0x6d4>
 80064ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064f0:	2001      	movs	r0, #1
 80064f2:	e64c      	b.n	800618e <_dtoa_r+0x71e>
 80064f4:	f1bb 0f00 	cmp.w	fp, #0
 80064f8:	f77f aed8 	ble.w	80062ac <_dtoa_r+0x83c>
 80064fc:	463e      	mov	r6, r7
 80064fe:	9801      	ldr	r0, [sp, #4]
 8006500:	4621      	mov	r1, r4
 8006502:	f7ff fa2b 	bl	800595c <quorem>
 8006506:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800650a:	f806 ab01 	strb.w	sl, [r6], #1
 800650e:	1bf2      	subs	r2, r6, r7
 8006510:	4593      	cmp	fp, r2
 8006512:	ddb4      	ble.n	800647e <_dtoa_r+0xa0e>
 8006514:	9901      	ldr	r1, [sp, #4]
 8006516:	2300      	movs	r3, #0
 8006518:	220a      	movs	r2, #10
 800651a:	4648      	mov	r0, r9
 800651c:	f000 f968 	bl	80067f0 <__multadd>
 8006520:	9001      	str	r0, [sp, #4]
 8006522:	e7ec      	b.n	80064fe <_dtoa_r+0xa8e>
 8006524:	08008f8d 	.word	0x08008f8d
 8006528:	08008f11 	.word	0x08008f11

0800652c <_free_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4605      	mov	r5, r0
 8006530:	2900      	cmp	r1, #0
 8006532:	d041      	beq.n	80065b8 <_free_r+0x8c>
 8006534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006538:	1f0c      	subs	r4, r1, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	bfb8      	it	lt
 800653e:	18e4      	addlt	r4, r4, r3
 8006540:	f000 f8e8 	bl	8006714 <__malloc_lock>
 8006544:	4a1d      	ldr	r2, [pc, #116]	@ (80065bc <_free_r+0x90>)
 8006546:	6813      	ldr	r3, [r2, #0]
 8006548:	b933      	cbnz	r3, 8006558 <_free_r+0x2c>
 800654a:	6063      	str	r3, [r4, #4]
 800654c:	6014      	str	r4, [r2, #0]
 800654e:	4628      	mov	r0, r5
 8006550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006554:	f000 b8e4 	b.w	8006720 <__malloc_unlock>
 8006558:	42a3      	cmp	r3, r4
 800655a:	d908      	bls.n	800656e <_free_r+0x42>
 800655c:	6820      	ldr	r0, [r4, #0]
 800655e:	1821      	adds	r1, r4, r0
 8006560:	428b      	cmp	r3, r1
 8006562:	bf01      	itttt	eq
 8006564:	6819      	ldreq	r1, [r3, #0]
 8006566:	685b      	ldreq	r3, [r3, #4]
 8006568:	1809      	addeq	r1, r1, r0
 800656a:	6021      	streq	r1, [r4, #0]
 800656c:	e7ed      	b.n	800654a <_free_r+0x1e>
 800656e:	461a      	mov	r2, r3
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	b10b      	cbz	r3, 8006578 <_free_r+0x4c>
 8006574:	42a3      	cmp	r3, r4
 8006576:	d9fa      	bls.n	800656e <_free_r+0x42>
 8006578:	6811      	ldr	r1, [r2, #0]
 800657a:	1850      	adds	r0, r2, r1
 800657c:	42a0      	cmp	r0, r4
 800657e:	d10b      	bne.n	8006598 <_free_r+0x6c>
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	4401      	add	r1, r0
 8006584:	1850      	adds	r0, r2, r1
 8006586:	4283      	cmp	r3, r0
 8006588:	6011      	str	r1, [r2, #0]
 800658a:	d1e0      	bne.n	800654e <_free_r+0x22>
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	6053      	str	r3, [r2, #4]
 8006592:	4408      	add	r0, r1
 8006594:	6010      	str	r0, [r2, #0]
 8006596:	e7da      	b.n	800654e <_free_r+0x22>
 8006598:	d902      	bls.n	80065a0 <_free_r+0x74>
 800659a:	230c      	movs	r3, #12
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	e7d6      	b.n	800654e <_free_r+0x22>
 80065a0:	6820      	ldr	r0, [r4, #0]
 80065a2:	1821      	adds	r1, r4, r0
 80065a4:	428b      	cmp	r3, r1
 80065a6:	bf04      	itt	eq
 80065a8:	6819      	ldreq	r1, [r3, #0]
 80065aa:	685b      	ldreq	r3, [r3, #4]
 80065ac:	6063      	str	r3, [r4, #4]
 80065ae:	bf04      	itt	eq
 80065b0:	1809      	addeq	r1, r1, r0
 80065b2:	6021      	streq	r1, [r4, #0]
 80065b4:	6054      	str	r4, [r2, #4]
 80065b6:	e7ca      	b.n	800654e <_free_r+0x22>
 80065b8:	bd38      	pop	{r3, r4, r5, pc}
 80065ba:	bf00      	nop
 80065bc:	20000428 	.word	0x20000428

080065c0 <malloc>:
 80065c0:	4b02      	ldr	r3, [pc, #8]	@ (80065cc <malloc+0xc>)
 80065c2:	4601      	mov	r1, r0
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	f000 b825 	b.w	8006614 <_malloc_r>
 80065ca:	bf00      	nop
 80065cc:	20000018 	.word	0x20000018

080065d0 <sbrk_aligned>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	4e0f      	ldr	r6, [pc, #60]	@ (8006610 <sbrk_aligned+0x40>)
 80065d4:	460c      	mov	r4, r1
 80065d6:	6831      	ldr	r1, [r6, #0]
 80065d8:	4605      	mov	r5, r0
 80065da:	b911      	cbnz	r1, 80065e2 <sbrk_aligned+0x12>
 80065dc:	f001 fdb4 	bl	8008148 <_sbrk_r>
 80065e0:	6030      	str	r0, [r6, #0]
 80065e2:	4621      	mov	r1, r4
 80065e4:	4628      	mov	r0, r5
 80065e6:	f001 fdaf 	bl	8008148 <_sbrk_r>
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	d103      	bne.n	80065f6 <sbrk_aligned+0x26>
 80065ee:	f04f 34ff 	mov.w	r4, #4294967295
 80065f2:	4620      	mov	r0, r4
 80065f4:	bd70      	pop	{r4, r5, r6, pc}
 80065f6:	1cc4      	adds	r4, r0, #3
 80065f8:	f024 0403 	bic.w	r4, r4, #3
 80065fc:	42a0      	cmp	r0, r4
 80065fe:	d0f8      	beq.n	80065f2 <sbrk_aligned+0x22>
 8006600:	1a21      	subs	r1, r4, r0
 8006602:	4628      	mov	r0, r5
 8006604:	f001 fda0 	bl	8008148 <_sbrk_r>
 8006608:	3001      	adds	r0, #1
 800660a:	d1f2      	bne.n	80065f2 <sbrk_aligned+0x22>
 800660c:	e7ef      	b.n	80065ee <sbrk_aligned+0x1e>
 800660e:	bf00      	nop
 8006610:	20000424 	.word	0x20000424

08006614 <_malloc_r>:
 8006614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006618:	1ccd      	adds	r5, r1, #3
 800661a:	f025 0503 	bic.w	r5, r5, #3
 800661e:	3508      	adds	r5, #8
 8006620:	2d0c      	cmp	r5, #12
 8006622:	bf38      	it	cc
 8006624:	250c      	movcc	r5, #12
 8006626:	2d00      	cmp	r5, #0
 8006628:	4606      	mov	r6, r0
 800662a:	db01      	blt.n	8006630 <_malloc_r+0x1c>
 800662c:	42a9      	cmp	r1, r5
 800662e:	d904      	bls.n	800663a <_malloc_r+0x26>
 8006630:	230c      	movs	r3, #12
 8006632:	6033      	str	r3, [r6, #0]
 8006634:	2000      	movs	r0, #0
 8006636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800663a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006710 <_malloc_r+0xfc>
 800663e:	f000 f869 	bl	8006714 <__malloc_lock>
 8006642:	f8d8 3000 	ldr.w	r3, [r8]
 8006646:	461c      	mov	r4, r3
 8006648:	bb44      	cbnz	r4, 800669c <_malloc_r+0x88>
 800664a:	4629      	mov	r1, r5
 800664c:	4630      	mov	r0, r6
 800664e:	f7ff ffbf 	bl	80065d0 <sbrk_aligned>
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	4604      	mov	r4, r0
 8006656:	d158      	bne.n	800670a <_malloc_r+0xf6>
 8006658:	f8d8 4000 	ldr.w	r4, [r8]
 800665c:	4627      	mov	r7, r4
 800665e:	2f00      	cmp	r7, #0
 8006660:	d143      	bne.n	80066ea <_malloc_r+0xd6>
 8006662:	2c00      	cmp	r4, #0
 8006664:	d04b      	beq.n	80066fe <_malloc_r+0xea>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	4639      	mov	r1, r7
 800666a:	4630      	mov	r0, r6
 800666c:	eb04 0903 	add.w	r9, r4, r3
 8006670:	f001 fd6a 	bl	8008148 <_sbrk_r>
 8006674:	4581      	cmp	r9, r0
 8006676:	d142      	bne.n	80066fe <_malloc_r+0xea>
 8006678:	6821      	ldr	r1, [r4, #0]
 800667a:	1a6d      	subs	r5, r5, r1
 800667c:	4629      	mov	r1, r5
 800667e:	4630      	mov	r0, r6
 8006680:	f7ff ffa6 	bl	80065d0 <sbrk_aligned>
 8006684:	3001      	adds	r0, #1
 8006686:	d03a      	beq.n	80066fe <_malloc_r+0xea>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	442b      	add	r3, r5
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	f8d8 3000 	ldr.w	r3, [r8]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	bb62      	cbnz	r2, 80066f0 <_malloc_r+0xdc>
 8006696:	f8c8 7000 	str.w	r7, [r8]
 800669a:	e00f      	b.n	80066bc <_malloc_r+0xa8>
 800669c:	6822      	ldr	r2, [r4, #0]
 800669e:	1b52      	subs	r2, r2, r5
 80066a0:	d420      	bmi.n	80066e4 <_malloc_r+0xd0>
 80066a2:	2a0b      	cmp	r2, #11
 80066a4:	d917      	bls.n	80066d6 <_malloc_r+0xc2>
 80066a6:	1961      	adds	r1, r4, r5
 80066a8:	42a3      	cmp	r3, r4
 80066aa:	6025      	str	r5, [r4, #0]
 80066ac:	bf18      	it	ne
 80066ae:	6059      	strne	r1, [r3, #4]
 80066b0:	6863      	ldr	r3, [r4, #4]
 80066b2:	bf08      	it	eq
 80066b4:	f8c8 1000 	streq.w	r1, [r8]
 80066b8:	5162      	str	r2, [r4, r5]
 80066ba:	604b      	str	r3, [r1, #4]
 80066bc:	4630      	mov	r0, r6
 80066be:	f000 f82f 	bl	8006720 <__malloc_unlock>
 80066c2:	f104 000b 	add.w	r0, r4, #11
 80066c6:	1d23      	adds	r3, r4, #4
 80066c8:	f020 0007 	bic.w	r0, r0, #7
 80066cc:	1ac2      	subs	r2, r0, r3
 80066ce:	bf1c      	itt	ne
 80066d0:	1a1b      	subne	r3, r3, r0
 80066d2:	50a3      	strne	r3, [r4, r2]
 80066d4:	e7af      	b.n	8006636 <_malloc_r+0x22>
 80066d6:	6862      	ldr	r2, [r4, #4]
 80066d8:	42a3      	cmp	r3, r4
 80066da:	bf0c      	ite	eq
 80066dc:	f8c8 2000 	streq.w	r2, [r8]
 80066e0:	605a      	strne	r2, [r3, #4]
 80066e2:	e7eb      	b.n	80066bc <_malloc_r+0xa8>
 80066e4:	4623      	mov	r3, r4
 80066e6:	6864      	ldr	r4, [r4, #4]
 80066e8:	e7ae      	b.n	8006648 <_malloc_r+0x34>
 80066ea:	463c      	mov	r4, r7
 80066ec:	687f      	ldr	r7, [r7, #4]
 80066ee:	e7b6      	b.n	800665e <_malloc_r+0x4a>
 80066f0:	461a      	mov	r2, r3
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	42a3      	cmp	r3, r4
 80066f6:	d1fb      	bne.n	80066f0 <_malloc_r+0xdc>
 80066f8:	2300      	movs	r3, #0
 80066fa:	6053      	str	r3, [r2, #4]
 80066fc:	e7de      	b.n	80066bc <_malloc_r+0xa8>
 80066fe:	230c      	movs	r3, #12
 8006700:	6033      	str	r3, [r6, #0]
 8006702:	4630      	mov	r0, r6
 8006704:	f000 f80c 	bl	8006720 <__malloc_unlock>
 8006708:	e794      	b.n	8006634 <_malloc_r+0x20>
 800670a:	6005      	str	r5, [r0, #0]
 800670c:	e7d6      	b.n	80066bc <_malloc_r+0xa8>
 800670e:	bf00      	nop
 8006710:	20000428 	.word	0x20000428

08006714 <__malloc_lock>:
 8006714:	4801      	ldr	r0, [pc, #4]	@ (800671c <__malloc_lock+0x8>)
 8006716:	f7ff b918 	b.w	800594a <__retarget_lock_acquire_recursive>
 800671a:	bf00      	nop
 800671c:	20000420 	.word	0x20000420

08006720 <__malloc_unlock>:
 8006720:	4801      	ldr	r0, [pc, #4]	@ (8006728 <__malloc_unlock+0x8>)
 8006722:	f7ff b913 	b.w	800594c <__retarget_lock_release_recursive>
 8006726:	bf00      	nop
 8006728:	20000420 	.word	0x20000420

0800672c <_Balloc>:
 800672c:	b570      	push	{r4, r5, r6, lr}
 800672e:	69c6      	ldr	r6, [r0, #28]
 8006730:	4604      	mov	r4, r0
 8006732:	460d      	mov	r5, r1
 8006734:	b976      	cbnz	r6, 8006754 <_Balloc+0x28>
 8006736:	2010      	movs	r0, #16
 8006738:	f7ff ff42 	bl	80065c0 <malloc>
 800673c:	4602      	mov	r2, r0
 800673e:	61e0      	str	r0, [r4, #28]
 8006740:	b920      	cbnz	r0, 800674c <_Balloc+0x20>
 8006742:	4b18      	ldr	r3, [pc, #96]	@ (80067a4 <_Balloc+0x78>)
 8006744:	4818      	ldr	r0, [pc, #96]	@ (80067a8 <_Balloc+0x7c>)
 8006746:	216b      	movs	r1, #107	@ 0x6b
 8006748:	f001 fd26 	bl	8008198 <__assert_func>
 800674c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006750:	6006      	str	r6, [r0, #0]
 8006752:	60c6      	str	r6, [r0, #12]
 8006754:	69e6      	ldr	r6, [r4, #28]
 8006756:	68f3      	ldr	r3, [r6, #12]
 8006758:	b183      	cbz	r3, 800677c <_Balloc+0x50>
 800675a:	69e3      	ldr	r3, [r4, #28]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006762:	b9b8      	cbnz	r0, 8006794 <_Balloc+0x68>
 8006764:	2101      	movs	r1, #1
 8006766:	fa01 f605 	lsl.w	r6, r1, r5
 800676a:	1d72      	adds	r2, r6, #5
 800676c:	0092      	lsls	r2, r2, #2
 800676e:	4620      	mov	r0, r4
 8006770:	f001 fd30 	bl	80081d4 <_calloc_r>
 8006774:	b160      	cbz	r0, 8006790 <_Balloc+0x64>
 8006776:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800677a:	e00e      	b.n	800679a <_Balloc+0x6e>
 800677c:	2221      	movs	r2, #33	@ 0x21
 800677e:	2104      	movs	r1, #4
 8006780:	4620      	mov	r0, r4
 8006782:	f001 fd27 	bl	80081d4 <_calloc_r>
 8006786:	69e3      	ldr	r3, [r4, #28]
 8006788:	60f0      	str	r0, [r6, #12]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e4      	bne.n	800675a <_Balloc+0x2e>
 8006790:	2000      	movs	r0, #0
 8006792:	bd70      	pop	{r4, r5, r6, pc}
 8006794:	6802      	ldr	r2, [r0, #0]
 8006796:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800679a:	2300      	movs	r3, #0
 800679c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067a0:	e7f7      	b.n	8006792 <_Balloc+0x66>
 80067a2:	bf00      	nop
 80067a4:	08008f1e 	.word	0x08008f1e
 80067a8:	08008f9e 	.word	0x08008f9e

080067ac <_Bfree>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	69c6      	ldr	r6, [r0, #28]
 80067b0:	4605      	mov	r5, r0
 80067b2:	460c      	mov	r4, r1
 80067b4:	b976      	cbnz	r6, 80067d4 <_Bfree+0x28>
 80067b6:	2010      	movs	r0, #16
 80067b8:	f7ff ff02 	bl	80065c0 <malloc>
 80067bc:	4602      	mov	r2, r0
 80067be:	61e8      	str	r0, [r5, #28]
 80067c0:	b920      	cbnz	r0, 80067cc <_Bfree+0x20>
 80067c2:	4b09      	ldr	r3, [pc, #36]	@ (80067e8 <_Bfree+0x3c>)
 80067c4:	4809      	ldr	r0, [pc, #36]	@ (80067ec <_Bfree+0x40>)
 80067c6:	218f      	movs	r1, #143	@ 0x8f
 80067c8:	f001 fce6 	bl	8008198 <__assert_func>
 80067cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067d0:	6006      	str	r6, [r0, #0]
 80067d2:	60c6      	str	r6, [r0, #12]
 80067d4:	b13c      	cbz	r4, 80067e6 <_Bfree+0x3a>
 80067d6:	69eb      	ldr	r3, [r5, #28]
 80067d8:	6862      	ldr	r2, [r4, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067e0:	6021      	str	r1, [r4, #0]
 80067e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	08008f1e 	.word	0x08008f1e
 80067ec:	08008f9e 	.word	0x08008f9e

080067f0 <__multadd>:
 80067f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f4:	690d      	ldr	r5, [r1, #16]
 80067f6:	4607      	mov	r7, r0
 80067f8:	460c      	mov	r4, r1
 80067fa:	461e      	mov	r6, r3
 80067fc:	f101 0c14 	add.w	ip, r1, #20
 8006800:	2000      	movs	r0, #0
 8006802:	f8dc 3000 	ldr.w	r3, [ip]
 8006806:	b299      	uxth	r1, r3
 8006808:	fb02 6101 	mla	r1, r2, r1, r6
 800680c:	0c1e      	lsrs	r6, r3, #16
 800680e:	0c0b      	lsrs	r3, r1, #16
 8006810:	fb02 3306 	mla	r3, r2, r6, r3
 8006814:	b289      	uxth	r1, r1
 8006816:	3001      	adds	r0, #1
 8006818:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800681c:	4285      	cmp	r5, r0
 800681e:	f84c 1b04 	str.w	r1, [ip], #4
 8006822:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006826:	dcec      	bgt.n	8006802 <__multadd+0x12>
 8006828:	b30e      	cbz	r6, 800686e <__multadd+0x7e>
 800682a:	68a3      	ldr	r3, [r4, #8]
 800682c:	42ab      	cmp	r3, r5
 800682e:	dc19      	bgt.n	8006864 <__multadd+0x74>
 8006830:	6861      	ldr	r1, [r4, #4]
 8006832:	4638      	mov	r0, r7
 8006834:	3101      	adds	r1, #1
 8006836:	f7ff ff79 	bl	800672c <_Balloc>
 800683a:	4680      	mov	r8, r0
 800683c:	b928      	cbnz	r0, 800684a <__multadd+0x5a>
 800683e:	4602      	mov	r2, r0
 8006840:	4b0c      	ldr	r3, [pc, #48]	@ (8006874 <__multadd+0x84>)
 8006842:	480d      	ldr	r0, [pc, #52]	@ (8006878 <__multadd+0x88>)
 8006844:	21ba      	movs	r1, #186	@ 0xba
 8006846:	f001 fca7 	bl	8008198 <__assert_func>
 800684a:	6922      	ldr	r2, [r4, #16]
 800684c:	3202      	adds	r2, #2
 800684e:	f104 010c 	add.w	r1, r4, #12
 8006852:	0092      	lsls	r2, r2, #2
 8006854:	300c      	adds	r0, #12
 8006856:	f001 fc87 	bl	8008168 <memcpy>
 800685a:	4621      	mov	r1, r4
 800685c:	4638      	mov	r0, r7
 800685e:	f7ff ffa5 	bl	80067ac <_Bfree>
 8006862:	4644      	mov	r4, r8
 8006864:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006868:	3501      	adds	r5, #1
 800686a:	615e      	str	r6, [r3, #20]
 800686c:	6125      	str	r5, [r4, #16]
 800686e:	4620      	mov	r0, r4
 8006870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006874:	08008f8d 	.word	0x08008f8d
 8006878:	08008f9e 	.word	0x08008f9e

0800687c <__s2b>:
 800687c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006880:	460c      	mov	r4, r1
 8006882:	4615      	mov	r5, r2
 8006884:	461f      	mov	r7, r3
 8006886:	2209      	movs	r2, #9
 8006888:	3308      	adds	r3, #8
 800688a:	4606      	mov	r6, r0
 800688c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006890:	2100      	movs	r1, #0
 8006892:	2201      	movs	r2, #1
 8006894:	429a      	cmp	r2, r3
 8006896:	db09      	blt.n	80068ac <__s2b+0x30>
 8006898:	4630      	mov	r0, r6
 800689a:	f7ff ff47 	bl	800672c <_Balloc>
 800689e:	b940      	cbnz	r0, 80068b2 <__s2b+0x36>
 80068a0:	4602      	mov	r2, r0
 80068a2:	4b19      	ldr	r3, [pc, #100]	@ (8006908 <__s2b+0x8c>)
 80068a4:	4819      	ldr	r0, [pc, #100]	@ (800690c <__s2b+0x90>)
 80068a6:	21d3      	movs	r1, #211	@ 0xd3
 80068a8:	f001 fc76 	bl	8008198 <__assert_func>
 80068ac:	0052      	lsls	r2, r2, #1
 80068ae:	3101      	adds	r1, #1
 80068b0:	e7f0      	b.n	8006894 <__s2b+0x18>
 80068b2:	9b08      	ldr	r3, [sp, #32]
 80068b4:	6143      	str	r3, [r0, #20]
 80068b6:	2d09      	cmp	r5, #9
 80068b8:	f04f 0301 	mov.w	r3, #1
 80068bc:	6103      	str	r3, [r0, #16]
 80068be:	dd16      	ble.n	80068ee <__s2b+0x72>
 80068c0:	f104 0909 	add.w	r9, r4, #9
 80068c4:	46c8      	mov	r8, r9
 80068c6:	442c      	add	r4, r5
 80068c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80068cc:	4601      	mov	r1, r0
 80068ce:	3b30      	subs	r3, #48	@ 0x30
 80068d0:	220a      	movs	r2, #10
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7ff ff8c 	bl	80067f0 <__multadd>
 80068d8:	45a0      	cmp	r8, r4
 80068da:	d1f5      	bne.n	80068c8 <__s2b+0x4c>
 80068dc:	f1a5 0408 	sub.w	r4, r5, #8
 80068e0:	444c      	add	r4, r9
 80068e2:	1b2d      	subs	r5, r5, r4
 80068e4:	1963      	adds	r3, r4, r5
 80068e6:	42bb      	cmp	r3, r7
 80068e8:	db04      	blt.n	80068f4 <__s2b+0x78>
 80068ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ee:	340a      	adds	r4, #10
 80068f0:	2509      	movs	r5, #9
 80068f2:	e7f6      	b.n	80068e2 <__s2b+0x66>
 80068f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80068f8:	4601      	mov	r1, r0
 80068fa:	3b30      	subs	r3, #48	@ 0x30
 80068fc:	220a      	movs	r2, #10
 80068fe:	4630      	mov	r0, r6
 8006900:	f7ff ff76 	bl	80067f0 <__multadd>
 8006904:	e7ee      	b.n	80068e4 <__s2b+0x68>
 8006906:	bf00      	nop
 8006908:	08008f8d 	.word	0x08008f8d
 800690c:	08008f9e 	.word	0x08008f9e

08006910 <__hi0bits>:
 8006910:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006914:	4603      	mov	r3, r0
 8006916:	bf36      	itet	cc
 8006918:	0403      	lslcc	r3, r0, #16
 800691a:	2000      	movcs	r0, #0
 800691c:	2010      	movcc	r0, #16
 800691e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006922:	bf3c      	itt	cc
 8006924:	021b      	lslcc	r3, r3, #8
 8006926:	3008      	addcc	r0, #8
 8006928:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800692c:	bf3c      	itt	cc
 800692e:	011b      	lslcc	r3, r3, #4
 8006930:	3004      	addcc	r0, #4
 8006932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006936:	bf3c      	itt	cc
 8006938:	009b      	lslcc	r3, r3, #2
 800693a:	3002      	addcc	r0, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	db05      	blt.n	800694c <__hi0bits+0x3c>
 8006940:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006944:	f100 0001 	add.w	r0, r0, #1
 8006948:	bf08      	it	eq
 800694a:	2020      	moveq	r0, #32
 800694c:	4770      	bx	lr

0800694e <__lo0bits>:
 800694e:	6803      	ldr	r3, [r0, #0]
 8006950:	4602      	mov	r2, r0
 8006952:	f013 0007 	ands.w	r0, r3, #7
 8006956:	d00b      	beq.n	8006970 <__lo0bits+0x22>
 8006958:	07d9      	lsls	r1, r3, #31
 800695a:	d421      	bmi.n	80069a0 <__lo0bits+0x52>
 800695c:	0798      	lsls	r0, r3, #30
 800695e:	bf49      	itett	mi
 8006960:	085b      	lsrmi	r3, r3, #1
 8006962:	089b      	lsrpl	r3, r3, #2
 8006964:	2001      	movmi	r0, #1
 8006966:	6013      	strmi	r3, [r2, #0]
 8006968:	bf5c      	itt	pl
 800696a:	6013      	strpl	r3, [r2, #0]
 800696c:	2002      	movpl	r0, #2
 800696e:	4770      	bx	lr
 8006970:	b299      	uxth	r1, r3
 8006972:	b909      	cbnz	r1, 8006978 <__lo0bits+0x2a>
 8006974:	0c1b      	lsrs	r3, r3, #16
 8006976:	2010      	movs	r0, #16
 8006978:	b2d9      	uxtb	r1, r3
 800697a:	b909      	cbnz	r1, 8006980 <__lo0bits+0x32>
 800697c:	3008      	adds	r0, #8
 800697e:	0a1b      	lsrs	r3, r3, #8
 8006980:	0719      	lsls	r1, r3, #28
 8006982:	bf04      	itt	eq
 8006984:	091b      	lsreq	r3, r3, #4
 8006986:	3004      	addeq	r0, #4
 8006988:	0799      	lsls	r1, r3, #30
 800698a:	bf04      	itt	eq
 800698c:	089b      	lsreq	r3, r3, #2
 800698e:	3002      	addeq	r0, #2
 8006990:	07d9      	lsls	r1, r3, #31
 8006992:	d403      	bmi.n	800699c <__lo0bits+0x4e>
 8006994:	085b      	lsrs	r3, r3, #1
 8006996:	f100 0001 	add.w	r0, r0, #1
 800699a:	d003      	beq.n	80069a4 <__lo0bits+0x56>
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	4770      	bx	lr
 80069a0:	2000      	movs	r0, #0
 80069a2:	4770      	bx	lr
 80069a4:	2020      	movs	r0, #32
 80069a6:	4770      	bx	lr

080069a8 <__i2b>:
 80069a8:	b510      	push	{r4, lr}
 80069aa:	460c      	mov	r4, r1
 80069ac:	2101      	movs	r1, #1
 80069ae:	f7ff febd 	bl	800672c <_Balloc>
 80069b2:	4602      	mov	r2, r0
 80069b4:	b928      	cbnz	r0, 80069c2 <__i2b+0x1a>
 80069b6:	4b05      	ldr	r3, [pc, #20]	@ (80069cc <__i2b+0x24>)
 80069b8:	4805      	ldr	r0, [pc, #20]	@ (80069d0 <__i2b+0x28>)
 80069ba:	f240 1145 	movw	r1, #325	@ 0x145
 80069be:	f001 fbeb 	bl	8008198 <__assert_func>
 80069c2:	2301      	movs	r3, #1
 80069c4:	6144      	str	r4, [r0, #20]
 80069c6:	6103      	str	r3, [r0, #16]
 80069c8:	bd10      	pop	{r4, pc}
 80069ca:	bf00      	nop
 80069cc:	08008f8d 	.word	0x08008f8d
 80069d0:	08008f9e 	.word	0x08008f9e

080069d4 <__multiply>:
 80069d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d8:	4617      	mov	r7, r2
 80069da:	690a      	ldr	r2, [r1, #16]
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	429a      	cmp	r2, r3
 80069e0:	bfa8      	it	ge
 80069e2:	463b      	movge	r3, r7
 80069e4:	4689      	mov	r9, r1
 80069e6:	bfa4      	itt	ge
 80069e8:	460f      	movge	r7, r1
 80069ea:	4699      	movge	r9, r3
 80069ec:	693d      	ldr	r5, [r7, #16]
 80069ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	eb05 060a 	add.w	r6, r5, sl
 80069fa:	42b3      	cmp	r3, r6
 80069fc:	b085      	sub	sp, #20
 80069fe:	bfb8      	it	lt
 8006a00:	3101      	addlt	r1, #1
 8006a02:	f7ff fe93 	bl	800672c <_Balloc>
 8006a06:	b930      	cbnz	r0, 8006a16 <__multiply+0x42>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	4b41      	ldr	r3, [pc, #260]	@ (8006b10 <__multiply+0x13c>)
 8006a0c:	4841      	ldr	r0, [pc, #260]	@ (8006b14 <__multiply+0x140>)
 8006a0e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006a12:	f001 fbc1 	bl	8008198 <__assert_func>
 8006a16:	f100 0414 	add.w	r4, r0, #20
 8006a1a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006a1e:	4623      	mov	r3, r4
 8006a20:	2200      	movs	r2, #0
 8006a22:	4573      	cmp	r3, lr
 8006a24:	d320      	bcc.n	8006a68 <__multiply+0x94>
 8006a26:	f107 0814 	add.w	r8, r7, #20
 8006a2a:	f109 0114 	add.w	r1, r9, #20
 8006a2e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006a32:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006a36:	9302      	str	r3, [sp, #8]
 8006a38:	1beb      	subs	r3, r5, r7
 8006a3a:	3b15      	subs	r3, #21
 8006a3c:	f023 0303 	bic.w	r3, r3, #3
 8006a40:	3304      	adds	r3, #4
 8006a42:	3715      	adds	r7, #21
 8006a44:	42bd      	cmp	r5, r7
 8006a46:	bf38      	it	cc
 8006a48:	2304      	movcc	r3, #4
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	9b02      	ldr	r3, [sp, #8]
 8006a4e:	9103      	str	r1, [sp, #12]
 8006a50:	428b      	cmp	r3, r1
 8006a52:	d80c      	bhi.n	8006a6e <__multiply+0x9a>
 8006a54:	2e00      	cmp	r6, #0
 8006a56:	dd03      	ble.n	8006a60 <__multiply+0x8c>
 8006a58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d055      	beq.n	8006b0c <__multiply+0x138>
 8006a60:	6106      	str	r6, [r0, #16]
 8006a62:	b005      	add	sp, #20
 8006a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a68:	f843 2b04 	str.w	r2, [r3], #4
 8006a6c:	e7d9      	b.n	8006a22 <__multiply+0x4e>
 8006a6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006a72:	f1ba 0f00 	cmp.w	sl, #0
 8006a76:	d01f      	beq.n	8006ab8 <__multiply+0xe4>
 8006a78:	46c4      	mov	ip, r8
 8006a7a:	46a1      	mov	r9, r4
 8006a7c:	2700      	movs	r7, #0
 8006a7e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a82:	f8d9 3000 	ldr.w	r3, [r9]
 8006a86:	fa1f fb82 	uxth.w	fp, r2
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006a90:	443b      	add	r3, r7
 8006a92:	f8d9 7000 	ldr.w	r7, [r9]
 8006a96:	0c12      	lsrs	r2, r2, #16
 8006a98:	0c3f      	lsrs	r7, r7, #16
 8006a9a:	fb0a 7202 	mla	r2, sl, r2, r7
 8006a9e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa8:	4565      	cmp	r5, ip
 8006aaa:	f849 3b04 	str.w	r3, [r9], #4
 8006aae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006ab2:	d8e4      	bhi.n	8006a7e <__multiply+0xaa>
 8006ab4:	9b01      	ldr	r3, [sp, #4]
 8006ab6:	50e7      	str	r7, [r4, r3]
 8006ab8:	9b03      	ldr	r3, [sp, #12]
 8006aba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006abe:	3104      	adds	r1, #4
 8006ac0:	f1b9 0f00 	cmp.w	r9, #0
 8006ac4:	d020      	beq.n	8006b08 <__multiply+0x134>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	4647      	mov	r7, r8
 8006aca:	46a4      	mov	ip, r4
 8006acc:	f04f 0a00 	mov.w	sl, #0
 8006ad0:	f8b7 b000 	ldrh.w	fp, [r7]
 8006ad4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006ad8:	fb09 220b 	mla	r2, r9, fp, r2
 8006adc:	4452      	add	r2, sl
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ae4:	f84c 3b04 	str.w	r3, [ip], #4
 8006ae8:	f857 3b04 	ldr.w	r3, [r7], #4
 8006aec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006af0:	f8bc 3000 	ldrh.w	r3, [ip]
 8006af4:	fb09 330a 	mla	r3, r9, sl, r3
 8006af8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006afc:	42bd      	cmp	r5, r7
 8006afe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b02:	d8e5      	bhi.n	8006ad0 <__multiply+0xfc>
 8006b04:	9a01      	ldr	r2, [sp, #4]
 8006b06:	50a3      	str	r3, [r4, r2]
 8006b08:	3404      	adds	r4, #4
 8006b0a:	e79f      	b.n	8006a4c <__multiply+0x78>
 8006b0c:	3e01      	subs	r6, #1
 8006b0e:	e7a1      	b.n	8006a54 <__multiply+0x80>
 8006b10:	08008f8d 	.word	0x08008f8d
 8006b14:	08008f9e 	.word	0x08008f9e

08006b18 <__pow5mult>:
 8006b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b1c:	4615      	mov	r5, r2
 8006b1e:	f012 0203 	ands.w	r2, r2, #3
 8006b22:	4607      	mov	r7, r0
 8006b24:	460e      	mov	r6, r1
 8006b26:	d007      	beq.n	8006b38 <__pow5mult+0x20>
 8006b28:	4c25      	ldr	r4, [pc, #148]	@ (8006bc0 <__pow5mult+0xa8>)
 8006b2a:	3a01      	subs	r2, #1
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b32:	f7ff fe5d 	bl	80067f0 <__multadd>
 8006b36:	4606      	mov	r6, r0
 8006b38:	10ad      	asrs	r5, r5, #2
 8006b3a:	d03d      	beq.n	8006bb8 <__pow5mult+0xa0>
 8006b3c:	69fc      	ldr	r4, [r7, #28]
 8006b3e:	b97c      	cbnz	r4, 8006b60 <__pow5mult+0x48>
 8006b40:	2010      	movs	r0, #16
 8006b42:	f7ff fd3d 	bl	80065c0 <malloc>
 8006b46:	4602      	mov	r2, r0
 8006b48:	61f8      	str	r0, [r7, #28]
 8006b4a:	b928      	cbnz	r0, 8006b58 <__pow5mult+0x40>
 8006b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc4 <__pow5mult+0xac>)
 8006b4e:	481e      	ldr	r0, [pc, #120]	@ (8006bc8 <__pow5mult+0xb0>)
 8006b50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006b54:	f001 fb20 	bl	8008198 <__assert_func>
 8006b58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b5c:	6004      	str	r4, [r0, #0]
 8006b5e:	60c4      	str	r4, [r0, #12]
 8006b60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006b64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b68:	b94c      	cbnz	r4, 8006b7e <__pow5mult+0x66>
 8006b6a:	f240 2171 	movw	r1, #625	@ 0x271
 8006b6e:	4638      	mov	r0, r7
 8006b70:	f7ff ff1a 	bl	80069a8 <__i2b>
 8006b74:	2300      	movs	r3, #0
 8006b76:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	6003      	str	r3, [r0, #0]
 8006b7e:	f04f 0900 	mov.w	r9, #0
 8006b82:	07eb      	lsls	r3, r5, #31
 8006b84:	d50a      	bpl.n	8006b9c <__pow5mult+0x84>
 8006b86:	4631      	mov	r1, r6
 8006b88:	4622      	mov	r2, r4
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	f7ff ff22 	bl	80069d4 <__multiply>
 8006b90:	4631      	mov	r1, r6
 8006b92:	4680      	mov	r8, r0
 8006b94:	4638      	mov	r0, r7
 8006b96:	f7ff fe09 	bl	80067ac <_Bfree>
 8006b9a:	4646      	mov	r6, r8
 8006b9c:	106d      	asrs	r5, r5, #1
 8006b9e:	d00b      	beq.n	8006bb8 <__pow5mult+0xa0>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	b938      	cbnz	r0, 8006bb4 <__pow5mult+0x9c>
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4638      	mov	r0, r7
 8006baa:	f7ff ff13 	bl	80069d4 <__multiply>
 8006bae:	6020      	str	r0, [r4, #0]
 8006bb0:	f8c0 9000 	str.w	r9, [r0]
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	e7e4      	b.n	8006b82 <__pow5mult+0x6a>
 8006bb8:	4630      	mov	r0, r6
 8006bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bbe:	bf00      	nop
 8006bc0:	080090b0 	.word	0x080090b0
 8006bc4:	08008f1e 	.word	0x08008f1e
 8006bc8:	08008f9e 	.word	0x08008f9e

08006bcc <__lshift>:
 8006bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	6849      	ldr	r1, [r1, #4]
 8006bd4:	6923      	ldr	r3, [r4, #16]
 8006bd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bda:	68a3      	ldr	r3, [r4, #8]
 8006bdc:	4607      	mov	r7, r0
 8006bde:	4691      	mov	r9, r2
 8006be0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006be4:	f108 0601 	add.w	r6, r8, #1
 8006be8:	42b3      	cmp	r3, r6
 8006bea:	db0b      	blt.n	8006c04 <__lshift+0x38>
 8006bec:	4638      	mov	r0, r7
 8006bee:	f7ff fd9d 	bl	800672c <_Balloc>
 8006bf2:	4605      	mov	r5, r0
 8006bf4:	b948      	cbnz	r0, 8006c0a <__lshift+0x3e>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	4b28      	ldr	r3, [pc, #160]	@ (8006c9c <__lshift+0xd0>)
 8006bfa:	4829      	ldr	r0, [pc, #164]	@ (8006ca0 <__lshift+0xd4>)
 8006bfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006c00:	f001 faca 	bl	8008198 <__assert_func>
 8006c04:	3101      	adds	r1, #1
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	e7ee      	b.n	8006be8 <__lshift+0x1c>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f100 0114 	add.w	r1, r0, #20
 8006c10:	f100 0210 	add.w	r2, r0, #16
 8006c14:	4618      	mov	r0, r3
 8006c16:	4553      	cmp	r3, sl
 8006c18:	db33      	blt.n	8006c82 <__lshift+0xb6>
 8006c1a:	6920      	ldr	r0, [r4, #16]
 8006c1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c20:	f104 0314 	add.w	r3, r4, #20
 8006c24:	f019 091f 	ands.w	r9, r9, #31
 8006c28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c30:	d02b      	beq.n	8006c8a <__lshift+0xbe>
 8006c32:	f1c9 0e20 	rsb	lr, r9, #32
 8006c36:	468a      	mov	sl, r1
 8006c38:	2200      	movs	r2, #0
 8006c3a:	6818      	ldr	r0, [r3, #0]
 8006c3c:	fa00 f009 	lsl.w	r0, r0, r9
 8006c40:	4310      	orrs	r0, r2
 8006c42:	f84a 0b04 	str.w	r0, [sl], #4
 8006c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c4a:	459c      	cmp	ip, r3
 8006c4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c50:	d8f3      	bhi.n	8006c3a <__lshift+0x6e>
 8006c52:	ebac 0304 	sub.w	r3, ip, r4
 8006c56:	3b15      	subs	r3, #21
 8006c58:	f023 0303 	bic.w	r3, r3, #3
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	f104 0015 	add.w	r0, r4, #21
 8006c62:	4560      	cmp	r0, ip
 8006c64:	bf88      	it	hi
 8006c66:	2304      	movhi	r3, #4
 8006c68:	50ca      	str	r2, [r1, r3]
 8006c6a:	b10a      	cbz	r2, 8006c70 <__lshift+0xa4>
 8006c6c:	f108 0602 	add.w	r6, r8, #2
 8006c70:	3e01      	subs	r6, #1
 8006c72:	4638      	mov	r0, r7
 8006c74:	612e      	str	r6, [r5, #16]
 8006c76:	4621      	mov	r1, r4
 8006c78:	f7ff fd98 	bl	80067ac <_Bfree>
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c82:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c86:	3301      	adds	r3, #1
 8006c88:	e7c5      	b.n	8006c16 <__lshift+0x4a>
 8006c8a:	3904      	subs	r1, #4
 8006c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c90:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c94:	459c      	cmp	ip, r3
 8006c96:	d8f9      	bhi.n	8006c8c <__lshift+0xc0>
 8006c98:	e7ea      	b.n	8006c70 <__lshift+0xa4>
 8006c9a:	bf00      	nop
 8006c9c:	08008f8d 	.word	0x08008f8d
 8006ca0:	08008f9e 	.word	0x08008f9e

08006ca4 <__mcmp>:
 8006ca4:	690a      	ldr	r2, [r1, #16]
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	6900      	ldr	r0, [r0, #16]
 8006caa:	1a80      	subs	r0, r0, r2
 8006cac:	b530      	push	{r4, r5, lr}
 8006cae:	d10e      	bne.n	8006cce <__mcmp+0x2a>
 8006cb0:	3314      	adds	r3, #20
 8006cb2:	3114      	adds	r1, #20
 8006cb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006cb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006cbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006cc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006cc4:	4295      	cmp	r5, r2
 8006cc6:	d003      	beq.n	8006cd0 <__mcmp+0x2c>
 8006cc8:	d205      	bcs.n	8006cd6 <__mcmp+0x32>
 8006cca:	f04f 30ff 	mov.w	r0, #4294967295
 8006cce:	bd30      	pop	{r4, r5, pc}
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	d3f3      	bcc.n	8006cbc <__mcmp+0x18>
 8006cd4:	e7fb      	b.n	8006cce <__mcmp+0x2a>
 8006cd6:	2001      	movs	r0, #1
 8006cd8:	e7f9      	b.n	8006cce <__mcmp+0x2a>
	...

08006cdc <__mdiff>:
 8006cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	4689      	mov	r9, r1
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	4648      	mov	r0, r9
 8006ce8:	4614      	mov	r4, r2
 8006cea:	f7ff ffdb 	bl	8006ca4 <__mcmp>
 8006cee:	1e05      	subs	r5, r0, #0
 8006cf0:	d112      	bne.n	8006d18 <__mdiff+0x3c>
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7ff fd19 	bl	800672c <_Balloc>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	b928      	cbnz	r0, 8006d0a <__mdiff+0x2e>
 8006cfe:	4b3f      	ldr	r3, [pc, #252]	@ (8006dfc <__mdiff+0x120>)
 8006d00:	f240 2137 	movw	r1, #567	@ 0x237
 8006d04:	483e      	ldr	r0, [pc, #248]	@ (8006e00 <__mdiff+0x124>)
 8006d06:	f001 fa47 	bl	8008198 <__assert_func>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d10:	4610      	mov	r0, r2
 8006d12:	b003      	add	sp, #12
 8006d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d18:	bfbc      	itt	lt
 8006d1a:	464b      	movlt	r3, r9
 8006d1c:	46a1      	movlt	r9, r4
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006d24:	bfba      	itte	lt
 8006d26:	461c      	movlt	r4, r3
 8006d28:	2501      	movlt	r5, #1
 8006d2a:	2500      	movge	r5, #0
 8006d2c:	f7ff fcfe 	bl	800672c <_Balloc>
 8006d30:	4602      	mov	r2, r0
 8006d32:	b918      	cbnz	r0, 8006d3c <__mdiff+0x60>
 8006d34:	4b31      	ldr	r3, [pc, #196]	@ (8006dfc <__mdiff+0x120>)
 8006d36:	f240 2145 	movw	r1, #581	@ 0x245
 8006d3a:	e7e3      	b.n	8006d04 <__mdiff+0x28>
 8006d3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006d40:	6926      	ldr	r6, [r4, #16]
 8006d42:	60c5      	str	r5, [r0, #12]
 8006d44:	f109 0310 	add.w	r3, r9, #16
 8006d48:	f109 0514 	add.w	r5, r9, #20
 8006d4c:	f104 0e14 	add.w	lr, r4, #20
 8006d50:	f100 0b14 	add.w	fp, r0, #20
 8006d54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006d58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	46d9      	mov	r9, fp
 8006d60:	f04f 0c00 	mov.w	ip, #0
 8006d64:	9b01      	ldr	r3, [sp, #4]
 8006d66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006d6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	fa1f f38a 	uxth.w	r3, sl
 8006d74:	4619      	mov	r1, r3
 8006d76:	b283      	uxth	r3, r0
 8006d78:	1acb      	subs	r3, r1, r3
 8006d7a:	0c00      	lsrs	r0, r0, #16
 8006d7c:	4463      	add	r3, ip
 8006d7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006d82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006d8c:	4576      	cmp	r6, lr
 8006d8e:	f849 3b04 	str.w	r3, [r9], #4
 8006d92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d96:	d8e5      	bhi.n	8006d64 <__mdiff+0x88>
 8006d98:	1b33      	subs	r3, r6, r4
 8006d9a:	3b15      	subs	r3, #21
 8006d9c:	f023 0303 	bic.w	r3, r3, #3
 8006da0:	3415      	adds	r4, #21
 8006da2:	3304      	adds	r3, #4
 8006da4:	42a6      	cmp	r6, r4
 8006da6:	bf38      	it	cc
 8006da8:	2304      	movcc	r3, #4
 8006daa:	441d      	add	r5, r3
 8006dac:	445b      	add	r3, fp
 8006dae:	461e      	mov	r6, r3
 8006db0:	462c      	mov	r4, r5
 8006db2:	4544      	cmp	r4, r8
 8006db4:	d30e      	bcc.n	8006dd4 <__mdiff+0xf8>
 8006db6:	f108 0103 	add.w	r1, r8, #3
 8006dba:	1b49      	subs	r1, r1, r5
 8006dbc:	f021 0103 	bic.w	r1, r1, #3
 8006dc0:	3d03      	subs	r5, #3
 8006dc2:	45a8      	cmp	r8, r5
 8006dc4:	bf38      	it	cc
 8006dc6:	2100      	movcc	r1, #0
 8006dc8:	440b      	add	r3, r1
 8006dca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006dce:	b191      	cbz	r1, 8006df6 <__mdiff+0x11a>
 8006dd0:	6117      	str	r7, [r2, #16]
 8006dd2:	e79d      	b.n	8006d10 <__mdiff+0x34>
 8006dd4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006dd8:	46e6      	mov	lr, ip
 8006dda:	0c08      	lsrs	r0, r1, #16
 8006ddc:	fa1c fc81 	uxtah	ip, ip, r1
 8006de0:	4471      	add	r1, lr
 8006de2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006de6:	b289      	uxth	r1, r1
 8006de8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006dec:	f846 1b04 	str.w	r1, [r6], #4
 8006df0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006df4:	e7dd      	b.n	8006db2 <__mdiff+0xd6>
 8006df6:	3f01      	subs	r7, #1
 8006df8:	e7e7      	b.n	8006dca <__mdiff+0xee>
 8006dfa:	bf00      	nop
 8006dfc:	08008f8d 	.word	0x08008f8d
 8006e00:	08008f9e 	.word	0x08008f9e

08006e04 <__ulp>:
 8006e04:	b082      	sub	sp, #8
 8006e06:	ed8d 0b00 	vstr	d0, [sp]
 8006e0a:	9a01      	ldr	r2, [sp, #4]
 8006e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8006e4c <__ulp+0x48>)
 8006e0e:	4013      	ands	r3, r2
 8006e10:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	dc08      	bgt.n	8006e2a <__ulp+0x26>
 8006e18:	425b      	negs	r3, r3
 8006e1a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006e1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e22:	da04      	bge.n	8006e2e <__ulp+0x2a>
 8006e24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006e28:	4113      	asrs	r3, r2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	e008      	b.n	8006e40 <__ulp+0x3c>
 8006e2e:	f1a2 0314 	sub.w	r3, r2, #20
 8006e32:	2b1e      	cmp	r3, #30
 8006e34:	bfda      	itte	le
 8006e36:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006e3a:	40da      	lsrle	r2, r3
 8006e3c:	2201      	movgt	r2, #1
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4619      	mov	r1, r3
 8006e42:	4610      	mov	r0, r2
 8006e44:	ec41 0b10 	vmov	d0, r0, r1
 8006e48:	b002      	add	sp, #8
 8006e4a:	4770      	bx	lr
 8006e4c:	7ff00000 	.word	0x7ff00000

08006e50 <__b2d>:
 8006e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e54:	6906      	ldr	r6, [r0, #16]
 8006e56:	f100 0814 	add.w	r8, r0, #20
 8006e5a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006e5e:	1f37      	subs	r7, r6, #4
 8006e60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006e64:	4610      	mov	r0, r2
 8006e66:	f7ff fd53 	bl	8006910 <__hi0bits>
 8006e6a:	f1c0 0320 	rsb	r3, r0, #32
 8006e6e:	280a      	cmp	r0, #10
 8006e70:	600b      	str	r3, [r1, #0]
 8006e72:	491b      	ldr	r1, [pc, #108]	@ (8006ee0 <__b2d+0x90>)
 8006e74:	dc15      	bgt.n	8006ea2 <__b2d+0x52>
 8006e76:	f1c0 0c0b 	rsb	ip, r0, #11
 8006e7a:	fa22 f30c 	lsr.w	r3, r2, ip
 8006e7e:	45b8      	cmp	r8, r7
 8006e80:	ea43 0501 	orr.w	r5, r3, r1
 8006e84:	bf34      	ite	cc
 8006e86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006e8a:	2300      	movcs	r3, #0
 8006e8c:	3015      	adds	r0, #21
 8006e8e:	fa02 f000 	lsl.w	r0, r2, r0
 8006e92:	fa23 f30c 	lsr.w	r3, r3, ip
 8006e96:	4303      	orrs	r3, r0
 8006e98:	461c      	mov	r4, r3
 8006e9a:	ec45 4b10 	vmov	d0, r4, r5
 8006e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea2:	45b8      	cmp	r8, r7
 8006ea4:	bf3a      	itte	cc
 8006ea6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006eaa:	f1a6 0708 	subcc.w	r7, r6, #8
 8006eae:	2300      	movcs	r3, #0
 8006eb0:	380b      	subs	r0, #11
 8006eb2:	d012      	beq.n	8006eda <__b2d+0x8a>
 8006eb4:	f1c0 0120 	rsb	r1, r0, #32
 8006eb8:	fa23 f401 	lsr.w	r4, r3, r1
 8006ebc:	4082      	lsls	r2, r0
 8006ebe:	4322      	orrs	r2, r4
 8006ec0:	4547      	cmp	r7, r8
 8006ec2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006ec6:	bf8c      	ite	hi
 8006ec8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006ecc:	2200      	movls	r2, #0
 8006ece:	4083      	lsls	r3, r0
 8006ed0:	40ca      	lsrs	r2, r1
 8006ed2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	e7de      	b.n	8006e98 <__b2d+0x48>
 8006eda:	ea42 0501 	orr.w	r5, r2, r1
 8006ede:	e7db      	b.n	8006e98 <__b2d+0x48>
 8006ee0:	3ff00000 	.word	0x3ff00000

08006ee4 <__d2b>:
 8006ee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ee8:	460f      	mov	r7, r1
 8006eea:	2101      	movs	r1, #1
 8006eec:	ec59 8b10 	vmov	r8, r9, d0
 8006ef0:	4616      	mov	r6, r2
 8006ef2:	f7ff fc1b 	bl	800672c <_Balloc>
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	b930      	cbnz	r0, 8006f08 <__d2b+0x24>
 8006efa:	4602      	mov	r2, r0
 8006efc:	4b23      	ldr	r3, [pc, #140]	@ (8006f8c <__d2b+0xa8>)
 8006efe:	4824      	ldr	r0, [pc, #144]	@ (8006f90 <__d2b+0xac>)
 8006f00:	f240 310f 	movw	r1, #783	@ 0x30f
 8006f04:	f001 f948 	bl	8008198 <__assert_func>
 8006f08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f10:	b10d      	cbz	r5, 8006f16 <__d2b+0x32>
 8006f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	f1b8 0300 	subs.w	r3, r8, #0
 8006f1c:	d023      	beq.n	8006f66 <__d2b+0x82>
 8006f1e:	4668      	mov	r0, sp
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	f7ff fd14 	bl	800694e <__lo0bits>
 8006f26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f2a:	b1d0      	cbz	r0, 8006f62 <__d2b+0x7e>
 8006f2c:	f1c0 0320 	rsb	r3, r0, #32
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	430b      	orrs	r3, r1
 8006f36:	40c2      	lsrs	r2, r0
 8006f38:	6163      	str	r3, [r4, #20]
 8006f3a:	9201      	str	r2, [sp, #4]
 8006f3c:	9b01      	ldr	r3, [sp, #4]
 8006f3e:	61a3      	str	r3, [r4, #24]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	bf0c      	ite	eq
 8006f44:	2201      	moveq	r2, #1
 8006f46:	2202      	movne	r2, #2
 8006f48:	6122      	str	r2, [r4, #16]
 8006f4a:	b1a5      	cbz	r5, 8006f76 <__d2b+0x92>
 8006f4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006f50:	4405      	add	r5, r0
 8006f52:	603d      	str	r5, [r7, #0]
 8006f54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006f58:	6030      	str	r0, [r6, #0]
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	b003      	add	sp, #12
 8006f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f62:	6161      	str	r1, [r4, #20]
 8006f64:	e7ea      	b.n	8006f3c <__d2b+0x58>
 8006f66:	a801      	add	r0, sp, #4
 8006f68:	f7ff fcf1 	bl	800694e <__lo0bits>
 8006f6c:	9b01      	ldr	r3, [sp, #4]
 8006f6e:	6163      	str	r3, [r4, #20]
 8006f70:	3020      	adds	r0, #32
 8006f72:	2201      	movs	r2, #1
 8006f74:	e7e8      	b.n	8006f48 <__d2b+0x64>
 8006f76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006f7e:	6038      	str	r0, [r7, #0]
 8006f80:	6918      	ldr	r0, [r3, #16]
 8006f82:	f7ff fcc5 	bl	8006910 <__hi0bits>
 8006f86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f8a:	e7e5      	b.n	8006f58 <__d2b+0x74>
 8006f8c:	08008f8d 	.word	0x08008f8d
 8006f90:	08008f9e 	.word	0x08008f9e

08006f94 <__ratio>:
 8006f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f98:	4688      	mov	r8, r1
 8006f9a:	4669      	mov	r1, sp
 8006f9c:	4681      	mov	r9, r0
 8006f9e:	f7ff ff57 	bl	8006e50 <__b2d>
 8006fa2:	a901      	add	r1, sp, #4
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	ec55 4b10 	vmov	r4, r5, d0
 8006faa:	f7ff ff51 	bl	8006e50 <__b2d>
 8006fae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006fb2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8006fb6:	1ad2      	subs	r2, r2, r3
 8006fb8:	e9dd 3100 	ldrd	r3, r1, [sp]
 8006fbc:	1a5b      	subs	r3, r3, r1
 8006fbe:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8006fc2:	ec57 6b10 	vmov	r6, r7, d0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bfd6      	itet	le
 8006fca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006fce:	462a      	movgt	r2, r5
 8006fd0:	463a      	movle	r2, r7
 8006fd2:	46ab      	mov	fp, r5
 8006fd4:	46a2      	mov	sl, r4
 8006fd6:	bfce      	itee	gt
 8006fd8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006fdc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8006fe0:	ee00 3a90 	vmovle	s1, r3
 8006fe4:	ec4b ab17 	vmov	d7, sl, fp
 8006fe8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8006fec:	b003      	add	sp, #12
 8006fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ff2 <__copybits>:
 8006ff2:	3901      	subs	r1, #1
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	1149      	asrs	r1, r1, #5
 8006ff8:	6914      	ldr	r4, [r2, #16]
 8006ffa:	3101      	adds	r1, #1
 8006ffc:	f102 0314 	add.w	r3, r2, #20
 8007000:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007004:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007008:	1f05      	subs	r5, r0, #4
 800700a:	42a3      	cmp	r3, r4
 800700c:	d30c      	bcc.n	8007028 <__copybits+0x36>
 800700e:	1aa3      	subs	r3, r4, r2
 8007010:	3b11      	subs	r3, #17
 8007012:	f023 0303 	bic.w	r3, r3, #3
 8007016:	3211      	adds	r2, #17
 8007018:	42a2      	cmp	r2, r4
 800701a:	bf88      	it	hi
 800701c:	2300      	movhi	r3, #0
 800701e:	4418      	add	r0, r3
 8007020:	2300      	movs	r3, #0
 8007022:	4288      	cmp	r0, r1
 8007024:	d305      	bcc.n	8007032 <__copybits+0x40>
 8007026:	bd70      	pop	{r4, r5, r6, pc}
 8007028:	f853 6b04 	ldr.w	r6, [r3], #4
 800702c:	f845 6f04 	str.w	r6, [r5, #4]!
 8007030:	e7eb      	b.n	800700a <__copybits+0x18>
 8007032:	f840 3b04 	str.w	r3, [r0], #4
 8007036:	e7f4      	b.n	8007022 <__copybits+0x30>

08007038 <__any_on>:
 8007038:	f100 0214 	add.w	r2, r0, #20
 800703c:	6900      	ldr	r0, [r0, #16]
 800703e:	114b      	asrs	r3, r1, #5
 8007040:	4298      	cmp	r0, r3
 8007042:	b510      	push	{r4, lr}
 8007044:	db11      	blt.n	800706a <__any_on+0x32>
 8007046:	dd0a      	ble.n	800705e <__any_on+0x26>
 8007048:	f011 011f 	ands.w	r1, r1, #31
 800704c:	d007      	beq.n	800705e <__any_on+0x26>
 800704e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007052:	fa24 f001 	lsr.w	r0, r4, r1
 8007056:	fa00 f101 	lsl.w	r1, r0, r1
 800705a:	428c      	cmp	r4, r1
 800705c:	d10b      	bne.n	8007076 <__any_on+0x3e>
 800705e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007062:	4293      	cmp	r3, r2
 8007064:	d803      	bhi.n	800706e <__any_on+0x36>
 8007066:	2000      	movs	r0, #0
 8007068:	bd10      	pop	{r4, pc}
 800706a:	4603      	mov	r3, r0
 800706c:	e7f7      	b.n	800705e <__any_on+0x26>
 800706e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007072:	2900      	cmp	r1, #0
 8007074:	d0f5      	beq.n	8007062 <__any_on+0x2a>
 8007076:	2001      	movs	r0, #1
 8007078:	e7f6      	b.n	8007068 <__any_on+0x30>

0800707a <sulp>:
 800707a:	b570      	push	{r4, r5, r6, lr}
 800707c:	4604      	mov	r4, r0
 800707e:	460d      	mov	r5, r1
 8007080:	4616      	mov	r6, r2
 8007082:	ec45 4b10 	vmov	d0, r4, r5
 8007086:	f7ff febd 	bl	8006e04 <__ulp>
 800708a:	b17e      	cbz	r6, 80070ac <sulp+0x32>
 800708c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007090:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007094:	2b00      	cmp	r3, #0
 8007096:	dd09      	ble.n	80070ac <sulp+0x32>
 8007098:	051b      	lsls	r3, r3, #20
 800709a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800709e:	2000      	movs	r0, #0
 80070a0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80070a4:	ec41 0b17 	vmov	d7, r0, r1
 80070a8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80070ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080070b0 <_strtod_l>:
 80070b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	ed2d 8b0a 	vpush	{d8-d12}
 80070b8:	b097      	sub	sp, #92	@ 0x5c
 80070ba:	4688      	mov	r8, r1
 80070bc:	920e      	str	r2, [sp, #56]	@ 0x38
 80070be:	2200      	movs	r2, #0
 80070c0:	9212      	str	r2, [sp, #72]	@ 0x48
 80070c2:	9005      	str	r0, [sp, #20]
 80070c4:	f04f 0a00 	mov.w	sl, #0
 80070c8:	f04f 0b00 	mov.w	fp, #0
 80070cc:	460a      	mov	r2, r1
 80070ce:	9211      	str	r2, [sp, #68]	@ 0x44
 80070d0:	7811      	ldrb	r1, [r2, #0]
 80070d2:	292b      	cmp	r1, #43	@ 0x2b
 80070d4:	d04c      	beq.n	8007170 <_strtod_l+0xc0>
 80070d6:	d839      	bhi.n	800714c <_strtod_l+0x9c>
 80070d8:	290d      	cmp	r1, #13
 80070da:	d833      	bhi.n	8007144 <_strtod_l+0x94>
 80070dc:	2908      	cmp	r1, #8
 80070de:	d833      	bhi.n	8007148 <_strtod_l+0x98>
 80070e0:	2900      	cmp	r1, #0
 80070e2:	d03c      	beq.n	800715e <_strtod_l+0xae>
 80070e4:	2200      	movs	r2, #0
 80070e6:	9208      	str	r2, [sp, #32]
 80070e8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80070ea:	782a      	ldrb	r2, [r5, #0]
 80070ec:	2a30      	cmp	r2, #48	@ 0x30
 80070ee:	f040 80b7 	bne.w	8007260 <_strtod_l+0x1b0>
 80070f2:	786a      	ldrb	r2, [r5, #1]
 80070f4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070f8:	2a58      	cmp	r2, #88	@ 0x58
 80070fa:	d170      	bne.n	80071de <_strtod_l+0x12e>
 80070fc:	9302      	str	r3, [sp, #8]
 80070fe:	9b08      	ldr	r3, [sp, #32]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	ab12      	add	r3, sp, #72	@ 0x48
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	4a90      	ldr	r2, [pc, #576]	@ (8007348 <_strtod_l+0x298>)
 8007108:	9805      	ldr	r0, [sp, #20]
 800710a:	ab13      	add	r3, sp, #76	@ 0x4c
 800710c:	a911      	add	r1, sp, #68	@ 0x44
 800710e:	f001 f8dd 	bl	80082cc <__gethex>
 8007112:	f010 060f 	ands.w	r6, r0, #15
 8007116:	4604      	mov	r4, r0
 8007118:	d005      	beq.n	8007126 <_strtod_l+0x76>
 800711a:	2e06      	cmp	r6, #6
 800711c:	d12a      	bne.n	8007174 <_strtod_l+0xc4>
 800711e:	3501      	adds	r5, #1
 8007120:	2300      	movs	r3, #0
 8007122:	9511      	str	r5, [sp, #68]	@ 0x44
 8007124:	9308      	str	r3, [sp, #32]
 8007126:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007128:	2b00      	cmp	r3, #0
 800712a:	f040 8537 	bne.w	8007b9c <_strtod_l+0xaec>
 800712e:	9b08      	ldr	r3, [sp, #32]
 8007130:	ec4b ab10 	vmov	d0, sl, fp
 8007134:	b1cb      	cbz	r3, 800716a <_strtod_l+0xba>
 8007136:	eeb1 0b40 	vneg.f64	d0, d0
 800713a:	b017      	add	sp, #92	@ 0x5c
 800713c:	ecbd 8b0a 	vpop	{d8-d12}
 8007140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007144:	2920      	cmp	r1, #32
 8007146:	d1cd      	bne.n	80070e4 <_strtod_l+0x34>
 8007148:	3201      	adds	r2, #1
 800714a:	e7c0      	b.n	80070ce <_strtod_l+0x1e>
 800714c:	292d      	cmp	r1, #45	@ 0x2d
 800714e:	d1c9      	bne.n	80070e4 <_strtod_l+0x34>
 8007150:	2101      	movs	r1, #1
 8007152:	9108      	str	r1, [sp, #32]
 8007154:	1c51      	adds	r1, r2, #1
 8007156:	9111      	str	r1, [sp, #68]	@ 0x44
 8007158:	7852      	ldrb	r2, [r2, #1]
 800715a:	2a00      	cmp	r2, #0
 800715c:	d1c4      	bne.n	80070e8 <_strtod_l+0x38>
 800715e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007160:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8007164:	2b00      	cmp	r3, #0
 8007166:	f040 8517 	bne.w	8007b98 <_strtod_l+0xae8>
 800716a:	ec4b ab10 	vmov	d0, sl, fp
 800716e:	e7e4      	b.n	800713a <_strtod_l+0x8a>
 8007170:	2100      	movs	r1, #0
 8007172:	e7ee      	b.n	8007152 <_strtod_l+0xa2>
 8007174:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007176:	b13a      	cbz	r2, 8007188 <_strtod_l+0xd8>
 8007178:	2135      	movs	r1, #53	@ 0x35
 800717a:	a814      	add	r0, sp, #80	@ 0x50
 800717c:	f7ff ff39 	bl	8006ff2 <__copybits>
 8007180:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007182:	9805      	ldr	r0, [sp, #20]
 8007184:	f7ff fb12 	bl	80067ac <_Bfree>
 8007188:	1e73      	subs	r3, r6, #1
 800718a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800718c:	2b04      	cmp	r3, #4
 800718e:	d806      	bhi.n	800719e <_strtod_l+0xee>
 8007190:	e8df f003 	tbb	[pc, r3]
 8007194:	201d0314 	.word	0x201d0314
 8007198:	14          	.byte	0x14
 8007199:	00          	.byte	0x00
 800719a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800719e:	05e3      	lsls	r3, r4, #23
 80071a0:	bf48      	it	mi
 80071a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80071a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80071aa:	0d1b      	lsrs	r3, r3, #20
 80071ac:	051b      	lsls	r3, r3, #20
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1b9      	bne.n	8007126 <_strtod_l+0x76>
 80071b2:	f7fe fb9f 	bl	80058f4 <__errno>
 80071b6:	2322      	movs	r3, #34	@ 0x22
 80071b8:	6003      	str	r3, [r0, #0]
 80071ba:	e7b4      	b.n	8007126 <_strtod_l+0x76>
 80071bc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80071c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80071c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80071c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80071cc:	e7e7      	b.n	800719e <_strtod_l+0xee>
 80071ce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007350 <_strtod_l+0x2a0>
 80071d2:	e7e4      	b.n	800719e <_strtod_l+0xee>
 80071d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80071d8:	f04f 3aff 	mov.w	sl, #4294967295
 80071dc:	e7df      	b.n	800719e <_strtod_l+0xee>
 80071de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	9211      	str	r2, [sp, #68]	@ 0x44
 80071e4:	785b      	ldrb	r3, [r3, #1]
 80071e6:	2b30      	cmp	r3, #48	@ 0x30
 80071e8:	d0f9      	beq.n	80071de <_strtod_l+0x12e>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d09b      	beq.n	8007126 <_strtod_l+0x76>
 80071ee:	2301      	movs	r3, #1
 80071f0:	9307      	str	r3, [sp, #28]
 80071f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80071f6:	2300      	movs	r3, #0
 80071f8:	9306      	str	r3, [sp, #24]
 80071fa:	4699      	mov	r9, r3
 80071fc:	461d      	mov	r5, r3
 80071fe:	220a      	movs	r2, #10
 8007200:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8007202:	7804      	ldrb	r4, [r0, #0]
 8007204:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8007208:	b2d9      	uxtb	r1, r3
 800720a:	2909      	cmp	r1, #9
 800720c:	d92a      	bls.n	8007264 <_strtod_l+0x1b4>
 800720e:	494f      	ldr	r1, [pc, #316]	@ (800734c <_strtod_l+0x29c>)
 8007210:	2201      	movs	r2, #1
 8007212:	f000 ff87 	bl	8008124 <strncmp>
 8007216:	b398      	cbz	r0, 8007280 <_strtod_l+0x1d0>
 8007218:	2000      	movs	r0, #0
 800721a:	4622      	mov	r2, r4
 800721c:	462b      	mov	r3, r5
 800721e:	4607      	mov	r7, r0
 8007220:	4601      	mov	r1, r0
 8007222:	2a65      	cmp	r2, #101	@ 0x65
 8007224:	d001      	beq.n	800722a <_strtod_l+0x17a>
 8007226:	2a45      	cmp	r2, #69	@ 0x45
 8007228:	d118      	bne.n	800725c <_strtod_l+0x1ac>
 800722a:	b91b      	cbnz	r3, 8007234 <_strtod_l+0x184>
 800722c:	9b07      	ldr	r3, [sp, #28]
 800722e:	4303      	orrs	r3, r0
 8007230:	d095      	beq.n	800715e <_strtod_l+0xae>
 8007232:	2300      	movs	r3, #0
 8007234:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8007238:	f108 0201 	add.w	r2, r8, #1
 800723c:	9211      	str	r2, [sp, #68]	@ 0x44
 800723e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007242:	2a2b      	cmp	r2, #43	@ 0x2b
 8007244:	d074      	beq.n	8007330 <_strtod_l+0x280>
 8007246:	2a2d      	cmp	r2, #45	@ 0x2d
 8007248:	d07a      	beq.n	8007340 <_strtod_l+0x290>
 800724a:	f04f 0e00 	mov.w	lr, #0
 800724e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8007252:	2c09      	cmp	r4, #9
 8007254:	f240 8082 	bls.w	800735c <_strtod_l+0x2ac>
 8007258:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800725c:	2400      	movs	r4, #0
 800725e:	e09d      	b.n	800739c <_strtod_l+0x2ec>
 8007260:	2300      	movs	r3, #0
 8007262:	e7c5      	b.n	80071f0 <_strtod_l+0x140>
 8007264:	2d08      	cmp	r5, #8
 8007266:	bfc8      	it	gt
 8007268:	9906      	ldrgt	r1, [sp, #24]
 800726a:	f100 0001 	add.w	r0, r0, #1
 800726e:	bfca      	itet	gt
 8007270:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007274:	fb02 3909 	mlale	r9, r2, r9, r3
 8007278:	9306      	strgt	r3, [sp, #24]
 800727a:	3501      	adds	r5, #1
 800727c:	9011      	str	r0, [sp, #68]	@ 0x44
 800727e:	e7bf      	b.n	8007200 <_strtod_l+0x150>
 8007280:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	9211      	str	r2, [sp, #68]	@ 0x44
 8007286:	785a      	ldrb	r2, [r3, #1]
 8007288:	b3bd      	cbz	r5, 80072fa <_strtod_l+0x24a>
 800728a:	4607      	mov	r7, r0
 800728c:	462b      	mov	r3, r5
 800728e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007292:	2909      	cmp	r1, #9
 8007294:	d912      	bls.n	80072bc <_strtod_l+0x20c>
 8007296:	2101      	movs	r1, #1
 8007298:	e7c3      	b.n	8007222 <_strtod_l+0x172>
 800729a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	9211      	str	r2, [sp, #68]	@ 0x44
 80072a0:	785a      	ldrb	r2, [r3, #1]
 80072a2:	3001      	adds	r0, #1
 80072a4:	2a30      	cmp	r2, #48	@ 0x30
 80072a6:	d0f8      	beq.n	800729a <_strtod_l+0x1ea>
 80072a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	f200 847a 	bhi.w	8007ba6 <_strtod_l+0xaf6>
 80072b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80072b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80072b6:	4607      	mov	r7, r0
 80072b8:	2000      	movs	r0, #0
 80072ba:	4603      	mov	r3, r0
 80072bc:	3a30      	subs	r2, #48	@ 0x30
 80072be:	f100 0101 	add.w	r1, r0, #1
 80072c2:	d014      	beq.n	80072ee <_strtod_l+0x23e>
 80072c4:	440f      	add	r7, r1
 80072c6:	469c      	mov	ip, r3
 80072c8:	f04f 0e0a 	mov.w	lr, #10
 80072cc:	f10c 0401 	add.w	r4, ip, #1
 80072d0:	1ae6      	subs	r6, r4, r3
 80072d2:	42b1      	cmp	r1, r6
 80072d4:	dc13      	bgt.n	80072fe <_strtod_l+0x24e>
 80072d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80072da:	1819      	adds	r1, r3, r0
 80072dc:	2908      	cmp	r1, #8
 80072de:	f103 0301 	add.w	r3, r3, #1
 80072e2:	4403      	add	r3, r0
 80072e4:	dc19      	bgt.n	800731a <_strtod_l+0x26a>
 80072e6:	210a      	movs	r1, #10
 80072e8:	fb01 2909 	mla	r9, r1, r9, r2
 80072ec:	2100      	movs	r1, #0
 80072ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80072f0:	1c50      	adds	r0, r2, #1
 80072f2:	9011      	str	r0, [sp, #68]	@ 0x44
 80072f4:	7852      	ldrb	r2, [r2, #1]
 80072f6:	4608      	mov	r0, r1
 80072f8:	e7c9      	b.n	800728e <_strtod_l+0x1de>
 80072fa:	4628      	mov	r0, r5
 80072fc:	e7d2      	b.n	80072a4 <_strtod_l+0x1f4>
 80072fe:	f1bc 0f08 	cmp.w	ip, #8
 8007302:	dc03      	bgt.n	800730c <_strtod_l+0x25c>
 8007304:	fb0e f909 	mul.w	r9, lr, r9
 8007308:	46a4      	mov	ip, r4
 800730a:	e7df      	b.n	80072cc <_strtod_l+0x21c>
 800730c:	2c10      	cmp	r4, #16
 800730e:	bfde      	ittt	le
 8007310:	9e06      	ldrle	r6, [sp, #24]
 8007312:	fb0e f606 	mulle.w	r6, lr, r6
 8007316:	9606      	strle	r6, [sp, #24]
 8007318:	e7f6      	b.n	8007308 <_strtod_l+0x258>
 800731a:	290f      	cmp	r1, #15
 800731c:	bfdf      	itttt	le
 800731e:	9806      	ldrle	r0, [sp, #24]
 8007320:	210a      	movle	r1, #10
 8007322:	fb01 2200 	mlale	r2, r1, r0, r2
 8007326:	9206      	strle	r2, [sp, #24]
 8007328:	e7e0      	b.n	80072ec <_strtod_l+0x23c>
 800732a:	2700      	movs	r7, #0
 800732c:	2101      	movs	r1, #1
 800732e:	e77d      	b.n	800722c <_strtod_l+0x17c>
 8007330:	f04f 0e00 	mov.w	lr, #0
 8007334:	f108 0202 	add.w	r2, r8, #2
 8007338:	9211      	str	r2, [sp, #68]	@ 0x44
 800733a:	f898 2002 	ldrb.w	r2, [r8, #2]
 800733e:	e786      	b.n	800724e <_strtod_l+0x19e>
 8007340:	f04f 0e01 	mov.w	lr, #1
 8007344:	e7f6      	b.n	8007334 <_strtod_l+0x284>
 8007346:	bf00      	nop
 8007348:	080091c4 	.word	0x080091c4
 800734c:	08008ff7 	.word	0x08008ff7
 8007350:	7ff00000 	.word	0x7ff00000
 8007354:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007356:	1c54      	adds	r4, r2, #1
 8007358:	9411      	str	r4, [sp, #68]	@ 0x44
 800735a:	7852      	ldrb	r2, [r2, #1]
 800735c:	2a30      	cmp	r2, #48	@ 0x30
 800735e:	d0f9      	beq.n	8007354 <_strtod_l+0x2a4>
 8007360:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8007364:	2c08      	cmp	r4, #8
 8007366:	f63f af79 	bhi.w	800725c <_strtod_l+0x1ac>
 800736a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800736e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007370:	9209      	str	r2, [sp, #36]	@ 0x24
 8007372:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007374:	1c54      	adds	r4, r2, #1
 8007376:	9411      	str	r4, [sp, #68]	@ 0x44
 8007378:	7852      	ldrb	r2, [r2, #1]
 800737a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800737e:	2e09      	cmp	r6, #9
 8007380:	d937      	bls.n	80073f2 <_strtod_l+0x342>
 8007382:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8007384:	1ba4      	subs	r4, r4, r6
 8007386:	2c08      	cmp	r4, #8
 8007388:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800738c:	dc02      	bgt.n	8007394 <_strtod_l+0x2e4>
 800738e:	4564      	cmp	r4, ip
 8007390:	bfa8      	it	ge
 8007392:	4664      	movge	r4, ip
 8007394:	f1be 0f00 	cmp.w	lr, #0
 8007398:	d000      	beq.n	800739c <_strtod_l+0x2ec>
 800739a:	4264      	negs	r4, r4
 800739c:	2b00      	cmp	r3, #0
 800739e:	d14d      	bne.n	800743c <_strtod_l+0x38c>
 80073a0:	9b07      	ldr	r3, [sp, #28]
 80073a2:	4318      	orrs	r0, r3
 80073a4:	f47f aebf 	bne.w	8007126 <_strtod_l+0x76>
 80073a8:	2900      	cmp	r1, #0
 80073aa:	f47f aed8 	bne.w	800715e <_strtod_l+0xae>
 80073ae:	2a69      	cmp	r2, #105	@ 0x69
 80073b0:	d027      	beq.n	8007402 <_strtod_l+0x352>
 80073b2:	dc24      	bgt.n	80073fe <_strtod_l+0x34e>
 80073b4:	2a49      	cmp	r2, #73	@ 0x49
 80073b6:	d024      	beq.n	8007402 <_strtod_l+0x352>
 80073b8:	2a4e      	cmp	r2, #78	@ 0x4e
 80073ba:	f47f aed0 	bne.w	800715e <_strtod_l+0xae>
 80073be:	4997      	ldr	r1, [pc, #604]	@ (800761c <_strtod_l+0x56c>)
 80073c0:	a811      	add	r0, sp, #68	@ 0x44
 80073c2:	f001 f9a5 	bl	8008710 <__match>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	f43f aec9 	beq.w	800715e <_strtod_l+0xae>
 80073cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b28      	cmp	r3, #40	@ 0x28
 80073d2:	d12d      	bne.n	8007430 <_strtod_l+0x380>
 80073d4:	4992      	ldr	r1, [pc, #584]	@ (8007620 <_strtod_l+0x570>)
 80073d6:	aa14      	add	r2, sp, #80	@ 0x50
 80073d8:	a811      	add	r0, sp, #68	@ 0x44
 80073da:	f001 f9ad 	bl	8008738 <__hexnan>
 80073de:	2805      	cmp	r0, #5
 80073e0:	d126      	bne.n	8007430 <_strtod_l+0x380>
 80073e2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80073e4:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80073e8:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80073ec:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80073f0:	e699      	b.n	8007126 <_strtod_l+0x76>
 80073f2:	240a      	movs	r4, #10
 80073f4:	fb04 2c0c 	mla	ip, r4, ip, r2
 80073f8:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80073fc:	e7b9      	b.n	8007372 <_strtod_l+0x2c2>
 80073fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8007400:	e7db      	b.n	80073ba <_strtod_l+0x30a>
 8007402:	4988      	ldr	r1, [pc, #544]	@ (8007624 <_strtod_l+0x574>)
 8007404:	a811      	add	r0, sp, #68	@ 0x44
 8007406:	f001 f983 	bl	8008710 <__match>
 800740a:	2800      	cmp	r0, #0
 800740c:	f43f aea7 	beq.w	800715e <_strtod_l+0xae>
 8007410:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007412:	4985      	ldr	r1, [pc, #532]	@ (8007628 <_strtod_l+0x578>)
 8007414:	3b01      	subs	r3, #1
 8007416:	a811      	add	r0, sp, #68	@ 0x44
 8007418:	9311      	str	r3, [sp, #68]	@ 0x44
 800741a:	f001 f979 	bl	8008710 <__match>
 800741e:	b910      	cbnz	r0, 8007426 <_strtod_l+0x376>
 8007420:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007422:	3301      	adds	r3, #1
 8007424:	9311      	str	r3, [sp, #68]	@ 0x44
 8007426:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800763c <_strtod_l+0x58c>
 800742a:	f04f 0a00 	mov.w	sl, #0
 800742e:	e67a      	b.n	8007126 <_strtod_l+0x76>
 8007430:	487e      	ldr	r0, [pc, #504]	@ (800762c <_strtod_l+0x57c>)
 8007432:	f000 fea9 	bl	8008188 <nan>
 8007436:	ec5b ab10 	vmov	sl, fp, d0
 800743a:	e674      	b.n	8007126 <_strtod_l+0x76>
 800743c:	ee07 9a90 	vmov	s15, r9
 8007440:	1be2      	subs	r2, r4, r7
 8007442:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007446:	2d00      	cmp	r5, #0
 8007448:	bf08      	it	eq
 800744a:	461d      	moveq	r5, r3
 800744c:	2b10      	cmp	r3, #16
 800744e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007450:	461a      	mov	r2, r3
 8007452:	bfa8      	it	ge
 8007454:	2210      	movge	r2, #16
 8007456:	2b09      	cmp	r3, #9
 8007458:	ec5b ab17 	vmov	sl, fp, d7
 800745c:	dc15      	bgt.n	800748a <_strtod_l+0x3da>
 800745e:	1be1      	subs	r1, r4, r7
 8007460:	2900      	cmp	r1, #0
 8007462:	f43f ae60 	beq.w	8007126 <_strtod_l+0x76>
 8007466:	eba4 0107 	sub.w	r1, r4, r7
 800746a:	dd72      	ble.n	8007552 <_strtod_l+0x4a2>
 800746c:	2916      	cmp	r1, #22
 800746e:	dc59      	bgt.n	8007524 <_strtod_l+0x474>
 8007470:	4b6f      	ldr	r3, [pc, #444]	@ (8007630 <_strtod_l+0x580>)
 8007472:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007478:	ed93 7b00 	vldr	d7, [r3]
 800747c:	ec4b ab16 	vmov	d6, sl, fp
 8007480:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007484:	ec5b ab17 	vmov	sl, fp, d7
 8007488:	e64d      	b.n	8007126 <_strtod_l+0x76>
 800748a:	4969      	ldr	r1, [pc, #420]	@ (8007630 <_strtod_l+0x580>)
 800748c:	eddd 6a06 	vldr	s13, [sp, #24]
 8007490:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007494:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8007498:	2b0f      	cmp	r3, #15
 800749a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800749e:	eea7 6b05 	vfma.f64	d6, d7, d5
 80074a2:	ec5b ab16 	vmov	sl, fp, d6
 80074a6:	ddda      	ble.n	800745e <_strtod_l+0x3ae>
 80074a8:	1a9a      	subs	r2, r3, r2
 80074aa:	1be1      	subs	r1, r4, r7
 80074ac:	440a      	add	r2, r1
 80074ae:	2a00      	cmp	r2, #0
 80074b0:	f340 8094 	ble.w	80075dc <_strtod_l+0x52c>
 80074b4:	f012 000f 	ands.w	r0, r2, #15
 80074b8:	d00a      	beq.n	80074d0 <_strtod_l+0x420>
 80074ba:	495d      	ldr	r1, [pc, #372]	@ (8007630 <_strtod_l+0x580>)
 80074bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80074c0:	ed91 7b00 	vldr	d7, [r1]
 80074c4:	ec4b ab16 	vmov	d6, sl, fp
 80074c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80074cc:	ec5b ab17 	vmov	sl, fp, d7
 80074d0:	f032 020f 	bics.w	r2, r2, #15
 80074d4:	d073      	beq.n	80075be <_strtod_l+0x50e>
 80074d6:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80074da:	dd47      	ble.n	800756c <_strtod_l+0x4bc>
 80074dc:	2400      	movs	r4, #0
 80074de:	4625      	mov	r5, r4
 80074e0:	9407      	str	r4, [sp, #28]
 80074e2:	4626      	mov	r6, r4
 80074e4:	9a05      	ldr	r2, [sp, #20]
 80074e6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800763c <_strtod_l+0x58c>
 80074ea:	2322      	movs	r3, #34	@ 0x22
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	f04f 0a00 	mov.w	sl, #0
 80074f2:	9b07      	ldr	r3, [sp, #28]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f43f ae16 	beq.w	8007126 <_strtod_l+0x76>
 80074fa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80074fc:	9805      	ldr	r0, [sp, #20]
 80074fe:	f7ff f955 	bl	80067ac <_Bfree>
 8007502:	9805      	ldr	r0, [sp, #20]
 8007504:	4631      	mov	r1, r6
 8007506:	f7ff f951 	bl	80067ac <_Bfree>
 800750a:	9805      	ldr	r0, [sp, #20]
 800750c:	4629      	mov	r1, r5
 800750e:	f7ff f94d 	bl	80067ac <_Bfree>
 8007512:	9907      	ldr	r1, [sp, #28]
 8007514:	9805      	ldr	r0, [sp, #20]
 8007516:	f7ff f949 	bl	80067ac <_Bfree>
 800751a:	9805      	ldr	r0, [sp, #20]
 800751c:	4621      	mov	r1, r4
 800751e:	f7ff f945 	bl	80067ac <_Bfree>
 8007522:	e600      	b.n	8007126 <_strtod_l+0x76>
 8007524:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8007528:	1be0      	subs	r0, r4, r7
 800752a:	4281      	cmp	r1, r0
 800752c:	dbbc      	blt.n	80074a8 <_strtod_l+0x3f8>
 800752e:	4a40      	ldr	r2, [pc, #256]	@ (8007630 <_strtod_l+0x580>)
 8007530:	f1c3 030f 	rsb	r3, r3, #15
 8007534:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007538:	ed91 7b00 	vldr	d7, [r1]
 800753c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800753e:	ec4b ab16 	vmov	d6, sl, fp
 8007542:	1acb      	subs	r3, r1, r3
 8007544:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007548:	ee27 7b06 	vmul.f64	d7, d7, d6
 800754c:	ed92 6b00 	vldr	d6, [r2]
 8007550:	e796      	b.n	8007480 <_strtod_l+0x3d0>
 8007552:	3116      	adds	r1, #22
 8007554:	dba8      	blt.n	80074a8 <_strtod_l+0x3f8>
 8007556:	4b36      	ldr	r3, [pc, #216]	@ (8007630 <_strtod_l+0x580>)
 8007558:	1b3c      	subs	r4, r7, r4
 800755a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800755e:	ed94 7b00 	vldr	d7, [r4]
 8007562:	ec4b ab16 	vmov	d6, sl, fp
 8007566:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800756a:	e78b      	b.n	8007484 <_strtod_l+0x3d4>
 800756c:	2000      	movs	r0, #0
 800756e:	ec4b ab17 	vmov	d7, sl, fp
 8007572:	4e30      	ldr	r6, [pc, #192]	@ (8007634 <_strtod_l+0x584>)
 8007574:	1112      	asrs	r2, r2, #4
 8007576:	4601      	mov	r1, r0
 8007578:	2a01      	cmp	r2, #1
 800757a:	dc23      	bgt.n	80075c4 <_strtod_l+0x514>
 800757c:	b108      	cbz	r0, 8007582 <_strtod_l+0x4d2>
 800757e:	ec5b ab17 	vmov	sl, fp, d7
 8007582:	4a2c      	ldr	r2, [pc, #176]	@ (8007634 <_strtod_l+0x584>)
 8007584:	482c      	ldr	r0, [pc, #176]	@ (8007638 <_strtod_l+0x588>)
 8007586:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800758a:	ed92 7b00 	vldr	d7, [r2]
 800758e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007592:	ec4b ab16 	vmov	d6, sl, fp
 8007596:	4a29      	ldr	r2, [pc, #164]	@ (800763c <_strtod_l+0x58c>)
 8007598:	ee27 7b06 	vmul.f64	d7, d7, d6
 800759c:	ee17 1a90 	vmov	r1, s15
 80075a0:	400a      	ands	r2, r1
 80075a2:	4282      	cmp	r2, r0
 80075a4:	ec5b ab17 	vmov	sl, fp, d7
 80075a8:	d898      	bhi.n	80074dc <_strtod_l+0x42c>
 80075aa:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80075ae:	4282      	cmp	r2, r0
 80075b0:	bf86      	itte	hi
 80075b2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007640 <_strtod_l+0x590>
 80075b6:	f04f 3aff 	movhi.w	sl, #4294967295
 80075ba:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80075be:	2200      	movs	r2, #0
 80075c0:	9206      	str	r2, [sp, #24]
 80075c2:	e076      	b.n	80076b2 <_strtod_l+0x602>
 80075c4:	f012 0f01 	tst.w	r2, #1
 80075c8:	d004      	beq.n	80075d4 <_strtod_l+0x524>
 80075ca:	ed96 6b00 	vldr	d6, [r6]
 80075ce:	2001      	movs	r0, #1
 80075d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075d4:	3101      	adds	r1, #1
 80075d6:	1052      	asrs	r2, r2, #1
 80075d8:	3608      	adds	r6, #8
 80075da:	e7cd      	b.n	8007578 <_strtod_l+0x4c8>
 80075dc:	d0ef      	beq.n	80075be <_strtod_l+0x50e>
 80075de:	4252      	negs	r2, r2
 80075e0:	f012 000f 	ands.w	r0, r2, #15
 80075e4:	d00a      	beq.n	80075fc <_strtod_l+0x54c>
 80075e6:	4912      	ldr	r1, [pc, #72]	@ (8007630 <_strtod_l+0x580>)
 80075e8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80075ec:	ed91 7b00 	vldr	d7, [r1]
 80075f0:	ec4b ab16 	vmov	d6, sl, fp
 80075f4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80075f8:	ec5b ab17 	vmov	sl, fp, d7
 80075fc:	1112      	asrs	r2, r2, #4
 80075fe:	d0de      	beq.n	80075be <_strtod_l+0x50e>
 8007600:	2a1f      	cmp	r2, #31
 8007602:	dd1f      	ble.n	8007644 <_strtod_l+0x594>
 8007604:	2400      	movs	r4, #0
 8007606:	4625      	mov	r5, r4
 8007608:	9407      	str	r4, [sp, #28]
 800760a:	4626      	mov	r6, r4
 800760c:	9a05      	ldr	r2, [sp, #20]
 800760e:	2322      	movs	r3, #34	@ 0x22
 8007610:	f04f 0a00 	mov.w	sl, #0
 8007614:	f04f 0b00 	mov.w	fp, #0
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	e76a      	b.n	80074f2 <_strtod_l+0x442>
 800761c:	08008ee5 	.word	0x08008ee5
 8007620:	080091b0 	.word	0x080091b0
 8007624:	08008edd 	.word	0x08008edd
 8007628:	08008f14 	.word	0x08008f14
 800762c:	0800904d 	.word	0x0800904d
 8007630:	080090e8 	.word	0x080090e8
 8007634:	080090c0 	.word	0x080090c0
 8007638:	7ca00000 	.word	0x7ca00000
 800763c:	7ff00000 	.word	0x7ff00000
 8007640:	7fefffff 	.word	0x7fefffff
 8007644:	f012 0110 	ands.w	r1, r2, #16
 8007648:	bf18      	it	ne
 800764a:	216a      	movne	r1, #106	@ 0x6a
 800764c:	9106      	str	r1, [sp, #24]
 800764e:	ec4b ab17 	vmov	d7, sl, fp
 8007652:	49af      	ldr	r1, [pc, #700]	@ (8007910 <_strtod_l+0x860>)
 8007654:	2000      	movs	r0, #0
 8007656:	07d6      	lsls	r6, r2, #31
 8007658:	d504      	bpl.n	8007664 <_strtod_l+0x5b4>
 800765a:	ed91 6b00 	vldr	d6, [r1]
 800765e:	2001      	movs	r0, #1
 8007660:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007664:	1052      	asrs	r2, r2, #1
 8007666:	f101 0108 	add.w	r1, r1, #8
 800766a:	d1f4      	bne.n	8007656 <_strtod_l+0x5a6>
 800766c:	b108      	cbz	r0, 8007672 <_strtod_l+0x5c2>
 800766e:	ec5b ab17 	vmov	sl, fp, d7
 8007672:	9a06      	ldr	r2, [sp, #24]
 8007674:	b1b2      	cbz	r2, 80076a4 <_strtod_l+0x5f4>
 8007676:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800767a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800767e:	2a00      	cmp	r2, #0
 8007680:	4658      	mov	r0, fp
 8007682:	dd0f      	ble.n	80076a4 <_strtod_l+0x5f4>
 8007684:	2a1f      	cmp	r2, #31
 8007686:	dd55      	ble.n	8007734 <_strtod_l+0x684>
 8007688:	2a34      	cmp	r2, #52	@ 0x34
 800768a:	bfde      	ittt	le
 800768c:	f04f 32ff 	movle.w	r2, #4294967295
 8007690:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8007694:	408a      	lslle	r2, r1
 8007696:	f04f 0a00 	mov.w	sl, #0
 800769a:	bfcc      	ite	gt
 800769c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80076a0:	ea02 0b00 	andle.w	fp, r2, r0
 80076a4:	ec4b ab17 	vmov	d7, sl, fp
 80076a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80076ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b0:	d0a8      	beq.n	8007604 <_strtod_l+0x554>
 80076b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076b4:	9805      	ldr	r0, [sp, #20]
 80076b6:	f8cd 9000 	str.w	r9, [sp]
 80076ba:	462a      	mov	r2, r5
 80076bc:	f7ff f8de 	bl	800687c <__s2b>
 80076c0:	9007      	str	r0, [sp, #28]
 80076c2:	2800      	cmp	r0, #0
 80076c4:	f43f af0a 	beq.w	80074dc <_strtod_l+0x42c>
 80076c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ca:	1b3f      	subs	r7, r7, r4
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bfb4      	ite	lt
 80076d0:	463b      	movlt	r3, r7
 80076d2:	2300      	movge	r3, #0
 80076d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80076d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d8:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8007900 <_strtod_l+0x850>
 80076dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80076e0:	2400      	movs	r4, #0
 80076e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80076e4:	4625      	mov	r5, r4
 80076e6:	9b07      	ldr	r3, [sp, #28]
 80076e8:	9805      	ldr	r0, [sp, #20]
 80076ea:	6859      	ldr	r1, [r3, #4]
 80076ec:	f7ff f81e 	bl	800672c <_Balloc>
 80076f0:	4606      	mov	r6, r0
 80076f2:	2800      	cmp	r0, #0
 80076f4:	f43f aef6 	beq.w	80074e4 <_strtod_l+0x434>
 80076f8:	9b07      	ldr	r3, [sp, #28]
 80076fa:	691a      	ldr	r2, [r3, #16]
 80076fc:	ec4b ab19 	vmov	d9, sl, fp
 8007700:	3202      	adds	r2, #2
 8007702:	f103 010c 	add.w	r1, r3, #12
 8007706:	0092      	lsls	r2, r2, #2
 8007708:	300c      	adds	r0, #12
 800770a:	f000 fd2d 	bl	8008168 <memcpy>
 800770e:	eeb0 0b49 	vmov.f64	d0, d9
 8007712:	9805      	ldr	r0, [sp, #20]
 8007714:	aa14      	add	r2, sp, #80	@ 0x50
 8007716:	a913      	add	r1, sp, #76	@ 0x4c
 8007718:	f7ff fbe4 	bl	8006ee4 <__d2b>
 800771c:	9012      	str	r0, [sp, #72]	@ 0x48
 800771e:	2800      	cmp	r0, #0
 8007720:	f43f aee0 	beq.w	80074e4 <_strtod_l+0x434>
 8007724:	9805      	ldr	r0, [sp, #20]
 8007726:	2101      	movs	r1, #1
 8007728:	f7ff f93e 	bl	80069a8 <__i2b>
 800772c:	4605      	mov	r5, r0
 800772e:	b940      	cbnz	r0, 8007742 <_strtod_l+0x692>
 8007730:	2500      	movs	r5, #0
 8007732:	e6d7      	b.n	80074e4 <_strtod_l+0x434>
 8007734:	f04f 31ff 	mov.w	r1, #4294967295
 8007738:	fa01 f202 	lsl.w	r2, r1, r2
 800773c:	ea02 0a0a 	and.w	sl, r2, sl
 8007740:	e7b0      	b.n	80076a4 <_strtod_l+0x5f4>
 8007742:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8007744:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007746:	2f00      	cmp	r7, #0
 8007748:	bfab      	itete	ge
 800774a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800774c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800774e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8007752:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8007756:	bfac      	ite	ge
 8007758:	eb07 0903 	addge.w	r9, r7, r3
 800775c:	eba3 0807 	sublt.w	r8, r3, r7
 8007760:	9b06      	ldr	r3, [sp, #24]
 8007762:	1aff      	subs	r7, r7, r3
 8007764:	4417      	add	r7, r2
 8007766:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800776a:	4a6a      	ldr	r2, [pc, #424]	@ (8007914 <_strtod_l+0x864>)
 800776c:	3f01      	subs	r7, #1
 800776e:	4297      	cmp	r7, r2
 8007770:	da51      	bge.n	8007816 <_strtod_l+0x766>
 8007772:	1bd1      	subs	r1, r2, r7
 8007774:	291f      	cmp	r1, #31
 8007776:	eba3 0301 	sub.w	r3, r3, r1
 800777a:	f04f 0201 	mov.w	r2, #1
 800777e:	dc3e      	bgt.n	80077fe <_strtod_l+0x74e>
 8007780:	408a      	lsls	r2, r1
 8007782:	920c      	str	r2, [sp, #48]	@ 0x30
 8007784:	2200      	movs	r2, #0
 8007786:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007788:	eb09 0703 	add.w	r7, r9, r3
 800778c:	4498      	add	r8, r3
 800778e:	9b06      	ldr	r3, [sp, #24]
 8007790:	45b9      	cmp	r9, r7
 8007792:	4498      	add	r8, r3
 8007794:	464b      	mov	r3, r9
 8007796:	bfa8      	it	ge
 8007798:	463b      	movge	r3, r7
 800779a:	4543      	cmp	r3, r8
 800779c:	bfa8      	it	ge
 800779e:	4643      	movge	r3, r8
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	bfc2      	ittt	gt
 80077a4:	1aff      	subgt	r7, r7, r3
 80077a6:	eba8 0803 	subgt.w	r8, r8, r3
 80077aa:	eba9 0903 	subgt.w	r9, r9, r3
 80077ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	dd16      	ble.n	80077e2 <_strtod_l+0x732>
 80077b4:	4629      	mov	r1, r5
 80077b6:	9805      	ldr	r0, [sp, #20]
 80077b8:	461a      	mov	r2, r3
 80077ba:	f7ff f9ad 	bl	8006b18 <__pow5mult>
 80077be:	4605      	mov	r5, r0
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d0b5      	beq.n	8007730 <_strtod_l+0x680>
 80077c4:	4601      	mov	r1, r0
 80077c6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80077c8:	9805      	ldr	r0, [sp, #20]
 80077ca:	f7ff f903 	bl	80069d4 <__multiply>
 80077ce:	900f      	str	r0, [sp, #60]	@ 0x3c
 80077d0:	2800      	cmp	r0, #0
 80077d2:	f43f ae87 	beq.w	80074e4 <_strtod_l+0x434>
 80077d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80077d8:	9805      	ldr	r0, [sp, #20]
 80077da:	f7fe ffe7 	bl	80067ac <_Bfree>
 80077de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80077e2:	2f00      	cmp	r7, #0
 80077e4:	dc1b      	bgt.n	800781e <_strtod_l+0x76e>
 80077e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	dd21      	ble.n	8007830 <_strtod_l+0x780>
 80077ec:	4631      	mov	r1, r6
 80077ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80077f0:	9805      	ldr	r0, [sp, #20]
 80077f2:	f7ff f991 	bl	8006b18 <__pow5mult>
 80077f6:	4606      	mov	r6, r0
 80077f8:	b9d0      	cbnz	r0, 8007830 <_strtod_l+0x780>
 80077fa:	2600      	movs	r6, #0
 80077fc:	e672      	b.n	80074e4 <_strtod_l+0x434>
 80077fe:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8007802:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8007806:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800780a:	37e2      	adds	r7, #226	@ 0xe2
 800780c:	fa02 f107 	lsl.w	r1, r2, r7
 8007810:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007812:	920c      	str	r2, [sp, #48]	@ 0x30
 8007814:	e7b8      	b.n	8007788 <_strtod_l+0x6d8>
 8007816:	2200      	movs	r2, #0
 8007818:	920b      	str	r2, [sp, #44]	@ 0x2c
 800781a:	2201      	movs	r2, #1
 800781c:	e7f9      	b.n	8007812 <_strtod_l+0x762>
 800781e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007820:	9805      	ldr	r0, [sp, #20]
 8007822:	463a      	mov	r2, r7
 8007824:	f7ff f9d2 	bl	8006bcc <__lshift>
 8007828:	9012      	str	r0, [sp, #72]	@ 0x48
 800782a:	2800      	cmp	r0, #0
 800782c:	d1db      	bne.n	80077e6 <_strtod_l+0x736>
 800782e:	e659      	b.n	80074e4 <_strtod_l+0x434>
 8007830:	f1b8 0f00 	cmp.w	r8, #0
 8007834:	dd07      	ble.n	8007846 <_strtod_l+0x796>
 8007836:	4631      	mov	r1, r6
 8007838:	9805      	ldr	r0, [sp, #20]
 800783a:	4642      	mov	r2, r8
 800783c:	f7ff f9c6 	bl	8006bcc <__lshift>
 8007840:	4606      	mov	r6, r0
 8007842:	2800      	cmp	r0, #0
 8007844:	d0d9      	beq.n	80077fa <_strtod_l+0x74a>
 8007846:	f1b9 0f00 	cmp.w	r9, #0
 800784a:	dd08      	ble.n	800785e <_strtod_l+0x7ae>
 800784c:	4629      	mov	r1, r5
 800784e:	9805      	ldr	r0, [sp, #20]
 8007850:	464a      	mov	r2, r9
 8007852:	f7ff f9bb 	bl	8006bcc <__lshift>
 8007856:	4605      	mov	r5, r0
 8007858:	2800      	cmp	r0, #0
 800785a:	f43f ae43 	beq.w	80074e4 <_strtod_l+0x434>
 800785e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007860:	9805      	ldr	r0, [sp, #20]
 8007862:	4632      	mov	r2, r6
 8007864:	f7ff fa3a 	bl	8006cdc <__mdiff>
 8007868:	4604      	mov	r4, r0
 800786a:	2800      	cmp	r0, #0
 800786c:	f43f ae3a 	beq.w	80074e4 <_strtod_l+0x434>
 8007870:	2300      	movs	r3, #0
 8007872:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8007876:	60c3      	str	r3, [r0, #12]
 8007878:	4629      	mov	r1, r5
 800787a:	f7ff fa13 	bl	8006ca4 <__mcmp>
 800787e:	2800      	cmp	r0, #0
 8007880:	da4c      	bge.n	800791c <_strtod_l+0x86c>
 8007882:	ea58 080a 	orrs.w	r8, r8, sl
 8007886:	d172      	bne.n	800796e <_strtod_l+0x8be>
 8007888:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800788c:	2b00      	cmp	r3, #0
 800788e:	d16e      	bne.n	800796e <_strtod_l+0x8be>
 8007890:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007894:	0d1b      	lsrs	r3, r3, #20
 8007896:	051b      	lsls	r3, r3, #20
 8007898:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800789c:	d967      	bls.n	800796e <_strtod_l+0x8be>
 800789e:	6963      	ldr	r3, [r4, #20]
 80078a0:	b913      	cbnz	r3, 80078a8 <_strtod_l+0x7f8>
 80078a2:	6923      	ldr	r3, [r4, #16]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	dd62      	ble.n	800796e <_strtod_l+0x8be>
 80078a8:	4621      	mov	r1, r4
 80078aa:	2201      	movs	r2, #1
 80078ac:	9805      	ldr	r0, [sp, #20]
 80078ae:	f7ff f98d 	bl	8006bcc <__lshift>
 80078b2:	4629      	mov	r1, r5
 80078b4:	4604      	mov	r4, r0
 80078b6:	f7ff f9f5 	bl	8006ca4 <__mcmp>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	dd57      	ble.n	800796e <_strtod_l+0x8be>
 80078be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078c2:	9a06      	ldr	r2, [sp, #24]
 80078c4:	0d1b      	lsrs	r3, r3, #20
 80078c6:	051b      	lsls	r3, r3, #20
 80078c8:	2a00      	cmp	r2, #0
 80078ca:	d06e      	beq.n	80079aa <_strtod_l+0x8fa>
 80078cc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80078d0:	d86b      	bhi.n	80079aa <_strtod_l+0x8fa>
 80078d2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80078d6:	f67f ae99 	bls.w	800760c <_strtod_l+0x55c>
 80078da:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8007908 <_strtod_l+0x858>
 80078de:	ec4b ab16 	vmov	d6, sl, fp
 80078e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007918 <_strtod_l+0x868>)
 80078e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80078e8:	ee17 2a90 	vmov	r2, s15
 80078ec:	4013      	ands	r3, r2
 80078ee:	ec5b ab17 	vmov	sl, fp, d7
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f47f ae01 	bne.w	80074fa <_strtod_l+0x44a>
 80078f8:	9a05      	ldr	r2, [sp, #20]
 80078fa:	2322      	movs	r3, #34	@ 0x22
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	e5fc      	b.n	80074fa <_strtod_l+0x44a>
 8007900:	ffc00000 	.word	0xffc00000
 8007904:	41dfffff 	.word	0x41dfffff
 8007908:	00000000 	.word	0x00000000
 800790c:	39500000 	.word	0x39500000
 8007910:	080091d8 	.word	0x080091d8
 8007914:	fffffc02 	.word	0xfffffc02
 8007918:	7ff00000 	.word	0x7ff00000
 800791c:	46d9      	mov	r9, fp
 800791e:	d15d      	bne.n	80079dc <_strtod_l+0x92c>
 8007920:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007924:	f1b8 0f00 	cmp.w	r8, #0
 8007928:	d02a      	beq.n	8007980 <_strtod_l+0x8d0>
 800792a:	4aa9      	ldr	r2, [pc, #676]	@ (8007bd0 <_strtod_l+0xb20>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d12a      	bne.n	8007986 <_strtod_l+0x8d6>
 8007930:	9b06      	ldr	r3, [sp, #24]
 8007932:	4652      	mov	r2, sl
 8007934:	b1fb      	cbz	r3, 8007976 <_strtod_l+0x8c6>
 8007936:	4ba7      	ldr	r3, [pc, #668]	@ (8007bd4 <_strtod_l+0xb24>)
 8007938:	ea0b 0303 	and.w	r3, fp, r3
 800793c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007940:	f04f 31ff 	mov.w	r1, #4294967295
 8007944:	d81a      	bhi.n	800797c <_strtod_l+0x8cc>
 8007946:	0d1b      	lsrs	r3, r3, #20
 8007948:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800794c:	fa01 f303 	lsl.w	r3, r1, r3
 8007950:	429a      	cmp	r2, r3
 8007952:	d118      	bne.n	8007986 <_strtod_l+0x8d6>
 8007954:	4ba0      	ldr	r3, [pc, #640]	@ (8007bd8 <_strtod_l+0xb28>)
 8007956:	4599      	cmp	r9, r3
 8007958:	d102      	bne.n	8007960 <_strtod_l+0x8b0>
 800795a:	3201      	adds	r2, #1
 800795c:	f43f adc2 	beq.w	80074e4 <_strtod_l+0x434>
 8007960:	4b9c      	ldr	r3, [pc, #624]	@ (8007bd4 <_strtod_l+0xb24>)
 8007962:	ea09 0303 	and.w	r3, r9, r3
 8007966:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800796a:	f04f 0a00 	mov.w	sl, #0
 800796e:	9b06      	ldr	r3, [sp, #24]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1b2      	bne.n	80078da <_strtod_l+0x82a>
 8007974:	e5c1      	b.n	80074fa <_strtod_l+0x44a>
 8007976:	f04f 33ff 	mov.w	r3, #4294967295
 800797a:	e7e9      	b.n	8007950 <_strtod_l+0x8a0>
 800797c:	460b      	mov	r3, r1
 800797e:	e7e7      	b.n	8007950 <_strtod_l+0x8a0>
 8007980:	ea53 030a 	orrs.w	r3, r3, sl
 8007984:	d09b      	beq.n	80078be <_strtod_l+0x80e>
 8007986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007988:	b1c3      	cbz	r3, 80079bc <_strtod_l+0x90c>
 800798a:	ea13 0f09 	tst.w	r3, r9
 800798e:	d0ee      	beq.n	800796e <_strtod_l+0x8be>
 8007990:	9a06      	ldr	r2, [sp, #24]
 8007992:	4650      	mov	r0, sl
 8007994:	4659      	mov	r1, fp
 8007996:	f1b8 0f00 	cmp.w	r8, #0
 800799a:	d013      	beq.n	80079c4 <_strtod_l+0x914>
 800799c:	f7ff fb6d 	bl	800707a <sulp>
 80079a0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80079a4:	ec5b ab17 	vmov	sl, fp, d7
 80079a8:	e7e1      	b.n	800796e <_strtod_l+0x8be>
 80079aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80079ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80079b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80079b6:	f04f 3aff 	mov.w	sl, #4294967295
 80079ba:	e7d8      	b.n	800796e <_strtod_l+0x8be>
 80079bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80079be:	ea13 0f0a 	tst.w	r3, sl
 80079c2:	e7e4      	b.n	800798e <_strtod_l+0x8de>
 80079c4:	f7ff fb59 	bl	800707a <sulp>
 80079c8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80079cc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80079d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d4:	ec5b ab10 	vmov	sl, fp, d0
 80079d8:	d1c9      	bne.n	800796e <_strtod_l+0x8be>
 80079da:	e617      	b.n	800760c <_strtod_l+0x55c>
 80079dc:	4629      	mov	r1, r5
 80079de:	4620      	mov	r0, r4
 80079e0:	f7ff fad8 	bl	8006f94 <__ratio>
 80079e4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80079e8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80079ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f0:	d85d      	bhi.n	8007aae <_strtod_l+0x9fe>
 80079f2:	f1b8 0f00 	cmp.w	r8, #0
 80079f6:	d164      	bne.n	8007ac2 <_strtod_l+0xa12>
 80079f8:	f1ba 0f00 	cmp.w	sl, #0
 80079fc:	d14b      	bne.n	8007a96 <_strtod_l+0x9e6>
 80079fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a02:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d160      	bne.n	8007acc <_strtod_l+0xa1c>
 8007a0a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8007a0e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8007a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a16:	d401      	bmi.n	8007a1c <_strtod_l+0x96c>
 8007a18:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007a1c:	eeb1 ab48 	vneg.f64	d10, d8
 8007a20:	486c      	ldr	r0, [pc, #432]	@ (8007bd4 <_strtod_l+0xb24>)
 8007a22:	496e      	ldr	r1, [pc, #440]	@ (8007bdc <_strtod_l+0xb2c>)
 8007a24:	ea09 0700 	and.w	r7, r9, r0
 8007a28:	428f      	cmp	r7, r1
 8007a2a:	ec53 2b1a 	vmov	r2, r3, d10
 8007a2e:	d17d      	bne.n	8007b2c <_strtod_l+0xa7c>
 8007a30:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8007a34:	ec4b ab1c 	vmov	d12, sl, fp
 8007a38:	eeb0 0b4c 	vmov.f64	d0, d12
 8007a3c:	f7ff f9e2 	bl	8006e04 <__ulp>
 8007a40:	4864      	ldr	r0, [pc, #400]	@ (8007bd4 <_strtod_l+0xb24>)
 8007a42:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8007a46:	ee1c 3a90 	vmov	r3, s25
 8007a4a:	4a65      	ldr	r2, [pc, #404]	@ (8007be0 <_strtod_l+0xb30>)
 8007a4c:	ea03 0100 	and.w	r1, r3, r0
 8007a50:	4291      	cmp	r1, r2
 8007a52:	ec5b ab1c 	vmov	sl, fp, d12
 8007a56:	d93c      	bls.n	8007ad2 <_strtod_l+0xa22>
 8007a58:	ee19 2a90 	vmov	r2, s19
 8007a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8007bd8 <_strtod_l+0xb28>)
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d104      	bne.n	8007a6c <_strtod_l+0x9bc>
 8007a62:	ee19 3a10 	vmov	r3, s18
 8007a66:	3301      	adds	r3, #1
 8007a68:	f43f ad3c 	beq.w	80074e4 <_strtod_l+0x434>
 8007a6c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8007bd8 <_strtod_l+0xb28>
 8007a70:	f04f 3aff 	mov.w	sl, #4294967295
 8007a74:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007a76:	9805      	ldr	r0, [sp, #20]
 8007a78:	f7fe fe98 	bl	80067ac <_Bfree>
 8007a7c:	9805      	ldr	r0, [sp, #20]
 8007a7e:	4631      	mov	r1, r6
 8007a80:	f7fe fe94 	bl	80067ac <_Bfree>
 8007a84:	9805      	ldr	r0, [sp, #20]
 8007a86:	4629      	mov	r1, r5
 8007a88:	f7fe fe90 	bl	80067ac <_Bfree>
 8007a8c:	9805      	ldr	r0, [sp, #20]
 8007a8e:	4621      	mov	r1, r4
 8007a90:	f7fe fe8c 	bl	80067ac <_Bfree>
 8007a94:	e627      	b.n	80076e6 <_strtod_l+0x636>
 8007a96:	f1ba 0f01 	cmp.w	sl, #1
 8007a9a:	d103      	bne.n	8007aa4 <_strtod_l+0x9f4>
 8007a9c:	f1bb 0f00 	cmp.w	fp, #0
 8007aa0:	f43f adb4 	beq.w	800760c <_strtod_l+0x55c>
 8007aa4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8007aa8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8007aac:	e7b8      	b.n	8007a20 <_strtod_l+0x970>
 8007aae:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8007ab2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007ab6:	f1b8 0f00 	cmp.w	r8, #0
 8007aba:	d0af      	beq.n	8007a1c <_strtod_l+0x96c>
 8007abc:	eeb0 ab48 	vmov.f64	d10, d8
 8007ac0:	e7ae      	b.n	8007a20 <_strtod_l+0x970>
 8007ac2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8007ac6:	eeb0 8b4a 	vmov.f64	d8, d10
 8007aca:	e7a9      	b.n	8007a20 <_strtod_l+0x970>
 8007acc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8007ad0:	e7a6      	b.n	8007a20 <_strtod_l+0x970>
 8007ad2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007ad6:	9b06      	ldr	r3, [sp, #24]
 8007ad8:	46d9      	mov	r9, fp
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1ca      	bne.n	8007a74 <_strtod_l+0x9c4>
 8007ade:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ae2:	0d1b      	lsrs	r3, r3, #20
 8007ae4:	051b      	lsls	r3, r3, #20
 8007ae6:	429f      	cmp	r7, r3
 8007ae8:	d1c4      	bne.n	8007a74 <_strtod_l+0x9c4>
 8007aea:	ec51 0b18 	vmov	r0, r1, d8
 8007aee:	f7f8 fdd3 	bl	8000698 <__aeabi_d2lz>
 8007af2:	f7f8 fd8b 	bl	800060c <__aeabi_l2d>
 8007af6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8007afa:	ec41 0b17 	vmov	d7, r0, r1
 8007afe:	ea49 090a 	orr.w	r9, r9, sl
 8007b02:	ea59 0908 	orrs.w	r9, r9, r8
 8007b06:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007b0a:	d03c      	beq.n	8007b86 <_strtod_l+0xad6>
 8007b0c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8007bb8 <_strtod_l+0xb08>
 8007b10:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b18:	f53f acef 	bmi.w	80074fa <_strtod_l+0x44a>
 8007b1c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8007bc0 <_strtod_l+0xb10>
 8007b20:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b28:	dda4      	ble.n	8007a74 <_strtod_l+0x9c4>
 8007b2a:	e4e6      	b.n	80074fa <_strtod_l+0x44a>
 8007b2c:	9906      	ldr	r1, [sp, #24]
 8007b2e:	b1e1      	cbz	r1, 8007b6a <_strtod_l+0xaba>
 8007b30:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8007b34:	d819      	bhi.n	8007b6a <_strtod_l+0xaba>
 8007b36:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8007b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3e:	d811      	bhi.n	8007b64 <_strtod_l+0xab4>
 8007b40:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8007b44:	ee18 3a10 	vmov	r3, s16
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	bf38      	it	cc
 8007b4c:	2301      	movcc	r3, #1
 8007b4e:	ee08 3a10 	vmov	s16, r3
 8007b52:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8007b56:	f1b8 0f00 	cmp.w	r8, #0
 8007b5a:	d111      	bne.n	8007b80 <_strtod_l+0xad0>
 8007b5c:	eeb1 7b48 	vneg.f64	d7, d8
 8007b60:	ec53 2b17 	vmov	r2, r3, d7
 8007b64:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8007b68:	1bcb      	subs	r3, r1, r7
 8007b6a:	eeb0 0b49 	vmov.f64	d0, d9
 8007b6e:	ec43 2b1a 	vmov	d10, r2, r3
 8007b72:	f7ff f947 	bl	8006e04 <__ulp>
 8007b76:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8007b7a:	ec5b ab19 	vmov	sl, fp, d9
 8007b7e:	e7aa      	b.n	8007ad6 <_strtod_l+0xa26>
 8007b80:	eeb0 7b48 	vmov.f64	d7, d8
 8007b84:	e7ec      	b.n	8007b60 <_strtod_l+0xab0>
 8007b86:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8007bc8 <_strtod_l+0xb18>
 8007b8a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b92:	f57f af6f 	bpl.w	8007a74 <_strtod_l+0x9c4>
 8007b96:	e4b0      	b.n	80074fa <_strtod_l+0x44a>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	9308      	str	r3, [sp, #32]
 8007b9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b9e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	f7ff bac4 	b.w	800712e <_strtod_l+0x7e>
 8007ba6:	2a65      	cmp	r2, #101	@ 0x65
 8007ba8:	f43f abbf 	beq.w	800732a <_strtod_l+0x27a>
 8007bac:	2a45      	cmp	r2, #69	@ 0x45
 8007bae:	f43f abbc 	beq.w	800732a <_strtod_l+0x27a>
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	f7ff bbf4 	b.w	80073a0 <_strtod_l+0x2f0>
 8007bb8:	94a03595 	.word	0x94a03595
 8007bbc:	3fdfffff 	.word	0x3fdfffff
 8007bc0:	35afe535 	.word	0x35afe535
 8007bc4:	3fe00000 	.word	0x3fe00000
 8007bc8:	94a03595 	.word	0x94a03595
 8007bcc:	3fcfffff 	.word	0x3fcfffff
 8007bd0:	000fffff 	.word	0x000fffff
 8007bd4:	7ff00000 	.word	0x7ff00000
 8007bd8:	7fefffff 	.word	0x7fefffff
 8007bdc:	7fe00000 	.word	0x7fe00000
 8007be0:	7c9fffff 	.word	0x7c9fffff

08007be4 <_strtod_r>:
 8007be4:	4b01      	ldr	r3, [pc, #4]	@ (8007bec <_strtod_r+0x8>)
 8007be6:	f7ff ba63 	b.w	80070b0 <_strtod_l>
 8007bea:	bf00      	nop
 8007bec:	20000068 	.word	0x20000068

08007bf0 <_strtol_l.isra.0>:
 8007bf0:	2b24      	cmp	r3, #36	@ 0x24
 8007bf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf6:	4686      	mov	lr, r0
 8007bf8:	4690      	mov	r8, r2
 8007bfa:	d801      	bhi.n	8007c00 <_strtol_l.isra.0+0x10>
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d106      	bne.n	8007c0e <_strtol_l.isra.0+0x1e>
 8007c00:	f7fd fe78 	bl	80058f4 <__errno>
 8007c04:	2316      	movs	r3, #22
 8007c06:	6003      	str	r3, [r0, #0]
 8007c08:	2000      	movs	r0, #0
 8007c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c0e:	4834      	ldr	r0, [pc, #208]	@ (8007ce0 <_strtol_l.isra.0+0xf0>)
 8007c10:	460d      	mov	r5, r1
 8007c12:	462a      	mov	r2, r5
 8007c14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c18:	5d06      	ldrb	r6, [r0, r4]
 8007c1a:	f016 0608 	ands.w	r6, r6, #8
 8007c1e:	d1f8      	bne.n	8007c12 <_strtol_l.isra.0+0x22>
 8007c20:	2c2d      	cmp	r4, #45	@ 0x2d
 8007c22:	d110      	bne.n	8007c46 <_strtol_l.isra.0+0x56>
 8007c24:	782c      	ldrb	r4, [r5, #0]
 8007c26:	2601      	movs	r6, #1
 8007c28:	1c95      	adds	r5, r2, #2
 8007c2a:	f033 0210 	bics.w	r2, r3, #16
 8007c2e:	d115      	bne.n	8007c5c <_strtol_l.isra.0+0x6c>
 8007c30:	2c30      	cmp	r4, #48	@ 0x30
 8007c32:	d10d      	bne.n	8007c50 <_strtol_l.isra.0+0x60>
 8007c34:	782a      	ldrb	r2, [r5, #0]
 8007c36:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c3a:	2a58      	cmp	r2, #88	@ 0x58
 8007c3c:	d108      	bne.n	8007c50 <_strtol_l.isra.0+0x60>
 8007c3e:	786c      	ldrb	r4, [r5, #1]
 8007c40:	3502      	adds	r5, #2
 8007c42:	2310      	movs	r3, #16
 8007c44:	e00a      	b.n	8007c5c <_strtol_l.isra.0+0x6c>
 8007c46:	2c2b      	cmp	r4, #43	@ 0x2b
 8007c48:	bf04      	itt	eq
 8007c4a:	782c      	ldrbeq	r4, [r5, #0]
 8007c4c:	1c95      	addeq	r5, r2, #2
 8007c4e:	e7ec      	b.n	8007c2a <_strtol_l.isra.0+0x3a>
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1f6      	bne.n	8007c42 <_strtol_l.isra.0+0x52>
 8007c54:	2c30      	cmp	r4, #48	@ 0x30
 8007c56:	bf14      	ite	ne
 8007c58:	230a      	movne	r3, #10
 8007c5a:	2308      	moveq	r3, #8
 8007c5c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007c60:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c64:	2200      	movs	r2, #0
 8007c66:	fbbc f9f3 	udiv	r9, ip, r3
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007c70:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007c74:	2f09      	cmp	r7, #9
 8007c76:	d80f      	bhi.n	8007c98 <_strtol_l.isra.0+0xa8>
 8007c78:	463c      	mov	r4, r7
 8007c7a:	42a3      	cmp	r3, r4
 8007c7c:	dd1b      	ble.n	8007cb6 <_strtol_l.isra.0+0xc6>
 8007c7e:	1c57      	adds	r7, r2, #1
 8007c80:	d007      	beq.n	8007c92 <_strtol_l.isra.0+0xa2>
 8007c82:	4581      	cmp	r9, r0
 8007c84:	d314      	bcc.n	8007cb0 <_strtol_l.isra.0+0xc0>
 8007c86:	d101      	bne.n	8007c8c <_strtol_l.isra.0+0x9c>
 8007c88:	45a2      	cmp	sl, r4
 8007c8a:	db11      	blt.n	8007cb0 <_strtol_l.isra.0+0xc0>
 8007c8c:	fb00 4003 	mla	r0, r0, r3, r4
 8007c90:	2201      	movs	r2, #1
 8007c92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c96:	e7eb      	b.n	8007c70 <_strtol_l.isra.0+0x80>
 8007c98:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007c9c:	2f19      	cmp	r7, #25
 8007c9e:	d801      	bhi.n	8007ca4 <_strtol_l.isra.0+0xb4>
 8007ca0:	3c37      	subs	r4, #55	@ 0x37
 8007ca2:	e7ea      	b.n	8007c7a <_strtol_l.isra.0+0x8a>
 8007ca4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007ca8:	2f19      	cmp	r7, #25
 8007caa:	d804      	bhi.n	8007cb6 <_strtol_l.isra.0+0xc6>
 8007cac:	3c57      	subs	r4, #87	@ 0x57
 8007cae:	e7e4      	b.n	8007c7a <_strtol_l.isra.0+0x8a>
 8007cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb4:	e7ed      	b.n	8007c92 <_strtol_l.isra.0+0xa2>
 8007cb6:	1c53      	adds	r3, r2, #1
 8007cb8:	d108      	bne.n	8007ccc <_strtol_l.isra.0+0xdc>
 8007cba:	2322      	movs	r3, #34	@ 0x22
 8007cbc:	f8ce 3000 	str.w	r3, [lr]
 8007cc0:	4660      	mov	r0, ip
 8007cc2:	f1b8 0f00 	cmp.w	r8, #0
 8007cc6:	d0a0      	beq.n	8007c0a <_strtol_l.isra.0+0x1a>
 8007cc8:	1e69      	subs	r1, r5, #1
 8007cca:	e006      	b.n	8007cda <_strtol_l.isra.0+0xea>
 8007ccc:	b106      	cbz	r6, 8007cd0 <_strtol_l.isra.0+0xe0>
 8007cce:	4240      	negs	r0, r0
 8007cd0:	f1b8 0f00 	cmp.w	r8, #0
 8007cd4:	d099      	beq.n	8007c0a <_strtol_l.isra.0+0x1a>
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	d1f6      	bne.n	8007cc8 <_strtol_l.isra.0+0xd8>
 8007cda:	f8c8 1000 	str.w	r1, [r8]
 8007cde:	e794      	b.n	8007c0a <_strtol_l.isra.0+0x1a>
 8007ce0:	08009201 	.word	0x08009201

08007ce4 <_strtol_r>:
 8007ce4:	f7ff bf84 	b.w	8007bf0 <_strtol_l.isra.0>

08007ce8 <__ssputs_r>:
 8007ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cec:	688e      	ldr	r6, [r1, #8]
 8007cee:	461f      	mov	r7, r3
 8007cf0:	42be      	cmp	r6, r7
 8007cf2:	680b      	ldr	r3, [r1, #0]
 8007cf4:	4682      	mov	sl, r0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	4690      	mov	r8, r2
 8007cfa:	d82d      	bhi.n	8007d58 <__ssputs_r+0x70>
 8007cfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d04:	d026      	beq.n	8007d54 <__ssputs_r+0x6c>
 8007d06:	6965      	ldr	r5, [r4, #20]
 8007d08:	6909      	ldr	r1, [r1, #16]
 8007d0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d0e:	eba3 0901 	sub.w	r9, r3, r1
 8007d12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d16:	1c7b      	adds	r3, r7, #1
 8007d18:	444b      	add	r3, r9
 8007d1a:	106d      	asrs	r5, r5, #1
 8007d1c:	429d      	cmp	r5, r3
 8007d1e:	bf38      	it	cc
 8007d20:	461d      	movcc	r5, r3
 8007d22:	0553      	lsls	r3, r2, #21
 8007d24:	d527      	bpl.n	8007d76 <__ssputs_r+0x8e>
 8007d26:	4629      	mov	r1, r5
 8007d28:	f7fe fc74 	bl	8006614 <_malloc_r>
 8007d2c:	4606      	mov	r6, r0
 8007d2e:	b360      	cbz	r0, 8007d8a <__ssputs_r+0xa2>
 8007d30:	6921      	ldr	r1, [r4, #16]
 8007d32:	464a      	mov	r2, r9
 8007d34:	f000 fa18 	bl	8008168 <memcpy>
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	6126      	str	r6, [r4, #16]
 8007d46:	6165      	str	r5, [r4, #20]
 8007d48:	444e      	add	r6, r9
 8007d4a:	eba5 0509 	sub.w	r5, r5, r9
 8007d4e:	6026      	str	r6, [r4, #0]
 8007d50:	60a5      	str	r5, [r4, #8]
 8007d52:	463e      	mov	r6, r7
 8007d54:	42be      	cmp	r6, r7
 8007d56:	d900      	bls.n	8007d5a <__ssputs_r+0x72>
 8007d58:	463e      	mov	r6, r7
 8007d5a:	6820      	ldr	r0, [r4, #0]
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	4641      	mov	r1, r8
 8007d60:	f000 f9c6 	bl	80080f0 <memmove>
 8007d64:	68a3      	ldr	r3, [r4, #8]
 8007d66:	1b9b      	subs	r3, r3, r6
 8007d68:	60a3      	str	r3, [r4, #8]
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	4433      	add	r3, r6
 8007d6e:	6023      	str	r3, [r4, #0]
 8007d70:	2000      	movs	r0, #0
 8007d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d76:	462a      	mov	r2, r5
 8007d78:	f000 fd8b 	bl	8008892 <_realloc_r>
 8007d7c:	4606      	mov	r6, r0
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d1e0      	bne.n	8007d44 <__ssputs_r+0x5c>
 8007d82:	6921      	ldr	r1, [r4, #16]
 8007d84:	4650      	mov	r0, sl
 8007d86:	f7fe fbd1 	bl	800652c <_free_r>
 8007d8a:	230c      	movs	r3, #12
 8007d8c:	f8ca 3000 	str.w	r3, [sl]
 8007d90:	89a3      	ldrh	r3, [r4, #12]
 8007d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d96:	81a3      	strh	r3, [r4, #12]
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	e7e9      	b.n	8007d72 <__ssputs_r+0x8a>
	...

08007da0 <_svfiprintf_r>:
 8007da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	4698      	mov	r8, r3
 8007da6:	898b      	ldrh	r3, [r1, #12]
 8007da8:	061b      	lsls	r3, r3, #24
 8007daa:	b09d      	sub	sp, #116	@ 0x74
 8007dac:	4607      	mov	r7, r0
 8007dae:	460d      	mov	r5, r1
 8007db0:	4614      	mov	r4, r2
 8007db2:	d510      	bpl.n	8007dd6 <_svfiprintf_r+0x36>
 8007db4:	690b      	ldr	r3, [r1, #16]
 8007db6:	b973      	cbnz	r3, 8007dd6 <_svfiprintf_r+0x36>
 8007db8:	2140      	movs	r1, #64	@ 0x40
 8007dba:	f7fe fc2b 	bl	8006614 <_malloc_r>
 8007dbe:	6028      	str	r0, [r5, #0]
 8007dc0:	6128      	str	r0, [r5, #16]
 8007dc2:	b930      	cbnz	r0, 8007dd2 <_svfiprintf_r+0x32>
 8007dc4:	230c      	movs	r3, #12
 8007dc6:	603b      	str	r3, [r7, #0]
 8007dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dcc:	b01d      	add	sp, #116	@ 0x74
 8007dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd2:	2340      	movs	r3, #64	@ 0x40
 8007dd4:	616b      	str	r3, [r5, #20]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dda:	2320      	movs	r3, #32
 8007ddc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007de4:	2330      	movs	r3, #48	@ 0x30
 8007de6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f84 <_svfiprintf_r+0x1e4>
 8007dea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dee:	f04f 0901 	mov.w	r9, #1
 8007df2:	4623      	mov	r3, r4
 8007df4:	469a      	mov	sl, r3
 8007df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dfa:	b10a      	cbz	r2, 8007e00 <_svfiprintf_r+0x60>
 8007dfc:	2a25      	cmp	r2, #37	@ 0x25
 8007dfe:	d1f9      	bne.n	8007df4 <_svfiprintf_r+0x54>
 8007e00:	ebba 0b04 	subs.w	fp, sl, r4
 8007e04:	d00b      	beq.n	8007e1e <_svfiprintf_r+0x7e>
 8007e06:	465b      	mov	r3, fp
 8007e08:	4622      	mov	r2, r4
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f7ff ff6b 	bl	8007ce8 <__ssputs_r>
 8007e12:	3001      	adds	r0, #1
 8007e14:	f000 80a7 	beq.w	8007f66 <_svfiprintf_r+0x1c6>
 8007e18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e1a:	445a      	add	r2, fp
 8007e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 809f 	beq.w	8007f66 <_svfiprintf_r+0x1c6>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e32:	f10a 0a01 	add.w	sl, sl, #1
 8007e36:	9304      	str	r3, [sp, #16]
 8007e38:	9307      	str	r3, [sp, #28]
 8007e3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e40:	4654      	mov	r4, sl
 8007e42:	2205      	movs	r2, #5
 8007e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e48:	484e      	ldr	r0, [pc, #312]	@ (8007f84 <_svfiprintf_r+0x1e4>)
 8007e4a:	f7f8 f9f9 	bl	8000240 <memchr>
 8007e4e:	9a04      	ldr	r2, [sp, #16]
 8007e50:	b9d8      	cbnz	r0, 8007e8a <_svfiprintf_r+0xea>
 8007e52:	06d0      	lsls	r0, r2, #27
 8007e54:	bf44      	itt	mi
 8007e56:	2320      	movmi	r3, #32
 8007e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e5c:	0711      	lsls	r1, r2, #28
 8007e5e:	bf44      	itt	mi
 8007e60:	232b      	movmi	r3, #43	@ 0x2b
 8007e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e66:	f89a 3000 	ldrb.w	r3, [sl]
 8007e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e6c:	d015      	beq.n	8007e9a <_svfiprintf_r+0xfa>
 8007e6e:	9a07      	ldr	r2, [sp, #28]
 8007e70:	4654      	mov	r4, sl
 8007e72:	2000      	movs	r0, #0
 8007e74:	f04f 0c0a 	mov.w	ip, #10
 8007e78:	4621      	mov	r1, r4
 8007e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e7e:	3b30      	subs	r3, #48	@ 0x30
 8007e80:	2b09      	cmp	r3, #9
 8007e82:	d94b      	bls.n	8007f1c <_svfiprintf_r+0x17c>
 8007e84:	b1b0      	cbz	r0, 8007eb4 <_svfiprintf_r+0x114>
 8007e86:	9207      	str	r2, [sp, #28]
 8007e88:	e014      	b.n	8007eb4 <_svfiprintf_r+0x114>
 8007e8a:	eba0 0308 	sub.w	r3, r0, r8
 8007e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e92:	4313      	orrs	r3, r2
 8007e94:	9304      	str	r3, [sp, #16]
 8007e96:	46a2      	mov	sl, r4
 8007e98:	e7d2      	b.n	8007e40 <_svfiprintf_r+0xa0>
 8007e9a:	9b03      	ldr	r3, [sp, #12]
 8007e9c:	1d19      	adds	r1, r3, #4
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	9103      	str	r1, [sp, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bfbb      	ittet	lt
 8007ea6:	425b      	neglt	r3, r3
 8007ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8007eac:	9307      	strge	r3, [sp, #28]
 8007eae:	9307      	strlt	r3, [sp, #28]
 8007eb0:	bfb8      	it	lt
 8007eb2:	9204      	strlt	r2, [sp, #16]
 8007eb4:	7823      	ldrb	r3, [r4, #0]
 8007eb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007eb8:	d10a      	bne.n	8007ed0 <_svfiprintf_r+0x130>
 8007eba:	7863      	ldrb	r3, [r4, #1]
 8007ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ebe:	d132      	bne.n	8007f26 <_svfiprintf_r+0x186>
 8007ec0:	9b03      	ldr	r3, [sp, #12]
 8007ec2:	1d1a      	adds	r2, r3, #4
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	9203      	str	r2, [sp, #12]
 8007ec8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ecc:	3402      	adds	r4, #2
 8007ece:	9305      	str	r3, [sp, #20]
 8007ed0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f94 <_svfiprintf_r+0x1f4>
 8007ed4:	7821      	ldrb	r1, [r4, #0]
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	4650      	mov	r0, sl
 8007eda:	f7f8 f9b1 	bl	8000240 <memchr>
 8007ede:	b138      	cbz	r0, 8007ef0 <_svfiprintf_r+0x150>
 8007ee0:	9b04      	ldr	r3, [sp, #16]
 8007ee2:	eba0 000a 	sub.w	r0, r0, sl
 8007ee6:	2240      	movs	r2, #64	@ 0x40
 8007ee8:	4082      	lsls	r2, r0
 8007eea:	4313      	orrs	r3, r2
 8007eec:	3401      	adds	r4, #1
 8007eee:	9304      	str	r3, [sp, #16]
 8007ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef4:	4824      	ldr	r0, [pc, #144]	@ (8007f88 <_svfiprintf_r+0x1e8>)
 8007ef6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007efa:	2206      	movs	r2, #6
 8007efc:	f7f8 f9a0 	bl	8000240 <memchr>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d036      	beq.n	8007f72 <_svfiprintf_r+0x1d2>
 8007f04:	4b21      	ldr	r3, [pc, #132]	@ (8007f8c <_svfiprintf_r+0x1ec>)
 8007f06:	bb1b      	cbnz	r3, 8007f50 <_svfiprintf_r+0x1b0>
 8007f08:	9b03      	ldr	r3, [sp, #12]
 8007f0a:	3307      	adds	r3, #7
 8007f0c:	f023 0307 	bic.w	r3, r3, #7
 8007f10:	3308      	adds	r3, #8
 8007f12:	9303      	str	r3, [sp, #12]
 8007f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f16:	4433      	add	r3, r6
 8007f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f1a:	e76a      	b.n	8007df2 <_svfiprintf_r+0x52>
 8007f1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f20:	460c      	mov	r4, r1
 8007f22:	2001      	movs	r0, #1
 8007f24:	e7a8      	b.n	8007e78 <_svfiprintf_r+0xd8>
 8007f26:	2300      	movs	r3, #0
 8007f28:	3401      	adds	r4, #1
 8007f2a:	9305      	str	r3, [sp, #20]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	f04f 0c0a 	mov.w	ip, #10
 8007f32:	4620      	mov	r0, r4
 8007f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f38:	3a30      	subs	r2, #48	@ 0x30
 8007f3a:	2a09      	cmp	r2, #9
 8007f3c:	d903      	bls.n	8007f46 <_svfiprintf_r+0x1a6>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0c6      	beq.n	8007ed0 <_svfiprintf_r+0x130>
 8007f42:	9105      	str	r1, [sp, #20]
 8007f44:	e7c4      	b.n	8007ed0 <_svfiprintf_r+0x130>
 8007f46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e7f0      	b.n	8007f32 <_svfiprintf_r+0x192>
 8007f50:	ab03      	add	r3, sp, #12
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	462a      	mov	r2, r5
 8007f56:	4b0e      	ldr	r3, [pc, #56]	@ (8007f90 <_svfiprintf_r+0x1f0>)
 8007f58:	a904      	add	r1, sp, #16
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	f7fc fda4 	bl	8004aa8 <_printf_float>
 8007f60:	1c42      	adds	r2, r0, #1
 8007f62:	4606      	mov	r6, r0
 8007f64:	d1d6      	bne.n	8007f14 <_svfiprintf_r+0x174>
 8007f66:	89ab      	ldrh	r3, [r5, #12]
 8007f68:	065b      	lsls	r3, r3, #25
 8007f6a:	f53f af2d 	bmi.w	8007dc8 <_svfiprintf_r+0x28>
 8007f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f70:	e72c      	b.n	8007dcc <_svfiprintf_r+0x2c>
 8007f72:	ab03      	add	r3, sp, #12
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	462a      	mov	r2, r5
 8007f78:	4b05      	ldr	r3, [pc, #20]	@ (8007f90 <_svfiprintf_r+0x1f0>)
 8007f7a:	a904      	add	r1, sp, #16
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	f7fd f81b 	bl	8004fb8 <_printf_i>
 8007f82:	e7ed      	b.n	8007f60 <_svfiprintf_r+0x1c0>
 8007f84:	08008ff9 	.word	0x08008ff9
 8007f88:	08009003 	.word	0x08009003
 8007f8c:	08004aa9 	.word	0x08004aa9
 8007f90:	08007ce9 	.word	0x08007ce9
 8007f94:	08008fff 	.word	0x08008fff

08007f98 <__sflush_r>:
 8007f98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa0:	0716      	lsls	r6, r2, #28
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	d454      	bmi.n	8008052 <__sflush_r+0xba>
 8007fa8:	684b      	ldr	r3, [r1, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	dc02      	bgt.n	8007fb4 <__sflush_r+0x1c>
 8007fae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	dd48      	ble.n	8008046 <__sflush_r+0xae>
 8007fb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fb6:	2e00      	cmp	r6, #0
 8007fb8:	d045      	beq.n	8008046 <__sflush_r+0xae>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007fc0:	682f      	ldr	r7, [r5, #0]
 8007fc2:	6a21      	ldr	r1, [r4, #32]
 8007fc4:	602b      	str	r3, [r5, #0]
 8007fc6:	d030      	beq.n	800802a <__sflush_r+0x92>
 8007fc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	0759      	lsls	r1, r3, #29
 8007fce:	d505      	bpl.n	8007fdc <__sflush_r+0x44>
 8007fd0:	6863      	ldr	r3, [r4, #4]
 8007fd2:	1ad2      	subs	r2, r2, r3
 8007fd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007fd6:	b10b      	cbz	r3, 8007fdc <__sflush_r+0x44>
 8007fd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fda:	1ad2      	subs	r2, r2, r3
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fe0:	6a21      	ldr	r1, [r4, #32]
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b0      	blx	r6
 8007fe6:	1c43      	adds	r3, r0, #1
 8007fe8:	89a3      	ldrh	r3, [r4, #12]
 8007fea:	d106      	bne.n	8007ffa <__sflush_r+0x62>
 8007fec:	6829      	ldr	r1, [r5, #0]
 8007fee:	291d      	cmp	r1, #29
 8007ff0:	d82b      	bhi.n	800804a <__sflush_r+0xb2>
 8007ff2:	4a2a      	ldr	r2, [pc, #168]	@ (800809c <__sflush_r+0x104>)
 8007ff4:	40ca      	lsrs	r2, r1
 8007ff6:	07d6      	lsls	r6, r2, #31
 8007ff8:	d527      	bpl.n	800804a <__sflush_r+0xb2>
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	6062      	str	r2, [r4, #4]
 8007ffe:	04d9      	lsls	r1, r3, #19
 8008000:	6922      	ldr	r2, [r4, #16]
 8008002:	6022      	str	r2, [r4, #0]
 8008004:	d504      	bpl.n	8008010 <__sflush_r+0x78>
 8008006:	1c42      	adds	r2, r0, #1
 8008008:	d101      	bne.n	800800e <__sflush_r+0x76>
 800800a:	682b      	ldr	r3, [r5, #0]
 800800c:	b903      	cbnz	r3, 8008010 <__sflush_r+0x78>
 800800e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008010:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008012:	602f      	str	r7, [r5, #0]
 8008014:	b1b9      	cbz	r1, 8008046 <__sflush_r+0xae>
 8008016:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800801a:	4299      	cmp	r1, r3
 800801c:	d002      	beq.n	8008024 <__sflush_r+0x8c>
 800801e:	4628      	mov	r0, r5
 8008020:	f7fe fa84 	bl	800652c <_free_r>
 8008024:	2300      	movs	r3, #0
 8008026:	6363      	str	r3, [r4, #52]	@ 0x34
 8008028:	e00d      	b.n	8008046 <__sflush_r+0xae>
 800802a:	2301      	movs	r3, #1
 800802c:	4628      	mov	r0, r5
 800802e:	47b0      	blx	r6
 8008030:	4602      	mov	r2, r0
 8008032:	1c50      	adds	r0, r2, #1
 8008034:	d1c9      	bne.n	8007fca <__sflush_r+0x32>
 8008036:	682b      	ldr	r3, [r5, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d0c6      	beq.n	8007fca <__sflush_r+0x32>
 800803c:	2b1d      	cmp	r3, #29
 800803e:	d001      	beq.n	8008044 <__sflush_r+0xac>
 8008040:	2b16      	cmp	r3, #22
 8008042:	d11e      	bne.n	8008082 <__sflush_r+0xea>
 8008044:	602f      	str	r7, [r5, #0]
 8008046:	2000      	movs	r0, #0
 8008048:	e022      	b.n	8008090 <__sflush_r+0xf8>
 800804a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800804e:	b21b      	sxth	r3, r3
 8008050:	e01b      	b.n	800808a <__sflush_r+0xf2>
 8008052:	690f      	ldr	r7, [r1, #16]
 8008054:	2f00      	cmp	r7, #0
 8008056:	d0f6      	beq.n	8008046 <__sflush_r+0xae>
 8008058:	0793      	lsls	r3, r2, #30
 800805a:	680e      	ldr	r6, [r1, #0]
 800805c:	bf08      	it	eq
 800805e:	694b      	ldreq	r3, [r1, #20]
 8008060:	600f      	str	r7, [r1, #0]
 8008062:	bf18      	it	ne
 8008064:	2300      	movne	r3, #0
 8008066:	eba6 0807 	sub.w	r8, r6, r7
 800806a:	608b      	str	r3, [r1, #8]
 800806c:	f1b8 0f00 	cmp.w	r8, #0
 8008070:	dde9      	ble.n	8008046 <__sflush_r+0xae>
 8008072:	6a21      	ldr	r1, [r4, #32]
 8008074:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008076:	4643      	mov	r3, r8
 8008078:	463a      	mov	r2, r7
 800807a:	4628      	mov	r0, r5
 800807c:	47b0      	blx	r6
 800807e:	2800      	cmp	r0, #0
 8008080:	dc08      	bgt.n	8008094 <__sflush_r+0xfc>
 8008082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800808a:	81a3      	strh	r3, [r4, #12]
 800808c:	f04f 30ff 	mov.w	r0, #4294967295
 8008090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008094:	4407      	add	r7, r0
 8008096:	eba8 0800 	sub.w	r8, r8, r0
 800809a:	e7e7      	b.n	800806c <__sflush_r+0xd4>
 800809c:	20400001 	.word	0x20400001

080080a0 <_fflush_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	690b      	ldr	r3, [r1, #16]
 80080a4:	4605      	mov	r5, r0
 80080a6:	460c      	mov	r4, r1
 80080a8:	b913      	cbnz	r3, 80080b0 <_fflush_r+0x10>
 80080aa:	2500      	movs	r5, #0
 80080ac:	4628      	mov	r0, r5
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	b118      	cbz	r0, 80080ba <_fflush_r+0x1a>
 80080b2:	6a03      	ldr	r3, [r0, #32]
 80080b4:	b90b      	cbnz	r3, 80080ba <_fflush_r+0x1a>
 80080b6:	f7fd fb2f 	bl	8005718 <__sinit>
 80080ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0f3      	beq.n	80080aa <_fflush_r+0xa>
 80080c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080c4:	07d0      	lsls	r0, r2, #31
 80080c6:	d404      	bmi.n	80080d2 <_fflush_r+0x32>
 80080c8:	0599      	lsls	r1, r3, #22
 80080ca:	d402      	bmi.n	80080d2 <_fflush_r+0x32>
 80080cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080ce:	f7fd fc3c 	bl	800594a <__retarget_lock_acquire_recursive>
 80080d2:	4628      	mov	r0, r5
 80080d4:	4621      	mov	r1, r4
 80080d6:	f7ff ff5f 	bl	8007f98 <__sflush_r>
 80080da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080dc:	07da      	lsls	r2, r3, #31
 80080de:	4605      	mov	r5, r0
 80080e0:	d4e4      	bmi.n	80080ac <_fflush_r+0xc>
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	059b      	lsls	r3, r3, #22
 80080e6:	d4e1      	bmi.n	80080ac <_fflush_r+0xc>
 80080e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080ea:	f7fd fc2f 	bl	800594c <__retarget_lock_release_recursive>
 80080ee:	e7dd      	b.n	80080ac <_fflush_r+0xc>

080080f0 <memmove>:
 80080f0:	4288      	cmp	r0, r1
 80080f2:	b510      	push	{r4, lr}
 80080f4:	eb01 0402 	add.w	r4, r1, r2
 80080f8:	d902      	bls.n	8008100 <memmove+0x10>
 80080fa:	4284      	cmp	r4, r0
 80080fc:	4623      	mov	r3, r4
 80080fe:	d807      	bhi.n	8008110 <memmove+0x20>
 8008100:	1e43      	subs	r3, r0, #1
 8008102:	42a1      	cmp	r1, r4
 8008104:	d008      	beq.n	8008118 <memmove+0x28>
 8008106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800810a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800810e:	e7f8      	b.n	8008102 <memmove+0x12>
 8008110:	4402      	add	r2, r0
 8008112:	4601      	mov	r1, r0
 8008114:	428a      	cmp	r2, r1
 8008116:	d100      	bne.n	800811a <memmove+0x2a>
 8008118:	bd10      	pop	{r4, pc}
 800811a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800811e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008122:	e7f7      	b.n	8008114 <memmove+0x24>

08008124 <strncmp>:
 8008124:	b510      	push	{r4, lr}
 8008126:	b16a      	cbz	r2, 8008144 <strncmp+0x20>
 8008128:	3901      	subs	r1, #1
 800812a:	1884      	adds	r4, r0, r2
 800812c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008130:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008134:	429a      	cmp	r2, r3
 8008136:	d103      	bne.n	8008140 <strncmp+0x1c>
 8008138:	42a0      	cmp	r0, r4
 800813a:	d001      	beq.n	8008140 <strncmp+0x1c>
 800813c:	2a00      	cmp	r2, #0
 800813e:	d1f5      	bne.n	800812c <strncmp+0x8>
 8008140:	1ad0      	subs	r0, r2, r3
 8008142:	bd10      	pop	{r4, pc}
 8008144:	4610      	mov	r0, r2
 8008146:	e7fc      	b.n	8008142 <strncmp+0x1e>

08008148 <_sbrk_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4d06      	ldr	r5, [pc, #24]	@ (8008164 <_sbrk_r+0x1c>)
 800814c:	2300      	movs	r3, #0
 800814e:	4604      	mov	r4, r0
 8008150:	4608      	mov	r0, r1
 8008152:	602b      	str	r3, [r5, #0]
 8008154:	f7f8 ffa4 	bl	80010a0 <_sbrk>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d102      	bne.n	8008162 <_sbrk_r+0x1a>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	b103      	cbz	r3, 8008162 <_sbrk_r+0x1a>
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	2000041c 	.word	0x2000041c

08008168 <memcpy>:
 8008168:	440a      	add	r2, r1
 800816a:	4291      	cmp	r1, r2
 800816c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008170:	d100      	bne.n	8008174 <memcpy+0xc>
 8008172:	4770      	bx	lr
 8008174:	b510      	push	{r4, lr}
 8008176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800817a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800817e:	4291      	cmp	r1, r2
 8008180:	d1f9      	bne.n	8008176 <memcpy+0xe>
 8008182:	bd10      	pop	{r4, pc}
 8008184:	0000      	movs	r0, r0
	...

08008188 <nan>:
 8008188:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008190 <nan+0x8>
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	00000000 	.word	0x00000000
 8008194:	7ff80000 	.word	0x7ff80000

08008198 <__assert_func>:
 8008198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800819a:	4614      	mov	r4, r2
 800819c:	461a      	mov	r2, r3
 800819e:	4b09      	ldr	r3, [pc, #36]	@ (80081c4 <__assert_func+0x2c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4605      	mov	r5, r0
 80081a4:	68d8      	ldr	r0, [r3, #12]
 80081a6:	b14c      	cbz	r4, 80081bc <__assert_func+0x24>
 80081a8:	4b07      	ldr	r3, [pc, #28]	@ (80081c8 <__assert_func+0x30>)
 80081aa:	9100      	str	r1, [sp, #0]
 80081ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081b0:	4906      	ldr	r1, [pc, #24]	@ (80081cc <__assert_func+0x34>)
 80081b2:	462b      	mov	r3, r5
 80081b4:	f000 fba8 	bl	8008908 <fiprintf>
 80081b8:	f000 fbb8 	bl	800892c <abort>
 80081bc:	4b04      	ldr	r3, [pc, #16]	@ (80081d0 <__assert_func+0x38>)
 80081be:	461c      	mov	r4, r3
 80081c0:	e7f3      	b.n	80081aa <__assert_func+0x12>
 80081c2:	bf00      	nop
 80081c4:	20000018 	.word	0x20000018
 80081c8:	08009012 	.word	0x08009012
 80081cc:	0800901f 	.word	0x0800901f
 80081d0:	0800904d 	.word	0x0800904d

080081d4 <_calloc_r>:
 80081d4:	b570      	push	{r4, r5, r6, lr}
 80081d6:	fba1 5402 	umull	r5, r4, r1, r2
 80081da:	b934      	cbnz	r4, 80081ea <_calloc_r+0x16>
 80081dc:	4629      	mov	r1, r5
 80081de:	f7fe fa19 	bl	8006614 <_malloc_r>
 80081e2:	4606      	mov	r6, r0
 80081e4:	b928      	cbnz	r0, 80081f2 <_calloc_r+0x1e>
 80081e6:	4630      	mov	r0, r6
 80081e8:	bd70      	pop	{r4, r5, r6, pc}
 80081ea:	220c      	movs	r2, #12
 80081ec:	6002      	str	r2, [r0, #0]
 80081ee:	2600      	movs	r6, #0
 80081f0:	e7f9      	b.n	80081e6 <_calloc_r+0x12>
 80081f2:	462a      	mov	r2, r5
 80081f4:	4621      	mov	r1, r4
 80081f6:	f7fd fb2a 	bl	800584e <memset>
 80081fa:	e7f4      	b.n	80081e6 <_calloc_r+0x12>

080081fc <rshift>:
 80081fc:	6903      	ldr	r3, [r0, #16]
 80081fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008202:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008206:	ea4f 1261 	mov.w	r2, r1, asr #5
 800820a:	f100 0414 	add.w	r4, r0, #20
 800820e:	dd45      	ble.n	800829c <rshift+0xa0>
 8008210:	f011 011f 	ands.w	r1, r1, #31
 8008214:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008218:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800821c:	d10c      	bne.n	8008238 <rshift+0x3c>
 800821e:	f100 0710 	add.w	r7, r0, #16
 8008222:	4629      	mov	r1, r5
 8008224:	42b1      	cmp	r1, r6
 8008226:	d334      	bcc.n	8008292 <rshift+0x96>
 8008228:	1a9b      	subs	r3, r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	1eea      	subs	r2, r5, #3
 800822e:	4296      	cmp	r6, r2
 8008230:	bf38      	it	cc
 8008232:	2300      	movcc	r3, #0
 8008234:	4423      	add	r3, r4
 8008236:	e015      	b.n	8008264 <rshift+0x68>
 8008238:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800823c:	f1c1 0820 	rsb	r8, r1, #32
 8008240:	40cf      	lsrs	r7, r1
 8008242:	f105 0e04 	add.w	lr, r5, #4
 8008246:	46a1      	mov	r9, r4
 8008248:	4576      	cmp	r6, lr
 800824a:	46f4      	mov	ip, lr
 800824c:	d815      	bhi.n	800827a <rshift+0x7e>
 800824e:	1a9a      	subs	r2, r3, r2
 8008250:	0092      	lsls	r2, r2, #2
 8008252:	3a04      	subs	r2, #4
 8008254:	3501      	adds	r5, #1
 8008256:	42ae      	cmp	r6, r5
 8008258:	bf38      	it	cc
 800825a:	2200      	movcc	r2, #0
 800825c:	18a3      	adds	r3, r4, r2
 800825e:	50a7      	str	r7, [r4, r2]
 8008260:	b107      	cbz	r7, 8008264 <rshift+0x68>
 8008262:	3304      	adds	r3, #4
 8008264:	1b1a      	subs	r2, r3, r4
 8008266:	42a3      	cmp	r3, r4
 8008268:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800826c:	bf08      	it	eq
 800826e:	2300      	moveq	r3, #0
 8008270:	6102      	str	r2, [r0, #16]
 8008272:	bf08      	it	eq
 8008274:	6143      	streq	r3, [r0, #20]
 8008276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800827a:	f8dc c000 	ldr.w	ip, [ip]
 800827e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008282:	ea4c 0707 	orr.w	r7, ip, r7
 8008286:	f849 7b04 	str.w	r7, [r9], #4
 800828a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800828e:	40cf      	lsrs	r7, r1
 8008290:	e7da      	b.n	8008248 <rshift+0x4c>
 8008292:	f851 cb04 	ldr.w	ip, [r1], #4
 8008296:	f847 cf04 	str.w	ip, [r7, #4]!
 800829a:	e7c3      	b.n	8008224 <rshift+0x28>
 800829c:	4623      	mov	r3, r4
 800829e:	e7e1      	b.n	8008264 <rshift+0x68>

080082a0 <__hexdig_fun>:
 80082a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80082a4:	2b09      	cmp	r3, #9
 80082a6:	d802      	bhi.n	80082ae <__hexdig_fun+0xe>
 80082a8:	3820      	subs	r0, #32
 80082aa:	b2c0      	uxtb	r0, r0
 80082ac:	4770      	bx	lr
 80082ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80082b2:	2b05      	cmp	r3, #5
 80082b4:	d801      	bhi.n	80082ba <__hexdig_fun+0x1a>
 80082b6:	3847      	subs	r0, #71	@ 0x47
 80082b8:	e7f7      	b.n	80082aa <__hexdig_fun+0xa>
 80082ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80082be:	2b05      	cmp	r3, #5
 80082c0:	d801      	bhi.n	80082c6 <__hexdig_fun+0x26>
 80082c2:	3827      	subs	r0, #39	@ 0x27
 80082c4:	e7f1      	b.n	80082aa <__hexdig_fun+0xa>
 80082c6:	2000      	movs	r0, #0
 80082c8:	4770      	bx	lr
	...

080082cc <__gethex>:
 80082cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d0:	b085      	sub	sp, #20
 80082d2:	468a      	mov	sl, r1
 80082d4:	9302      	str	r3, [sp, #8]
 80082d6:	680b      	ldr	r3, [r1, #0]
 80082d8:	9001      	str	r0, [sp, #4]
 80082da:	4690      	mov	r8, r2
 80082dc:	1c9c      	adds	r4, r3, #2
 80082de:	46a1      	mov	r9, r4
 80082e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80082e4:	2830      	cmp	r0, #48	@ 0x30
 80082e6:	d0fa      	beq.n	80082de <__gethex+0x12>
 80082e8:	eba9 0303 	sub.w	r3, r9, r3
 80082ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80082f0:	f7ff ffd6 	bl	80082a0 <__hexdig_fun>
 80082f4:	4605      	mov	r5, r0
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d168      	bne.n	80083cc <__gethex+0x100>
 80082fa:	49a0      	ldr	r1, [pc, #640]	@ (800857c <__gethex+0x2b0>)
 80082fc:	2201      	movs	r2, #1
 80082fe:	4648      	mov	r0, r9
 8008300:	f7ff ff10 	bl	8008124 <strncmp>
 8008304:	4607      	mov	r7, r0
 8008306:	2800      	cmp	r0, #0
 8008308:	d167      	bne.n	80083da <__gethex+0x10e>
 800830a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800830e:	4626      	mov	r6, r4
 8008310:	f7ff ffc6 	bl	80082a0 <__hexdig_fun>
 8008314:	2800      	cmp	r0, #0
 8008316:	d062      	beq.n	80083de <__gethex+0x112>
 8008318:	4623      	mov	r3, r4
 800831a:	7818      	ldrb	r0, [r3, #0]
 800831c:	2830      	cmp	r0, #48	@ 0x30
 800831e:	4699      	mov	r9, r3
 8008320:	f103 0301 	add.w	r3, r3, #1
 8008324:	d0f9      	beq.n	800831a <__gethex+0x4e>
 8008326:	f7ff ffbb 	bl	80082a0 <__hexdig_fun>
 800832a:	fab0 f580 	clz	r5, r0
 800832e:	096d      	lsrs	r5, r5, #5
 8008330:	f04f 0b01 	mov.w	fp, #1
 8008334:	464a      	mov	r2, r9
 8008336:	4616      	mov	r6, r2
 8008338:	3201      	adds	r2, #1
 800833a:	7830      	ldrb	r0, [r6, #0]
 800833c:	f7ff ffb0 	bl	80082a0 <__hexdig_fun>
 8008340:	2800      	cmp	r0, #0
 8008342:	d1f8      	bne.n	8008336 <__gethex+0x6a>
 8008344:	498d      	ldr	r1, [pc, #564]	@ (800857c <__gethex+0x2b0>)
 8008346:	2201      	movs	r2, #1
 8008348:	4630      	mov	r0, r6
 800834a:	f7ff feeb 	bl	8008124 <strncmp>
 800834e:	2800      	cmp	r0, #0
 8008350:	d13f      	bne.n	80083d2 <__gethex+0x106>
 8008352:	b944      	cbnz	r4, 8008366 <__gethex+0x9a>
 8008354:	1c74      	adds	r4, r6, #1
 8008356:	4622      	mov	r2, r4
 8008358:	4616      	mov	r6, r2
 800835a:	3201      	adds	r2, #1
 800835c:	7830      	ldrb	r0, [r6, #0]
 800835e:	f7ff ff9f 	bl	80082a0 <__hexdig_fun>
 8008362:	2800      	cmp	r0, #0
 8008364:	d1f8      	bne.n	8008358 <__gethex+0x8c>
 8008366:	1ba4      	subs	r4, r4, r6
 8008368:	00a7      	lsls	r7, r4, #2
 800836a:	7833      	ldrb	r3, [r6, #0]
 800836c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008370:	2b50      	cmp	r3, #80	@ 0x50
 8008372:	d13e      	bne.n	80083f2 <__gethex+0x126>
 8008374:	7873      	ldrb	r3, [r6, #1]
 8008376:	2b2b      	cmp	r3, #43	@ 0x2b
 8008378:	d033      	beq.n	80083e2 <__gethex+0x116>
 800837a:	2b2d      	cmp	r3, #45	@ 0x2d
 800837c:	d034      	beq.n	80083e8 <__gethex+0x11c>
 800837e:	1c71      	adds	r1, r6, #1
 8008380:	2400      	movs	r4, #0
 8008382:	7808      	ldrb	r0, [r1, #0]
 8008384:	f7ff ff8c 	bl	80082a0 <__hexdig_fun>
 8008388:	1e43      	subs	r3, r0, #1
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b18      	cmp	r3, #24
 800838e:	d830      	bhi.n	80083f2 <__gethex+0x126>
 8008390:	f1a0 0210 	sub.w	r2, r0, #16
 8008394:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008398:	f7ff ff82 	bl	80082a0 <__hexdig_fun>
 800839c:	f100 3cff 	add.w	ip, r0, #4294967295
 80083a0:	fa5f fc8c 	uxtb.w	ip, ip
 80083a4:	f1bc 0f18 	cmp.w	ip, #24
 80083a8:	f04f 030a 	mov.w	r3, #10
 80083ac:	d91e      	bls.n	80083ec <__gethex+0x120>
 80083ae:	b104      	cbz	r4, 80083b2 <__gethex+0xe6>
 80083b0:	4252      	negs	r2, r2
 80083b2:	4417      	add	r7, r2
 80083b4:	f8ca 1000 	str.w	r1, [sl]
 80083b8:	b1ed      	cbz	r5, 80083f6 <__gethex+0x12a>
 80083ba:	f1bb 0f00 	cmp.w	fp, #0
 80083be:	bf0c      	ite	eq
 80083c0:	2506      	moveq	r5, #6
 80083c2:	2500      	movne	r5, #0
 80083c4:	4628      	mov	r0, r5
 80083c6:	b005      	add	sp, #20
 80083c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083cc:	2500      	movs	r5, #0
 80083ce:	462c      	mov	r4, r5
 80083d0:	e7b0      	b.n	8008334 <__gethex+0x68>
 80083d2:	2c00      	cmp	r4, #0
 80083d4:	d1c7      	bne.n	8008366 <__gethex+0x9a>
 80083d6:	4627      	mov	r7, r4
 80083d8:	e7c7      	b.n	800836a <__gethex+0x9e>
 80083da:	464e      	mov	r6, r9
 80083dc:	462f      	mov	r7, r5
 80083de:	2501      	movs	r5, #1
 80083e0:	e7c3      	b.n	800836a <__gethex+0x9e>
 80083e2:	2400      	movs	r4, #0
 80083e4:	1cb1      	adds	r1, r6, #2
 80083e6:	e7cc      	b.n	8008382 <__gethex+0xb6>
 80083e8:	2401      	movs	r4, #1
 80083ea:	e7fb      	b.n	80083e4 <__gethex+0x118>
 80083ec:	fb03 0002 	mla	r0, r3, r2, r0
 80083f0:	e7ce      	b.n	8008390 <__gethex+0xc4>
 80083f2:	4631      	mov	r1, r6
 80083f4:	e7de      	b.n	80083b4 <__gethex+0xe8>
 80083f6:	eba6 0309 	sub.w	r3, r6, r9
 80083fa:	3b01      	subs	r3, #1
 80083fc:	4629      	mov	r1, r5
 80083fe:	2b07      	cmp	r3, #7
 8008400:	dc0a      	bgt.n	8008418 <__gethex+0x14c>
 8008402:	9801      	ldr	r0, [sp, #4]
 8008404:	f7fe f992 	bl	800672c <_Balloc>
 8008408:	4604      	mov	r4, r0
 800840a:	b940      	cbnz	r0, 800841e <__gethex+0x152>
 800840c:	4b5c      	ldr	r3, [pc, #368]	@ (8008580 <__gethex+0x2b4>)
 800840e:	4602      	mov	r2, r0
 8008410:	21e4      	movs	r1, #228	@ 0xe4
 8008412:	485c      	ldr	r0, [pc, #368]	@ (8008584 <__gethex+0x2b8>)
 8008414:	f7ff fec0 	bl	8008198 <__assert_func>
 8008418:	3101      	adds	r1, #1
 800841a:	105b      	asrs	r3, r3, #1
 800841c:	e7ef      	b.n	80083fe <__gethex+0x132>
 800841e:	f100 0a14 	add.w	sl, r0, #20
 8008422:	2300      	movs	r3, #0
 8008424:	4655      	mov	r5, sl
 8008426:	469b      	mov	fp, r3
 8008428:	45b1      	cmp	r9, r6
 800842a:	d337      	bcc.n	800849c <__gethex+0x1d0>
 800842c:	f845 bb04 	str.w	fp, [r5], #4
 8008430:	eba5 050a 	sub.w	r5, r5, sl
 8008434:	10ad      	asrs	r5, r5, #2
 8008436:	6125      	str	r5, [r4, #16]
 8008438:	4658      	mov	r0, fp
 800843a:	f7fe fa69 	bl	8006910 <__hi0bits>
 800843e:	016d      	lsls	r5, r5, #5
 8008440:	f8d8 6000 	ldr.w	r6, [r8]
 8008444:	1a2d      	subs	r5, r5, r0
 8008446:	42b5      	cmp	r5, r6
 8008448:	dd54      	ble.n	80084f4 <__gethex+0x228>
 800844a:	1bad      	subs	r5, r5, r6
 800844c:	4629      	mov	r1, r5
 800844e:	4620      	mov	r0, r4
 8008450:	f7fe fdf2 	bl	8007038 <__any_on>
 8008454:	4681      	mov	r9, r0
 8008456:	b178      	cbz	r0, 8008478 <__gethex+0x1ac>
 8008458:	1e6b      	subs	r3, r5, #1
 800845a:	1159      	asrs	r1, r3, #5
 800845c:	f003 021f 	and.w	r2, r3, #31
 8008460:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008464:	f04f 0901 	mov.w	r9, #1
 8008468:	fa09 f202 	lsl.w	r2, r9, r2
 800846c:	420a      	tst	r2, r1
 800846e:	d003      	beq.n	8008478 <__gethex+0x1ac>
 8008470:	454b      	cmp	r3, r9
 8008472:	dc36      	bgt.n	80084e2 <__gethex+0x216>
 8008474:	f04f 0902 	mov.w	r9, #2
 8008478:	4629      	mov	r1, r5
 800847a:	4620      	mov	r0, r4
 800847c:	f7ff febe 	bl	80081fc <rshift>
 8008480:	442f      	add	r7, r5
 8008482:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008486:	42bb      	cmp	r3, r7
 8008488:	da42      	bge.n	8008510 <__gethex+0x244>
 800848a:	9801      	ldr	r0, [sp, #4]
 800848c:	4621      	mov	r1, r4
 800848e:	f7fe f98d 	bl	80067ac <_Bfree>
 8008492:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008494:	2300      	movs	r3, #0
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	25a3      	movs	r5, #163	@ 0xa3
 800849a:	e793      	b.n	80083c4 <__gethex+0xf8>
 800849c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80084a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80084a2:	d012      	beq.n	80084ca <__gethex+0x1fe>
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	d104      	bne.n	80084b2 <__gethex+0x1e6>
 80084a8:	f845 bb04 	str.w	fp, [r5], #4
 80084ac:	f04f 0b00 	mov.w	fp, #0
 80084b0:	465b      	mov	r3, fp
 80084b2:	7830      	ldrb	r0, [r6, #0]
 80084b4:	9303      	str	r3, [sp, #12]
 80084b6:	f7ff fef3 	bl	80082a0 <__hexdig_fun>
 80084ba:	9b03      	ldr	r3, [sp, #12]
 80084bc:	f000 000f 	and.w	r0, r0, #15
 80084c0:	4098      	lsls	r0, r3
 80084c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80084c6:	3304      	adds	r3, #4
 80084c8:	e7ae      	b.n	8008428 <__gethex+0x15c>
 80084ca:	45b1      	cmp	r9, r6
 80084cc:	d8ea      	bhi.n	80084a4 <__gethex+0x1d8>
 80084ce:	492b      	ldr	r1, [pc, #172]	@ (800857c <__gethex+0x2b0>)
 80084d0:	9303      	str	r3, [sp, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	4630      	mov	r0, r6
 80084d6:	f7ff fe25 	bl	8008124 <strncmp>
 80084da:	9b03      	ldr	r3, [sp, #12]
 80084dc:	2800      	cmp	r0, #0
 80084de:	d1e1      	bne.n	80084a4 <__gethex+0x1d8>
 80084e0:	e7a2      	b.n	8008428 <__gethex+0x15c>
 80084e2:	1ea9      	subs	r1, r5, #2
 80084e4:	4620      	mov	r0, r4
 80084e6:	f7fe fda7 	bl	8007038 <__any_on>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d0c2      	beq.n	8008474 <__gethex+0x1a8>
 80084ee:	f04f 0903 	mov.w	r9, #3
 80084f2:	e7c1      	b.n	8008478 <__gethex+0x1ac>
 80084f4:	da09      	bge.n	800850a <__gethex+0x23e>
 80084f6:	1b75      	subs	r5, r6, r5
 80084f8:	4621      	mov	r1, r4
 80084fa:	9801      	ldr	r0, [sp, #4]
 80084fc:	462a      	mov	r2, r5
 80084fe:	f7fe fb65 	bl	8006bcc <__lshift>
 8008502:	1b7f      	subs	r7, r7, r5
 8008504:	4604      	mov	r4, r0
 8008506:	f100 0a14 	add.w	sl, r0, #20
 800850a:	f04f 0900 	mov.w	r9, #0
 800850e:	e7b8      	b.n	8008482 <__gethex+0x1b6>
 8008510:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008514:	42bd      	cmp	r5, r7
 8008516:	dd6f      	ble.n	80085f8 <__gethex+0x32c>
 8008518:	1bed      	subs	r5, r5, r7
 800851a:	42ae      	cmp	r6, r5
 800851c:	dc34      	bgt.n	8008588 <__gethex+0x2bc>
 800851e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008522:	2b02      	cmp	r3, #2
 8008524:	d022      	beq.n	800856c <__gethex+0x2a0>
 8008526:	2b03      	cmp	r3, #3
 8008528:	d024      	beq.n	8008574 <__gethex+0x2a8>
 800852a:	2b01      	cmp	r3, #1
 800852c:	d115      	bne.n	800855a <__gethex+0x28e>
 800852e:	42ae      	cmp	r6, r5
 8008530:	d113      	bne.n	800855a <__gethex+0x28e>
 8008532:	2e01      	cmp	r6, #1
 8008534:	d10b      	bne.n	800854e <__gethex+0x282>
 8008536:	9a02      	ldr	r2, [sp, #8]
 8008538:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	2301      	movs	r3, #1
 8008540:	6123      	str	r3, [r4, #16]
 8008542:	f8ca 3000 	str.w	r3, [sl]
 8008546:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008548:	2562      	movs	r5, #98	@ 0x62
 800854a:	601c      	str	r4, [r3, #0]
 800854c:	e73a      	b.n	80083c4 <__gethex+0xf8>
 800854e:	1e71      	subs	r1, r6, #1
 8008550:	4620      	mov	r0, r4
 8008552:	f7fe fd71 	bl	8007038 <__any_on>
 8008556:	2800      	cmp	r0, #0
 8008558:	d1ed      	bne.n	8008536 <__gethex+0x26a>
 800855a:	9801      	ldr	r0, [sp, #4]
 800855c:	4621      	mov	r1, r4
 800855e:	f7fe f925 	bl	80067ac <_Bfree>
 8008562:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008564:	2300      	movs	r3, #0
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	2550      	movs	r5, #80	@ 0x50
 800856a:	e72b      	b.n	80083c4 <__gethex+0xf8>
 800856c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1f3      	bne.n	800855a <__gethex+0x28e>
 8008572:	e7e0      	b.n	8008536 <__gethex+0x26a>
 8008574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1dd      	bne.n	8008536 <__gethex+0x26a>
 800857a:	e7ee      	b.n	800855a <__gethex+0x28e>
 800857c:	08008ff7 	.word	0x08008ff7
 8008580:	08008f8d 	.word	0x08008f8d
 8008584:	0800904e 	.word	0x0800904e
 8008588:	1e6f      	subs	r7, r5, #1
 800858a:	f1b9 0f00 	cmp.w	r9, #0
 800858e:	d130      	bne.n	80085f2 <__gethex+0x326>
 8008590:	b127      	cbz	r7, 800859c <__gethex+0x2d0>
 8008592:	4639      	mov	r1, r7
 8008594:	4620      	mov	r0, r4
 8008596:	f7fe fd4f 	bl	8007038 <__any_on>
 800859a:	4681      	mov	r9, r0
 800859c:	117a      	asrs	r2, r7, #5
 800859e:	2301      	movs	r3, #1
 80085a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80085a4:	f007 071f 	and.w	r7, r7, #31
 80085a8:	40bb      	lsls	r3, r7
 80085aa:	4213      	tst	r3, r2
 80085ac:	4629      	mov	r1, r5
 80085ae:	4620      	mov	r0, r4
 80085b0:	bf18      	it	ne
 80085b2:	f049 0902 	orrne.w	r9, r9, #2
 80085b6:	f7ff fe21 	bl	80081fc <rshift>
 80085ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80085be:	1b76      	subs	r6, r6, r5
 80085c0:	2502      	movs	r5, #2
 80085c2:	f1b9 0f00 	cmp.w	r9, #0
 80085c6:	d047      	beq.n	8008658 <__gethex+0x38c>
 80085c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d015      	beq.n	80085fc <__gethex+0x330>
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d017      	beq.n	8008604 <__gethex+0x338>
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d109      	bne.n	80085ec <__gethex+0x320>
 80085d8:	f019 0f02 	tst.w	r9, #2
 80085dc:	d006      	beq.n	80085ec <__gethex+0x320>
 80085de:	f8da 3000 	ldr.w	r3, [sl]
 80085e2:	ea49 0903 	orr.w	r9, r9, r3
 80085e6:	f019 0f01 	tst.w	r9, #1
 80085ea:	d10e      	bne.n	800860a <__gethex+0x33e>
 80085ec:	f045 0510 	orr.w	r5, r5, #16
 80085f0:	e032      	b.n	8008658 <__gethex+0x38c>
 80085f2:	f04f 0901 	mov.w	r9, #1
 80085f6:	e7d1      	b.n	800859c <__gethex+0x2d0>
 80085f8:	2501      	movs	r5, #1
 80085fa:	e7e2      	b.n	80085c2 <__gethex+0x2f6>
 80085fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085fe:	f1c3 0301 	rsb	r3, r3, #1
 8008602:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0f0      	beq.n	80085ec <__gethex+0x320>
 800860a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800860e:	f104 0314 	add.w	r3, r4, #20
 8008612:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008616:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800861a:	f04f 0c00 	mov.w	ip, #0
 800861e:	4618      	mov	r0, r3
 8008620:	f853 2b04 	ldr.w	r2, [r3], #4
 8008624:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008628:	d01b      	beq.n	8008662 <__gethex+0x396>
 800862a:	3201      	adds	r2, #1
 800862c:	6002      	str	r2, [r0, #0]
 800862e:	2d02      	cmp	r5, #2
 8008630:	f104 0314 	add.w	r3, r4, #20
 8008634:	d13c      	bne.n	80086b0 <__gethex+0x3e4>
 8008636:	f8d8 2000 	ldr.w	r2, [r8]
 800863a:	3a01      	subs	r2, #1
 800863c:	42b2      	cmp	r2, r6
 800863e:	d109      	bne.n	8008654 <__gethex+0x388>
 8008640:	1171      	asrs	r1, r6, #5
 8008642:	2201      	movs	r2, #1
 8008644:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008648:	f006 061f 	and.w	r6, r6, #31
 800864c:	fa02 f606 	lsl.w	r6, r2, r6
 8008650:	421e      	tst	r6, r3
 8008652:	d13a      	bne.n	80086ca <__gethex+0x3fe>
 8008654:	f045 0520 	orr.w	r5, r5, #32
 8008658:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800865a:	601c      	str	r4, [r3, #0]
 800865c:	9b02      	ldr	r3, [sp, #8]
 800865e:	601f      	str	r7, [r3, #0]
 8008660:	e6b0      	b.n	80083c4 <__gethex+0xf8>
 8008662:	4299      	cmp	r1, r3
 8008664:	f843 cc04 	str.w	ip, [r3, #-4]
 8008668:	d8d9      	bhi.n	800861e <__gethex+0x352>
 800866a:	68a3      	ldr	r3, [r4, #8]
 800866c:	459b      	cmp	fp, r3
 800866e:	db17      	blt.n	80086a0 <__gethex+0x3d4>
 8008670:	6861      	ldr	r1, [r4, #4]
 8008672:	9801      	ldr	r0, [sp, #4]
 8008674:	3101      	adds	r1, #1
 8008676:	f7fe f859 	bl	800672c <_Balloc>
 800867a:	4681      	mov	r9, r0
 800867c:	b918      	cbnz	r0, 8008686 <__gethex+0x3ba>
 800867e:	4b1a      	ldr	r3, [pc, #104]	@ (80086e8 <__gethex+0x41c>)
 8008680:	4602      	mov	r2, r0
 8008682:	2184      	movs	r1, #132	@ 0x84
 8008684:	e6c5      	b.n	8008412 <__gethex+0x146>
 8008686:	6922      	ldr	r2, [r4, #16]
 8008688:	3202      	adds	r2, #2
 800868a:	f104 010c 	add.w	r1, r4, #12
 800868e:	0092      	lsls	r2, r2, #2
 8008690:	300c      	adds	r0, #12
 8008692:	f7ff fd69 	bl	8008168 <memcpy>
 8008696:	4621      	mov	r1, r4
 8008698:	9801      	ldr	r0, [sp, #4]
 800869a:	f7fe f887 	bl	80067ac <_Bfree>
 800869e:	464c      	mov	r4, r9
 80086a0:	6923      	ldr	r3, [r4, #16]
 80086a2:	1c5a      	adds	r2, r3, #1
 80086a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086a8:	6122      	str	r2, [r4, #16]
 80086aa:	2201      	movs	r2, #1
 80086ac:	615a      	str	r2, [r3, #20]
 80086ae:	e7be      	b.n	800862e <__gethex+0x362>
 80086b0:	6922      	ldr	r2, [r4, #16]
 80086b2:	455a      	cmp	r2, fp
 80086b4:	dd0b      	ble.n	80086ce <__gethex+0x402>
 80086b6:	2101      	movs	r1, #1
 80086b8:	4620      	mov	r0, r4
 80086ba:	f7ff fd9f 	bl	80081fc <rshift>
 80086be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80086c2:	3701      	adds	r7, #1
 80086c4:	42bb      	cmp	r3, r7
 80086c6:	f6ff aee0 	blt.w	800848a <__gethex+0x1be>
 80086ca:	2501      	movs	r5, #1
 80086cc:	e7c2      	b.n	8008654 <__gethex+0x388>
 80086ce:	f016 061f 	ands.w	r6, r6, #31
 80086d2:	d0fa      	beq.n	80086ca <__gethex+0x3fe>
 80086d4:	4453      	add	r3, sl
 80086d6:	f1c6 0620 	rsb	r6, r6, #32
 80086da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80086de:	f7fe f917 	bl	8006910 <__hi0bits>
 80086e2:	42b0      	cmp	r0, r6
 80086e4:	dbe7      	blt.n	80086b6 <__gethex+0x3ea>
 80086e6:	e7f0      	b.n	80086ca <__gethex+0x3fe>
 80086e8:	08008f8d 	.word	0x08008f8d

080086ec <L_shift>:
 80086ec:	f1c2 0208 	rsb	r2, r2, #8
 80086f0:	0092      	lsls	r2, r2, #2
 80086f2:	b570      	push	{r4, r5, r6, lr}
 80086f4:	f1c2 0620 	rsb	r6, r2, #32
 80086f8:	6843      	ldr	r3, [r0, #4]
 80086fa:	6804      	ldr	r4, [r0, #0]
 80086fc:	fa03 f506 	lsl.w	r5, r3, r6
 8008700:	432c      	orrs	r4, r5
 8008702:	40d3      	lsrs	r3, r2
 8008704:	6004      	str	r4, [r0, #0]
 8008706:	f840 3f04 	str.w	r3, [r0, #4]!
 800870a:	4288      	cmp	r0, r1
 800870c:	d3f4      	bcc.n	80086f8 <L_shift+0xc>
 800870e:	bd70      	pop	{r4, r5, r6, pc}

08008710 <__match>:
 8008710:	b530      	push	{r4, r5, lr}
 8008712:	6803      	ldr	r3, [r0, #0]
 8008714:	3301      	adds	r3, #1
 8008716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800871a:	b914      	cbnz	r4, 8008722 <__match+0x12>
 800871c:	6003      	str	r3, [r0, #0]
 800871e:	2001      	movs	r0, #1
 8008720:	bd30      	pop	{r4, r5, pc}
 8008722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008726:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800872a:	2d19      	cmp	r5, #25
 800872c:	bf98      	it	ls
 800872e:	3220      	addls	r2, #32
 8008730:	42a2      	cmp	r2, r4
 8008732:	d0f0      	beq.n	8008716 <__match+0x6>
 8008734:	2000      	movs	r0, #0
 8008736:	e7f3      	b.n	8008720 <__match+0x10>

08008738 <__hexnan>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	680b      	ldr	r3, [r1, #0]
 800873e:	6801      	ldr	r1, [r0, #0]
 8008740:	115e      	asrs	r6, r3, #5
 8008742:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008746:	f013 031f 	ands.w	r3, r3, #31
 800874a:	b087      	sub	sp, #28
 800874c:	bf18      	it	ne
 800874e:	3604      	addne	r6, #4
 8008750:	2500      	movs	r5, #0
 8008752:	1f37      	subs	r7, r6, #4
 8008754:	4682      	mov	sl, r0
 8008756:	4690      	mov	r8, r2
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	f846 5c04 	str.w	r5, [r6, #-4]
 800875e:	46b9      	mov	r9, r7
 8008760:	463c      	mov	r4, r7
 8008762:	9502      	str	r5, [sp, #8]
 8008764:	46ab      	mov	fp, r5
 8008766:	784a      	ldrb	r2, [r1, #1]
 8008768:	1c4b      	adds	r3, r1, #1
 800876a:	9303      	str	r3, [sp, #12]
 800876c:	b342      	cbz	r2, 80087c0 <__hexnan+0x88>
 800876e:	4610      	mov	r0, r2
 8008770:	9105      	str	r1, [sp, #20]
 8008772:	9204      	str	r2, [sp, #16]
 8008774:	f7ff fd94 	bl	80082a0 <__hexdig_fun>
 8008778:	2800      	cmp	r0, #0
 800877a:	d151      	bne.n	8008820 <__hexnan+0xe8>
 800877c:	9a04      	ldr	r2, [sp, #16]
 800877e:	9905      	ldr	r1, [sp, #20]
 8008780:	2a20      	cmp	r2, #32
 8008782:	d818      	bhi.n	80087b6 <__hexnan+0x7e>
 8008784:	9b02      	ldr	r3, [sp, #8]
 8008786:	459b      	cmp	fp, r3
 8008788:	dd13      	ble.n	80087b2 <__hexnan+0x7a>
 800878a:	454c      	cmp	r4, r9
 800878c:	d206      	bcs.n	800879c <__hexnan+0x64>
 800878e:	2d07      	cmp	r5, #7
 8008790:	dc04      	bgt.n	800879c <__hexnan+0x64>
 8008792:	462a      	mov	r2, r5
 8008794:	4649      	mov	r1, r9
 8008796:	4620      	mov	r0, r4
 8008798:	f7ff ffa8 	bl	80086ec <L_shift>
 800879c:	4544      	cmp	r4, r8
 800879e:	d952      	bls.n	8008846 <__hexnan+0x10e>
 80087a0:	2300      	movs	r3, #0
 80087a2:	f1a4 0904 	sub.w	r9, r4, #4
 80087a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80087aa:	f8cd b008 	str.w	fp, [sp, #8]
 80087ae:	464c      	mov	r4, r9
 80087b0:	461d      	mov	r5, r3
 80087b2:	9903      	ldr	r1, [sp, #12]
 80087b4:	e7d7      	b.n	8008766 <__hexnan+0x2e>
 80087b6:	2a29      	cmp	r2, #41	@ 0x29
 80087b8:	d157      	bne.n	800886a <__hexnan+0x132>
 80087ba:	3102      	adds	r1, #2
 80087bc:	f8ca 1000 	str.w	r1, [sl]
 80087c0:	f1bb 0f00 	cmp.w	fp, #0
 80087c4:	d051      	beq.n	800886a <__hexnan+0x132>
 80087c6:	454c      	cmp	r4, r9
 80087c8:	d206      	bcs.n	80087d8 <__hexnan+0xa0>
 80087ca:	2d07      	cmp	r5, #7
 80087cc:	dc04      	bgt.n	80087d8 <__hexnan+0xa0>
 80087ce:	462a      	mov	r2, r5
 80087d0:	4649      	mov	r1, r9
 80087d2:	4620      	mov	r0, r4
 80087d4:	f7ff ff8a 	bl	80086ec <L_shift>
 80087d8:	4544      	cmp	r4, r8
 80087da:	d936      	bls.n	800884a <__hexnan+0x112>
 80087dc:	f1a8 0204 	sub.w	r2, r8, #4
 80087e0:	4623      	mov	r3, r4
 80087e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80087e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80087ea:	429f      	cmp	r7, r3
 80087ec:	d2f9      	bcs.n	80087e2 <__hexnan+0xaa>
 80087ee:	1b3b      	subs	r3, r7, r4
 80087f0:	f023 0303 	bic.w	r3, r3, #3
 80087f4:	3304      	adds	r3, #4
 80087f6:	3401      	adds	r4, #1
 80087f8:	3e03      	subs	r6, #3
 80087fa:	42b4      	cmp	r4, r6
 80087fc:	bf88      	it	hi
 80087fe:	2304      	movhi	r3, #4
 8008800:	4443      	add	r3, r8
 8008802:	2200      	movs	r2, #0
 8008804:	f843 2b04 	str.w	r2, [r3], #4
 8008808:	429f      	cmp	r7, r3
 800880a:	d2fb      	bcs.n	8008804 <__hexnan+0xcc>
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	b91b      	cbnz	r3, 8008818 <__hexnan+0xe0>
 8008810:	4547      	cmp	r7, r8
 8008812:	d128      	bne.n	8008866 <__hexnan+0x12e>
 8008814:	2301      	movs	r3, #1
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	2005      	movs	r0, #5
 800881a:	b007      	add	sp, #28
 800881c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008820:	3501      	adds	r5, #1
 8008822:	2d08      	cmp	r5, #8
 8008824:	f10b 0b01 	add.w	fp, fp, #1
 8008828:	dd06      	ble.n	8008838 <__hexnan+0x100>
 800882a:	4544      	cmp	r4, r8
 800882c:	d9c1      	bls.n	80087b2 <__hexnan+0x7a>
 800882e:	2300      	movs	r3, #0
 8008830:	f844 3c04 	str.w	r3, [r4, #-4]
 8008834:	2501      	movs	r5, #1
 8008836:	3c04      	subs	r4, #4
 8008838:	6822      	ldr	r2, [r4, #0]
 800883a:	f000 000f 	and.w	r0, r0, #15
 800883e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008842:	6020      	str	r0, [r4, #0]
 8008844:	e7b5      	b.n	80087b2 <__hexnan+0x7a>
 8008846:	2508      	movs	r5, #8
 8008848:	e7b3      	b.n	80087b2 <__hexnan+0x7a>
 800884a:	9b01      	ldr	r3, [sp, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0dd      	beq.n	800880c <__hexnan+0xd4>
 8008850:	f1c3 0320 	rsb	r3, r3, #32
 8008854:	f04f 32ff 	mov.w	r2, #4294967295
 8008858:	40da      	lsrs	r2, r3
 800885a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800885e:	4013      	ands	r3, r2
 8008860:	f846 3c04 	str.w	r3, [r6, #-4]
 8008864:	e7d2      	b.n	800880c <__hexnan+0xd4>
 8008866:	3f04      	subs	r7, #4
 8008868:	e7d0      	b.n	800880c <__hexnan+0xd4>
 800886a:	2004      	movs	r0, #4
 800886c:	e7d5      	b.n	800881a <__hexnan+0xe2>

0800886e <__ascii_mbtowc>:
 800886e:	b082      	sub	sp, #8
 8008870:	b901      	cbnz	r1, 8008874 <__ascii_mbtowc+0x6>
 8008872:	a901      	add	r1, sp, #4
 8008874:	b142      	cbz	r2, 8008888 <__ascii_mbtowc+0x1a>
 8008876:	b14b      	cbz	r3, 800888c <__ascii_mbtowc+0x1e>
 8008878:	7813      	ldrb	r3, [r2, #0]
 800887a:	600b      	str	r3, [r1, #0]
 800887c:	7812      	ldrb	r2, [r2, #0]
 800887e:	1e10      	subs	r0, r2, #0
 8008880:	bf18      	it	ne
 8008882:	2001      	movne	r0, #1
 8008884:	b002      	add	sp, #8
 8008886:	4770      	bx	lr
 8008888:	4610      	mov	r0, r2
 800888a:	e7fb      	b.n	8008884 <__ascii_mbtowc+0x16>
 800888c:	f06f 0001 	mvn.w	r0, #1
 8008890:	e7f8      	b.n	8008884 <__ascii_mbtowc+0x16>

08008892 <_realloc_r>:
 8008892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008896:	4607      	mov	r7, r0
 8008898:	4614      	mov	r4, r2
 800889a:	460d      	mov	r5, r1
 800889c:	b921      	cbnz	r1, 80088a8 <_realloc_r+0x16>
 800889e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088a2:	4611      	mov	r1, r2
 80088a4:	f7fd beb6 	b.w	8006614 <_malloc_r>
 80088a8:	b92a      	cbnz	r2, 80088b6 <_realloc_r+0x24>
 80088aa:	f7fd fe3f 	bl	800652c <_free_r>
 80088ae:	4625      	mov	r5, r4
 80088b0:	4628      	mov	r0, r5
 80088b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b6:	f000 f840 	bl	800893a <_malloc_usable_size_r>
 80088ba:	4284      	cmp	r4, r0
 80088bc:	4606      	mov	r6, r0
 80088be:	d802      	bhi.n	80088c6 <_realloc_r+0x34>
 80088c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088c4:	d8f4      	bhi.n	80088b0 <_realloc_r+0x1e>
 80088c6:	4621      	mov	r1, r4
 80088c8:	4638      	mov	r0, r7
 80088ca:	f7fd fea3 	bl	8006614 <_malloc_r>
 80088ce:	4680      	mov	r8, r0
 80088d0:	b908      	cbnz	r0, 80088d6 <_realloc_r+0x44>
 80088d2:	4645      	mov	r5, r8
 80088d4:	e7ec      	b.n	80088b0 <_realloc_r+0x1e>
 80088d6:	42b4      	cmp	r4, r6
 80088d8:	4622      	mov	r2, r4
 80088da:	4629      	mov	r1, r5
 80088dc:	bf28      	it	cs
 80088de:	4632      	movcs	r2, r6
 80088e0:	f7ff fc42 	bl	8008168 <memcpy>
 80088e4:	4629      	mov	r1, r5
 80088e6:	4638      	mov	r0, r7
 80088e8:	f7fd fe20 	bl	800652c <_free_r>
 80088ec:	e7f1      	b.n	80088d2 <_realloc_r+0x40>

080088ee <__ascii_wctomb>:
 80088ee:	4603      	mov	r3, r0
 80088f0:	4608      	mov	r0, r1
 80088f2:	b141      	cbz	r1, 8008906 <__ascii_wctomb+0x18>
 80088f4:	2aff      	cmp	r2, #255	@ 0xff
 80088f6:	d904      	bls.n	8008902 <__ascii_wctomb+0x14>
 80088f8:	228a      	movs	r2, #138	@ 0x8a
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008900:	4770      	bx	lr
 8008902:	700a      	strb	r2, [r1, #0]
 8008904:	2001      	movs	r0, #1
 8008906:	4770      	bx	lr

08008908 <fiprintf>:
 8008908:	b40e      	push	{r1, r2, r3}
 800890a:	b503      	push	{r0, r1, lr}
 800890c:	4601      	mov	r1, r0
 800890e:	ab03      	add	r3, sp, #12
 8008910:	4805      	ldr	r0, [pc, #20]	@ (8008928 <fiprintf+0x20>)
 8008912:	f853 2b04 	ldr.w	r2, [r3], #4
 8008916:	6800      	ldr	r0, [r0, #0]
 8008918:	9301      	str	r3, [sp, #4]
 800891a:	f000 f83f 	bl	800899c <_vfiprintf_r>
 800891e:	b002      	add	sp, #8
 8008920:	f85d eb04 	ldr.w	lr, [sp], #4
 8008924:	b003      	add	sp, #12
 8008926:	4770      	bx	lr
 8008928:	20000018 	.word	0x20000018

0800892c <abort>:
 800892c:	b508      	push	{r3, lr}
 800892e:	2006      	movs	r0, #6
 8008930:	f000 fa08 	bl	8008d44 <raise>
 8008934:	2001      	movs	r0, #1
 8008936:	f7f8 fb3a 	bl	8000fae <_exit>

0800893a <_malloc_usable_size_r>:
 800893a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800893e:	1f18      	subs	r0, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	bfbc      	itt	lt
 8008944:	580b      	ldrlt	r3, [r1, r0]
 8008946:	18c0      	addlt	r0, r0, r3
 8008948:	4770      	bx	lr

0800894a <__sfputc_r>:
 800894a:	6893      	ldr	r3, [r2, #8]
 800894c:	3b01      	subs	r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	b410      	push	{r4}
 8008952:	6093      	str	r3, [r2, #8]
 8008954:	da08      	bge.n	8008968 <__sfputc_r+0x1e>
 8008956:	6994      	ldr	r4, [r2, #24]
 8008958:	42a3      	cmp	r3, r4
 800895a:	db01      	blt.n	8008960 <__sfputc_r+0x16>
 800895c:	290a      	cmp	r1, #10
 800895e:	d103      	bne.n	8008968 <__sfputc_r+0x1e>
 8008960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008964:	f000 b932 	b.w	8008bcc <__swbuf_r>
 8008968:	6813      	ldr	r3, [r2, #0]
 800896a:	1c58      	adds	r0, r3, #1
 800896c:	6010      	str	r0, [r2, #0]
 800896e:	7019      	strb	r1, [r3, #0]
 8008970:	4608      	mov	r0, r1
 8008972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008976:	4770      	bx	lr

08008978 <__sfputs_r>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	4606      	mov	r6, r0
 800897c:	460f      	mov	r7, r1
 800897e:	4614      	mov	r4, r2
 8008980:	18d5      	adds	r5, r2, r3
 8008982:	42ac      	cmp	r4, r5
 8008984:	d101      	bne.n	800898a <__sfputs_r+0x12>
 8008986:	2000      	movs	r0, #0
 8008988:	e007      	b.n	800899a <__sfputs_r+0x22>
 800898a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800898e:	463a      	mov	r2, r7
 8008990:	4630      	mov	r0, r6
 8008992:	f7ff ffda 	bl	800894a <__sfputc_r>
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	d1f3      	bne.n	8008982 <__sfputs_r+0xa>
 800899a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800899c <_vfiprintf_r>:
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	460d      	mov	r5, r1
 80089a2:	b09d      	sub	sp, #116	@ 0x74
 80089a4:	4614      	mov	r4, r2
 80089a6:	4698      	mov	r8, r3
 80089a8:	4606      	mov	r6, r0
 80089aa:	b118      	cbz	r0, 80089b4 <_vfiprintf_r+0x18>
 80089ac:	6a03      	ldr	r3, [r0, #32]
 80089ae:	b90b      	cbnz	r3, 80089b4 <_vfiprintf_r+0x18>
 80089b0:	f7fc feb2 	bl	8005718 <__sinit>
 80089b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089b6:	07d9      	lsls	r1, r3, #31
 80089b8:	d405      	bmi.n	80089c6 <_vfiprintf_r+0x2a>
 80089ba:	89ab      	ldrh	r3, [r5, #12]
 80089bc:	059a      	lsls	r2, r3, #22
 80089be:	d402      	bmi.n	80089c6 <_vfiprintf_r+0x2a>
 80089c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089c2:	f7fc ffc2 	bl	800594a <__retarget_lock_acquire_recursive>
 80089c6:	89ab      	ldrh	r3, [r5, #12]
 80089c8:	071b      	lsls	r3, r3, #28
 80089ca:	d501      	bpl.n	80089d0 <_vfiprintf_r+0x34>
 80089cc:	692b      	ldr	r3, [r5, #16]
 80089ce:	b99b      	cbnz	r3, 80089f8 <_vfiprintf_r+0x5c>
 80089d0:	4629      	mov	r1, r5
 80089d2:	4630      	mov	r0, r6
 80089d4:	f000 f938 	bl	8008c48 <__swsetup_r>
 80089d8:	b170      	cbz	r0, 80089f8 <_vfiprintf_r+0x5c>
 80089da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089dc:	07dc      	lsls	r4, r3, #31
 80089de:	d504      	bpl.n	80089ea <_vfiprintf_r+0x4e>
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295
 80089e4:	b01d      	add	sp, #116	@ 0x74
 80089e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ea:	89ab      	ldrh	r3, [r5, #12]
 80089ec:	0598      	lsls	r0, r3, #22
 80089ee:	d4f7      	bmi.n	80089e0 <_vfiprintf_r+0x44>
 80089f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089f2:	f7fc ffab 	bl	800594c <__retarget_lock_release_recursive>
 80089f6:	e7f3      	b.n	80089e0 <_vfiprintf_r+0x44>
 80089f8:	2300      	movs	r3, #0
 80089fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80089fc:	2320      	movs	r3, #32
 80089fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a02:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a06:	2330      	movs	r3, #48	@ 0x30
 8008a08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008bb8 <_vfiprintf_r+0x21c>
 8008a0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a10:	f04f 0901 	mov.w	r9, #1
 8008a14:	4623      	mov	r3, r4
 8008a16:	469a      	mov	sl, r3
 8008a18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a1c:	b10a      	cbz	r2, 8008a22 <_vfiprintf_r+0x86>
 8008a1e:	2a25      	cmp	r2, #37	@ 0x25
 8008a20:	d1f9      	bne.n	8008a16 <_vfiprintf_r+0x7a>
 8008a22:	ebba 0b04 	subs.w	fp, sl, r4
 8008a26:	d00b      	beq.n	8008a40 <_vfiprintf_r+0xa4>
 8008a28:	465b      	mov	r3, fp
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f7ff ffa2 	bl	8008978 <__sfputs_r>
 8008a34:	3001      	adds	r0, #1
 8008a36:	f000 80a7 	beq.w	8008b88 <_vfiprintf_r+0x1ec>
 8008a3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a3c:	445a      	add	r2, fp
 8008a3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a40:	f89a 3000 	ldrb.w	r3, [sl]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 809f 	beq.w	8008b88 <_vfiprintf_r+0x1ec>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a54:	f10a 0a01 	add.w	sl, sl, #1
 8008a58:	9304      	str	r3, [sp, #16]
 8008a5a:	9307      	str	r3, [sp, #28]
 8008a5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a60:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a62:	4654      	mov	r4, sl
 8008a64:	2205      	movs	r2, #5
 8008a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a6a:	4853      	ldr	r0, [pc, #332]	@ (8008bb8 <_vfiprintf_r+0x21c>)
 8008a6c:	f7f7 fbe8 	bl	8000240 <memchr>
 8008a70:	9a04      	ldr	r2, [sp, #16]
 8008a72:	b9d8      	cbnz	r0, 8008aac <_vfiprintf_r+0x110>
 8008a74:	06d1      	lsls	r1, r2, #27
 8008a76:	bf44      	itt	mi
 8008a78:	2320      	movmi	r3, #32
 8008a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a7e:	0713      	lsls	r3, r2, #28
 8008a80:	bf44      	itt	mi
 8008a82:	232b      	movmi	r3, #43	@ 0x2b
 8008a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a88:	f89a 3000 	ldrb.w	r3, [sl]
 8008a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a8e:	d015      	beq.n	8008abc <_vfiprintf_r+0x120>
 8008a90:	9a07      	ldr	r2, [sp, #28]
 8008a92:	4654      	mov	r4, sl
 8008a94:	2000      	movs	r0, #0
 8008a96:	f04f 0c0a 	mov.w	ip, #10
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aa0:	3b30      	subs	r3, #48	@ 0x30
 8008aa2:	2b09      	cmp	r3, #9
 8008aa4:	d94b      	bls.n	8008b3e <_vfiprintf_r+0x1a2>
 8008aa6:	b1b0      	cbz	r0, 8008ad6 <_vfiprintf_r+0x13a>
 8008aa8:	9207      	str	r2, [sp, #28]
 8008aaa:	e014      	b.n	8008ad6 <_vfiprintf_r+0x13a>
 8008aac:	eba0 0308 	sub.w	r3, r0, r8
 8008ab0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	46a2      	mov	sl, r4
 8008aba:	e7d2      	b.n	8008a62 <_vfiprintf_r+0xc6>
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	1d19      	adds	r1, r3, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	9103      	str	r1, [sp, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bfbb      	ittet	lt
 8008ac8:	425b      	neglt	r3, r3
 8008aca:	f042 0202 	orrlt.w	r2, r2, #2
 8008ace:	9307      	strge	r3, [sp, #28]
 8008ad0:	9307      	strlt	r3, [sp, #28]
 8008ad2:	bfb8      	it	lt
 8008ad4:	9204      	strlt	r2, [sp, #16]
 8008ad6:	7823      	ldrb	r3, [r4, #0]
 8008ad8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ada:	d10a      	bne.n	8008af2 <_vfiprintf_r+0x156>
 8008adc:	7863      	ldrb	r3, [r4, #1]
 8008ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ae0:	d132      	bne.n	8008b48 <_vfiprintf_r+0x1ac>
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	1d1a      	adds	r2, r3, #4
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	9203      	str	r2, [sp, #12]
 8008aea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008aee:	3402      	adds	r4, #2
 8008af0:	9305      	str	r3, [sp, #20]
 8008af2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008bc8 <_vfiprintf_r+0x22c>
 8008af6:	7821      	ldrb	r1, [r4, #0]
 8008af8:	2203      	movs	r2, #3
 8008afa:	4650      	mov	r0, sl
 8008afc:	f7f7 fba0 	bl	8000240 <memchr>
 8008b00:	b138      	cbz	r0, 8008b12 <_vfiprintf_r+0x176>
 8008b02:	9b04      	ldr	r3, [sp, #16]
 8008b04:	eba0 000a 	sub.w	r0, r0, sl
 8008b08:	2240      	movs	r2, #64	@ 0x40
 8008b0a:	4082      	lsls	r2, r0
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	3401      	adds	r4, #1
 8008b10:	9304      	str	r3, [sp, #16]
 8008b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b16:	4829      	ldr	r0, [pc, #164]	@ (8008bbc <_vfiprintf_r+0x220>)
 8008b18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b1c:	2206      	movs	r2, #6
 8008b1e:	f7f7 fb8f 	bl	8000240 <memchr>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d03f      	beq.n	8008ba6 <_vfiprintf_r+0x20a>
 8008b26:	4b26      	ldr	r3, [pc, #152]	@ (8008bc0 <_vfiprintf_r+0x224>)
 8008b28:	bb1b      	cbnz	r3, 8008b72 <_vfiprintf_r+0x1d6>
 8008b2a:	9b03      	ldr	r3, [sp, #12]
 8008b2c:	3307      	adds	r3, #7
 8008b2e:	f023 0307 	bic.w	r3, r3, #7
 8008b32:	3308      	adds	r3, #8
 8008b34:	9303      	str	r3, [sp, #12]
 8008b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b38:	443b      	add	r3, r7
 8008b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b3c:	e76a      	b.n	8008a14 <_vfiprintf_r+0x78>
 8008b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b42:	460c      	mov	r4, r1
 8008b44:	2001      	movs	r0, #1
 8008b46:	e7a8      	b.n	8008a9a <_vfiprintf_r+0xfe>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	3401      	adds	r4, #1
 8008b4c:	9305      	str	r3, [sp, #20]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	f04f 0c0a 	mov.w	ip, #10
 8008b54:	4620      	mov	r0, r4
 8008b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b5a:	3a30      	subs	r2, #48	@ 0x30
 8008b5c:	2a09      	cmp	r2, #9
 8008b5e:	d903      	bls.n	8008b68 <_vfiprintf_r+0x1cc>
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d0c6      	beq.n	8008af2 <_vfiprintf_r+0x156>
 8008b64:	9105      	str	r1, [sp, #20]
 8008b66:	e7c4      	b.n	8008af2 <_vfiprintf_r+0x156>
 8008b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e7f0      	b.n	8008b54 <_vfiprintf_r+0x1b8>
 8008b72:	ab03      	add	r3, sp, #12
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	462a      	mov	r2, r5
 8008b78:	4b12      	ldr	r3, [pc, #72]	@ (8008bc4 <_vfiprintf_r+0x228>)
 8008b7a:	a904      	add	r1, sp, #16
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f7fb ff93 	bl	8004aa8 <_printf_float>
 8008b82:	4607      	mov	r7, r0
 8008b84:	1c78      	adds	r0, r7, #1
 8008b86:	d1d6      	bne.n	8008b36 <_vfiprintf_r+0x19a>
 8008b88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b8a:	07d9      	lsls	r1, r3, #31
 8008b8c:	d405      	bmi.n	8008b9a <_vfiprintf_r+0x1fe>
 8008b8e:	89ab      	ldrh	r3, [r5, #12]
 8008b90:	059a      	lsls	r2, r3, #22
 8008b92:	d402      	bmi.n	8008b9a <_vfiprintf_r+0x1fe>
 8008b94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b96:	f7fc fed9 	bl	800594c <__retarget_lock_release_recursive>
 8008b9a:	89ab      	ldrh	r3, [r5, #12]
 8008b9c:	065b      	lsls	r3, r3, #25
 8008b9e:	f53f af1f 	bmi.w	80089e0 <_vfiprintf_r+0x44>
 8008ba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ba4:	e71e      	b.n	80089e4 <_vfiprintf_r+0x48>
 8008ba6:	ab03      	add	r3, sp, #12
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	462a      	mov	r2, r5
 8008bac:	4b05      	ldr	r3, [pc, #20]	@ (8008bc4 <_vfiprintf_r+0x228>)
 8008bae:	a904      	add	r1, sp, #16
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f7fc fa01 	bl	8004fb8 <_printf_i>
 8008bb6:	e7e4      	b.n	8008b82 <_vfiprintf_r+0x1e6>
 8008bb8:	08008ff9 	.word	0x08008ff9
 8008bbc:	08009003 	.word	0x08009003
 8008bc0:	08004aa9 	.word	0x08004aa9
 8008bc4:	08008979 	.word	0x08008979
 8008bc8:	08008fff 	.word	0x08008fff

08008bcc <__swbuf_r>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	460e      	mov	r6, r1
 8008bd0:	4614      	mov	r4, r2
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	b118      	cbz	r0, 8008bde <__swbuf_r+0x12>
 8008bd6:	6a03      	ldr	r3, [r0, #32]
 8008bd8:	b90b      	cbnz	r3, 8008bde <__swbuf_r+0x12>
 8008bda:	f7fc fd9d 	bl	8005718 <__sinit>
 8008bde:	69a3      	ldr	r3, [r4, #24]
 8008be0:	60a3      	str	r3, [r4, #8]
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	071a      	lsls	r2, r3, #28
 8008be6:	d501      	bpl.n	8008bec <__swbuf_r+0x20>
 8008be8:	6923      	ldr	r3, [r4, #16]
 8008bea:	b943      	cbnz	r3, 8008bfe <__swbuf_r+0x32>
 8008bec:	4621      	mov	r1, r4
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f000 f82a 	bl	8008c48 <__swsetup_r>
 8008bf4:	b118      	cbz	r0, 8008bfe <__swbuf_r+0x32>
 8008bf6:	f04f 37ff 	mov.w	r7, #4294967295
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	6922      	ldr	r2, [r4, #16]
 8008c02:	1a98      	subs	r0, r3, r2
 8008c04:	6963      	ldr	r3, [r4, #20]
 8008c06:	b2f6      	uxtb	r6, r6
 8008c08:	4283      	cmp	r3, r0
 8008c0a:	4637      	mov	r7, r6
 8008c0c:	dc05      	bgt.n	8008c1a <__swbuf_r+0x4e>
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4628      	mov	r0, r5
 8008c12:	f7ff fa45 	bl	80080a0 <_fflush_r>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d1ed      	bne.n	8008bf6 <__swbuf_r+0x2a>
 8008c1a:	68a3      	ldr	r3, [r4, #8]
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	60a3      	str	r3, [r4, #8]
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	6022      	str	r2, [r4, #0]
 8008c26:	701e      	strb	r6, [r3, #0]
 8008c28:	6962      	ldr	r2, [r4, #20]
 8008c2a:	1c43      	adds	r3, r0, #1
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d004      	beq.n	8008c3a <__swbuf_r+0x6e>
 8008c30:	89a3      	ldrh	r3, [r4, #12]
 8008c32:	07db      	lsls	r3, r3, #31
 8008c34:	d5e1      	bpl.n	8008bfa <__swbuf_r+0x2e>
 8008c36:	2e0a      	cmp	r6, #10
 8008c38:	d1df      	bne.n	8008bfa <__swbuf_r+0x2e>
 8008c3a:	4621      	mov	r1, r4
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	f7ff fa2f 	bl	80080a0 <_fflush_r>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d0d9      	beq.n	8008bfa <__swbuf_r+0x2e>
 8008c46:	e7d6      	b.n	8008bf6 <__swbuf_r+0x2a>

08008c48 <__swsetup_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4b29      	ldr	r3, [pc, #164]	@ (8008cf0 <__swsetup_r+0xa8>)
 8008c4c:	4605      	mov	r5, r0
 8008c4e:	6818      	ldr	r0, [r3, #0]
 8008c50:	460c      	mov	r4, r1
 8008c52:	b118      	cbz	r0, 8008c5c <__swsetup_r+0x14>
 8008c54:	6a03      	ldr	r3, [r0, #32]
 8008c56:	b90b      	cbnz	r3, 8008c5c <__swsetup_r+0x14>
 8008c58:	f7fc fd5e 	bl	8005718 <__sinit>
 8008c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c60:	0719      	lsls	r1, r3, #28
 8008c62:	d422      	bmi.n	8008caa <__swsetup_r+0x62>
 8008c64:	06da      	lsls	r2, r3, #27
 8008c66:	d407      	bmi.n	8008c78 <__swsetup_r+0x30>
 8008c68:	2209      	movs	r2, #9
 8008c6a:	602a      	str	r2, [r5, #0]
 8008c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c70:	81a3      	strh	r3, [r4, #12]
 8008c72:	f04f 30ff 	mov.w	r0, #4294967295
 8008c76:	e033      	b.n	8008ce0 <__swsetup_r+0x98>
 8008c78:	0758      	lsls	r0, r3, #29
 8008c7a:	d512      	bpl.n	8008ca2 <__swsetup_r+0x5a>
 8008c7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c7e:	b141      	cbz	r1, 8008c92 <__swsetup_r+0x4a>
 8008c80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c84:	4299      	cmp	r1, r3
 8008c86:	d002      	beq.n	8008c8e <__swsetup_r+0x46>
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f7fd fc4f 	bl	800652c <_free_r>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c98:	81a3      	strh	r3, [r4, #12]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	6063      	str	r3, [r4, #4]
 8008c9e:	6923      	ldr	r3, [r4, #16]
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	f043 0308 	orr.w	r3, r3, #8
 8008ca8:	81a3      	strh	r3, [r4, #12]
 8008caa:	6923      	ldr	r3, [r4, #16]
 8008cac:	b94b      	cbnz	r3, 8008cc2 <__swsetup_r+0x7a>
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cb8:	d003      	beq.n	8008cc2 <__swsetup_r+0x7a>
 8008cba:	4621      	mov	r1, r4
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f000 f883 	bl	8008dc8 <__smakebuf_r>
 8008cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc6:	f013 0201 	ands.w	r2, r3, #1
 8008cca:	d00a      	beq.n	8008ce2 <__swsetup_r+0x9a>
 8008ccc:	2200      	movs	r2, #0
 8008cce:	60a2      	str	r2, [r4, #8]
 8008cd0:	6962      	ldr	r2, [r4, #20]
 8008cd2:	4252      	negs	r2, r2
 8008cd4:	61a2      	str	r2, [r4, #24]
 8008cd6:	6922      	ldr	r2, [r4, #16]
 8008cd8:	b942      	cbnz	r2, 8008cec <__swsetup_r+0xa4>
 8008cda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cde:	d1c5      	bne.n	8008c6c <__swsetup_r+0x24>
 8008ce0:	bd38      	pop	{r3, r4, r5, pc}
 8008ce2:	0799      	lsls	r1, r3, #30
 8008ce4:	bf58      	it	pl
 8008ce6:	6962      	ldrpl	r2, [r4, #20]
 8008ce8:	60a2      	str	r2, [r4, #8]
 8008cea:	e7f4      	b.n	8008cd6 <__swsetup_r+0x8e>
 8008cec:	2000      	movs	r0, #0
 8008cee:	e7f7      	b.n	8008ce0 <__swsetup_r+0x98>
 8008cf0:	20000018 	.word	0x20000018

08008cf4 <_raise_r>:
 8008cf4:	291f      	cmp	r1, #31
 8008cf6:	b538      	push	{r3, r4, r5, lr}
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	d904      	bls.n	8008d08 <_raise_r+0x14>
 8008cfe:	2316      	movs	r3, #22
 8008d00:	6003      	str	r3, [r0, #0]
 8008d02:	f04f 30ff 	mov.w	r0, #4294967295
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d0a:	b112      	cbz	r2, 8008d12 <_raise_r+0x1e>
 8008d0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d10:	b94b      	cbnz	r3, 8008d26 <_raise_r+0x32>
 8008d12:	4628      	mov	r0, r5
 8008d14:	f000 f830 	bl	8008d78 <_getpid_r>
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d22:	f000 b817 	b.w	8008d54 <_kill_r>
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d00a      	beq.n	8008d40 <_raise_r+0x4c>
 8008d2a:	1c59      	adds	r1, r3, #1
 8008d2c:	d103      	bne.n	8008d36 <_raise_r+0x42>
 8008d2e:	2316      	movs	r3, #22
 8008d30:	6003      	str	r3, [r0, #0]
 8008d32:	2001      	movs	r0, #1
 8008d34:	e7e7      	b.n	8008d06 <_raise_r+0x12>
 8008d36:	2100      	movs	r1, #0
 8008d38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	4798      	blx	r3
 8008d40:	2000      	movs	r0, #0
 8008d42:	e7e0      	b.n	8008d06 <_raise_r+0x12>

08008d44 <raise>:
 8008d44:	4b02      	ldr	r3, [pc, #8]	@ (8008d50 <raise+0xc>)
 8008d46:	4601      	mov	r1, r0
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	f7ff bfd3 	b.w	8008cf4 <_raise_r>
 8008d4e:	bf00      	nop
 8008d50:	20000018 	.word	0x20000018

08008d54 <_kill_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4d07      	ldr	r5, [pc, #28]	@ (8008d74 <_kill_r+0x20>)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	4611      	mov	r1, r2
 8008d60:	602b      	str	r3, [r5, #0]
 8008d62:	f7f8 f914 	bl	8000f8e <_kill>
 8008d66:	1c43      	adds	r3, r0, #1
 8008d68:	d102      	bne.n	8008d70 <_kill_r+0x1c>
 8008d6a:	682b      	ldr	r3, [r5, #0]
 8008d6c:	b103      	cbz	r3, 8008d70 <_kill_r+0x1c>
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	bd38      	pop	{r3, r4, r5, pc}
 8008d72:	bf00      	nop
 8008d74:	2000041c 	.word	0x2000041c

08008d78 <_getpid_r>:
 8008d78:	f7f8 b901 	b.w	8000f7e <_getpid>

08008d7c <__swhatbuf_r>:
 8008d7c:	b570      	push	{r4, r5, r6, lr}
 8008d7e:	460c      	mov	r4, r1
 8008d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d84:	2900      	cmp	r1, #0
 8008d86:	b096      	sub	sp, #88	@ 0x58
 8008d88:	4615      	mov	r5, r2
 8008d8a:	461e      	mov	r6, r3
 8008d8c:	da0d      	bge.n	8008daa <__swhatbuf_r+0x2e>
 8008d8e:	89a3      	ldrh	r3, [r4, #12]
 8008d90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d94:	f04f 0100 	mov.w	r1, #0
 8008d98:	bf14      	ite	ne
 8008d9a:	2340      	movne	r3, #64	@ 0x40
 8008d9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008da0:	2000      	movs	r0, #0
 8008da2:	6031      	str	r1, [r6, #0]
 8008da4:	602b      	str	r3, [r5, #0]
 8008da6:	b016      	add	sp, #88	@ 0x58
 8008da8:	bd70      	pop	{r4, r5, r6, pc}
 8008daa:	466a      	mov	r2, sp
 8008dac:	f000 f848 	bl	8008e40 <_fstat_r>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	dbec      	blt.n	8008d8e <__swhatbuf_r+0x12>
 8008db4:	9901      	ldr	r1, [sp, #4]
 8008db6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008dba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008dbe:	4259      	negs	r1, r3
 8008dc0:	4159      	adcs	r1, r3
 8008dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dc6:	e7eb      	b.n	8008da0 <__swhatbuf_r+0x24>

08008dc8 <__smakebuf_r>:
 8008dc8:	898b      	ldrh	r3, [r1, #12]
 8008dca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dcc:	079d      	lsls	r5, r3, #30
 8008dce:	4606      	mov	r6, r0
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	d507      	bpl.n	8008de4 <__smakebuf_r+0x1c>
 8008dd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	6123      	str	r3, [r4, #16]
 8008ddc:	2301      	movs	r3, #1
 8008dde:	6163      	str	r3, [r4, #20]
 8008de0:	b003      	add	sp, #12
 8008de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008de4:	ab01      	add	r3, sp, #4
 8008de6:	466a      	mov	r2, sp
 8008de8:	f7ff ffc8 	bl	8008d7c <__swhatbuf_r>
 8008dec:	9f00      	ldr	r7, [sp, #0]
 8008dee:	4605      	mov	r5, r0
 8008df0:	4639      	mov	r1, r7
 8008df2:	4630      	mov	r0, r6
 8008df4:	f7fd fc0e 	bl	8006614 <_malloc_r>
 8008df8:	b948      	cbnz	r0, 8008e0e <__smakebuf_r+0x46>
 8008dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dfe:	059a      	lsls	r2, r3, #22
 8008e00:	d4ee      	bmi.n	8008de0 <__smakebuf_r+0x18>
 8008e02:	f023 0303 	bic.w	r3, r3, #3
 8008e06:	f043 0302 	orr.w	r3, r3, #2
 8008e0a:	81a3      	strh	r3, [r4, #12]
 8008e0c:	e7e2      	b.n	8008dd4 <__smakebuf_r+0xc>
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	6020      	str	r0, [r4, #0]
 8008e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	9b01      	ldr	r3, [sp, #4]
 8008e1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e1e:	b15b      	cbz	r3, 8008e38 <__smakebuf_r+0x70>
 8008e20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e24:	4630      	mov	r0, r6
 8008e26:	f000 f81d 	bl	8008e64 <_isatty_r>
 8008e2a:	b128      	cbz	r0, 8008e38 <__smakebuf_r+0x70>
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	f023 0303 	bic.w	r3, r3, #3
 8008e32:	f043 0301 	orr.w	r3, r3, #1
 8008e36:	81a3      	strh	r3, [r4, #12]
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	431d      	orrs	r5, r3
 8008e3c:	81a5      	strh	r5, [r4, #12]
 8008e3e:	e7cf      	b.n	8008de0 <__smakebuf_r+0x18>

08008e40 <_fstat_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4d07      	ldr	r5, [pc, #28]	@ (8008e60 <_fstat_r+0x20>)
 8008e44:	2300      	movs	r3, #0
 8008e46:	4604      	mov	r4, r0
 8008e48:	4608      	mov	r0, r1
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	602b      	str	r3, [r5, #0]
 8008e4e:	f7f8 f8fe 	bl	800104e <_fstat>
 8008e52:	1c43      	adds	r3, r0, #1
 8008e54:	d102      	bne.n	8008e5c <_fstat_r+0x1c>
 8008e56:	682b      	ldr	r3, [r5, #0]
 8008e58:	b103      	cbz	r3, 8008e5c <_fstat_r+0x1c>
 8008e5a:	6023      	str	r3, [r4, #0]
 8008e5c:	bd38      	pop	{r3, r4, r5, pc}
 8008e5e:	bf00      	nop
 8008e60:	2000041c 	.word	0x2000041c

08008e64 <_isatty_r>:
 8008e64:	b538      	push	{r3, r4, r5, lr}
 8008e66:	4d06      	ldr	r5, [pc, #24]	@ (8008e80 <_isatty_r+0x1c>)
 8008e68:	2300      	movs	r3, #0
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	4608      	mov	r0, r1
 8008e6e:	602b      	str	r3, [r5, #0]
 8008e70:	f7f8 f8fd 	bl	800106e <_isatty>
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	d102      	bne.n	8008e7e <_isatty_r+0x1a>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	b103      	cbz	r3, 8008e7e <_isatty_r+0x1a>
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	2000041c 	.word	0x2000041c

08008e84 <_init>:
 8008e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e86:	bf00      	nop
 8008e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e8a:	bc08      	pop	{r3}
 8008e8c:	469e      	mov	lr, r3
 8008e8e:	4770      	bx	lr

08008e90 <_fini>:
 8008e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e92:	bf00      	nop
 8008e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e96:	bc08      	pop	{r3}
 8008e98:	469e      	mov	lr, r3
 8008e9a:	4770      	bx	lr
