
Lab05_s.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dfc  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08007000  08007000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c4  080074c4  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080074c4  080074c4  000084c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074cc  080074cc  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074cc  080074cc  000084cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074d0  080074d0  000084d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080074d4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200001d4  080076a8  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  080076a8  00009538  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c99c  00000000  00000000  00009202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f7  00000000  00000000  00015b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00017e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000751  00000000  00000000  00018848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ab1  00000000  00000000  00018f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e36c  00000000  00000000  00041a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8483  00000000  00000000  0004fdb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148239  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e8  00000000  00000000  0014827c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0014b764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08006fe4 	.word	0x08006fe4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08006fe4 	.word	0x08006fe4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800062e:	4b52      	ldr	r3, [pc, #328]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000630:	4a52      	ldr	r2, [pc, #328]	@ (800077c <MX_ADC1_Init+0x160>)
 8000632:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000634:	4b50      	ldr	r3, [pc, #320]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063a:	4b4f      	ldr	r3, [pc, #316]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000640:	4b4d      	ldr	r3, [pc, #308]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000642:	2201      	movs	r2, #1
 8000644:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000646:	4b4c      	ldr	r3, [pc, #304]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000648:	2201      	movs	r2, #1
 800064a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064c:	4b4a      	ldr	r3, [pc, #296]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000654:	4b48      	ldr	r3, [pc, #288]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000656:	2200      	movs	r2, #0
 8000658:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065a:	4b47      	ldr	r3, [pc, #284]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800065c:	4a48      	ldr	r2, [pc, #288]	@ (8000780 <MX_ADC1_Init+0x164>)
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000660:	4b45      	ldr	r3, [pc, #276]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000666:	4b44      	ldr	r3, [pc, #272]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000668:	2208      	movs	r2, #8
 800066a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800066c:	4b42      	ldr	r3, [pc, #264]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800066e:	2201      	movs	r2, #1
 8000670:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000674:	4b40      	ldr	r3, [pc, #256]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067a:	483f      	ldr	r0, [pc, #252]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800067c:	f000 fde8 	bl	8001250 <HAL_ADC_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000686:	f000 fb6d 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800068a:	230a      	movs	r3, #10
 800068c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068e:	2301      	movs	r3, #1
 8000690:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	4619      	mov	r1, r3
 800069a:	4837      	ldr	r0, [pc, #220]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800069c:	f000 ff24 	bl	80014e8 <HAL_ADC_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006a6:	f000 fb5d 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	4619      	mov	r1, r3
 80006b6:	4830      	ldr	r0, [pc, #192]	@ (8000778 <MX_ADC1_Init+0x15c>)
 80006b8:	f000 ff16 	bl	80014e8 <HAL_ADC_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80006c2:	f000 fb4f 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006c6:	2303      	movs	r3, #3
 80006c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006ca:	2303      	movs	r3, #3
 80006cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	4619      	mov	r1, r3
 80006d2:	4829      	ldr	r0, [pc, #164]	@ (8000778 <MX_ADC1_Init+0x15c>)
 80006d4:	f000 ff08 	bl	80014e8 <HAL_ADC_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80006de:	f000 fb41 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006e2:	230d      	movs	r3, #13
 80006e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ea:	463b      	mov	r3, r7
 80006ec:	4619      	mov	r1, r3
 80006ee:	4822      	ldr	r0, [pc, #136]	@ (8000778 <MX_ADC1_Init+0x15c>)
 80006f0:	f000 fefa 	bl	80014e8 <HAL_ADC_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006fa:	f000 fb33 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006fe:	230c      	movs	r3, #12
 8000700:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000702:	2305      	movs	r3, #5
 8000704:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	481b      	ldr	r0, [pc, #108]	@ (8000778 <MX_ADC1_Init+0x15c>)
 800070c:	f000 feec 	bl	80014e8 <HAL_ADC_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000716:	f000 fb25 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800071e:	2306      	movs	r3, #6
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4814      	ldr	r0, [pc, #80]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000728:	f000 fede 	bl	80014e8 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000732:	f000 fb17 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	2309      	movs	r3, #9
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800073a:	2307      	movs	r3, #7
 800073c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	4619      	mov	r1, r3
 8000742:	480d      	ldr	r0, [pc, #52]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000744:	f000 fed0 	bl	80014e8 <HAL_ADC_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 800074e:	f000 fb09 	bl	8000d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000752:	2305      	movs	r3, #5
 8000754:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000756:	2308      	movs	r3, #8
 8000758:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	@ (8000778 <MX_ADC1_Init+0x15c>)
 8000760:	f000 fec2 	bl	80014e8 <HAL_ADC_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800076a:	f000 fafb 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200001f0 	.word	0x200001f0
 800077c:	40012000 	.word	0x40012000
 8000780:	0f000001 	.word	0x0f000001

08000784 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	@ 0x30
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a45      	ldr	r2, [pc, #276]	@ (80008b8 <HAL_ADC_MspInit+0x134>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	f040 8084 	bne.w	80008b0 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007a8:	4b44      	ldr	r3, [pc, #272]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ac:	4a43      	ldr	r2, [pc, #268]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b4:	4b41      	ldr	r3, [pc, #260]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c0:	4b3e      	ldr	r3, [pc, #248]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c4:	4a3d      	ldr	r2, [pc, #244]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80007cc:	4b3b      	ldr	r3, [pc, #236]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	4b38      	ldr	r3, [pc, #224]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007dc:	4a37      	ldr	r2, [pc, #220]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e4:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f0:	4b32      	ldr	r3, [pc, #200]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f4:	4a31      	ldr	r2, [pc, #196]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007f6:	f043 0302 	orr.w	r3, r3, #2
 80007fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fc:	4b2f      	ldr	r3, [pc, #188]	@ (80008bc <HAL_ADC_MspInit+0x138>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000808:	230d      	movs	r3, #13
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080c:	2303      	movs	r3, #3
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4829      	ldr	r0, [pc, #164]	@ (80008c0 <HAL_ADC_MspInit+0x13c>)
 800081c:	f001 fe3c 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000820:	2339      	movs	r3, #57	@ 0x39
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4824      	ldr	r0, [pc, #144]	@ (80008c4 <HAL_ADC_MspInit+0x140>)
 8000834:	f001 fe30 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083c:	2303      	movs	r3, #3
 800083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	481f      	ldr	r0, [pc, #124]	@ (80008c8 <HAL_ADC_MspInit+0x144>)
 800084c:	f001 fe24 	bl	8002498 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000850:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 8000852:	4a1f      	ldr	r2, [pc, #124]	@ (80008d0 <HAL_ADC_MspInit+0x14c>)
 8000854:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000856:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800085c:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000862:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000868:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 800086a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800086e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000870:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 8000872:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000876:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000878:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 800087a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800087e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000880:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 8000882:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000886:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000888:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000894:	480d      	ldr	r0, [pc, #52]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 8000896:	f001 fa87 	bl	8001da8 <HAL_DMA_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 80008a0:	f000 fa60 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a09      	ldr	r2, [pc, #36]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 80008a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80008aa:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <HAL_ADC_MspInit+0x148>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008b0:	bf00      	nop
 80008b2:	3730      	adds	r7, #48	@ 0x30
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40012000 	.word	0x40012000
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020800 	.word	0x40020800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020400 	.word	0x40020400
 80008cc:	20000238 	.word	0x20000238
 80008d0:	40026410 	.word	0x40026410

080008d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_DMA_Init+0x38>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a0b      	ldr	r2, [pc, #44]	@ (800090c <MX_DMA_Init+0x38>)
 80008e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_DMA_Init+0x38>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2101      	movs	r1, #1
 80008f6:	2038      	movs	r0, #56	@ 0x38
 80008f8:	f001 f9a7 	bl	8001c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008fc:	2038      	movs	r0, #56	@ 0x38
 80008fe:	f001 f9c0 	bl	8001c82 <HAL_NVIC_EnableIRQ>

}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	@ 0x28
 8000914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b23      	ldr	r3, [pc, #140]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a22      	ldr	r2, [pc, #136]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a1c      	ldr	r2, [pc, #112]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a16      	ldr	r2, [pc, #88]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a10      	ldr	r2, [pc, #64]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_GPIO_Init+0xa4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2180      	movs	r1, #128	@ 0x80
 800098a:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <MX_GPIO_Init+0xa8>)
 800098c:	f001 ff30 	bl	80027f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000990:	2380      	movs	r3, #128	@ 0x80
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_GPIO_Init+0xa8>)
 80009a8:	f001 fd76 	bl	8002498 <HAL_GPIO_Init>

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	@ 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400

080009bc <print_frame_over_uart_half>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void print_frame_over_uart_half(const uint16_t *p, const char *tag)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b098      	sub	sp, #96	@ 0x60
 80009c0:	af10      	add	r7, sp, #64	@ 0x40
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  float v_half[4];
  for (int i = 0; i < 4; i++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
 80009ca:	e01a      	b.n	8000a02 <print_frame_over_uart_half+0x46>
	  {
	    v_half[i] = (p[i] * 3.3f) / 4095.0f;   // Convert to voltage
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	4413      	add	r3, r2
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009de:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000a88 <print_frame_over_uart_half+0xcc>
 80009e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009e6:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8000a8c <print_frame_over_uart_half+0xd0>
 80009ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	3320      	adds	r3, #32
 80009f4:	443b      	add	r3, r7
 80009f6:	3b18      	subs	r3, #24
 80009f8:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 4; i++)
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	3301      	adds	r3, #1
 8000a00:	61fb      	str	r3, [r7, #28]
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	2b03      	cmp	r3, #3
 8000a06:	dde1      	ble.n	80009cc <print_frame_over_uart_half+0x10>
	  }
//	  snprintf(msg, sizeof(msg), " Vin = %.2f V\r\n", voltage);
  int len = snprintf(uart_line, sizeof(uart_line),
                     "%s: \n\r " "ADC1_CH10 = 0x%08X Vin = %.2fV\n\r " "ADC1_CH4 = 0x%08X Vin = %.2fV\n\r " "ADC1_CH3 = 0x%08X Vin = %.2fV\n\r " "ADC1_CH13 = 0x%08X Vin = %.2fV\r\n",
                     tag,
					 p[0], v_half[0], p[1], v_half[1], p[2], v_half[2], p[3], v_half[3]);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	881b      	ldrh	r3, [r3, #0]
  int len = snprintf(uart_line, sizeof(uart_line),
 8000a0c:	461a      	mov	r2, r3
					 p[0], v_half[0], p[1], v_half[1], p[2], v_half[2], p[3], v_half[3]);
 8000a0e:	edd7 7a02 	vldr	s15, [r7, #8]
  int len = snprintf(uart_line, sizeof(uart_line),
 8000a12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					 p[0], v_half[0], p[1], v_half[1], p[2], v_half[2], p[3], v_half[3]);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3302      	adds	r3, #2
 8000a1a:	881b      	ldrh	r3, [r3, #0]
  int len = snprintf(uart_line, sizeof(uart_line),
 8000a1c:	4619      	mov	r1, r3
					 p[0], v_half[0], p[1], v_half[1], p[2], v_half[2], p[3], v_half[3]);
 8000a1e:	edd7 6a03 	vldr	s13, [r7, #12]
  int len = snprintf(uart_line, sizeof(uart_line),
 8000a22:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
					 p[0], v_half[0], p[1], v_half[1], p[2], v_half[2], p[3], v_half[3]);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	881b      	ldrh	r3, [r3, #0]
  int len = snprintf(uart_line, sizeof(uart_line),
 8000a2c:	4618      	mov	r0, r3
					 p[0], v_half[0], p[1], v_half[1], p[2], v_half[2], p[3], v_half[3]);
 8000a2e:	edd7 5a04 	vldr	s11, [r7, #16]
  int len = snprintf(uart_line, sizeof(uart_line),
 8000a32:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
					 p[0], v_half[0], p[1], v_half[1], p[2], v_half[2], p[3], v_half[3]);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3306      	adds	r3, #6
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	edd7 4a05 	vldr	s9, [r7, #20]
  int len = snprintf(uart_line, sizeof(uart_line),
 8000a40:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000a44:	ed8d 4b0e 	vstr	d4, [sp, #56]	@ 0x38
 8000a48:	930c      	str	r3, [sp, #48]	@ 0x30
 8000a4a:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
 8000a4e:	9008      	str	r0, [sp, #32]
 8000a50:	ed8d 6b06 	vstr	d6, [sp, #24]
 8000a54:	9104      	str	r1, [sp, #16]
 8000a56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000a5a:	9200      	str	r2, [sp, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a90 <print_frame_over_uart_half+0xd4>)
 8000a60:	21a0      	movs	r1, #160	@ 0xa0
 8000a62:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <print_frame_over_uart_half+0xd8>)
 8000a64:	f004 f9e8 	bl	8004e38 <sniprintf>
 8000a68:	61b8      	str	r0, [r7, #24]
  if (len > 0)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	dd06      	ble.n	8000a7e <print_frame_over_uart_half+0xc2>
  {
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_line, (uint16_t)len, 100);
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	2364      	movs	r3, #100	@ 0x64
 8000a76:	4907      	ldr	r1, [pc, #28]	@ (8000a94 <print_frame_over_uart_half+0xd8>)
 8000a78:	4807      	ldr	r0, [pc, #28]	@ (8000a98 <print_frame_over_uart_half+0xdc>)
 8000a7a:	f002 ffdd 	bl	8003a38 <HAL_UART_Transmit>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3720      	adds	r7, #32
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40533333 	.word	0x40533333
 8000a8c:	457ff000 	.word	0x457ff000
 8000a90:	08007000 	.word	0x08007000
 8000a94:	200002bc 	.word	0x200002bc
 8000a98:	20000360 	.word	0x20000360

08000a9c <print_frame_over_uart_full>:

static void print_frame_over_uart_full(const uint16_t *p, const char *tag)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b09c      	sub	sp, #112	@ 0x70
 8000aa0:	af10      	add	r7, sp, #64	@ 0x40
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
	  float v_full[8];
	  for (int i = 4; i < 8; i++)
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000aaa:	e01a      	b.n	8000ae2 <print_frame_over_uart_full+0x46>
		  {
		    v_full[i] = (p[i] * 3.3f) / 4095.0f;   // Convert to voltage
 8000aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	ee07 3a90 	vmov	s15, r3
 8000aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000abe:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000b68 <print_frame_over_uart_full+0xcc>
 8000ac2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ac6:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8000b6c <print_frame_over_uart_full+0xd0>
 8000aca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	3330      	adds	r3, #48	@ 0x30
 8000ad4:	443b      	add	r3, r7
 8000ad6:	3b28      	subs	r3, #40	@ 0x28
 8000ad8:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 4; i < 8; i++)
 8000adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ade:	3301      	adds	r3, #1
 8000ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ae4:	2b07      	cmp	r3, #7
 8000ae6:	dde1      	ble.n	8000aac <print_frame_over_uart_full+0x10>
		  }
  int len = snprintf(uart_line, sizeof(uart_line),
		             "%s: \n\r " "ADC1_CH12 = 0x%08X Vin = %.2fV\n\r " "ADC1_CH0 = 0x%08X Vin = %.2fV\n\r " "ADC1_CH9 = 0x%08X Vin = %.2fV\n\r " "ADC1_CH5 = 0x%08X Vin = %.2fV\r\n",
                     tag,
                     p[4], v_full[4], p[5], v_full[5], p[6], v_full[6], p[7], v_full[7]);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3308      	adds	r3, #8
 8000aec:	881b      	ldrh	r3, [r3, #0]
  int len = snprintf(uart_line, sizeof(uart_line),
 8000aee:	461a      	mov	r2, r3
                     p[4], v_full[4], p[5], v_full[5], p[6], v_full[6], p[7], v_full[7]);
 8000af0:	edd7 7a06 	vldr	s15, [r7, #24]
  int len = snprintf(uart_line, sizeof(uart_line),
 8000af4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                     p[4], v_full[4], p[5], v_full[5], p[6], v_full[6], p[7], v_full[7]);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	330a      	adds	r3, #10
 8000afc:	881b      	ldrh	r3, [r3, #0]
  int len = snprintf(uart_line, sizeof(uart_line),
 8000afe:	4619      	mov	r1, r3
                     p[4], v_full[4], p[5], v_full[5], p[6], v_full[6], p[7], v_full[7]);
 8000b00:	edd7 6a07 	vldr	s13, [r7, #28]
  int len = snprintf(uart_line, sizeof(uart_line),
 8000b04:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                     p[4], v_full[4], p[5], v_full[5], p[6], v_full[6], p[7], v_full[7]);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	330c      	adds	r3, #12
 8000b0c:	881b      	ldrh	r3, [r3, #0]
  int len = snprintf(uart_line, sizeof(uart_line),
 8000b0e:	4618      	mov	r0, r3
                     p[4], v_full[4], p[5], v_full[5], p[6], v_full[6], p[7], v_full[7]);
 8000b10:	edd7 5a08 	vldr	s11, [r7, #32]
  int len = snprintf(uart_line, sizeof(uart_line),
 8000b14:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                     p[4], v_full[4], p[5], v_full[5], p[6], v_full[6], p[7], v_full[7]);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	330e      	adds	r3, #14
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	edd7 4a09 	vldr	s9, [r7, #36]	@ 0x24
  int len = snprintf(uart_line, sizeof(uart_line),
 8000b22:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000b26:	ed8d 4b0e 	vstr	d4, [sp, #56]	@ 0x38
 8000b2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8000b2c:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
 8000b30:	9008      	str	r0, [sp, #32]
 8000b32:	ed8d 6b06 	vstr	d6, [sp, #24]
 8000b36:	9104      	str	r1, [sp, #16]
 8000b38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000b3c:	9200      	str	r2, [sp, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	4a0b      	ldr	r2, [pc, #44]	@ (8000b70 <print_frame_over_uart_full+0xd4>)
 8000b42:	21a0      	movs	r1, #160	@ 0xa0
 8000b44:	480b      	ldr	r0, [pc, #44]	@ (8000b74 <print_frame_over_uart_full+0xd8>)
 8000b46:	f004 f977 	bl	8004e38 <sniprintf>
 8000b4a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (len > 0)
 8000b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	dd06      	ble.n	8000b60 <print_frame_over_uart_full+0xc4>
  {
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_line, (uint16_t)len, 100);
 8000b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	2364      	movs	r3, #100	@ 0x64
 8000b58:	4906      	ldr	r1, [pc, #24]	@ (8000b74 <print_frame_over_uart_full+0xd8>)
 8000b5a:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <print_frame_over_uart_full+0xdc>)
 8000b5c:	f002 ff6c 	bl	8003a38 <HAL_UART_Transmit>
  }
}
 8000b60:	bf00      	nop
 8000b62:	3730      	adds	r7, #48	@ 0x30
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40533333 	.word	0x40533333
 8000b6c:	457ff000 	.word	0x457ff000
 8000b70:	0800708c 	.word	0x0800708c
 8000b74:	200002bc 	.word	0x200002bc
 8000b78:	20000360 	.word	0x20000360

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b80:	f000 f8c4 	bl	8000d0c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b84:	f000 fae3 	bl	800114e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b88:	f000 f814 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8c:	f7ff fec0 	bl	8000910 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b90:	f7ff fea0 	bl	80008d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b94:	f7ff fd42 	bl	800061c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000b98:	f000 fa20 	bl	8000fdc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	4903      	ldr	r1, [pc, #12]	@ (8000bac <main+0x30>)
 8000ba0:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <main+0x34>)
 8000ba2:	f000 fb99 	bl	80012d8 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba6:	bf00      	nop
 8000ba8:	e7fd      	b.n	8000ba6 <main+0x2a>
 8000baa:	bf00      	nop
 8000bac:	20000298 	.word	0x20000298
 8000bb0:	200001f0 	.word	0x200001f0

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	@ 0x50
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2234      	movs	r2, #52	@ 0x34
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f004 f9b1 	bl	8004f2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <SystemClock_Config+0xb0>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bdc:	4a21      	ldr	r2, [pc, #132]	@ (8000c64 <SystemClock_Config+0xb0>)
 8000bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <SystemClock_Config+0xb0>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <SystemClock_Config+0xb4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c68 <SystemClock_Config+0xb4>)
 8000bfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <SystemClock_Config+0xb4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c10:	2301      	movs	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c14:	2310      	movs	r3, #16
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fdff 	bl	8002824 <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000c2c:	f000 f89a 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c30:	230f      	movs	r3, #15
 8000c32:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 f898 	bl	8002d80 <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c56:	f000 f885 	bl	8000d64 <Error_Handler>
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	3750      	adds	r7, #80	@ 0x50
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40007000 	.word	0x40007000

08000c6c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca8 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d10f      	bne.n	8000c9e <HAL_ADC_ConvHalfCpltCallback+0x32>
  {
      half_ready = 0;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2180      	movs	r1, #128	@ 0x80
 8000c88:	4809      	ldr	r0, [pc, #36]	@ (8000cb0 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000c8a:	f001 fdb1 	bl	80027f0 <HAL_GPIO_WritePin>
      print_frame_over_uart_half(&adc_buf[0],  "[HALF]");
 8000c8e:	4909      	ldr	r1, [pc, #36]	@ (8000cb4 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000c90:	4809      	ldr	r0, [pc, #36]	@ (8000cb8 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8000c92:	f7ff fe93 	bl	80009bc <print_frame_over_uart_half>
      HAL_Delay(1000);
 8000c96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c9a:	f000 fab5 	bl	8001208 <HAL_Delay>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40012000 	.word	0x40012000
 8000cac:	200002b8 	.word	0x200002b8
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	08007114 	.word	0x08007114
 8000cb8:	20000298 	.word	0x20000298

08000cbc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d10f      	bne.n	8000cee <HAL_ADC_ConvCpltCallback+0x32>
  {
	  full_ready = 0;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <HAL_ADC_ConvCpltCallback+0x40>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2180      	movs	r1, #128	@ 0x80
 8000cd8:	4809      	ldr	r0, [pc, #36]	@ (8000d00 <HAL_ADC_ConvCpltCallback+0x44>)
 8000cda:	f001 fd89 	bl	80027f0 <HAL_GPIO_WritePin>
	  print_frame_over_uart_full(&adc_buf[ADC_NUM_CHANNELS], "[FULL]");
 8000cde:	4909      	ldr	r1, [pc, #36]	@ (8000d04 <HAL_ADC_ConvCpltCallback+0x48>)
 8000ce0:	4809      	ldr	r0, [pc, #36]	@ (8000d08 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000ce2:	f7ff fedb 	bl	8000a9c <print_frame_over_uart_full>
	  HAL_Delay(1000);
 8000ce6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cea:	f000 fa8d 	bl	8001208 <HAL_Delay>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40012000 	.word	0x40012000
 8000cfc:	200002b9 	.word	0x200002b9
 8000d00:	40020400 	.word	0x40020400
 8000d04:	0800711c 	.word	0x0800711c
 8000d08:	200002a8 	.word	0x200002a8

08000d0c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d12:	463b      	mov	r3, r7
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d1e:	f000 ffcb 	bl	8001cb8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d22:	2301      	movs	r3, #1
 8000d24:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d2e:	231f      	movs	r3, #31
 8000d30:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d32:	2387      	movs	r3, #135	@ 0x87
 8000d34:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d42:	2301      	movs	r3, #1
 8000d44:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 ffe9 	bl	8001d28 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d56:	2004      	movs	r0, #4
 8000d58:	f000 ffc6 	bl	8001ce8 <HAL_MPU_Enable>

}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <Error_Handler+0x8>

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <HAL_MspInit+0x44>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000db4 <HAL_MspInit+0x44>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d82:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <HAL_MspInit+0x44>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <HAL_MspInit+0x44>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a08      	ldr	r2, [pc, #32]	@ (8000db4 <HAL_MspInit+0x44>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_MspInit+0x44>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000da6:	2005      	movs	r0, #5
 8000da8:	f000 ff44 	bl	8001c34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40023800 	.word	0x40023800

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <NMI_Handler+0x4>

08000dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <MemManage_Handler+0x4>

08000dd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <UsageFault_Handler+0x4>

08000de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0e:	f000 f9db 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e1c:	4802      	ldr	r0, [pc, #8]	@ (8000e28 <DMA2_Stream0_IRQHandler+0x10>)
 8000e1e:	f001 f8d1 	bl	8001fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000238 	.word	0x20000238

08000e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return 1;
 8000e30:	2301      	movs	r3, #1
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <_kill>:

int _kill(int pid, int sig)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e46:	f004 f8c3 	bl	8004fd0 <__errno>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2216      	movs	r2, #22
 8000e4e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <_exit>:

void _exit (int status)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ffe7 	bl	8000e3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e6e:	bf00      	nop
 8000e70:	e7fd      	b.n	8000e6e <_exit+0x12>

08000e72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	e00a      	b.n	8000e9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e84:	f3af 8000 	nop.w
 8000e88:	4601      	mov	r1, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1c5a      	adds	r2, r3, #1
 8000e8e:	60ba      	str	r2, [r7, #8]
 8000e90:	b2ca      	uxtb	r2, r1
 8000e92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	dbf0      	blt.n	8000e84 <_read+0x12>
  }

  return len;
 8000ea2:	687b      	ldr	r3, [r7, #4]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e009      	b.n	8000ed2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	60ba      	str	r2, [r7, #8]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	dbf1      	blt.n	8000ebe <_write+0x12>
  }
  return len;
 8000eda:	687b      	ldr	r3, [r7, #4]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_close>:

int _close(int file)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f0c:	605a      	str	r2, [r3, #4]
  return 0;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_isatty>:

int _isatty(int file)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f24:	2301      	movs	r3, #1
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b085      	sub	sp, #20
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f54:	4a14      	ldr	r2, [pc, #80]	@ (8000fa8 <_sbrk+0x5c>)
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <_sbrk+0x60>)
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f60:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d102      	bne.n	8000f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f68:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <_sbrk+0x64>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	@ (8000fb4 <_sbrk+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6e:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d207      	bcs.n	8000f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f7c:	f004 f828 	bl	8004fd0 <__errno>
 8000f80:	4603      	mov	r3, r0
 8000f82:	220c      	movs	r2, #12
 8000f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	e009      	b.n	8000fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f92:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	4a05      	ldr	r2, [pc, #20]	@ (8000fb0 <_sbrk+0x64>)
 8000f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20080000 	.word	0x20080000
 8000fac:	00000400 	.word	0x00000400
 8000fb0:	2000035c 	.word	0x2000035c
 8000fb4:	20000538 	.word	0x20000538

08000fb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <SystemInit+0x20>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc2:	4a05      	ldr	r2, [pc, #20]	@ (8000fd8 <SystemInit+0x20>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8000fe2:	4a15      	ldr	r2, [pc, #84]	@ (8001038 <MX_USART3_UART_Init+0x5c>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8000fe8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_USART3_UART_Init+0x58>)
 8001020:	f002 fcbc 	bl	800399c <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800102a:	f7ff fe9b 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000360 	.word	0x20000360
 8001038:	40004800 	.word	0x40004800

0800103c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0ae      	sub	sp, #184	@ 0xb8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2290      	movs	r2, #144	@ 0x90
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f003 ff64 	bl	8004f2a <memset>
  if(uartHandle->Instance==USART3)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a22      	ldr	r2, [pc, #136]	@ (80010f0 <HAL_UART_MspInit+0xb4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d13c      	bne.n	80010e6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800106c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001070:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001072:	2300      	movs	r3, #0
 8001074:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4618      	mov	r0, r3
 800107c:	f002 f866 	bl	800314c <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001086:	f7ff fe6d 	bl	8000d64 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <HAL_UART_MspInit+0xb8>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	4a19      	ldr	r2, [pc, #100]	@ (80010f4 <HAL_UART_MspInit+0xb8>)
 8001090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001094:	6413      	str	r3, [r2, #64]	@ 0x40
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <HAL_UART_MspInit+0xb8>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <HAL_UART_MspInit+0xb8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a13      	ldr	r2, [pc, #76]	@ (80010f4 <HAL_UART_MspInit+0xb8>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <HAL_UART_MspInit+0xb8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d4:	2307      	movs	r3, #7
 80010d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010da:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <HAL_UART_MspInit+0xbc>)
 80010e2:	f001 f9d9 	bl	8002498 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010e6:	bf00      	nop
 80010e8:	37b8      	adds	r7, #184	@ 0xb8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40004800 	.word	0x40004800
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020c00 	.word	0x40020c00

080010fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001134 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001100:	f7ff ff5a 	bl	8000fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001104:	480c      	ldr	r0, [pc, #48]	@ (8001138 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001106:	490d      	ldr	r1, [pc, #52]	@ (800113c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001108:	4a0d      	ldr	r2, [pc, #52]	@ (8001140 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800111c:	4c0a      	ldr	r4, [pc, #40]	@ (8001148 <LoopFillZerobss+0x22>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800112a:	f003 ff57 	bl	8004fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112e:	f7ff fd25 	bl	8000b7c <main>
  bx  lr    
 8001132:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001134:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001140:	080074d4 	.word	0x080074d4
  ldr r2, =_sbss
 8001144:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001148:	20000538 	.word	0x20000538

0800114c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC_IRQHandler>

0800114e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001152:	2003      	movs	r0, #3
 8001154:	f000 fd6e 	bl	8001c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001158:	2000      	movs	r0, #0
 800115a:	f000 f805 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800115e:	f7ff fe07 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 fd89 	bl	8001c9e <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f000 fd51 	bl	8001c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	@ (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008
 80011ec:	200003e8 	.word	0x200003e8

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200003e8 	.word	0x200003e8

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff ffee 	bl	80011f0 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffde 	bl	80011f0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008

08001250 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e031      	b.n	80012ca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	2b00      	cmp	r3, #0
 800126c:	d109      	bne.n	8001282 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fa88 	bl	8000784 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	2b00      	cmp	r3, #0
 800128c:	d116      	bne.n	80012bc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <HAL_ADC_Init+0x84>)
 8001294:	4013      	ands	r3, r2
 8001296:	f043 0202 	orr.w	r2, r3, #2
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 fa7c 	bl	800179c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	f023 0303 	bic.w	r3, r3, #3
 80012b2:	f043 0201 	orr.w	r2, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80012ba:	e001      	b.n	80012c0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	ffffeefd 	.word	0xffffeefd

080012d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_Start_DMA+0x22>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e0d6      	b.n	80014a8 <HAL_ADC_Start_DMA+0x1d0>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b01      	cmp	r3, #1
 800130e:	d018      	beq.n	8001342 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001320:	4b63      	ldr	r3, [pc, #396]	@ (80014b0 <HAL_ADC_Start_DMA+0x1d8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a63      	ldr	r2, [pc, #396]	@ (80014b4 <HAL_ADC_Start_DMA+0x1dc>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9a      	lsrs	r2, r3, #18
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8001334:	e002      	b.n	800133c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	3b01      	subs	r3, #1
 800133a:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f9      	bne.n	8001336 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b01      	cmp	r3, #1
 800134e:	f040 809e 	bne.w	800148e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001356:	4b58      	ldr	r3, [pc, #352]	@ (80014b8 <HAL_ADC_Start_DMA+0x1e0>)
 8001358:	4013      	ands	r3, r2
 800135a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001378:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800138c:	d106      	bne.n	800139c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	f023 0206 	bic.w	r2, r3, #6
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	645a      	str	r2, [r3, #68]	@ 0x44
 800139a:	e002      	b.n	80013a2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2200      	movs	r2, #0
 80013a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ae:	4a43      	ldr	r2, [pc, #268]	@ (80014bc <HAL_ADC_Start_DMA+0x1e4>)
 80013b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013b6:	4a42      	ldr	r2, [pc, #264]	@ (80014c0 <HAL_ADC_Start_DMA+0x1e8>)
 80013b8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013be:	4a41      	ldr	r2, [pc, #260]	@ (80014c4 <HAL_ADC_Start_DMA+0x1ec>)
 80013c0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80013ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80013da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	334c      	adds	r3, #76	@ 0x4c
 80013f6:	4619      	mov	r1, r3
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f000 fd82 	bl	8001f04 <HAL_DMA_Start_IT>
 8001400:	4603      	mov	r3, r0
 8001402:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001404:	4b30      	ldr	r3, [pc, #192]	@ (80014c8 <HAL_ADC_Start_DMA+0x1f0>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10f      	bne.n	8001430 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d143      	bne.n	80014a6 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	e03a      	b.n	80014a6 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a25      	ldr	r2, [pc, #148]	@ (80014cc <HAL_ADC_Start_DMA+0x1f4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d10e      	bne.n	8001458 <HAL_ADC_Start_DMA+0x180>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d107      	bne.n	8001458 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001456:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001458:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <HAL_ADC_Start_DMA+0x1f0>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	2b00      	cmp	r3, #0
 8001462:	d120      	bne.n	80014a6 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	@ (80014d0 <HAL_ADC_Start_DMA+0x1f8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d11b      	bne.n	80014a6 <HAL_ADC_Start_DMA+0x1ce>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d114      	bne.n	80014a6 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	e00b      	b.n	80014a6 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f043 0210 	orr.w	r2, r3, #16
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	f043 0201 	orr.w	r2, r3, #1
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000000 	.word	0x20000000
 80014b4:	431bde83 	.word	0x431bde83
 80014b8:	fffff8fe 	.word	0xfffff8fe
 80014bc:	08001991 	.word	0x08001991
 80014c0:	08001a4b 	.word	0x08001a4b
 80014c4:	08001a67 	.word	0x08001a67
 80014c8:	40012300 	.word	0x40012300
 80014cc:	40012000 	.word	0x40012000
 80014d0:	40012200 	.word	0x40012200

080014d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x1c>
 8001500:	2302      	movs	r3, #2
 8001502:	e13a      	b.n	800177a <HAL_ADC_ConfigChannel+0x292>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b09      	cmp	r3, #9
 8001512:	d93a      	bls.n	800158a <HAL_ADC_ConfigChannel+0xa2>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800151c:	d035      	beq.n	800158a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68d9      	ldr	r1, [r3, #12]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	b29b      	uxth	r3, r3
 800152a:	461a      	mov	r2, r3
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	3b1e      	subs	r3, #30
 8001534:	2207      	movs	r2, #7
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	400a      	ands	r2, r1
 8001542:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a8f      	ldr	r2, [pc, #572]	@ (8001788 <HAL_ADC_ConfigChannel+0x2a0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d10a      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68d9      	ldr	r1, [r3, #12]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	061a      	lsls	r2, r3, #24
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001562:	e039      	b.n	80015d8 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68d9      	ldr	r1, [r3, #12]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	4603      	mov	r3, r0
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4403      	add	r3, r0
 800157c:	3b1e      	subs	r3, #30
 800157e:	409a      	lsls	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001588:	e026      	b.n	80015d8 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6919      	ldr	r1, [r3, #16]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	b29b      	uxth	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	f003 031f 	and.w	r3, r3, #31
 80015a2:	2207      	movs	r2, #7
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43da      	mvns	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	400a      	ands	r2, r1
 80015b0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6919      	ldr	r1, [r3, #16]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	4603      	mov	r3, r0
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4403      	add	r3, r0
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	409a      	lsls	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b06      	cmp	r3, #6
 80015de:	d824      	bhi.n	800162a <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	3b05      	subs	r3, #5
 80015f2:	221f      	movs	r2, #31
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43da      	mvns	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	400a      	ands	r2, r1
 8001600:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	3b05      	subs	r3, #5
 800161c:	fa00 f203 	lsl.w	r2, r0, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	635a      	str	r2, [r3, #52]	@ 0x34
 8001628:	e04c      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b0c      	cmp	r3, #12
 8001630:	d824      	bhi.n	800167c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	3b23      	subs	r3, #35	@ 0x23
 8001644:	221f      	movs	r2, #31
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	400a      	ands	r2, r1
 8001652:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	3b23      	subs	r3, #35	@ 0x23
 800166e:	fa00 f203 	lsl.w	r2, r0, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	631a      	str	r2, [r3, #48]	@ 0x30
 800167a:	e023      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	3b41      	subs	r3, #65	@ 0x41
 800168e:	221f      	movs	r2, #31
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43da      	mvns	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	400a      	ands	r2, r1
 800169c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	3b41      	subs	r3, #65	@ 0x41
 80016b8:	fa00 f203 	lsl.w	r2, r0, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a30      	ldr	r2, [pc, #192]	@ (800178c <HAL_ADC_ConfigChannel+0x2a4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10a      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1fc>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80016d6:	d105      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80016d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001790 <HAL_ADC_ConfigChannel+0x2a8>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a2c      	ldr	r2, [pc, #176]	@ (8001790 <HAL_ADC_ConfigChannel+0x2a8>)
 80016de:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80016e2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a28      	ldr	r2, [pc, #160]	@ (800178c <HAL_ADC_ConfigChannel+0x2a4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d10f      	bne.n	800170e <HAL_ADC_ConfigChannel+0x226>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b12      	cmp	r3, #18
 80016f4:	d10b      	bne.n	800170e <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80016f6:	4b26      	ldr	r3, [pc, #152]	@ (8001790 <HAL_ADC_ConfigChannel+0x2a8>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a25      	ldr	r2, [pc, #148]	@ (8001790 <HAL_ADC_ConfigChannel+0x2a8>)
 80016fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001700:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001702:	4b23      	ldr	r3, [pc, #140]	@ (8001790 <HAL_ADC_ConfigChannel+0x2a8>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4a22      	ldr	r2, [pc, #136]	@ (8001790 <HAL_ADC_ConfigChannel+0x2a8>)
 8001708:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800170c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <HAL_ADC_ConfigChannel+0x2a4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d12b      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x288>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a1a      	ldr	r2, [pc, #104]	@ (8001788 <HAL_ADC_ConfigChannel+0x2a0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d003      	beq.n	800172a <HAL_ADC_ConfigChannel+0x242>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b11      	cmp	r3, #17
 8001728:	d122      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_ADC_ConfigChannel+0x2a8>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a18      	ldr	r2, [pc, #96]	@ (8001790 <HAL_ADC_ConfigChannel+0x2a8>)
 8001730:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001734:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001736:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <HAL_ADC_ConfigChannel+0x2a8>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4a15      	ldr	r2, [pc, #84]	@ (8001790 <HAL_ADC_ConfigChannel+0x2a8>)
 800173c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001740:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a10      	ldr	r2, [pc, #64]	@ (8001788 <HAL_ADC_ConfigChannel+0x2a0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d111      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <HAL_ADC_ConfigChannel+0x2ac>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a11      	ldr	r2, [pc, #68]	@ (8001798 <HAL_ADC_ConfigChannel+0x2b0>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0c9a      	lsrs	r2, r3, #18
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001762:	e002      	b.n	800176a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3b01      	subs	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f9      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	10000012 	.word	0x10000012
 800178c:	40012000 	.word	0x40012000
 8001790:	40012300 	.word	0x40012300
 8001794:	20000000 	.word	0x20000000
 8001798:	431bde83 	.word	0x431bde83

0800179c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80017a4:	4b78      	ldr	r3, [pc, #480]	@ (8001988 <ADC_Init+0x1ec>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4a77      	ldr	r2, [pc, #476]	@ (8001988 <ADC_Init+0x1ec>)
 80017aa:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80017ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80017b0:	4b75      	ldr	r3, [pc, #468]	@ (8001988 <ADC_Init+0x1ec>)
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4973      	ldr	r1, [pc, #460]	@ (8001988 <ADC_Init+0x1ec>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	021a      	lsls	r2, r3, #8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80017f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001812:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6899      	ldr	r1, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182a:	4a58      	ldr	r2, [pc, #352]	@ (800198c <ADC_Init+0x1f0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d022      	beq.n	8001876 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800183e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6899      	ldr	r1, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001860:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6899      	ldr	r1, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	e00f      	b.n	8001896 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001884:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001894:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0202 	bic.w	r2, r2, #2
 80018a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6899      	ldr	r1, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	005a      	lsls	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d01b      	beq.n	80018fc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80018e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6859      	ldr	r1, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	3b01      	subs	r3, #1
 80018f0:	035a      	lsls	r2, r3, #13
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	e007      	b.n	800190c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800190a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800191a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	3b01      	subs	r3, #1
 8001928:	051a      	lsls	r2, r3, #20
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6899      	ldr	r1, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800194e:	025a      	lsls	r2, r3, #9
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6899      	ldr	r1, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	029a      	lsls	r2, r3, #10
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40012300 	.word	0x40012300
 800198c:	0f000001 	.word	0x0f000001

08001990 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800199c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d13c      	bne.n	8001a24 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d12b      	bne.n	8001a1c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d127      	bne.n	8001a1c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d119      	bne.n	8001a1c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0220 	bic.w	r2, r2, #32
 80019f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f7ff f94d 	bl	8000cbc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a22:	e00e      	b.n	8001a42 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f7ff fd4f 	bl	80014d4 <HAL_ADC_ErrorCallback>
}
 8001a36:	e004      	b.n	8001a42 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	4798      	blx	r3
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a56:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f7ff f907 	bl	8000c6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a72:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2240      	movs	r2, #64	@ 0x40
 8001a78:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	f043 0204 	orr.w	r2, r3, #4
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff fd24 	bl	80014d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	@ (8001ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00
 8001ad8:	05fa0000 	.word	0x05fa0000

08001adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	@ (8001af4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 0307 	and.w	r3, r3, #7
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db0b      	blt.n	8001b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	4907      	ldr	r1, [pc, #28]	@ (8001b30 <__NVIC_EnableIRQ+0x38>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	2001      	movs	r0, #1
 8001b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000e100 	.word	0xe000e100

08001b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	6039      	str	r1, [r7, #0]
 8001b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	db0a      	blt.n	8001b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	490c      	ldr	r1, [pc, #48]	@ (8001b80 <__NVIC_SetPriority+0x4c>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	0112      	lsls	r2, r2, #4
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b5c:	e00a      	b.n	8001b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4908      	ldr	r1, [pc, #32]	@ (8001b84 <__NVIC_SetPriority+0x50>)
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	3b04      	subs	r3, #4
 8001b6c:	0112      	lsls	r2, r2, #4
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	440b      	add	r3, r1
 8001b72:	761a      	strb	r2, [r3, #24]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000e100 	.word	0xe000e100
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	@ 0x24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	bf28      	it	cs
 8001ba6:	2304      	movcs	r3, #4
 8001ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3304      	adds	r3, #4
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d902      	bls.n	8001bb8 <NVIC_EncodePriority+0x30>
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3b03      	subs	r3, #3
 8001bb6:	e000      	b.n	8001bba <NVIC_EncodePriority+0x32>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	401a      	ands	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	43d9      	mvns	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	4313      	orrs	r3, r2
         );
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3724      	adds	r7, #36	@ 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c00:	d301      	bcc.n	8001c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00f      	b.n	8001c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c06:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <SysTick_Config+0x40>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0e:	210f      	movs	r1, #15
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f7ff ff8e 	bl	8001b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c18:	4b05      	ldr	r3, [pc, #20]	@ (8001c30 <SysTick_Config+0x40>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1e:	4b04      	ldr	r3, [pc, #16]	@ (8001c30 <SysTick_Config+0x40>)
 8001c20:	2207      	movs	r2, #7
 8001c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	e000e010 	.word	0xe000e010

08001c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff29 	bl	8001a94 <__NVIC_SetPriorityGrouping>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5c:	f7ff ff3e 	bl	8001adc <__NVIC_GetPriorityGrouping>
 8001c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f7ff ff8e 	bl	8001b88 <NVIC_EncodePriority>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff5d 	bl	8001b34 <__NVIC_SetPriority>
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff31 	bl	8001af8 <__NVIC_EnableIRQ>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ffa2 	bl	8001bf0 <SysTick_Config>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001cbc:	f3bf 8f5f 	dmb	sy
}
 8001cc0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001cc2:	4b07      	ldr	r3, [pc, #28]	@ (8001ce0 <HAL_MPU_Disable+0x28>)
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	4a06      	ldr	r2, [pc, #24]	@ (8001ce0 <HAL_MPU_Disable+0x28>)
 8001cc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ccc:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001cce:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_MPU_Disable+0x2c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	605a      	str	r2, [r3, #4]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00
 8001ce4:	e000ed90 	.word	0xe000ed90

08001ce8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d20 <HAL_MPU_Enable+0x38>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <HAL_MPU_Enable+0x3c>)
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	4a09      	ldr	r2, [pc, #36]	@ (8001d24 <HAL_MPU_Enable+0x3c>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d04:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d06:	f3bf 8f4f 	dsb	sy
}
 8001d0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0c:	f3bf 8f6f 	isb	sy
}
 8001d10:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed90 	.word	0xe000ed90
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	785a      	ldrb	r2, [r3, #1]
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <HAL_MPU_ConfigRegion+0x7c>)
 8001d36:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d38:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <HAL_MPU_ConfigRegion+0x7c>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	4a19      	ldr	r2, [pc, #100]	@ (8001da4 <HAL_MPU_ConfigRegion+0x7c>)
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d44:	4a17      	ldr	r2, [pc, #92]	@ (8001da4 <HAL_MPU_ConfigRegion+0x7c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7b1b      	ldrb	r3, [r3, #12]
 8001d50:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7adb      	ldrb	r3, [r3, #11]
 8001d56:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7a9b      	ldrb	r3, [r3, #10]
 8001d5e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7b5b      	ldrb	r3, [r3, #13]
 8001d66:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7b9b      	ldrb	r3, [r3, #14]
 8001d6e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7bdb      	ldrb	r3, [r3, #15]
 8001d76:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7a5b      	ldrb	r3, [r3, #9]
 8001d7e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7a1b      	ldrb	r3, [r3, #8]
 8001d86:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d88:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	7812      	ldrb	r2, [r2, #0]
 8001d8e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d90:	4a04      	ldr	r2, [pc, #16]	@ (8001da4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d92:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d94:	6113      	str	r3, [r2, #16]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed90 	.word	0xe000ed90

08001da8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff fa1c 	bl	80011f0 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e099      	b.n	8001ef8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de4:	e00f      	b.n	8001e06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de6:	f7ff fa03 	bl	80011f0 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d908      	bls.n	8001e06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e078      	b.n	8001ef8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1e8      	bne.n	8001de6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4b38      	ldr	r3, [pc, #224]	@ (8001f00 <HAL_DMA_Init+0x158>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d107      	bne.n	8001e70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f023 0307 	bic.w	r3, r3, #7
 8001e86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d117      	bne.n	8001eca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00e      	beq.n	8001eca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fa77 	bl	80023a0 <DMA_CheckFifoParam>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2240      	movs	r2, #64	@ 0x40
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e016      	b.n	8001ef8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fa2e 	bl	8002334 <DMA_CalcBaseAndBitshift>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee0:	223f      	movs	r2, #63	@ 0x3f
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	e010803f 	.word	0xe010803f

08001f04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_DMA_Start_IT+0x26>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e048      	b.n	8001fbc <HAL_DMA_Start_IT+0xb8>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d137      	bne.n	8001fae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2202      	movs	r2, #2
 8001f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f9c0 	bl	80022d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5c:	223f      	movs	r2, #63	@ 0x3f
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0216 	orr.w	r2, r2, #22
 8001f72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f82:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d007      	beq.n	8001f9c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0208 	orr.w	r2, r2, #8
 8001f9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e005      	b.n	8001fba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001fd0:	4b8e      	ldr	r3, [pc, #568]	@ (800220c <HAL_DMA_IRQHandler+0x248>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a8e      	ldr	r2, [pc, #568]	@ (8002210 <HAL_DMA_IRQHandler+0x24c>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	0a9b      	lsrs	r3, r3, #10
 8001fdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fee:	2208      	movs	r2, #8
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d01a      	beq.n	8002030 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d013      	beq.n	8002030 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0204 	bic.w	r2, r2, #4
 8002016:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201c:	2208      	movs	r2, #8
 800201e:	409a      	lsls	r2, r3
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002028:	f043 0201 	orr.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002034:	2201      	movs	r2, #1
 8002036:	409a      	lsls	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d012      	beq.n	8002066 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00b      	beq.n	8002066 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002052:	2201      	movs	r2, #1
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205e:	f043 0202 	orr.w	r2, r3, #2
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206a:	2204      	movs	r2, #4
 800206c:	409a      	lsls	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d012      	beq.n	800209c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00b      	beq.n	800209c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002088:	2204      	movs	r2, #4
 800208a:	409a      	lsls	r2, r3
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002094:	f043 0204 	orr.w	r2, r3, #4
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a0:	2210      	movs	r2, #16
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d043      	beq.n	8002134 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d03c      	beq.n	8002134 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020be:	2210      	movs	r2, #16
 80020c0:	409a      	lsls	r2, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d018      	beq.n	8002106 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d108      	bne.n	80020f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d024      	beq.n	8002134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	4798      	blx	r3
 80020f2:	e01f      	b.n	8002134 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01b      	beq.n	8002134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
 8002104:	e016      	b.n	8002134 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d107      	bne.n	8002124 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0208 	bic.w	r2, r2, #8
 8002122:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002138:	2220      	movs	r2, #32
 800213a:	409a      	lsls	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 808f 	beq.w	8002264 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 8087 	beq.w	8002264 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215a:	2220      	movs	r2, #32
 800215c:	409a      	lsls	r2, r3
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b05      	cmp	r3, #5
 800216c:	d136      	bne.n	80021dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0216 	bic.w	r2, r2, #22
 800217c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800218c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d103      	bne.n	800219e <HAL_DMA_IRQHandler+0x1da>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219a:	2b00      	cmp	r3, #0
 800219c:	d007      	beq.n	80021ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0208 	bic.w	r2, r2, #8
 80021ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b2:	223f      	movs	r2, #63	@ 0x3f
 80021b4:	409a      	lsls	r2, r3
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d07e      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
        }
        return;
 80021da:	e079      	b.n	80022d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d01d      	beq.n	8002226 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10d      	bne.n	8002214 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d031      	beq.n	8002264 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4798      	blx	r3
 8002208:	e02c      	b.n	8002264 <HAL_DMA_IRQHandler+0x2a0>
 800220a:	bf00      	nop
 800220c:	20000000 	.word	0x20000000
 8002210:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002218:	2b00      	cmp	r3, #0
 800221a:	d023      	beq.n	8002264 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
 8002224:	e01e      	b.n	8002264 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10f      	bne.n	8002254 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0210 	bic.w	r2, r2, #16
 8002242:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002268:	2b00      	cmp	r3, #0
 800226a:	d032      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d022      	beq.n	80022be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2205      	movs	r2, #5
 800227c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	3301      	adds	r3, #1
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	429a      	cmp	r2, r3
 800229a:	d307      	bcc.n	80022ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f2      	bne.n	8002290 <HAL_DMA_IRQHandler+0x2cc>
 80022aa:	e000      	b.n	80022ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
 80022ce:	e000      	b.n	80022d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80022d0:	bf00      	nop
    }
  }
}
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b40      	cmp	r3, #64	@ 0x40
 8002304:	d108      	bne.n	8002318 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002316:	e007      	b.n	8002328 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	60da      	str	r2, [r3, #12]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3b10      	subs	r3, #16
 8002344:	4a13      	ldr	r2, [pc, #76]	@ (8002394 <DMA_CalcBaseAndBitshift+0x60>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800234e:	4a12      	ldr	r2, [pc, #72]	@ (8002398 <DMA_CalcBaseAndBitshift+0x64>)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4413      	add	r3, r2
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d908      	bls.n	8002374 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <DMA_CalcBaseAndBitshift+0x68>)
 800236a:	4013      	ands	r3, r2
 800236c:	1d1a      	adds	r2, r3, #4
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	659a      	str	r2, [r3, #88]	@ 0x58
 8002372:	e006      	b.n	8002382 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b08      	ldr	r3, [pc, #32]	@ (800239c <DMA_CalcBaseAndBitshift+0x68>)
 800237c:	4013      	ands	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	aaaaaaab 	.word	0xaaaaaaab
 8002398:	08007144 	.word	0x08007144
 800239c:	fffffc00 	.word	0xfffffc00

080023a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d11f      	bne.n	80023fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d856      	bhi.n	800246e <DMA_CheckFifoParam+0xce>
 80023c0:	a201      	add	r2, pc, #4	@ (adr r2, 80023c8 <DMA_CheckFifoParam+0x28>)
 80023c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c6:	bf00      	nop
 80023c8:	080023d9 	.word	0x080023d9
 80023cc:	080023eb 	.word	0x080023eb
 80023d0:	080023d9 	.word	0x080023d9
 80023d4:	0800246f 	.word	0x0800246f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d046      	beq.n	8002472 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e8:	e043      	b.n	8002472 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023f2:	d140      	bne.n	8002476 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f8:	e03d      	b.n	8002476 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002402:	d121      	bne.n	8002448 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d837      	bhi.n	800247a <DMA_CheckFifoParam+0xda>
 800240a:	a201      	add	r2, pc, #4	@ (adr r2, 8002410 <DMA_CheckFifoParam+0x70>)
 800240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002410:	08002421 	.word	0x08002421
 8002414:	08002427 	.word	0x08002427
 8002418:	08002421 	.word	0x08002421
 800241c:	08002439 	.word	0x08002439
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
      break;
 8002424:	e030      	b.n	8002488 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d025      	beq.n	800247e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002436:	e022      	b.n	800247e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002440:	d11f      	bne.n	8002482 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002446:	e01c      	b.n	8002482 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d903      	bls.n	8002456 <DMA_CheckFifoParam+0xb6>
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d003      	beq.n	800245c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002454:	e018      	b.n	8002488 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
      break;
 800245a:	e015      	b.n	8002488 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00e      	beq.n	8002486 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
      break;
 800246c:	e00b      	b.n	8002486 <DMA_CheckFifoParam+0xe6>
      break;
 800246e:	bf00      	nop
 8002470:	e00a      	b.n	8002488 <DMA_CheckFifoParam+0xe8>
      break;
 8002472:	bf00      	nop
 8002474:	e008      	b.n	8002488 <DMA_CheckFifoParam+0xe8>
      break;
 8002476:	bf00      	nop
 8002478:	e006      	b.n	8002488 <DMA_CheckFifoParam+0xe8>
      break;
 800247a:	bf00      	nop
 800247c:	e004      	b.n	8002488 <DMA_CheckFifoParam+0xe8>
      break;
 800247e:	bf00      	nop
 8002480:	e002      	b.n	8002488 <DMA_CheckFifoParam+0xe8>
      break;   
 8002482:	bf00      	nop
 8002484:	e000      	b.n	8002488 <DMA_CheckFifoParam+0xe8>
      break;
 8002486:	bf00      	nop
    }
  } 
  
  return status; 
 8002488:	7bfb      	ldrb	r3, [r7, #15]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	@ 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e175      	b.n	80027a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f040 8164 	bne.w	800279e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d005      	beq.n	80024ee <HAL_GPIO_Init+0x56>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d130      	bne.n	8002550 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	2203      	movs	r2, #3
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 0201 	and.w	r2, r3, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b03      	cmp	r3, #3
 800255a:	d017      	beq.n	800258c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d123      	bne.n	80025e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	08da      	lsrs	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3208      	adds	r2, #8
 80025a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0203 	and.w	r2, r3, #3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80be 	beq.w	800279e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	4b66      	ldr	r3, [pc, #408]	@ (80027bc <HAL_GPIO_Init+0x324>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	4a65      	ldr	r2, [pc, #404]	@ (80027bc <HAL_GPIO_Init+0x324>)
 8002628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800262c:	6453      	str	r3, [r2, #68]	@ 0x44
 800262e:	4b63      	ldr	r3, [pc, #396]	@ (80027bc <HAL_GPIO_Init+0x324>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800263a:	4a61      	ldr	r2, [pc, #388]	@ (80027c0 <HAL_GPIO_Init+0x328>)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	3302      	adds	r3, #2
 8002642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	220f      	movs	r2, #15
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a58      	ldr	r2, [pc, #352]	@ (80027c4 <HAL_GPIO_Init+0x32c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d037      	beq.n	80026d6 <HAL_GPIO_Init+0x23e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a57      	ldr	r2, [pc, #348]	@ (80027c8 <HAL_GPIO_Init+0x330>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d031      	beq.n	80026d2 <HAL_GPIO_Init+0x23a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a56      	ldr	r2, [pc, #344]	@ (80027cc <HAL_GPIO_Init+0x334>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d02b      	beq.n	80026ce <HAL_GPIO_Init+0x236>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a55      	ldr	r2, [pc, #340]	@ (80027d0 <HAL_GPIO_Init+0x338>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d025      	beq.n	80026ca <HAL_GPIO_Init+0x232>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a54      	ldr	r2, [pc, #336]	@ (80027d4 <HAL_GPIO_Init+0x33c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01f      	beq.n	80026c6 <HAL_GPIO_Init+0x22e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a53      	ldr	r2, [pc, #332]	@ (80027d8 <HAL_GPIO_Init+0x340>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d019      	beq.n	80026c2 <HAL_GPIO_Init+0x22a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a52      	ldr	r2, [pc, #328]	@ (80027dc <HAL_GPIO_Init+0x344>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0x226>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a51      	ldr	r2, [pc, #324]	@ (80027e0 <HAL_GPIO_Init+0x348>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00d      	beq.n	80026ba <HAL_GPIO_Init+0x222>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a50      	ldr	r2, [pc, #320]	@ (80027e4 <HAL_GPIO_Init+0x34c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_GPIO_Init+0x21e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4f      	ldr	r2, [pc, #316]	@ (80027e8 <HAL_GPIO_Init+0x350>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_GPIO_Init+0x21a>
 80026ae:	2309      	movs	r3, #9
 80026b0:	e012      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026b2:	230a      	movs	r3, #10
 80026b4:	e010      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026b6:	2308      	movs	r3, #8
 80026b8:	e00e      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026ba:	2307      	movs	r3, #7
 80026bc:	e00c      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026be:	2306      	movs	r3, #6
 80026c0:	e00a      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026c2:	2305      	movs	r3, #5
 80026c4:	e008      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026c6:	2304      	movs	r3, #4
 80026c8:	e006      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026ca:	2303      	movs	r3, #3
 80026cc:	e004      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e002      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026d6:	2300      	movs	r3, #0
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	f002 0203 	and.w	r2, r2, #3
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	4093      	lsls	r3, r2
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026e8:	4935      	ldr	r1, [pc, #212]	@ (80027c0 <HAL_GPIO_Init+0x328>)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	089b      	lsrs	r3, r3, #2
 80026ee:	3302      	adds	r3, #2
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f6:	4b3d      	ldr	r3, [pc, #244]	@ (80027ec <HAL_GPIO_Init+0x354>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800271a:	4a34      	ldr	r2, [pc, #208]	@ (80027ec <HAL_GPIO_Init+0x354>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002720:	4b32      	ldr	r3, [pc, #200]	@ (80027ec <HAL_GPIO_Init+0x354>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002744:	4a29      	ldr	r2, [pc, #164]	@ (80027ec <HAL_GPIO_Init+0x354>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800274a:	4b28      	ldr	r3, [pc, #160]	@ (80027ec <HAL_GPIO_Init+0x354>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800276e:	4a1f      	ldr	r2, [pc, #124]	@ (80027ec <HAL_GPIO_Init+0x354>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002774:	4b1d      	ldr	r3, [pc, #116]	@ (80027ec <HAL_GPIO_Init+0x354>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002798:	4a14      	ldr	r2, [pc, #80]	@ (80027ec <HAL_GPIO_Init+0x354>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3301      	adds	r3, #1
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	f67f ae86 	bls.w	80024b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3724      	adds	r7, #36	@ 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40013800 	.word	0x40013800
 80027c4:	40020000 	.word	0x40020000
 80027c8:	40020400 	.word	0x40020400
 80027cc:	40020800 	.word	0x40020800
 80027d0:	40020c00 	.word	0x40020c00
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40021400 	.word	0x40021400
 80027dc:	40021800 	.word	0x40021800
 80027e0:	40021c00 	.word	0x40021c00
 80027e4:	40022000 	.word	0x40022000
 80027e8:	40022400 	.word	0x40022400
 80027ec:	40013c00 	.word	0x40013c00

080027f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
 80027fc:	4613      	mov	r3, r2
 80027fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002800:	787b      	ldrb	r3, [r7, #1]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002806:	887a      	ldrh	r2, [r7, #2]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800280c:	e003      	b.n	8002816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800280e:	887b      	ldrh	r3, [r7, #2]
 8002810:	041a      	lsls	r2, r3, #16
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	619a      	str	r2, [r3, #24]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800282c:	2300      	movs	r3, #0
 800282e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e29b      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8087 	beq.w	8002956 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002848:	4b96      	ldr	r3, [pc, #600]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b04      	cmp	r3, #4
 8002852:	d00c      	beq.n	800286e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002854:	4b93      	ldr	r3, [pc, #588]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d112      	bne.n	8002886 <HAL_RCC_OscConfig+0x62>
 8002860:	4b90      	ldr	r3, [pc, #576]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002868:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800286c:	d10b      	bne.n	8002886 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286e:	4b8d      	ldr	r3, [pc, #564]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d06c      	beq.n	8002954 <HAL_RCC_OscConfig+0x130>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d168      	bne.n	8002954 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e275      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x7a>
 8002890:	4b84      	ldr	r3, [pc, #528]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a83      	ldr	r2, [pc, #524]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	e02e      	b.n	80028fc <HAL_RCC_OscConfig+0xd8>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x9c>
 80028a6:	4b7f      	ldr	r3, [pc, #508]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a7e      	ldr	r2, [pc, #504]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a7b      	ldr	r2, [pc, #492]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e01d      	b.n	80028fc <HAL_RCC_OscConfig+0xd8>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0xc0>
 80028ca:	4b76      	ldr	r3, [pc, #472]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a75      	ldr	r2, [pc, #468]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b73      	ldr	r3, [pc, #460]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a72      	ldr	r2, [pc, #456]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0xd8>
 80028e4:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a6b      	ldr	r2, [pc, #428]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe fc74 	bl	80011f0 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe fc70 	bl	80011f0 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	@ 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e229      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	4b61      	ldr	r3, [pc, #388]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0xe8>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fc60 	bl	80011f0 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe fc5c 	bl	80011f0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	@ 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e215      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	4b57      	ldr	r3, [pc, #348]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x110>
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d069      	beq.n	8002a36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002962:	4b50      	ldr	r3, [pc, #320]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296e:	4b4d      	ldr	r3, [pc, #308]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b08      	cmp	r3, #8
 8002978:	d11c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x190>
 800297a:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d116      	bne.n	80029b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	4b47      	ldr	r3, [pc, #284]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x17a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e1e9      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b41      	ldr	r3, [pc, #260]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	493d      	ldr	r1, [pc, #244]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	e040      	b.n	8002a36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d023      	beq.n	8002a04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029bc:	4b39      	ldr	r3, [pc, #228]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a38      	ldr	r2, [pc, #224]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe fc12 	bl	80011f0 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d0:	f7fe fc0e 	bl	80011f0 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1c7      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	4b30      	ldr	r3, [pc, #192]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ee:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4929      	ldr	r1, [pc, #164]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]
 8002a02:	e018      	b.n	8002a36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a04:	4b27      	ldr	r3, [pc, #156]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a26      	ldr	r2, [pc, #152]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fbee 	bl	80011f0 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a18:	f7fe fbea 	bl	80011f0 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e1a3      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d038      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d019      	beq.n	8002a7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4a:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a4e:	4a15      	ldr	r2, [pc, #84]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a56:	f7fe fbcb 	bl	80011f0 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5e:	f7fe fbc7 	bl	80011f0 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e180      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a70:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x23a>
 8002a7c:	e01a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7e:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a82:	4a08      	ldr	r2, [pc, #32]	@ (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fbb1 	bl	80011f0 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a92:	f7fe fbad 	bl	80011f0 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d903      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e166      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
 8002aa4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	4b92      	ldr	r3, [pc, #584]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ee      	bne.n	8002a92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80a4 	beq.w	8002c0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac2:	4b8c      	ldr	r3, [pc, #560]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10d      	bne.n	8002aea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	4b89      	ldr	r3, [pc, #548]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	4a88      	ldr	r2, [pc, #544]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ada:	4b86      	ldr	r3, [pc, #536]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aea:	4b83      	ldr	r3, [pc, #524]	@ (8002cf8 <HAL_RCC_OscConfig+0x4d4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d118      	bne.n	8002b28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002af6:	4b80      	ldr	r3, [pc, #512]	@ (8002cf8 <HAL_RCC_OscConfig+0x4d4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a7f      	ldr	r2, [pc, #508]	@ (8002cf8 <HAL_RCC_OscConfig+0x4d4>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b02:	f7fe fb75 	bl	80011f0 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0a:	f7fe fb71 	bl	80011f0 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b64      	cmp	r3, #100	@ 0x64
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e12a      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b1c:	4b76      	ldr	r3, [pc, #472]	@ (8002cf8 <HAL_RCC_OscConfig+0x4d4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x31a>
 8002b30:	4b70      	ldr	r3, [pc, #448]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b34:	4a6f      	ldr	r2, [pc, #444]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b3c:	e02d      	b.n	8002b9a <HAL_RCC_OscConfig+0x376>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x33c>
 8002b46:	4b6b      	ldr	r3, [pc, #428]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	4a6a      	ldr	r2, [pc, #424]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b52:	4b68      	ldr	r3, [pc, #416]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b56:	4a67      	ldr	r2, [pc, #412]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b58:	f023 0304 	bic.w	r3, r3, #4
 8002b5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5e:	e01c      	b.n	8002b9a <HAL_RCC_OscConfig+0x376>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b05      	cmp	r3, #5
 8002b66:	d10c      	bne.n	8002b82 <HAL_RCC_OscConfig+0x35e>
 8002b68:	4b62      	ldr	r3, [pc, #392]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6c:	4a61      	ldr	r2, [pc, #388]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b6e:	f043 0304 	orr.w	r3, r3, #4
 8002b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b74:	4b5f      	ldr	r3, [pc, #380]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b78:	4a5e      	ldr	r2, [pc, #376]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b80:	e00b      	b.n	8002b9a <HAL_RCC_OscConfig+0x376>
 8002b82:	4b5c      	ldr	r3, [pc, #368]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b86:	4a5b      	ldr	r2, [pc, #364]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8e:	4b59      	ldr	r3, [pc, #356]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b92:	4a58      	ldr	r2, [pc, #352]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b94:	f023 0304 	bic.w	r3, r3, #4
 8002b98:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d015      	beq.n	8002bce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fb25 	bl	80011f0 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe fb21 	bl	80011f0 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e0d8      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ee      	beq.n	8002baa <HAL_RCC_OscConfig+0x386>
 8002bcc:	e014      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bce:	f7fe fb0f 	bl	80011f0 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fe fb0b 	bl	80011f0 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e0c2      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bec:	4b41      	ldr	r3, [pc, #260]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ee      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d105      	bne.n	8002c0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	4a3c      	ldr	r2, [pc, #240]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002c04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c08:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80ae 	beq.w	8002d70 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c14:	4b37      	ldr	r3, [pc, #220]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d06d      	beq.n	8002cfc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d14b      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c28:	4b32      	ldr	r3, [pc, #200]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a31      	ldr	r2, [pc, #196]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002c2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fadc 	bl	80011f0 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe fad8 	bl	80011f0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e091      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	4b29      	ldr	r3, [pc, #164]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69da      	ldr	r2, [r3, #28]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	019b      	lsls	r3, r3, #6
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	3b01      	subs	r3, #1
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c84:	071b      	lsls	r3, r3, #28
 8002c86:	491b      	ldr	r1, [pc, #108]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c8c:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a18      	ldr	r2, [pc, #96]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002c92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe faaa 	bl	80011f0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7fe faa6 	bl	80011f0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e05f      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb2:	4b10      	ldr	r3, [pc, #64]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x47c>
 8002cbe:	e057      	b.n	8002d70 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002cc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fa90 	bl	80011f0 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe fa8c 	bl	80011f0 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e045      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	4b03      	ldr	r3, [pc, #12]	@ (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4b0>
 8002cf2:	e03d      	b.n	8002d70 <HAL_RCC_OscConfig+0x54c>
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d7c <HAL_RCC_OscConfig+0x558>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d030      	beq.n	8002d6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d129      	bne.n	8002d6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d122      	bne.n	8002d6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d119      	bne.n	8002d6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	3b01      	subs	r3, #1
 8002d46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d10f      	bne.n	8002d6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800

08002d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0d0      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b6a      	ldr	r3, [pc, #424]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d910      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b67      	ldr	r3, [pc, #412]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 020f 	bic.w	r2, r3, #15
 8002dae:	4965      	ldr	r1, [pc, #404]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b63      	ldr	r3, [pc, #396]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0b8      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d020      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de0:	4b59      	ldr	r3, [pc, #356]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4a58      	ldr	r2, [pc, #352]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002de6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df8:	4b53      	ldr	r3, [pc, #332]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	4a52      	ldr	r2, [pc, #328]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e04:	4b50      	ldr	r3, [pc, #320]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	494d      	ldr	r1, [pc, #308]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d040      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b47      	ldr	r3, [pc, #284]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d115      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e07f      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	4b41      	ldr	r3, [pc, #260]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e073      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e52:	4b3d      	ldr	r3, [pc, #244]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e06b      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e62:	4b39      	ldr	r3, [pc, #228]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f023 0203 	bic.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4936      	ldr	r1, [pc, #216]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e74:	f7fe f9bc 	bl	80011f0 <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7c:	f7fe f9b8 	bl	80011f0 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e053      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	4b2d      	ldr	r3, [pc, #180]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 020c 	and.w	r2, r3, #12
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1eb      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b27      	ldr	r3, [pc, #156]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d210      	bcs.n	8002ed4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b24      	ldr	r3, [pc, #144]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 020f 	bic.w	r2, r3, #15
 8002eba:	4922      	ldr	r1, [pc, #136]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b20      	ldr	r3, [pc, #128]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e032      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee0:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4916      	ldr	r1, [pc, #88]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002efe:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	490e      	ldr	r1, [pc, #56]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f12:	f000 f821 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8002f16:	4602      	mov	r2, r0
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	490a      	ldr	r1, [pc, #40]	@ (8002f4c <HAL_RCC_ClockConfig+0x1cc>)
 8002f24:	5ccb      	ldrb	r3, [r1, r3]
 8002f26:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2a:	4a09      	ldr	r2, [pc, #36]	@ (8002f50 <HAL_RCC_ClockConfig+0x1d0>)
 8002f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f2e:	4b09      	ldr	r3, [pc, #36]	@ (8002f54 <HAL_RCC_ClockConfig+0x1d4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe f918 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023c00 	.word	0x40023c00
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	0800712c 	.word	0x0800712c
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20000004 	.word	0x20000004

08002f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f5c:	b090      	sub	sp, #64	@ 0x40
 8002f5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f64:	2300      	movs	r3, #0
 8002f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f68:	2300      	movs	r3, #0
 8002f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f70:	4b59      	ldr	r3, [pc, #356]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d00d      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x40>
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	f200 80a1 	bhi.w	80030c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x34>
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d003      	beq.n	8002f92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f8a:	e09b      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f8c:	4b53      	ldr	r3, [pc, #332]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x184>)
 8002f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f90:	e09b      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f92:	4b53      	ldr	r3, [pc, #332]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f96:	e098      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f98:	4b4f      	ldr	r3, [pc, #316]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fa0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fa2:	4b4d      	ldr	r3, [pc, #308]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d028      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fae:	4b4a      	ldr	r3, [pc, #296]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	099b      	lsrs	r3, r3, #6
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	623b      	str	r3, [r7, #32]
 8002fb8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4b47      	ldr	r3, [pc, #284]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fc4:	fb03 f201 	mul.w	r2, r3, r1
 8002fc8:	2300      	movs	r3, #0
 8002fca:	fb00 f303 	mul.w	r3, r0, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	4a43      	ldr	r2, [pc, #268]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fd2:	fba0 1202 	umull	r1, r2, r0, r2
 8002fd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fd8:	460a      	mov	r2, r1
 8002fda:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002fdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fde:	4413      	add	r3, r2
 8002fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	61fa      	str	r2, [r7, #28]
 8002fea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ff2:	f7fd f97d 	bl	80002f0 <__aeabi_uldivmod>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ffe:	e053      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003000:	4b35      	ldr	r3, [pc, #212]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	099b      	lsrs	r3, r3, #6
 8003006:	2200      	movs	r2, #0
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	617a      	str	r2, [r7, #20]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003012:	f04f 0b00 	mov.w	fp, #0
 8003016:	4652      	mov	r2, sl
 8003018:	465b      	mov	r3, fp
 800301a:	f04f 0000 	mov.w	r0, #0
 800301e:	f04f 0100 	mov.w	r1, #0
 8003022:	0159      	lsls	r1, r3, #5
 8003024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003028:	0150      	lsls	r0, r2, #5
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	ebb2 080a 	subs.w	r8, r2, sl
 8003032:	eb63 090b 	sbc.w	r9, r3, fp
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003042:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003046:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800304a:	ebb2 0408 	subs.w	r4, r2, r8
 800304e:	eb63 0509 	sbc.w	r5, r3, r9
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	00eb      	lsls	r3, r5, #3
 800305c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003060:	00e2      	lsls	r2, r4, #3
 8003062:	4614      	mov	r4, r2
 8003064:	461d      	mov	r5, r3
 8003066:	eb14 030a 	adds.w	r3, r4, sl
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	eb45 030b 	adc.w	r3, r5, fp
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800307e:	4629      	mov	r1, r5
 8003080:	028b      	lsls	r3, r1, #10
 8003082:	4621      	mov	r1, r4
 8003084:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003088:	4621      	mov	r1, r4
 800308a:	028a      	lsls	r2, r1, #10
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003092:	2200      	movs	r2, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	60fa      	str	r2, [r7, #12]
 8003098:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800309c:	f7fd f928 	bl	80002f0 <__aeabi_uldivmod>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4613      	mov	r3, r2
 80030a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030a8:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	3301      	adds	r3, #1
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80030b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030c2:	e002      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030c4:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x184>)
 80030c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3740      	adds	r7, #64	@ 0x40
 80030d0:	46bd      	mov	sp, r7
 80030d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800
 80030dc:	00f42400 	.word	0x00f42400
 80030e0:	017d7840 	.word	0x017d7840

080030e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e8:	4b03      	ldr	r3, [pc, #12]	@ (80030f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ea:	681b      	ldr	r3, [r3, #0]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000000 	.word	0x20000000

080030fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003100:	f7ff fff0 	bl	80030e4 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0a9b      	lsrs	r3, r3, #10
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	@ (8003120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40023800 	.word	0x40023800
 8003120:	0800713c 	.word	0x0800713c

08003124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003128:	f7ff ffdc 	bl	80030e4 <HAL_RCC_GetHCLKFreq>
 800312c:	4602      	mov	r2, r0
 800312e:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	0b5b      	lsrs	r3, r3, #13
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	4903      	ldr	r1, [pc, #12]	@ (8003148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800313a:	5ccb      	ldrb	r3, [r1, r3]
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003140:	4618      	mov	r0, r3
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40023800 	.word	0x40023800
 8003148:	0800713c 	.word	0x0800713c

0800314c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d012      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003174:	4b69      	ldr	r3, [pc, #420]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4a68      	ldr	r2, [pc, #416]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800317e:	6093      	str	r3, [r2, #8]
 8003180:	4b66      	ldr	r3, [pc, #408]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003188:	4964      	ldr	r1, [pc, #400]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003196:	2301      	movs	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d017      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031a6:	4b5d      	ldr	r3, [pc, #372]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b4:	4959      	ldr	r1, [pc, #356]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031c4:	d101      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031c6:	2301      	movs	r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031d2:	2301      	movs	r3, #1
 80031d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d017      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031e2:	4b4e      	ldr	r3, [pc, #312]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	494a      	ldr	r1, [pc, #296]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003200:	d101      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003202:	2301      	movs	r3, #1
 8003204:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800320e:	2301      	movs	r3, #1
 8003210:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800321e:	2301      	movs	r3, #1
 8003220:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 808b 	beq.w	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003230:	4b3a      	ldr	r3, [pc, #232]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	4a39      	ldr	r2, [pc, #228]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800323a:	6413      	str	r3, [r2, #64]	@ 0x40
 800323c:	4b37      	ldr	r3, [pc, #220]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003248:	4b35      	ldr	r3, [pc, #212]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a34      	ldr	r2, [pc, #208]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800324e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003254:	f7fd ffcc 	bl	80011f0 <HAL_GetTick>
 8003258:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800325a:	e008      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325c:	f7fd ffc8 	bl	80011f0 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	@ 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e38f      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800326e:	4b2c      	ldr	r3, [pc, #176]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800327a:	4b28      	ldr	r3, [pc, #160]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003282:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d035      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	429a      	cmp	r2, r3
 8003296:	d02e      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003298:	4b20      	ldr	r3, [pc, #128]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032a2:	4b1e      	ldr	r3, [pc, #120]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a6:	4a1d      	ldr	r2, [pc, #116]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ac:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ae:	4b1b      	ldr	r3, [pc, #108]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b2:	4a1a      	ldr	r2, [pc, #104]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032ba:	4a18      	ldr	r2, [pc, #96]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032c0:	4b16      	ldr	r3, [pc, #88]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d114      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fd ff90 	bl	80011f0 <HAL_GetTick>
 80032d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d2:	e00a      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d4:	f7fd ff8c 	bl	80011f0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e351      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ea:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0ee      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003302:	d111      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003304:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003310:	4b04      	ldr	r3, [pc, #16]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003312:	400b      	ands	r3, r1
 8003314:	4901      	ldr	r1, [pc, #4]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
 800331a:	e00b      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800331c:	40023800 	.word	0x40023800
 8003320:	40007000 	.word	0x40007000
 8003324:	0ffffcff 	.word	0x0ffffcff
 8003328:	4bac      	ldr	r3, [pc, #688]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	4aab      	ldr	r2, [pc, #684]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003332:	6093      	str	r3, [r2, #8]
 8003334:	4ba9      	ldr	r3, [pc, #676]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003336:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003340:	49a6      	ldr	r1, [pc, #664]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003342:	4313      	orrs	r3, r2
 8003344:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b00      	cmp	r3, #0
 8003350:	d010      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003352:	4ba2      	ldr	r3, [pc, #648]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003358:	4aa0      	ldr	r2, [pc, #640]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800335e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003362:	4b9e      	ldr	r3, [pc, #632]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003364:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336c:	499b      	ldr	r1, [pc, #620]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003380:	4b96      	ldr	r3, [pc, #600]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003386:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800338e:	4993      	ldr	r1, [pc, #588]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033a2:	4b8e      	ldr	r3, [pc, #568]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033b0:	498a      	ldr	r1, [pc, #552]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033c4:	4b85      	ldr	r3, [pc, #532]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033d2:	4982      	ldr	r1, [pc, #520]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033e6:	4b7d      	ldr	r3, [pc, #500]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f4:	4979      	ldr	r1, [pc, #484]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003408:	4b74      	ldr	r3, [pc, #464]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003416:	4971      	ldr	r1, [pc, #452]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800342a:	4b6c      	ldr	r3, [pc, #432]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003430:	f023 020c 	bic.w	r2, r3, #12
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003438:	4968      	ldr	r1, [pc, #416]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800344c:	4b63      	ldr	r3, [pc, #396]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003452:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345a:	4960      	ldr	r1, [pc, #384]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800346e:	4b5b      	ldr	r3, [pc, #364]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003474:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800347c:	4957      	ldr	r1, [pc, #348]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003490:	4b52      	ldr	r3, [pc, #328]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003496:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349e:	494f      	ldr	r1, [pc, #316]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034b2:	4b4a      	ldr	r3, [pc, #296]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c0:	4946      	ldr	r1, [pc, #280]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034d4:	4b41      	ldr	r3, [pc, #260]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034da:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e2:	493e      	ldr	r1, [pc, #248]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034f6:	4b39      	ldr	r3, [pc, #228]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003504:	4935      	ldr	r1, [pc, #212]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003518:	4b30      	ldr	r3, [pc, #192]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003526:	492d      	ldr	r1, [pc, #180]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d011      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800353a:	4b28      	ldr	r3, [pc, #160]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003540:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003548:	4924      	ldr	r1, [pc, #144]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003554:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003558:	d101      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800356a:	2301      	movs	r3, #1
 800356c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800357a:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003580:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003588:	4914      	ldr	r1, [pc, #80]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800359c:	4b0f      	ldr	r3, [pc, #60]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ac:	490b      	ldr	r1, [pc, #44]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00f      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80035c0:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035d0:	4902      	ldr	r1, [pc, #8]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035d8:	e002      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00b      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035ec:	4b8a      	ldr	r3, [pc, #552]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fc:	4986      	ldr	r1, [pc, #536]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00b      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003610:	4b81      	ldr	r3, [pc, #516]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003612:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003616:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003620:	497d      	ldr	r1, [pc, #500]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d006      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80d6 	beq.w	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800363c:	4b76      	ldr	r3, [pc, #472]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a75      	ldr	r2, [pc, #468]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003642:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003648:	f7fd fdd2 	bl	80011f0 <HAL_GetTick>
 800364c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003650:	f7fd fdce 	bl	80011f0 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	@ 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e195      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003662:	4b6d      	ldr	r3, [pc, #436]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d021      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x572>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367e:	2b00      	cmp	r3, #0
 8003680:	d11d      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003682:	4b65      	ldr	r3, [pc, #404]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003688:	0c1b      	lsrs	r3, r3, #16
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003690:	4b61      	ldr	r3, [pc, #388]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003696:	0e1b      	lsrs	r3, r3, #24
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	019a      	lsls	r2, r3, #6
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	431a      	orrs	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	061b      	lsls	r3, r3, #24
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	071b      	lsls	r3, r3, #28
 80036b6:	4958      	ldr	r1, [pc, #352]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d02e      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e8:	d129      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036f8:	4b47      	ldr	r3, [pc, #284]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036fe:	0f1b      	lsrs	r3, r3, #28
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	019a      	lsls	r2, r3, #6
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	041b      	lsls	r3, r3, #16
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	061b      	lsls	r3, r3, #24
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	071b      	lsls	r3, r3, #28
 800371e:	493e      	ldr	r1, [pc, #248]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003726:	4b3c      	ldr	r3, [pc, #240]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003728:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800372c:	f023 021f 	bic.w	r2, r3, #31
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	3b01      	subs	r3, #1
 8003736:	4938      	ldr	r1, [pc, #224]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01d      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800374a:	4b33      	ldr	r3, [pc, #204]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800374c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003750:	0e1b      	lsrs	r3, r3, #24
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003758:	4b2f      	ldr	r3, [pc, #188]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800375a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800375e:	0f1b      	lsrs	r3, r3, #28
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	019a      	lsls	r2, r3, #6
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	041b      	lsls	r3, r3, #16
 8003772:	431a      	orrs	r2, r3
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	061b      	lsls	r3, r3, #24
 8003778:	431a      	orrs	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	071b      	lsls	r3, r3, #28
 800377e:	4926      	ldr	r1, [pc, #152]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d011      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	019a      	lsls	r2, r3, #6
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	061b      	lsls	r3, r3, #24
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	071b      	lsls	r3, r3, #28
 80037ae:	491a      	ldr	r1, [pc, #104]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037b6:	4b18      	ldr	r3, [pc, #96]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a17      	ldr	r2, [pc, #92]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c2:	f7fd fd15 	bl	80011f0 <HAL_GetTick>
 80037c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037ca:	f7fd fd11 	bl	80011f0 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b64      	cmp	r3, #100	@ 0x64
 80037d6:	d901      	bls.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e0d8      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	f040 80ce 	bne.w	800398c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037f0:	4b09      	ldr	r3, [pc, #36]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a08      	ldr	r2, [pc, #32]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037fc:	f7fd fcf8 	bl	80011f0 <HAL_GetTick>
 8003800:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003802:	e00b      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003804:	f7fd fcf4 	bl	80011f0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	@ 0x64
 8003810:	d904      	bls.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e0bb      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800381c:	4b5e      	ldr	r3, [pc, #376]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003828:	d0ec      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003846:	2b00      	cmp	r3, #0
 8003848:	d02e      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d12a      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003852:	4b51      	ldr	r3, [pc, #324]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003860:	4b4d      	ldr	r3, [pc, #308]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003866:	0f1b      	lsrs	r3, r3, #28
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	019a      	lsls	r2, r3, #6
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	041b      	lsls	r3, r3, #16
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	061b      	lsls	r3, r3, #24
 8003880:	431a      	orrs	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	071b      	lsls	r3, r3, #28
 8003886:	4944      	ldr	r1, [pc, #272]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800388e:	4b42      	ldr	r3, [pc, #264]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003894:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389c:	3b01      	subs	r3, #1
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	493d      	ldr	r1, [pc, #244]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d022      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038bc:	d11d      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038be:	4b36      	ldr	r3, [pc, #216]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c4:	0e1b      	lsrs	r3, r3, #24
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038cc:	4b32      	ldr	r3, [pc, #200]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d2:	0f1b      	lsrs	r3, r3, #28
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	019a      	lsls	r2, r3, #6
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	431a      	orrs	r2, r3
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	061b      	lsls	r3, r3, #24
 80038ec:	431a      	orrs	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	071b      	lsls	r3, r3, #28
 80038f2:	4929      	ldr	r1, [pc, #164]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d028      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003906:	4b24      	ldr	r3, [pc, #144]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390c:	0e1b      	lsrs	r3, r3, #24
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003914:	4b20      	ldr	r3, [pc, #128]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391a:	0c1b      	lsrs	r3, r3, #16
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	019a      	lsls	r2, r3, #6
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	041b      	lsls	r3, r3, #16
 800392c:	431a      	orrs	r2, r3
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	071b      	lsls	r3, r3, #28
 800393a:	4917      	ldr	r1, [pc, #92]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003942:	4b15      	ldr	r3, [pc, #84]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003948:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003950:	4911      	ldr	r1, [pc, #68]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003958:	4b0f      	ldr	r3, [pc, #60]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0e      	ldr	r2, [pc, #56]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800395e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003964:	f7fd fc44 	bl	80011f0 <HAL_GetTick>
 8003968:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800396c:	f7fd fc40 	bl	80011f0 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	@ 0x64
 8003978:	d901      	bls.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e007      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800397e:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800398a:	d1ef      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800

0800399c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e040      	b.n	8003a30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd fb3c 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	@ 0x24
 80039c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fb16 	bl	8004014 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f8af 	bl	8003b4c <UART_SetConfig>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e01b      	b.n	8003a30 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fb95 	bl	8004158 <UART_CheckIdleState>
 8003a2e:	4603      	mov	r3, r0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	@ 0x28
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d177      	bne.n	8003b40 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_UART_Transmit+0x24>
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e070      	b.n	8003b42 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2221      	movs	r2, #33	@ 0x21
 8003a6c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a6e:	f7fd fbbf 	bl	80011f0 <HAL_GetTick>
 8003a72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	88fa      	ldrh	r2, [r7, #6]
 8003a78:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	88fa      	ldrh	r2, [r7, #6]
 8003a80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a8c:	d108      	bne.n	8003aa0 <HAL_UART_Transmit+0x68>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003aa8:	e02f      	b.n	8003b0a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2180      	movs	r1, #128	@ 0x80
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fbf7 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d004      	beq.n	8003aca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e03b      	b.n	8003b42 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ade:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	e007      	b.n	8003af8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3301      	adds	r3, #1
 8003af6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1c9      	bne.n	8003aaa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2140      	movs	r1, #64	@ 0x40
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fbc1 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d004      	beq.n	8003b36 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e005      	b.n	8003b42 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e000      	b.n	8003b42 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b40:	2302      	movs	r3, #2
  }
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3720      	adds	r7, #32
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4ba6      	ldr	r3, [pc, #664]	@ (8003e10 <UART_SetConfig+0x2c4>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	6979      	ldr	r1, [r7, #20]
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a94      	ldr	r2, [pc, #592]	@ (8003e14 <UART_SetConfig+0x2c8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d120      	bne.n	8003c0a <UART_SetConfig+0xbe>
 8003bc8:	4b93      	ldr	r3, [pc, #588]	@ (8003e18 <UART_SetConfig+0x2cc>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d816      	bhi.n	8003c04 <UART_SetConfig+0xb8>
 8003bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bdc <UART_SetConfig+0x90>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003bf9 	.word	0x08003bf9
 8003be4:	08003bf3 	.word	0x08003bf3
 8003be8:	08003bff 	.word	0x08003bff
 8003bec:	2301      	movs	r3, #1
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e150      	b.n	8003e94 <UART_SetConfig+0x348>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e14d      	b.n	8003e94 <UART_SetConfig+0x348>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e14a      	b.n	8003e94 <UART_SetConfig+0x348>
 8003bfe:	2308      	movs	r3, #8
 8003c00:	77fb      	strb	r3, [r7, #31]
 8003c02:	e147      	b.n	8003e94 <UART_SetConfig+0x348>
 8003c04:	2310      	movs	r3, #16
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e144      	b.n	8003e94 <UART_SetConfig+0x348>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a83      	ldr	r2, [pc, #524]	@ (8003e1c <UART_SetConfig+0x2d0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d132      	bne.n	8003c7a <UART_SetConfig+0x12e>
 8003c14:	4b80      	ldr	r3, [pc, #512]	@ (8003e18 <UART_SetConfig+0x2cc>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b0c      	cmp	r3, #12
 8003c20:	d828      	bhi.n	8003c74 <UART_SetConfig+0x128>
 8003c22:	a201      	add	r2, pc, #4	@ (adr r2, 8003c28 <UART_SetConfig+0xdc>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c5d 	.word	0x08003c5d
 8003c2c:	08003c75 	.word	0x08003c75
 8003c30:	08003c75 	.word	0x08003c75
 8003c34:	08003c75 	.word	0x08003c75
 8003c38:	08003c69 	.word	0x08003c69
 8003c3c:	08003c75 	.word	0x08003c75
 8003c40:	08003c75 	.word	0x08003c75
 8003c44:	08003c75 	.word	0x08003c75
 8003c48:	08003c63 	.word	0x08003c63
 8003c4c:	08003c75 	.word	0x08003c75
 8003c50:	08003c75 	.word	0x08003c75
 8003c54:	08003c75 	.word	0x08003c75
 8003c58:	08003c6f 	.word	0x08003c6f
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e118      	b.n	8003e94 <UART_SetConfig+0x348>
 8003c62:	2302      	movs	r3, #2
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e115      	b.n	8003e94 <UART_SetConfig+0x348>
 8003c68:	2304      	movs	r3, #4
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e112      	b.n	8003e94 <UART_SetConfig+0x348>
 8003c6e:	2308      	movs	r3, #8
 8003c70:	77fb      	strb	r3, [r7, #31]
 8003c72:	e10f      	b.n	8003e94 <UART_SetConfig+0x348>
 8003c74:	2310      	movs	r3, #16
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e10c      	b.n	8003e94 <UART_SetConfig+0x348>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a68      	ldr	r2, [pc, #416]	@ (8003e20 <UART_SetConfig+0x2d4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d120      	bne.n	8003cc6 <UART_SetConfig+0x17a>
 8003c84:	4b64      	ldr	r3, [pc, #400]	@ (8003e18 <UART_SetConfig+0x2cc>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c8a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c8e:	2b30      	cmp	r3, #48	@ 0x30
 8003c90:	d013      	beq.n	8003cba <UART_SetConfig+0x16e>
 8003c92:	2b30      	cmp	r3, #48	@ 0x30
 8003c94:	d814      	bhi.n	8003cc0 <UART_SetConfig+0x174>
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	d009      	beq.n	8003cae <UART_SetConfig+0x162>
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d810      	bhi.n	8003cc0 <UART_SetConfig+0x174>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <UART_SetConfig+0x15c>
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d006      	beq.n	8003cb4 <UART_SetConfig+0x168>
 8003ca6:	e00b      	b.n	8003cc0 <UART_SetConfig+0x174>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e0f2      	b.n	8003e94 <UART_SetConfig+0x348>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	77fb      	strb	r3, [r7, #31]
 8003cb2:	e0ef      	b.n	8003e94 <UART_SetConfig+0x348>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	e0ec      	b.n	8003e94 <UART_SetConfig+0x348>
 8003cba:	2308      	movs	r3, #8
 8003cbc:	77fb      	strb	r3, [r7, #31]
 8003cbe:	e0e9      	b.n	8003e94 <UART_SetConfig+0x348>
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e0e6      	b.n	8003e94 <UART_SetConfig+0x348>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a56      	ldr	r2, [pc, #344]	@ (8003e24 <UART_SetConfig+0x2d8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d120      	bne.n	8003d12 <UART_SetConfig+0x1c6>
 8003cd0:	4b51      	ldr	r3, [pc, #324]	@ (8003e18 <UART_SetConfig+0x2cc>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003cda:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cdc:	d013      	beq.n	8003d06 <UART_SetConfig+0x1ba>
 8003cde:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ce0:	d814      	bhi.n	8003d0c <UART_SetConfig+0x1c0>
 8003ce2:	2b80      	cmp	r3, #128	@ 0x80
 8003ce4:	d009      	beq.n	8003cfa <UART_SetConfig+0x1ae>
 8003ce6:	2b80      	cmp	r3, #128	@ 0x80
 8003ce8:	d810      	bhi.n	8003d0c <UART_SetConfig+0x1c0>
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <UART_SetConfig+0x1a8>
 8003cee:	2b40      	cmp	r3, #64	@ 0x40
 8003cf0:	d006      	beq.n	8003d00 <UART_SetConfig+0x1b4>
 8003cf2:	e00b      	b.n	8003d0c <UART_SetConfig+0x1c0>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	77fb      	strb	r3, [r7, #31]
 8003cf8:	e0cc      	b.n	8003e94 <UART_SetConfig+0x348>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	77fb      	strb	r3, [r7, #31]
 8003cfe:	e0c9      	b.n	8003e94 <UART_SetConfig+0x348>
 8003d00:	2304      	movs	r3, #4
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e0c6      	b.n	8003e94 <UART_SetConfig+0x348>
 8003d06:	2308      	movs	r3, #8
 8003d08:	77fb      	strb	r3, [r7, #31]
 8003d0a:	e0c3      	b.n	8003e94 <UART_SetConfig+0x348>
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e0c0      	b.n	8003e94 <UART_SetConfig+0x348>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a44      	ldr	r2, [pc, #272]	@ (8003e28 <UART_SetConfig+0x2dc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d125      	bne.n	8003d68 <UART_SetConfig+0x21c>
 8003d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e18 <UART_SetConfig+0x2cc>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d2a:	d017      	beq.n	8003d5c <UART_SetConfig+0x210>
 8003d2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d30:	d817      	bhi.n	8003d62 <UART_SetConfig+0x216>
 8003d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d36:	d00b      	beq.n	8003d50 <UART_SetConfig+0x204>
 8003d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d3c:	d811      	bhi.n	8003d62 <UART_SetConfig+0x216>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <UART_SetConfig+0x1fe>
 8003d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d46:	d006      	beq.n	8003d56 <UART_SetConfig+0x20a>
 8003d48:	e00b      	b.n	8003d62 <UART_SetConfig+0x216>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	77fb      	strb	r3, [r7, #31]
 8003d4e:	e0a1      	b.n	8003e94 <UART_SetConfig+0x348>
 8003d50:	2302      	movs	r3, #2
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e09e      	b.n	8003e94 <UART_SetConfig+0x348>
 8003d56:	2304      	movs	r3, #4
 8003d58:	77fb      	strb	r3, [r7, #31]
 8003d5a:	e09b      	b.n	8003e94 <UART_SetConfig+0x348>
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e098      	b.n	8003e94 <UART_SetConfig+0x348>
 8003d62:	2310      	movs	r3, #16
 8003d64:	77fb      	strb	r3, [r7, #31]
 8003d66:	e095      	b.n	8003e94 <UART_SetConfig+0x348>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a2f      	ldr	r2, [pc, #188]	@ (8003e2c <UART_SetConfig+0x2e0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d125      	bne.n	8003dbe <UART_SetConfig+0x272>
 8003d72:	4b29      	ldr	r3, [pc, #164]	@ (8003e18 <UART_SetConfig+0x2cc>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d80:	d017      	beq.n	8003db2 <UART_SetConfig+0x266>
 8003d82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d86:	d817      	bhi.n	8003db8 <UART_SetConfig+0x26c>
 8003d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d8c:	d00b      	beq.n	8003da6 <UART_SetConfig+0x25a>
 8003d8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d92:	d811      	bhi.n	8003db8 <UART_SetConfig+0x26c>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <UART_SetConfig+0x254>
 8003d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9c:	d006      	beq.n	8003dac <UART_SetConfig+0x260>
 8003d9e:	e00b      	b.n	8003db8 <UART_SetConfig+0x26c>
 8003da0:	2301      	movs	r3, #1
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e076      	b.n	8003e94 <UART_SetConfig+0x348>
 8003da6:	2302      	movs	r3, #2
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e073      	b.n	8003e94 <UART_SetConfig+0x348>
 8003dac:	2304      	movs	r3, #4
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e070      	b.n	8003e94 <UART_SetConfig+0x348>
 8003db2:	2308      	movs	r3, #8
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e06d      	b.n	8003e94 <UART_SetConfig+0x348>
 8003db8:	2310      	movs	r3, #16
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e06a      	b.n	8003e94 <UART_SetConfig+0x348>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e30 <UART_SetConfig+0x2e4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d138      	bne.n	8003e3a <UART_SetConfig+0x2ee>
 8003dc8:	4b13      	ldr	r3, [pc, #76]	@ (8003e18 <UART_SetConfig+0x2cc>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003dd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003dd6:	d017      	beq.n	8003e08 <UART_SetConfig+0x2bc>
 8003dd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ddc:	d82a      	bhi.n	8003e34 <UART_SetConfig+0x2e8>
 8003dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003de2:	d00b      	beq.n	8003dfc <UART_SetConfig+0x2b0>
 8003de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003de8:	d824      	bhi.n	8003e34 <UART_SetConfig+0x2e8>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <UART_SetConfig+0x2aa>
 8003dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003df2:	d006      	beq.n	8003e02 <UART_SetConfig+0x2b6>
 8003df4:	e01e      	b.n	8003e34 <UART_SetConfig+0x2e8>
 8003df6:	2300      	movs	r3, #0
 8003df8:	77fb      	strb	r3, [r7, #31]
 8003dfa:	e04b      	b.n	8003e94 <UART_SetConfig+0x348>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e048      	b.n	8003e94 <UART_SetConfig+0x348>
 8003e02:	2304      	movs	r3, #4
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	e045      	b.n	8003e94 <UART_SetConfig+0x348>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e042      	b.n	8003e94 <UART_SetConfig+0x348>
 8003e0e:	bf00      	nop
 8003e10:	efff69f3 	.word	0xefff69f3
 8003e14:	40011000 	.word	0x40011000
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40004400 	.word	0x40004400
 8003e20:	40004800 	.word	0x40004800
 8003e24:	40004c00 	.word	0x40004c00
 8003e28:	40005000 	.word	0x40005000
 8003e2c:	40011400 	.word	0x40011400
 8003e30:	40007800 	.word	0x40007800
 8003e34:	2310      	movs	r3, #16
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e02c      	b.n	8003e94 <UART_SetConfig+0x348>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a72      	ldr	r2, [pc, #456]	@ (8004008 <UART_SetConfig+0x4bc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d125      	bne.n	8003e90 <UART_SetConfig+0x344>
 8003e44:	4b71      	ldr	r3, [pc, #452]	@ (800400c <UART_SetConfig+0x4c0>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003e4e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e52:	d017      	beq.n	8003e84 <UART_SetConfig+0x338>
 8003e54:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e58:	d817      	bhi.n	8003e8a <UART_SetConfig+0x33e>
 8003e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e5e:	d00b      	beq.n	8003e78 <UART_SetConfig+0x32c>
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e64:	d811      	bhi.n	8003e8a <UART_SetConfig+0x33e>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <UART_SetConfig+0x326>
 8003e6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e6e:	d006      	beq.n	8003e7e <UART_SetConfig+0x332>
 8003e70:	e00b      	b.n	8003e8a <UART_SetConfig+0x33e>
 8003e72:	2300      	movs	r3, #0
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e00d      	b.n	8003e94 <UART_SetConfig+0x348>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e00a      	b.n	8003e94 <UART_SetConfig+0x348>
 8003e7e:	2304      	movs	r3, #4
 8003e80:	77fb      	strb	r3, [r7, #31]
 8003e82:	e007      	b.n	8003e94 <UART_SetConfig+0x348>
 8003e84:	2308      	movs	r3, #8
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e004      	b.n	8003e94 <UART_SetConfig+0x348>
 8003e8a:	2310      	movs	r3, #16
 8003e8c:	77fb      	strb	r3, [r7, #31]
 8003e8e:	e001      	b.n	8003e94 <UART_SetConfig+0x348>
 8003e90:	2310      	movs	r3, #16
 8003e92:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e9c:	d15b      	bne.n	8003f56 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d828      	bhi.n	8003ef6 <UART_SetConfig+0x3aa>
 8003ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8003eac <UART_SetConfig+0x360>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003ed9 	.word	0x08003ed9
 8003eb4:	08003ee1 	.word	0x08003ee1
 8003eb8:	08003ef7 	.word	0x08003ef7
 8003ebc:	08003ee7 	.word	0x08003ee7
 8003ec0:	08003ef7 	.word	0x08003ef7
 8003ec4:	08003ef7 	.word	0x08003ef7
 8003ec8:	08003ef7 	.word	0x08003ef7
 8003ecc:	08003eef 	.word	0x08003eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed0:	f7ff f914 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8003ed4:	61b8      	str	r0, [r7, #24]
        break;
 8003ed6:	e013      	b.n	8003f00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed8:	f7ff f924 	bl	8003124 <HAL_RCC_GetPCLK2Freq>
 8003edc:	61b8      	str	r0, [r7, #24]
        break;
 8003ede:	e00f      	b.n	8003f00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee0:	4b4b      	ldr	r3, [pc, #300]	@ (8004010 <UART_SetConfig+0x4c4>)
 8003ee2:	61bb      	str	r3, [r7, #24]
        break;
 8003ee4:	e00c      	b.n	8003f00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee6:	f7ff f837 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8003eea:	61b8      	str	r0, [r7, #24]
        break;
 8003eec:	e008      	b.n	8003f00 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ef2:	61bb      	str	r3, [r7, #24]
        break;
 8003ef4:	e004      	b.n	8003f00 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	77bb      	strb	r3, [r7, #30]
        break;
 8003efe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d074      	beq.n	8003ff0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	005a      	lsls	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	441a      	add	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b0f      	cmp	r3, #15
 8003f20:	d916      	bls.n	8003f50 <UART_SetConfig+0x404>
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f28:	d212      	bcs.n	8003f50 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	f023 030f 	bic.w	r3, r3, #15
 8003f32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	89fb      	ldrh	r3, [r7, #14]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	89fa      	ldrh	r2, [r7, #14]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	e04f      	b.n	8003ff0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	77bb      	strb	r3, [r7, #30]
 8003f54:	e04c      	b.n	8003ff0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f56:	7ffb      	ldrb	r3, [r7, #31]
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d828      	bhi.n	8003fae <UART_SetConfig+0x462>
 8003f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f64 <UART_SetConfig+0x418>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08003f89 	.word	0x08003f89
 8003f68:	08003f91 	.word	0x08003f91
 8003f6c:	08003f99 	.word	0x08003f99
 8003f70:	08003faf 	.word	0x08003faf
 8003f74:	08003f9f 	.word	0x08003f9f
 8003f78:	08003faf 	.word	0x08003faf
 8003f7c:	08003faf 	.word	0x08003faf
 8003f80:	08003faf 	.word	0x08003faf
 8003f84:	08003fa7 	.word	0x08003fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f88:	f7ff f8b8 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8003f8c:	61b8      	str	r0, [r7, #24]
        break;
 8003f8e:	e013      	b.n	8003fb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f90:	f7ff f8c8 	bl	8003124 <HAL_RCC_GetPCLK2Freq>
 8003f94:	61b8      	str	r0, [r7, #24]
        break;
 8003f96:	e00f      	b.n	8003fb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f98:	4b1d      	ldr	r3, [pc, #116]	@ (8004010 <UART_SetConfig+0x4c4>)
 8003f9a:	61bb      	str	r3, [r7, #24]
        break;
 8003f9c:	e00c      	b.n	8003fb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f9e:	f7fe ffdb 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8003fa2:	61b8      	str	r0, [r7, #24]
        break;
 8003fa4:	e008      	b.n	8003fb8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003faa:	61bb      	str	r3, [r7, #24]
        break;
 8003fac:	e004      	b.n	8003fb8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	77bb      	strb	r3, [r7, #30]
        break;
 8003fb6:	bf00      	nop
    }

    if (pclk != 0U)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d018      	beq.n	8003ff0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	085a      	lsrs	r2, r3, #1
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	441a      	add	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b0f      	cmp	r3, #15
 8003fd6:	d909      	bls.n	8003fec <UART_SetConfig+0x4a0>
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fde:	d205      	bcs.n	8003fec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	e001      	b.n	8003ff0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ffc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40007c00 	.word	0x40007c00
 800400c:	40023800 	.word	0x40023800
 8004010:	00f42400 	.word	0x00f42400

08004014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01a      	beq.n	800412a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004112:	d10a      	bne.n	800412a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	605a      	str	r2, [r3, #4]
  }
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b098      	sub	sp, #96	@ 0x60
 800415c:	af02      	add	r7, sp, #8
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004168:	f7fd f842 	bl	80011f0 <HAL_GetTick>
 800416c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b08      	cmp	r3, #8
 800417a:	d12e      	bne.n	80041da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004184:	2200      	movs	r2, #0
 8004186:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f88c 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d021      	beq.n	80041da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e6      	bne.n	8004196 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e062      	b.n	80042a0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d149      	bne.n	800427c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f0:	2200      	movs	r2, #0
 80041f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f856 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d03c      	beq.n	800427c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	623b      	str	r3, [r7, #32]
   return(result);
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004220:	633b      	str	r3, [r7, #48]	@ 0x30
 8004222:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800422e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e6      	bne.n	8004202 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3308      	adds	r3, #8
 800423a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	60fb      	str	r3, [r7, #12]
   return(result);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3308      	adds	r3, #8
 8004252:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004254:	61fa      	str	r2, [r7, #28]
 8004256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	69b9      	ldr	r1, [r7, #24]
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	617b      	str	r3, [r7, #20]
   return(result);
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e5      	bne.n	8004234 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e011      	b.n	80042a0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3758      	adds	r7, #88	@ 0x58
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b8:	e04f      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d04b      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fc ff95 	bl	80011f0 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e04e      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d037      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b80      	cmp	r3, #128	@ 0x80
 80042ee:	d034      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b40      	cmp	r3, #64	@ 0x40
 80042f4:	d031      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b08      	cmp	r3, #8
 8004302:	d110      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2208      	movs	r2, #8
 800430a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f838 	bl	8004382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2208      	movs	r2, #8
 8004316:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e029      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004334:	d111      	bne.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800433e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f81e 	bl	8004382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e00f      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	bf0c      	ite	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	2300      	movne	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	429a      	cmp	r2, r3
 8004376:	d0a0      	beq.n	80042ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004382:	b480      	push	{r7}
 8004384:	b095      	sub	sp, #84	@ 0x54
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800439e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80043aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e6      	bne.n	800438a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3308      	adds	r3, #8
 80043c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3308      	adds	r3, #8
 80043da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e5      	bne.n	80043bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d118      	bne.n	800442a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	60bb      	str	r3, [r7, #8]
   return(result);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f023 0310 	bic.w	r3, r3, #16
 800440c:	647b      	str	r3, [r7, #68]	@ 0x44
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6979      	ldr	r1, [r7, #20]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	613b      	str	r3, [r7, #16]
   return(result);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e6      	bne.n	80043f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800443e:	bf00      	nop
 8004440:	3754      	adds	r7, #84	@ 0x54
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <__cvt>:
 800444a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444c:	ed2d 8b02 	vpush	{d8}
 8004450:	eeb0 8b40 	vmov.f64	d8, d0
 8004454:	b085      	sub	sp, #20
 8004456:	4617      	mov	r7, r2
 8004458:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800445a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800445c:	ee18 2a90 	vmov	r2, s17
 8004460:	f025 0520 	bic.w	r5, r5, #32
 8004464:	2a00      	cmp	r2, #0
 8004466:	bfb6      	itet	lt
 8004468:	222d      	movlt	r2, #45	@ 0x2d
 800446a:	2200      	movge	r2, #0
 800446c:	eeb1 8b40 	vneglt.f64	d8, d0
 8004470:	2d46      	cmp	r5, #70	@ 0x46
 8004472:	460c      	mov	r4, r1
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	d004      	beq.n	8004482 <__cvt+0x38>
 8004478:	2d45      	cmp	r5, #69	@ 0x45
 800447a:	d100      	bne.n	800447e <__cvt+0x34>
 800447c:	3401      	adds	r4, #1
 800447e:	2102      	movs	r1, #2
 8004480:	e000      	b.n	8004484 <__cvt+0x3a>
 8004482:	2103      	movs	r1, #3
 8004484:	ab03      	add	r3, sp, #12
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	ab02      	add	r3, sp, #8
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	4622      	mov	r2, r4
 800448e:	4633      	mov	r3, r6
 8004490:	eeb0 0b48 	vmov.f64	d0, d8
 8004494:	f000 fe54 	bl	8005140 <_dtoa_r>
 8004498:	2d47      	cmp	r5, #71	@ 0x47
 800449a:	d114      	bne.n	80044c6 <__cvt+0x7c>
 800449c:	07fb      	lsls	r3, r7, #31
 800449e:	d50a      	bpl.n	80044b6 <__cvt+0x6c>
 80044a0:	1902      	adds	r2, r0, r4
 80044a2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80044a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044aa:	bf08      	it	eq
 80044ac:	9203      	streq	r2, [sp, #12]
 80044ae:	2130      	movs	r1, #48	@ 0x30
 80044b0:	9b03      	ldr	r3, [sp, #12]
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d319      	bcc.n	80044ea <__cvt+0xa0>
 80044b6:	9b03      	ldr	r3, [sp, #12]
 80044b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80044ba:	1a1b      	subs	r3, r3, r0
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	b005      	add	sp, #20
 80044c0:	ecbd 8b02 	vpop	{d8}
 80044c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c6:	2d46      	cmp	r5, #70	@ 0x46
 80044c8:	eb00 0204 	add.w	r2, r0, r4
 80044cc:	d1e9      	bne.n	80044a2 <__cvt+0x58>
 80044ce:	7803      	ldrb	r3, [r0, #0]
 80044d0:	2b30      	cmp	r3, #48	@ 0x30
 80044d2:	d107      	bne.n	80044e4 <__cvt+0x9a>
 80044d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80044d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044dc:	bf1c      	itt	ne
 80044de:	f1c4 0401 	rsbne	r4, r4, #1
 80044e2:	6034      	strne	r4, [r6, #0]
 80044e4:	6833      	ldr	r3, [r6, #0]
 80044e6:	441a      	add	r2, r3
 80044e8:	e7db      	b.n	80044a2 <__cvt+0x58>
 80044ea:	1c5c      	adds	r4, r3, #1
 80044ec:	9403      	str	r4, [sp, #12]
 80044ee:	7019      	strb	r1, [r3, #0]
 80044f0:	e7de      	b.n	80044b0 <__cvt+0x66>

080044f2 <__exponent>:
 80044f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044f4:	2900      	cmp	r1, #0
 80044f6:	bfba      	itte	lt
 80044f8:	4249      	neglt	r1, r1
 80044fa:	232d      	movlt	r3, #45	@ 0x2d
 80044fc:	232b      	movge	r3, #43	@ 0x2b
 80044fe:	2909      	cmp	r1, #9
 8004500:	7002      	strb	r2, [r0, #0]
 8004502:	7043      	strb	r3, [r0, #1]
 8004504:	dd29      	ble.n	800455a <__exponent+0x68>
 8004506:	f10d 0307 	add.w	r3, sp, #7
 800450a:	461d      	mov	r5, r3
 800450c:	270a      	movs	r7, #10
 800450e:	461a      	mov	r2, r3
 8004510:	fbb1 f6f7 	udiv	r6, r1, r7
 8004514:	fb07 1416 	mls	r4, r7, r6, r1
 8004518:	3430      	adds	r4, #48	@ 0x30
 800451a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800451e:	460c      	mov	r4, r1
 8004520:	2c63      	cmp	r4, #99	@ 0x63
 8004522:	f103 33ff 	add.w	r3, r3, #4294967295
 8004526:	4631      	mov	r1, r6
 8004528:	dcf1      	bgt.n	800450e <__exponent+0x1c>
 800452a:	3130      	adds	r1, #48	@ 0x30
 800452c:	1e94      	subs	r4, r2, #2
 800452e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004532:	1c41      	adds	r1, r0, #1
 8004534:	4623      	mov	r3, r4
 8004536:	42ab      	cmp	r3, r5
 8004538:	d30a      	bcc.n	8004550 <__exponent+0x5e>
 800453a:	f10d 0309 	add.w	r3, sp, #9
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	42ac      	cmp	r4, r5
 8004542:	bf88      	it	hi
 8004544:	2300      	movhi	r3, #0
 8004546:	3302      	adds	r3, #2
 8004548:	4403      	add	r3, r0
 800454a:	1a18      	subs	r0, r3, r0
 800454c:	b003      	add	sp, #12
 800454e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004550:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004554:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004558:	e7ed      	b.n	8004536 <__exponent+0x44>
 800455a:	2330      	movs	r3, #48	@ 0x30
 800455c:	3130      	adds	r1, #48	@ 0x30
 800455e:	7083      	strb	r3, [r0, #2]
 8004560:	70c1      	strb	r1, [r0, #3]
 8004562:	1d03      	adds	r3, r0, #4
 8004564:	e7f1      	b.n	800454a <__exponent+0x58>
	...

08004568 <_printf_float>:
 8004568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456c:	b08d      	sub	sp, #52	@ 0x34
 800456e:	460c      	mov	r4, r1
 8004570:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004574:	4616      	mov	r6, r2
 8004576:	461f      	mov	r7, r3
 8004578:	4605      	mov	r5, r0
 800457a:	f000 fcdf 	bl	8004f3c <_localeconv_r>
 800457e:	f8d0 b000 	ldr.w	fp, [r0]
 8004582:	4658      	mov	r0, fp
 8004584:	f7fb feac 	bl	80002e0 <strlen>
 8004588:	2300      	movs	r3, #0
 800458a:	930a      	str	r3, [sp, #40]	@ 0x28
 800458c:	f8d8 3000 	ldr.w	r3, [r8]
 8004590:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004594:	6822      	ldr	r2, [r4, #0]
 8004596:	9005      	str	r0, [sp, #20]
 8004598:	3307      	adds	r3, #7
 800459a:	f023 0307 	bic.w	r3, r3, #7
 800459e:	f103 0108 	add.w	r1, r3, #8
 80045a2:	f8c8 1000 	str.w	r1, [r8]
 80045a6:	ed93 0b00 	vldr	d0, [r3]
 80045aa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8004808 <_printf_float+0x2a0>
 80045ae:	eeb0 7bc0 	vabs.f64	d7, d0
 80045b2:	eeb4 7b46 	vcmp.f64	d7, d6
 80045b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ba:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80045be:	dd24      	ble.n	800460a <_printf_float+0xa2>
 80045c0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80045c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c8:	d502      	bpl.n	80045d0 <_printf_float+0x68>
 80045ca:	232d      	movs	r3, #45	@ 0x2d
 80045cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045d0:	498f      	ldr	r1, [pc, #572]	@ (8004810 <_printf_float+0x2a8>)
 80045d2:	4b90      	ldr	r3, [pc, #576]	@ (8004814 <_printf_float+0x2ac>)
 80045d4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80045d8:	bf8c      	ite	hi
 80045da:	4688      	movhi	r8, r1
 80045dc:	4698      	movls	r8, r3
 80045de:	f022 0204 	bic.w	r2, r2, #4
 80045e2:	2303      	movs	r3, #3
 80045e4:	6123      	str	r3, [r4, #16]
 80045e6:	6022      	str	r2, [r4, #0]
 80045e8:	f04f 0a00 	mov.w	sl, #0
 80045ec:	9700      	str	r7, [sp, #0]
 80045ee:	4633      	mov	r3, r6
 80045f0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80045f2:	4621      	mov	r1, r4
 80045f4:	4628      	mov	r0, r5
 80045f6:	f000 f9d1 	bl	800499c <_printf_common>
 80045fa:	3001      	adds	r0, #1
 80045fc:	f040 8089 	bne.w	8004712 <_printf_float+0x1aa>
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	b00d      	add	sp, #52	@ 0x34
 8004606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800460a:	eeb4 0b40 	vcmp.f64	d0, d0
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	d709      	bvc.n	8004628 <_printf_float+0xc0>
 8004614:	ee10 3a90 	vmov	r3, s1
 8004618:	2b00      	cmp	r3, #0
 800461a:	bfbc      	itt	lt
 800461c:	232d      	movlt	r3, #45	@ 0x2d
 800461e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004622:	497d      	ldr	r1, [pc, #500]	@ (8004818 <_printf_float+0x2b0>)
 8004624:	4b7d      	ldr	r3, [pc, #500]	@ (800481c <_printf_float+0x2b4>)
 8004626:	e7d5      	b.n	80045d4 <_printf_float+0x6c>
 8004628:	6863      	ldr	r3, [r4, #4]
 800462a:	1c59      	adds	r1, r3, #1
 800462c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8004630:	d139      	bne.n	80046a6 <_printf_float+0x13e>
 8004632:	2306      	movs	r3, #6
 8004634:	6063      	str	r3, [r4, #4]
 8004636:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800463a:	2300      	movs	r3, #0
 800463c:	6022      	str	r2, [r4, #0]
 800463e:	9303      	str	r3, [sp, #12]
 8004640:	ab0a      	add	r3, sp, #40	@ 0x28
 8004642:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004646:	ab09      	add	r3, sp, #36	@ 0x24
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	6861      	ldr	r1, [r4, #4]
 800464c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004650:	4628      	mov	r0, r5
 8004652:	f7ff fefa 	bl	800444a <__cvt>
 8004656:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800465a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800465c:	4680      	mov	r8, r0
 800465e:	d129      	bne.n	80046b4 <_printf_float+0x14c>
 8004660:	1cc8      	adds	r0, r1, #3
 8004662:	db02      	blt.n	800466a <_printf_float+0x102>
 8004664:	6863      	ldr	r3, [r4, #4]
 8004666:	4299      	cmp	r1, r3
 8004668:	dd41      	ble.n	80046ee <_printf_float+0x186>
 800466a:	f1a9 0902 	sub.w	r9, r9, #2
 800466e:	fa5f f989 	uxtb.w	r9, r9
 8004672:	3901      	subs	r1, #1
 8004674:	464a      	mov	r2, r9
 8004676:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800467a:	9109      	str	r1, [sp, #36]	@ 0x24
 800467c:	f7ff ff39 	bl	80044f2 <__exponent>
 8004680:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004682:	1813      	adds	r3, r2, r0
 8004684:	2a01      	cmp	r2, #1
 8004686:	4682      	mov	sl, r0
 8004688:	6123      	str	r3, [r4, #16]
 800468a:	dc02      	bgt.n	8004692 <_printf_float+0x12a>
 800468c:	6822      	ldr	r2, [r4, #0]
 800468e:	07d2      	lsls	r2, r2, #31
 8004690:	d501      	bpl.n	8004696 <_printf_float+0x12e>
 8004692:	3301      	adds	r3, #1
 8004694:	6123      	str	r3, [r4, #16]
 8004696:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0a6      	beq.n	80045ec <_printf_float+0x84>
 800469e:	232d      	movs	r3, #45	@ 0x2d
 80046a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046a4:	e7a2      	b.n	80045ec <_printf_float+0x84>
 80046a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80046aa:	d1c4      	bne.n	8004636 <_printf_float+0xce>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1c2      	bne.n	8004636 <_printf_float+0xce>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e7bf      	b.n	8004634 <_printf_float+0xcc>
 80046b4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80046b8:	d9db      	bls.n	8004672 <_printf_float+0x10a>
 80046ba:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80046be:	d118      	bne.n	80046f2 <_printf_float+0x18a>
 80046c0:	2900      	cmp	r1, #0
 80046c2:	6863      	ldr	r3, [r4, #4]
 80046c4:	dd0b      	ble.n	80046de <_printf_float+0x176>
 80046c6:	6121      	str	r1, [r4, #16]
 80046c8:	b913      	cbnz	r3, 80046d0 <_printf_float+0x168>
 80046ca:	6822      	ldr	r2, [r4, #0]
 80046cc:	07d0      	lsls	r0, r2, #31
 80046ce:	d502      	bpl.n	80046d6 <_printf_float+0x16e>
 80046d0:	3301      	adds	r3, #1
 80046d2:	440b      	add	r3, r1
 80046d4:	6123      	str	r3, [r4, #16]
 80046d6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80046d8:	f04f 0a00 	mov.w	sl, #0
 80046dc:	e7db      	b.n	8004696 <_printf_float+0x12e>
 80046de:	b913      	cbnz	r3, 80046e6 <_printf_float+0x17e>
 80046e0:	6822      	ldr	r2, [r4, #0]
 80046e2:	07d2      	lsls	r2, r2, #31
 80046e4:	d501      	bpl.n	80046ea <_printf_float+0x182>
 80046e6:	3302      	adds	r3, #2
 80046e8:	e7f4      	b.n	80046d4 <_printf_float+0x16c>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e7f2      	b.n	80046d4 <_printf_float+0x16c>
 80046ee:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80046f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046f4:	4299      	cmp	r1, r3
 80046f6:	db05      	blt.n	8004704 <_printf_float+0x19c>
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	6121      	str	r1, [r4, #16]
 80046fc:	07d8      	lsls	r0, r3, #31
 80046fe:	d5ea      	bpl.n	80046d6 <_printf_float+0x16e>
 8004700:	1c4b      	adds	r3, r1, #1
 8004702:	e7e7      	b.n	80046d4 <_printf_float+0x16c>
 8004704:	2900      	cmp	r1, #0
 8004706:	bfd4      	ite	le
 8004708:	f1c1 0202 	rsble	r2, r1, #2
 800470c:	2201      	movgt	r2, #1
 800470e:	4413      	add	r3, r2
 8004710:	e7e0      	b.n	80046d4 <_printf_float+0x16c>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	055a      	lsls	r2, r3, #21
 8004716:	d407      	bmi.n	8004728 <_printf_float+0x1c0>
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	4642      	mov	r2, r8
 800471c:	4631      	mov	r1, r6
 800471e:	4628      	mov	r0, r5
 8004720:	47b8      	blx	r7
 8004722:	3001      	adds	r0, #1
 8004724:	d12a      	bne.n	800477c <_printf_float+0x214>
 8004726:	e76b      	b.n	8004600 <_printf_float+0x98>
 8004728:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800472c:	f240 80e0 	bls.w	80048f0 <_printf_float+0x388>
 8004730:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004734:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473c:	d133      	bne.n	80047a6 <_printf_float+0x23e>
 800473e:	4a38      	ldr	r2, [pc, #224]	@ (8004820 <_printf_float+0x2b8>)
 8004740:	2301      	movs	r3, #1
 8004742:	4631      	mov	r1, r6
 8004744:	4628      	mov	r0, r5
 8004746:	47b8      	blx	r7
 8004748:	3001      	adds	r0, #1
 800474a:	f43f af59 	beq.w	8004600 <_printf_float+0x98>
 800474e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004752:	4543      	cmp	r3, r8
 8004754:	db02      	blt.n	800475c <_printf_float+0x1f4>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	07d8      	lsls	r0, r3, #31
 800475a:	d50f      	bpl.n	800477c <_printf_float+0x214>
 800475c:	9b05      	ldr	r3, [sp, #20]
 800475e:	465a      	mov	r2, fp
 8004760:	4631      	mov	r1, r6
 8004762:	4628      	mov	r0, r5
 8004764:	47b8      	blx	r7
 8004766:	3001      	adds	r0, #1
 8004768:	f43f af4a 	beq.w	8004600 <_printf_float+0x98>
 800476c:	f04f 0900 	mov.w	r9, #0
 8004770:	f108 38ff 	add.w	r8, r8, #4294967295
 8004774:	f104 0a1a 	add.w	sl, r4, #26
 8004778:	45c8      	cmp	r8, r9
 800477a:	dc09      	bgt.n	8004790 <_printf_float+0x228>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	079b      	lsls	r3, r3, #30
 8004780:	f100 8107 	bmi.w	8004992 <_printf_float+0x42a>
 8004784:	68e0      	ldr	r0, [r4, #12]
 8004786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004788:	4298      	cmp	r0, r3
 800478a:	bfb8      	it	lt
 800478c:	4618      	movlt	r0, r3
 800478e:	e739      	b.n	8004604 <_printf_float+0x9c>
 8004790:	2301      	movs	r3, #1
 8004792:	4652      	mov	r2, sl
 8004794:	4631      	mov	r1, r6
 8004796:	4628      	mov	r0, r5
 8004798:	47b8      	blx	r7
 800479a:	3001      	adds	r0, #1
 800479c:	f43f af30 	beq.w	8004600 <_printf_float+0x98>
 80047a0:	f109 0901 	add.w	r9, r9, #1
 80047a4:	e7e8      	b.n	8004778 <_printf_float+0x210>
 80047a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	dc3b      	bgt.n	8004824 <_printf_float+0x2bc>
 80047ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004820 <_printf_float+0x2b8>)
 80047ae:	2301      	movs	r3, #1
 80047b0:	4631      	mov	r1, r6
 80047b2:	4628      	mov	r0, r5
 80047b4:	47b8      	blx	r7
 80047b6:	3001      	adds	r0, #1
 80047b8:	f43f af22 	beq.w	8004600 <_printf_float+0x98>
 80047bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80047c0:	ea59 0303 	orrs.w	r3, r9, r3
 80047c4:	d102      	bne.n	80047cc <_printf_float+0x264>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	07d9      	lsls	r1, r3, #31
 80047ca:	d5d7      	bpl.n	800477c <_printf_float+0x214>
 80047cc:	9b05      	ldr	r3, [sp, #20]
 80047ce:	465a      	mov	r2, fp
 80047d0:	4631      	mov	r1, r6
 80047d2:	4628      	mov	r0, r5
 80047d4:	47b8      	blx	r7
 80047d6:	3001      	adds	r0, #1
 80047d8:	f43f af12 	beq.w	8004600 <_printf_float+0x98>
 80047dc:	f04f 0a00 	mov.w	sl, #0
 80047e0:	f104 0b1a 	add.w	fp, r4, #26
 80047e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047e6:	425b      	negs	r3, r3
 80047e8:	4553      	cmp	r3, sl
 80047ea:	dc01      	bgt.n	80047f0 <_printf_float+0x288>
 80047ec:	464b      	mov	r3, r9
 80047ee:	e794      	b.n	800471a <_printf_float+0x1b2>
 80047f0:	2301      	movs	r3, #1
 80047f2:	465a      	mov	r2, fp
 80047f4:	4631      	mov	r1, r6
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	f43f af00 	beq.w	8004600 <_printf_float+0x98>
 8004800:	f10a 0a01 	add.w	sl, sl, #1
 8004804:	e7ee      	b.n	80047e4 <_printf_float+0x27c>
 8004806:	bf00      	nop
 8004808:	ffffffff 	.word	0xffffffff
 800480c:	7fefffff 	.word	0x7fefffff
 8004810:	08007150 	.word	0x08007150
 8004814:	0800714c 	.word	0x0800714c
 8004818:	08007158 	.word	0x08007158
 800481c:	08007154 	.word	0x08007154
 8004820:	0800715c 	.word	0x0800715c
 8004824:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004826:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800482a:	4553      	cmp	r3, sl
 800482c:	bfa8      	it	ge
 800482e:	4653      	movge	r3, sl
 8004830:	2b00      	cmp	r3, #0
 8004832:	4699      	mov	r9, r3
 8004834:	dc37      	bgt.n	80048a6 <_printf_float+0x33e>
 8004836:	2300      	movs	r3, #0
 8004838:	9307      	str	r3, [sp, #28]
 800483a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800483e:	f104 021a 	add.w	r2, r4, #26
 8004842:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004844:	9907      	ldr	r1, [sp, #28]
 8004846:	9306      	str	r3, [sp, #24]
 8004848:	eba3 0309 	sub.w	r3, r3, r9
 800484c:	428b      	cmp	r3, r1
 800484e:	dc31      	bgt.n	80048b4 <_printf_float+0x34c>
 8004850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004852:	459a      	cmp	sl, r3
 8004854:	dc3b      	bgt.n	80048ce <_printf_float+0x366>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	07da      	lsls	r2, r3, #31
 800485a:	d438      	bmi.n	80048ce <_printf_float+0x366>
 800485c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800485e:	ebaa 0903 	sub.w	r9, sl, r3
 8004862:	9b06      	ldr	r3, [sp, #24]
 8004864:	ebaa 0303 	sub.w	r3, sl, r3
 8004868:	4599      	cmp	r9, r3
 800486a:	bfa8      	it	ge
 800486c:	4699      	movge	r9, r3
 800486e:	f1b9 0f00 	cmp.w	r9, #0
 8004872:	dc34      	bgt.n	80048de <_printf_float+0x376>
 8004874:	f04f 0800 	mov.w	r8, #0
 8004878:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800487c:	f104 0b1a 	add.w	fp, r4, #26
 8004880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004882:	ebaa 0303 	sub.w	r3, sl, r3
 8004886:	eba3 0309 	sub.w	r3, r3, r9
 800488a:	4543      	cmp	r3, r8
 800488c:	f77f af76 	ble.w	800477c <_printf_float+0x214>
 8004890:	2301      	movs	r3, #1
 8004892:	465a      	mov	r2, fp
 8004894:	4631      	mov	r1, r6
 8004896:	4628      	mov	r0, r5
 8004898:	47b8      	blx	r7
 800489a:	3001      	adds	r0, #1
 800489c:	f43f aeb0 	beq.w	8004600 <_printf_float+0x98>
 80048a0:	f108 0801 	add.w	r8, r8, #1
 80048a4:	e7ec      	b.n	8004880 <_printf_float+0x318>
 80048a6:	4642      	mov	r2, r8
 80048a8:	4631      	mov	r1, r6
 80048aa:	4628      	mov	r0, r5
 80048ac:	47b8      	blx	r7
 80048ae:	3001      	adds	r0, #1
 80048b0:	d1c1      	bne.n	8004836 <_printf_float+0x2ce>
 80048b2:	e6a5      	b.n	8004600 <_printf_float+0x98>
 80048b4:	2301      	movs	r3, #1
 80048b6:	4631      	mov	r1, r6
 80048b8:	4628      	mov	r0, r5
 80048ba:	9206      	str	r2, [sp, #24]
 80048bc:	47b8      	blx	r7
 80048be:	3001      	adds	r0, #1
 80048c0:	f43f ae9e 	beq.w	8004600 <_printf_float+0x98>
 80048c4:	9b07      	ldr	r3, [sp, #28]
 80048c6:	9a06      	ldr	r2, [sp, #24]
 80048c8:	3301      	adds	r3, #1
 80048ca:	9307      	str	r3, [sp, #28]
 80048cc:	e7b9      	b.n	8004842 <_printf_float+0x2da>
 80048ce:	9b05      	ldr	r3, [sp, #20]
 80048d0:	465a      	mov	r2, fp
 80048d2:	4631      	mov	r1, r6
 80048d4:	4628      	mov	r0, r5
 80048d6:	47b8      	blx	r7
 80048d8:	3001      	adds	r0, #1
 80048da:	d1bf      	bne.n	800485c <_printf_float+0x2f4>
 80048dc:	e690      	b.n	8004600 <_printf_float+0x98>
 80048de:	9a06      	ldr	r2, [sp, #24]
 80048e0:	464b      	mov	r3, r9
 80048e2:	4442      	add	r2, r8
 80048e4:	4631      	mov	r1, r6
 80048e6:	4628      	mov	r0, r5
 80048e8:	47b8      	blx	r7
 80048ea:	3001      	adds	r0, #1
 80048ec:	d1c2      	bne.n	8004874 <_printf_float+0x30c>
 80048ee:	e687      	b.n	8004600 <_printf_float+0x98>
 80048f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80048f4:	f1b9 0f01 	cmp.w	r9, #1
 80048f8:	dc01      	bgt.n	80048fe <_printf_float+0x396>
 80048fa:	07db      	lsls	r3, r3, #31
 80048fc:	d536      	bpl.n	800496c <_printf_float+0x404>
 80048fe:	2301      	movs	r3, #1
 8004900:	4642      	mov	r2, r8
 8004902:	4631      	mov	r1, r6
 8004904:	4628      	mov	r0, r5
 8004906:	47b8      	blx	r7
 8004908:	3001      	adds	r0, #1
 800490a:	f43f ae79 	beq.w	8004600 <_printf_float+0x98>
 800490e:	9b05      	ldr	r3, [sp, #20]
 8004910:	465a      	mov	r2, fp
 8004912:	4631      	mov	r1, r6
 8004914:	4628      	mov	r0, r5
 8004916:	47b8      	blx	r7
 8004918:	3001      	adds	r0, #1
 800491a:	f43f ae71 	beq.w	8004600 <_printf_float+0x98>
 800491e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004922:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492a:	f109 39ff 	add.w	r9, r9, #4294967295
 800492e:	d018      	beq.n	8004962 <_printf_float+0x3fa>
 8004930:	464b      	mov	r3, r9
 8004932:	f108 0201 	add.w	r2, r8, #1
 8004936:	4631      	mov	r1, r6
 8004938:	4628      	mov	r0, r5
 800493a:	47b8      	blx	r7
 800493c:	3001      	adds	r0, #1
 800493e:	d10c      	bne.n	800495a <_printf_float+0x3f2>
 8004940:	e65e      	b.n	8004600 <_printf_float+0x98>
 8004942:	2301      	movs	r3, #1
 8004944:	465a      	mov	r2, fp
 8004946:	4631      	mov	r1, r6
 8004948:	4628      	mov	r0, r5
 800494a:	47b8      	blx	r7
 800494c:	3001      	adds	r0, #1
 800494e:	f43f ae57 	beq.w	8004600 <_printf_float+0x98>
 8004952:	f108 0801 	add.w	r8, r8, #1
 8004956:	45c8      	cmp	r8, r9
 8004958:	dbf3      	blt.n	8004942 <_printf_float+0x3da>
 800495a:	4653      	mov	r3, sl
 800495c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004960:	e6dc      	b.n	800471c <_printf_float+0x1b4>
 8004962:	f04f 0800 	mov.w	r8, #0
 8004966:	f104 0b1a 	add.w	fp, r4, #26
 800496a:	e7f4      	b.n	8004956 <_printf_float+0x3ee>
 800496c:	2301      	movs	r3, #1
 800496e:	4642      	mov	r2, r8
 8004970:	e7e1      	b.n	8004936 <_printf_float+0x3ce>
 8004972:	2301      	movs	r3, #1
 8004974:	464a      	mov	r2, r9
 8004976:	4631      	mov	r1, r6
 8004978:	4628      	mov	r0, r5
 800497a:	47b8      	blx	r7
 800497c:	3001      	adds	r0, #1
 800497e:	f43f ae3f 	beq.w	8004600 <_printf_float+0x98>
 8004982:	f108 0801 	add.w	r8, r8, #1
 8004986:	68e3      	ldr	r3, [r4, #12]
 8004988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800498a:	1a5b      	subs	r3, r3, r1
 800498c:	4543      	cmp	r3, r8
 800498e:	dcf0      	bgt.n	8004972 <_printf_float+0x40a>
 8004990:	e6f8      	b.n	8004784 <_printf_float+0x21c>
 8004992:	f04f 0800 	mov.w	r8, #0
 8004996:	f104 0919 	add.w	r9, r4, #25
 800499a:	e7f4      	b.n	8004986 <_printf_float+0x41e>

0800499c <_printf_common>:
 800499c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a0:	4616      	mov	r6, r2
 80049a2:	4698      	mov	r8, r3
 80049a4:	688a      	ldr	r2, [r1, #8]
 80049a6:	690b      	ldr	r3, [r1, #16]
 80049a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049ac:	4293      	cmp	r3, r2
 80049ae:	bfb8      	it	lt
 80049b0:	4613      	movlt	r3, r2
 80049b2:	6033      	str	r3, [r6, #0]
 80049b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049b8:	4607      	mov	r7, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	b10a      	cbz	r2, 80049c2 <_printf_common+0x26>
 80049be:	3301      	adds	r3, #1
 80049c0:	6033      	str	r3, [r6, #0]
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	0699      	lsls	r1, r3, #26
 80049c6:	bf42      	ittt	mi
 80049c8:	6833      	ldrmi	r3, [r6, #0]
 80049ca:	3302      	addmi	r3, #2
 80049cc:	6033      	strmi	r3, [r6, #0]
 80049ce:	6825      	ldr	r5, [r4, #0]
 80049d0:	f015 0506 	ands.w	r5, r5, #6
 80049d4:	d106      	bne.n	80049e4 <_printf_common+0x48>
 80049d6:	f104 0a19 	add.w	sl, r4, #25
 80049da:	68e3      	ldr	r3, [r4, #12]
 80049dc:	6832      	ldr	r2, [r6, #0]
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	42ab      	cmp	r3, r5
 80049e2:	dc26      	bgt.n	8004a32 <_printf_common+0x96>
 80049e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049e8:	6822      	ldr	r2, [r4, #0]
 80049ea:	3b00      	subs	r3, #0
 80049ec:	bf18      	it	ne
 80049ee:	2301      	movne	r3, #1
 80049f0:	0692      	lsls	r2, r2, #26
 80049f2:	d42b      	bmi.n	8004a4c <_printf_common+0xb0>
 80049f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049f8:	4641      	mov	r1, r8
 80049fa:	4638      	mov	r0, r7
 80049fc:	47c8      	blx	r9
 80049fe:	3001      	adds	r0, #1
 8004a00:	d01e      	beq.n	8004a40 <_printf_common+0xa4>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	6922      	ldr	r2, [r4, #16]
 8004a06:	f003 0306 	and.w	r3, r3, #6
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	bf02      	ittt	eq
 8004a0e:	68e5      	ldreq	r5, [r4, #12]
 8004a10:	6833      	ldreq	r3, [r6, #0]
 8004a12:	1aed      	subeq	r5, r5, r3
 8004a14:	68a3      	ldr	r3, [r4, #8]
 8004a16:	bf0c      	ite	eq
 8004a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a1c:	2500      	movne	r5, #0
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	bfc4      	itt	gt
 8004a22:	1a9b      	subgt	r3, r3, r2
 8004a24:	18ed      	addgt	r5, r5, r3
 8004a26:	2600      	movs	r6, #0
 8004a28:	341a      	adds	r4, #26
 8004a2a:	42b5      	cmp	r5, r6
 8004a2c:	d11a      	bne.n	8004a64 <_printf_common+0xc8>
 8004a2e:	2000      	movs	r0, #0
 8004a30:	e008      	b.n	8004a44 <_printf_common+0xa8>
 8004a32:	2301      	movs	r3, #1
 8004a34:	4652      	mov	r2, sl
 8004a36:	4641      	mov	r1, r8
 8004a38:	4638      	mov	r0, r7
 8004a3a:	47c8      	blx	r9
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d103      	bne.n	8004a48 <_printf_common+0xac>
 8004a40:	f04f 30ff 	mov.w	r0, #4294967295
 8004a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a48:	3501      	adds	r5, #1
 8004a4a:	e7c6      	b.n	80049da <_printf_common+0x3e>
 8004a4c:	18e1      	adds	r1, r4, r3
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	2030      	movs	r0, #48	@ 0x30
 8004a52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a56:	4422      	add	r2, r4
 8004a58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a60:	3302      	adds	r3, #2
 8004a62:	e7c7      	b.n	80049f4 <_printf_common+0x58>
 8004a64:	2301      	movs	r3, #1
 8004a66:	4622      	mov	r2, r4
 8004a68:	4641      	mov	r1, r8
 8004a6a:	4638      	mov	r0, r7
 8004a6c:	47c8      	blx	r9
 8004a6e:	3001      	adds	r0, #1
 8004a70:	d0e6      	beq.n	8004a40 <_printf_common+0xa4>
 8004a72:	3601      	adds	r6, #1
 8004a74:	e7d9      	b.n	8004a2a <_printf_common+0x8e>
	...

08004a78 <_printf_i>:
 8004a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a7c:	7e0f      	ldrb	r7, [r1, #24]
 8004a7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a80:	2f78      	cmp	r7, #120	@ 0x78
 8004a82:	4691      	mov	r9, r2
 8004a84:	4680      	mov	r8, r0
 8004a86:	460c      	mov	r4, r1
 8004a88:	469a      	mov	sl, r3
 8004a8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a8e:	d807      	bhi.n	8004aa0 <_printf_i+0x28>
 8004a90:	2f62      	cmp	r7, #98	@ 0x62
 8004a92:	d80a      	bhi.n	8004aaa <_printf_i+0x32>
 8004a94:	2f00      	cmp	r7, #0
 8004a96:	f000 80d1 	beq.w	8004c3c <_printf_i+0x1c4>
 8004a9a:	2f58      	cmp	r7, #88	@ 0x58
 8004a9c:	f000 80b8 	beq.w	8004c10 <_printf_i+0x198>
 8004aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004aa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004aa8:	e03a      	b.n	8004b20 <_printf_i+0xa8>
 8004aaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004aae:	2b15      	cmp	r3, #21
 8004ab0:	d8f6      	bhi.n	8004aa0 <_printf_i+0x28>
 8004ab2:	a101      	add	r1, pc, #4	@ (adr r1, 8004ab8 <_printf_i+0x40>)
 8004ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ab8:	08004b11 	.word	0x08004b11
 8004abc:	08004b25 	.word	0x08004b25
 8004ac0:	08004aa1 	.word	0x08004aa1
 8004ac4:	08004aa1 	.word	0x08004aa1
 8004ac8:	08004aa1 	.word	0x08004aa1
 8004acc:	08004aa1 	.word	0x08004aa1
 8004ad0:	08004b25 	.word	0x08004b25
 8004ad4:	08004aa1 	.word	0x08004aa1
 8004ad8:	08004aa1 	.word	0x08004aa1
 8004adc:	08004aa1 	.word	0x08004aa1
 8004ae0:	08004aa1 	.word	0x08004aa1
 8004ae4:	08004c23 	.word	0x08004c23
 8004ae8:	08004b4f 	.word	0x08004b4f
 8004aec:	08004bdd 	.word	0x08004bdd
 8004af0:	08004aa1 	.word	0x08004aa1
 8004af4:	08004aa1 	.word	0x08004aa1
 8004af8:	08004c45 	.word	0x08004c45
 8004afc:	08004aa1 	.word	0x08004aa1
 8004b00:	08004b4f 	.word	0x08004b4f
 8004b04:	08004aa1 	.word	0x08004aa1
 8004b08:	08004aa1 	.word	0x08004aa1
 8004b0c:	08004be5 	.word	0x08004be5
 8004b10:	6833      	ldr	r3, [r6, #0]
 8004b12:	1d1a      	adds	r2, r3, #4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6032      	str	r2, [r6, #0]
 8004b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b20:	2301      	movs	r3, #1
 8004b22:	e09c      	b.n	8004c5e <_printf_i+0x1e6>
 8004b24:	6833      	ldr	r3, [r6, #0]
 8004b26:	6820      	ldr	r0, [r4, #0]
 8004b28:	1d19      	adds	r1, r3, #4
 8004b2a:	6031      	str	r1, [r6, #0]
 8004b2c:	0606      	lsls	r6, r0, #24
 8004b2e:	d501      	bpl.n	8004b34 <_printf_i+0xbc>
 8004b30:	681d      	ldr	r5, [r3, #0]
 8004b32:	e003      	b.n	8004b3c <_printf_i+0xc4>
 8004b34:	0645      	lsls	r5, r0, #25
 8004b36:	d5fb      	bpl.n	8004b30 <_printf_i+0xb8>
 8004b38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b3c:	2d00      	cmp	r5, #0
 8004b3e:	da03      	bge.n	8004b48 <_printf_i+0xd0>
 8004b40:	232d      	movs	r3, #45	@ 0x2d
 8004b42:	426d      	negs	r5, r5
 8004b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b48:	4858      	ldr	r0, [pc, #352]	@ (8004cac <_printf_i+0x234>)
 8004b4a:	230a      	movs	r3, #10
 8004b4c:	e011      	b.n	8004b72 <_printf_i+0xfa>
 8004b4e:	6821      	ldr	r1, [r4, #0]
 8004b50:	6833      	ldr	r3, [r6, #0]
 8004b52:	0608      	lsls	r0, r1, #24
 8004b54:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b58:	d402      	bmi.n	8004b60 <_printf_i+0xe8>
 8004b5a:	0649      	lsls	r1, r1, #25
 8004b5c:	bf48      	it	mi
 8004b5e:	b2ad      	uxthmi	r5, r5
 8004b60:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b62:	4852      	ldr	r0, [pc, #328]	@ (8004cac <_printf_i+0x234>)
 8004b64:	6033      	str	r3, [r6, #0]
 8004b66:	bf14      	ite	ne
 8004b68:	230a      	movne	r3, #10
 8004b6a:	2308      	moveq	r3, #8
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b72:	6866      	ldr	r6, [r4, #4]
 8004b74:	60a6      	str	r6, [r4, #8]
 8004b76:	2e00      	cmp	r6, #0
 8004b78:	db05      	blt.n	8004b86 <_printf_i+0x10e>
 8004b7a:	6821      	ldr	r1, [r4, #0]
 8004b7c:	432e      	orrs	r6, r5
 8004b7e:	f021 0104 	bic.w	r1, r1, #4
 8004b82:	6021      	str	r1, [r4, #0]
 8004b84:	d04b      	beq.n	8004c1e <_printf_i+0x1a6>
 8004b86:	4616      	mov	r6, r2
 8004b88:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b8c:	fb03 5711 	mls	r7, r3, r1, r5
 8004b90:	5dc7      	ldrb	r7, [r0, r7]
 8004b92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b96:	462f      	mov	r7, r5
 8004b98:	42bb      	cmp	r3, r7
 8004b9a:	460d      	mov	r5, r1
 8004b9c:	d9f4      	bls.n	8004b88 <_printf_i+0x110>
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d10b      	bne.n	8004bba <_printf_i+0x142>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	07df      	lsls	r7, r3, #31
 8004ba6:	d508      	bpl.n	8004bba <_printf_i+0x142>
 8004ba8:	6923      	ldr	r3, [r4, #16]
 8004baa:	6861      	ldr	r1, [r4, #4]
 8004bac:	4299      	cmp	r1, r3
 8004bae:	bfde      	ittt	le
 8004bb0:	2330      	movle	r3, #48	@ 0x30
 8004bb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bba:	1b92      	subs	r2, r2, r6
 8004bbc:	6122      	str	r2, [r4, #16]
 8004bbe:	f8cd a000 	str.w	sl, [sp]
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	aa03      	add	r2, sp, #12
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	4640      	mov	r0, r8
 8004bca:	f7ff fee7 	bl	800499c <_printf_common>
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d14a      	bne.n	8004c68 <_printf_i+0x1f0>
 8004bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd6:	b004      	add	sp, #16
 8004bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	f043 0320 	orr.w	r3, r3, #32
 8004be2:	6023      	str	r3, [r4, #0]
 8004be4:	4832      	ldr	r0, [pc, #200]	@ (8004cb0 <_printf_i+0x238>)
 8004be6:	2778      	movs	r7, #120	@ 0x78
 8004be8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	6831      	ldr	r1, [r6, #0]
 8004bf0:	061f      	lsls	r7, r3, #24
 8004bf2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bf6:	d402      	bmi.n	8004bfe <_printf_i+0x186>
 8004bf8:	065f      	lsls	r7, r3, #25
 8004bfa:	bf48      	it	mi
 8004bfc:	b2ad      	uxthmi	r5, r5
 8004bfe:	6031      	str	r1, [r6, #0]
 8004c00:	07d9      	lsls	r1, r3, #31
 8004c02:	bf44      	itt	mi
 8004c04:	f043 0320 	orrmi.w	r3, r3, #32
 8004c08:	6023      	strmi	r3, [r4, #0]
 8004c0a:	b11d      	cbz	r5, 8004c14 <_printf_i+0x19c>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	e7ad      	b.n	8004b6c <_printf_i+0xf4>
 8004c10:	4826      	ldr	r0, [pc, #152]	@ (8004cac <_printf_i+0x234>)
 8004c12:	e7e9      	b.n	8004be8 <_printf_i+0x170>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	f023 0320 	bic.w	r3, r3, #32
 8004c1a:	6023      	str	r3, [r4, #0]
 8004c1c:	e7f6      	b.n	8004c0c <_printf_i+0x194>
 8004c1e:	4616      	mov	r6, r2
 8004c20:	e7bd      	b.n	8004b9e <_printf_i+0x126>
 8004c22:	6833      	ldr	r3, [r6, #0]
 8004c24:	6825      	ldr	r5, [r4, #0]
 8004c26:	6961      	ldr	r1, [r4, #20]
 8004c28:	1d18      	adds	r0, r3, #4
 8004c2a:	6030      	str	r0, [r6, #0]
 8004c2c:	062e      	lsls	r6, r5, #24
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	d501      	bpl.n	8004c36 <_printf_i+0x1be>
 8004c32:	6019      	str	r1, [r3, #0]
 8004c34:	e002      	b.n	8004c3c <_printf_i+0x1c4>
 8004c36:	0668      	lsls	r0, r5, #25
 8004c38:	d5fb      	bpl.n	8004c32 <_printf_i+0x1ba>
 8004c3a:	8019      	strh	r1, [r3, #0]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	6123      	str	r3, [r4, #16]
 8004c40:	4616      	mov	r6, r2
 8004c42:	e7bc      	b.n	8004bbe <_printf_i+0x146>
 8004c44:	6833      	ldr	r3, [r6, #0]
 8004c46:	1d1a      	adds	r2, r3, #4
 8004c48:	6032      	str	r2, [r6, #0]
 8004c4a:	681e      	ldr	r6, [r3, #0]
 8004c4c:	6862      	ldr	r2, [r4, #4]
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4630      	mov	r0, r6
 8004c52:	f7fb faf5 	bl	8000240 <memchr>
 8004c56:	b108      	cbz	r0, 8004c5c <_printf_i+0x1e4>
 8004c58:	1b80      	subs	r0, r0, r6
 8004c5a:	6060      	str	r0, [r4, #4]
 8004c5c:	6863      	ldr	r3, [r4, #4]
 8004c5e:	6123      	str	r3, [r4, #16]
 8004c60:	2300      	movs	r3, #0
 8004c62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c66:	e7aa      	b.n	8004bbe <_printf_i+0x146>
 8004c68:	6923      	ldr	r3, [r4, #16]
 8004c6a:	4632      	mov	r2, r6
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	4640      	mov	r0, r8
 8004c70:	47d0      	blx	sl
 8004c72:	3001      	adds	r0, #1
 8004c74:	d0ad      	beq.n	8004bd2 <_printf_i+0x15a>
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	079b      	lsls	r3, r3, #30
 8004c7a:	d413      	bmi.n	8004ca4 <_printf_i+0x22c>
 8004c7c:	68e0      	ldr	r0, [r4, #12]
 8004c7e:	9b03      	ldr	r3, [sp, #12]
 8004c80:	4298      	cmp	r0, r3
 8004c82:	bfb8      	it	lt
 8004c84:	4618      	movlt	r0, r3
 8004c86:	e7a6      	b.n	8004bd6 <_printf_i+0x15e>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	4632      	mov	r2, r6
 8004c8c:	4649      	mov	r1, r9
 8004c8e:	4640      	mov	r0, r8
 8004c90:	47d0      	blx	sl
 8004c92:	3001      	adds	r0, #1
 8004c94:	d09d      	beq.n	8004bd2 <_printf_i+0x15a>
 8004c96:	3501      	adds	r5, #1
 8004c98:	68e3      	ldr	r3, [r4, #12]
 8004c9a:	9903      	ldr	r1, [sp, #12]
 8004c9c:	1a5b      	subs	r3, r3, r1
 8004c9e:	42ab      	cmp	r3, r5
 8004ca0:	dcf2      	bgt.n	8004c88 <_printf_i+0x210>
 8004ca2:	e7eb      	b.n	8004c7c <_printf_i+0x204>
 8004ca4:	2500      	movs	r5, #0
 8004ca6:	f104 0619 	add.w	r6, r4, #25
 8004caa:	e7f5      	b.n	8004c98 <_printf_i+0x220>
 8004cac:	0800715e 	.word	0x0800715e
 8004cb0:	0800716f 	.word	0x0800716f

08004cb4 <std>:
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	b510      	push	{r4, lr}
 8004cb8:	4604      	mov	r4, r0
 8004cba:	e9c0 3300 	strd	r3, r3, [r0]
 8004cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cc2:	6083      	str	r3, [r0, #8]
 8004cc4:	8181      	strh	r1, [r0, #12]
 8004cc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004cc8:	81c2      	strh	r2, [r0, #14]
 8004cca:	6183      	str	r3, [r0, #24]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	2208      	movs	r2, #8
 8004cd0:	305c      	adds	r0, #92	@ 0x5c
 8004cd2:	f000 f92a 	bl	8004f2a <memset>
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d0c <std+0x58>)
 8004cd8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004cda:	4b0d      	ldr	r3, [pc, #52]	@ (8004d10 <std+0x5c>)
 8004cdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004cde:	4b0d      	ldr	r3, [pc, #52]	@ (8004d14 <std+0x60>)
 8004ce0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d18 <std+0x64>)
 8004ce4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d1c <std+0x68>)
 8004ce8:	6224      	str	r4, [r4, #32]
 8004cea:	429c      	cmp	r4, r3
 8004cec:	d006      	beq.n	8004cfc <std+0x48>
 8004cee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cf2:	4294      	cmp	r4, r2
 8004cf4:	d002      	beq.n	8004cfc <std+0x48>
 8004cf6:	33d0      	adds	r3, #208	@ 0xd0
 8004cf8:	429c      	cmp	r4, r3
 8004cfa:	d105      	bne.n	8004d08 <std+0x54>
 8004cfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d04:	f000 b98e 	b.w	8005024 <__retarget_lock_init_recursive>
 8004d08:	bd10      	pop	{r4, pc}
 8004d0a:	bf00      	nop
 8004d0c:	08004ea5 	.word	0x08004ea5
 8004d10:	08004ec7 	.word	0x08004ec7
 8004d14:	08004eff 	.word	0x08004eff
 8004d18:	08004f23 	.word	0x08004f23
 8004d1c:	200003ec 	.word	0x200003ec

08004d20 <stdio_exit_handler>:
 8004d20:	4a02      	ldr	r2, [pc, #8]	@ (8004d2c <stdio_exit_handler+0xc>)
 8004d22:	4903      	ldr	r1, [pc, #12]	@ (8004d30 <stdio_exit_handler+0x10>)
 8004d24:	4803      	ldr	r0, [pc, #12]	@ (8004d34 <stdio_exit_handler+0x14>)
 8004d26:	f000 b869 	b.w	8004dfc <_fwalk_sglue>
 8004d2a:	bf00      	nop
 8004d2c:	2000000c 	.word	0x2000000c
 8004d30:	080068a9 	.word	0x080068a9
 8004d34:	2000001c 	.word	0x2000001c

08004d38 <cleanup_stdio>:
 8004d38:	6841      	ldr	r1, [r0, #4]
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <cleanup_stdio+0x34>)
 8004d3c:	4299      	cmp	r1, r3
 8004d3e:	b510      	push	{r4, lr}
 8004d40:	4604      	mov	r4, r0
 8004d42:	d001      	beq.n	8004d48 <cleanup_stdio+0x10>
 8004d44:	f001 fdb0 	bl	80068a8 <_fflush_r>
 8004d48:	68a1      	ldr	r1, [r4, #8]
 8004d4a:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <cleanup_stdio+0x38>)
 8004d4c:	4299      	cmp	r1, r3
 8004d4e:	d002      	beq.n	8004d56 <cleanup_stdio+0x1e>
 8004d50:	4620      	mov	r0, r4
 8004d52:	f001 fda9 	bl	80068a8 <_fflush_r>
 8004d56:	68e1      	ldr	r1, [r4, #12]
 8004d58:	4b06      	ldr	r3, [pc, #24]	@ (8004d74 <cleanup_stdio+0x3c>)
 8004d5a:	4299      	cmp	r1, r3
 8004d5c:	d004      	beq.n	8004d68 <cleanup_stdio+0x30>
 8004d5e:	4620      	mov	r0, r4
 8004d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d64:	f001 bda0 	b.w	80068a8 <_fflush_r>
 8004d68:	bd10      	pop	{r4, pc}
 8004d6a:	bf00      	nop
 8004d6c:	200003ec 	.word	0x200003ec
 8004d70:	20000454 	.word	0x20000454
 8004d74:	200004bc 	.word	0x200004bc

08004d78 <global_stdio_init.part.0>:
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <global_stdio_init.part.0+0x30>)
 8004d7c:	4c0b      	ldr	r4, [pc, #44]	@ (8004dac <global_stdio_init.part.0+0x34>)
 8004d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8004db0 <global_stdio_init.part.0+0x38>)
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	4620      	mov	r0, r4
 8004d84:	2200      	movs	r2, #0
 8004d86:	2104      	movs	r1, #4
 8004d88:	f7ff ff94 	bl	8004cb4 <std>
 8004d8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d90:	2201      	movs	r2, #1
 8004d92:	2109      	movs	r1, #9
 8004d94:	f7ff ff8e 	bl	8004cb4 <std>
 8004d98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da2:	2112      	movs	r1, #18
 8004da4:	f7ff bf86 	b.w	8004cb4 <std>
 8004da8:	20000524 	.word	0x20000524
 8004dac:	200003ec 	.word	0x200003ec
 8004db0:	08004d21 	.word	0x08004d21

08004db4 <__sfp_lock_acquire>:
 8004db4:	4801      	ldr	r0, [pc, #4]	@ (8004dbc <__sfp_lock_acquire+0x8>)
 8004db6:	f000 b936 	b.w	8005026 <__retarget_lock_acquire_recursive>
 8004dba:	bf00      	nop
 8004dbc:	2000052d 	.word	0x2000052d

08004dc0 <__sfp_lock_release>:
 8004dc0:	4801      	ldr	r0, [pc, #4]	@ (8004dc8 <__sfp_lock_release+0x8>)
 8004dc2:	f000 b931 	b.w	8005028 <__retarget_lock_release_recursive>
 8004dc6:	bf00      	nop
 8004dc8:	2000052d 	.word	0x2000052d

08004dcc <__sinit>:
 8004dcc:	b510      	push	{r4, lr}
 8004dce:	4604      	mov	r4, r0
 8004dd0:	f7ff fff0 	bl	8004db4 <__sfp_lock_acquire>
 8004dd4:	6a23      	ldr	r3, [r4, #32]
 8004dd6:	b11b      	cbz	r3, 8004de0 <__sinit+0x14>
 8004dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ddc:	f7ff bff0 	b.w	8004dc0 <__sfp_lock_release>
 8004de0:	4b04      	ldr	r3, [pc, #16]	@ (8004df4 <__sinit+0x28>)
 8004de2:	6223      	str	r3, [r4, #32]
 8004de4:	4b04      	ldr	r3, [pc, #16]	@ (8004df8 <__sinit+0x2c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f5      	bne.n	8004dd8 <__sinit+0xc>
 8004dec:	f7ff ffc4 	bl	8004d78 <global_stdio_init.part.0>
 8004df0:	e7f2      	b.n	8004dd8 <__sinit+0xc>
 8004df2:	bf00      	nop
 8004df4:	08004d39 	.word	0x08004d39
 8004df8:	20000524 	.word	0x20000524

08004dfc <_fwalk_sglue>:
 8004dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e00:	4607      	mov	r7, r0
 8004e02:	4688      	mov	r8, r1
 8004e04:	4614      	mov	r4, r2
 8004e06:	2600      	movs	r6, #0
 8004e08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e0c:	f1b9 0901 	subs.w	r9, r9, #1
 8004e10:	d505      	bpl.n	8004e1e <_fwalk_sglue+0x22>
 8004e12:	6824      	ldr	r4, [r4, #0]
 8004e14:	2c00      	cmp	r4, #0
 8004e16:	d1f7      	bne.n	8004e08 <_fwalk_sglue+0xc>
 8004e18:	4630      	mov	r0, r6
 8004e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e1e:	89ab      	ldrh	r3, [r5, #12]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d907      	bls.n	8004e34 <_fwalk_sglue+0x38>
 8004e24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	d003      	beq.n	8004e34 <_fwalk_sglue+0x38>
 8004e2c:	4629      	mov	r1, r5
 8004e2e:	4638      	mov	r0, r7
 8004e30:	47c0      	blx	r8
 8004e32:	4306      	orrs	r6, r0
 8004e34:	3568      	adds	r5, #104	@ 0x68
 8004e36:	e7e9      	b.n	8004e0c <_fwalk_sglue+0x10>

08004e38 <sniprintf>:
 8004e38:	b40c      	push	{r2, r3}
 8004e3a:	b530      	push	{r4, r5, lr}
 8004e3c:	4b18      	ldr	r3, [pc, #96]	@ (8004ea0 <sniprintf+0x68>)
 8004e3e:	1e0c      	subs	r4, r1, #0
 8004e40:	681d      	ldr	r5, [r3, #0]
 8004e42:	b09d      	sub	sp, #116	@ 0x74
 8004e44:	da08      	bge.n	8004e58 <sniprintf+0x20>
 8004e46:	238b      	movs	r3, #139	@ 0x8b
 8004e48:	602b      	str	r3, [r5, #0]
 8004e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e4e:	b01d      	add	sp, #116	@ 0x74
 8004e50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e54:	b002      	add	sp, #8
 8004e56:	4770      	bx	lr
 8004e58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004e5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004e66:	bf14      	ite	ne
 8004e68:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004e6c:	4623      	moveq	r3, r4
 8004e6e:	9304      	str	r3, [sp, #16]
 8004e70:	9307      	str	r3, [sp, #28]
 8004e72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e76:	9002      	str	r0, [sp, #8]
 8004e78:	9006      	str	r0, [sp, #24]
 8004e7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004e7e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004e80:	ab21      	add	r3, sp, #132	@ 0x84
 8004e82:	a902      	add	r1, sp, #8
 8004e84:	4628      	mov	r0, r5
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	f001 fb8e 	bl	80065a8 <_svfiprintf_r>
 8004e8c:	1c43      	adds	r3, r0, #1
 8004e8e:	bfbc      	itt	lt
 8004e90:	238b      	movlt	r3, #139	@ 0x8b
 8004e92:	602b      	strlt	r3, [r5, #0]
 8004e94:	2c00      	cmp	r4, #0
 8004e96:	d0da      	beq.n	8004e4e <sniprintf+0x16>
 8004e98:	9b02      	ldr	r3, [sp, #8]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	e7d6      	b.n	8004e4e <sniprintf+0x16>
 8004ea0:	20000018 	.word	0x20000018

08004ea4 <__sread>:
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eac:	f000 f86c 	bl	8004f88 <_read_r>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	bfab      	itete	ge
 8004eb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8004eb8:	181b      	addge	r3, r3, r0
 8004eba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ebe:	bfac      	ite	ge
 8004ec0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ec2:	81a3      	strhlt	r3, [r4, #12]
 8004ec4:	bd10      	pop	{r4, pc}

08004ec6 <__swrite>:
 8004ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eca:	461f      	mov	r7, r3
 8004ecc:	898b      	ldrh	r3, [r1, #12]
 8004ece:	05db      	lsls	r3, r3, #23
 8004ed0:	4605      	mov	r5, r0
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	4616      	mov	r6, r2
 8004ed6:	d505      	bpl.n	8004ee4 <__swrite+0x1e>
 8004ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004edc:	2302      	movs	r3, #2
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f000 f840 	bl	8004f64 <_lseek_r>
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004eee:	81a3      	strh	r3, [r4, #12]
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004efa:	f000 b857 	b.w	8004fac <_write_r>

08004efe <__sseek>:
 8004efe:	b510      	push	{r4, lr}
 8004f00:	460c      	mov	r4, r1
 8004f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f06:	f000 f82d 	bl	8004f64 <_lseek_r>
 8004f0a:	1c43      	adds	r3, r0, #1
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	bf15      	itete	ne
 8004f10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f1a:	81a3      	strheq	r3, [r4, #12]
 8004f1c:	bf18      	it	ne
 8004f1e:	81a3      	strhne	r3, [r4, #12]
 8004f20:	bd10      	pop	{r4, pc}

08004f22 <__sclose>:
 8004f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f26:	f000 b80d 	b.w	8004f44 <_close_r>

08004f2a <memset>:
 8004f2a:	4402      	add	r2, r0
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d100      	bne.n	8004f34 <memset+0xa>
 8004f32:	4770      	bx	lr
 8004f34:	f803 1b01 	strb.w	r1, [r3], #1
 8004f38:	e7f9      	b.n	8004f2e <memset+0x4>
	...

08004f3c <_localeconv_r>:
 8004f3c:	4800      	ldr	r0, [pc, #0]	@ (8004f40 <_localeconv_r+0x4>)
 8004f3e:	4770      	bx	lr
 8004f40:	20000158 	.word	0x20000158

08004f44 <_close_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	4d06      	ldr	r5, [pc, #24]	@ (8004f60 <_close_r+0x1c>)
 8004f48:	2300      	movs	r3, #0
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	602b      	str	r3, [r5, #0]
 8004f50:	f7fb ffc8 	bl	8000ee4 <_close>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d102      	bne.n	8004f5e <_close_r+0x1a>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	b103      	cbz	r3, 8004f5e <_close_r+0x1a>
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	20000528 	.word	0x20000528

08004f64 <_lseek_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4d07      	ldr	r5, [pc, #28]	@ (8004f84 <_lseek_r+0x20>)
 8004f68:	4604      	mov	r4, r0
 8004f6a:	4608      	mov	r0, r1
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	2200      	movs	r2, #0
 8004f70:	602a      	str	r2, [r5, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f7fb ffdd 	bl	8000f32 <_lseek>
 8004f78:	1c43      	adds	r3, r0, #1
 8004f7a:	d102      	bne.n	8004f82 <_lseek_r+0x1e>
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	b103      	cbz	r3, 8004f82 <_lseek_r+0x1e>
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
 8004f84:	20000528 	.word	0x20000528

08004f88 <_read_r>:
 8004f88:	b538      	push	{r3, r4, r5, lr}
 8004f8a:	4d07      	ldr	r5, [pc, #28]	@ (8004fa8 <_read_r+0x20>)
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	4608      	mov	r0, r1
 8004f90:	4611      	mov	r1, r2
 8004f92:	2200      	movs	r2, #0
 8004f94:	602a      	str	r2, [r5, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	f7fb ff6b 	bl	8000e72 <_read>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	d102      	bne.n	8004fa6 <_read_r+0x1e>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	b103      	cbz	r3, 8004fa6 <_read_r+0x1e>
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	bd38      	pop	{r3, r4, r5, pc}
 8004fa8:	20000528 	.word	0x20000528

08004fac <_write_r>:
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	4d07      	ldr	r5, [pc, #28]	@ (8004fcc <_write_r+0x20>)
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	4608      	mov	r0, r1
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	602a      	str	r2, [r5, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f7fb ff76 	bl	8000eac <_write>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d102      	bne.n	8004fca <_write_r+0x1e>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	b103      	cbz	r3, 8004fca <_write_r+0x1e>
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	20000528 	.word	0x20000528

08004fd0 <__errno>:
 8004fd0:	4b01      	ldr	r3, [pc, #4]	@ (8004fd8 <__errno+0x8>)
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	20000018 	.word	0x20000018

08004fdc <__libc_init_array>:
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	4d0d      	ldr	r5, [pc, #52]	@ (8005014 <__libc_init_array+0x38>)
 8004fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8005018 <__libc_init_array+0x3c>)
 8004fe2:	1b64      	subs	r4, r4, r5
 8004fe4:	10a4      	asrs	r4, r4, #2
 8004fe6:	2600      	movs	r6, #0
 8004fe8:	42a6      	cmp	r6, r4
 8004fea:	d109      	bne.n	8005000 <__libc_init_array+0x24>
 8004fec:	4d0b      	ldr	r5, [pc, #44]	@ (800501c <__libc_init_array+0x40>)
 8004fee:	4c0c      	ldr	r4, [pc, #48]	@ (8005020 <__libc_init_array+0x44>)
 8004ff0:	f001 fff8 	bl	8006fe4 <_init>
 8004ff4:	1b64      	subs	r4, r4, r5
 8004ff6:	10a4      	asrs	r4, r4, #2
 8004ff8:	2600      	movs	r6, #0
 8004ffa:	42a6      	cmp	r6, r4
 8004ffc:	d105      	bne.n	800500a <__libc_init_array+0x2e>
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	f855 3b04 	ldr.w	r3, [r5], #4
 8005004:	4798      	blx	r3
 8005006:	3601      	adds	r6, #1
 8005008:	e7ee      	b.n	8004fe8 <__libc_init_array+0xc>
 800500a:	f855 3b04 	ldr.w	r3, [r5], #4
 800500e:	4798      	blx	r3
 8005010:	3601      	adds	r6, #1
 8005012:	e7f2      	b.n	8004ffa <__libc_init_array+0x1e>
 8005014:	080074cc 	.word	0x080074cc
 8005018:	080074cc 	.word	0x080074cc
 800501c:	080074cc 	.word	0x080074cc
 8005020:	080074d0 	.word	0x080074d0

08005024 <__retarget_lock_init_recursive>:
 8005024:	4770      	bx	lr

08005026 <__retarget_lock_acquire_recursive>:
 8005026:	4770      	bx	lr

08005028 <__retarget_lock_release_recursive>:
 8005028:	4770      	bx	lr

0800502a <quorem>:
 800502a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502e:	6903      	ldr	r3, [r0, #16]
 8005030:	690c      	ldr	r4, [r1, #16]
 8005032:	42a3      	cmp	r3, r4
 8005034:	4607      	mov	r7, r0
 8005036:	db7e      	blt.n	8005136 <quorem+0x10c>
 8005038:	3c01      	subs	r4, #1
 800503a:	f101 0814 	add.w	r8, r1, #20
 800503e:	00a3      	lsls	r3, r4, #2
 8005040:	f100 0514 	add.w	r5, r0, #20
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005054:	3301      	adds	r3, #1
 8005056:	429a      	cmp	r2, r3
 8005058:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800505c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005060:	d32e      	bcc.n	80050c0 <quorem+0x96>
 8005062:	f04f 0a00 	mov.w	sl, #0
 8005066:	46c4      	mov	ip, r8
 8005068:	46ae      	mov	lr, r5
 800506a:	46d3      	mov	fp, sl
 800506c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005070:	b298      	uxth	r0, r3
 8005072:	fb06 a000 	mla	r0, r6, r0, sl
 8005076:	0c02      	lsrs	r2, r0, #16
 8005078:	0c1b      	lsrs	r3, r3, #16
 800507a:	fb06 2303 	mla	r3, r6, r3, r2
 800507e:	f8de 2000 	ldr.w	r2, [lr]
 8005082:	b280      	uxth	r0, r0
 8005084:	b292      	uxth	r2, r2
 8005086:	1a12      	subs	r2, r2, r0
 8005088:	445a      	add	r2, fp
 800508a:	f8de 0000 	ldr.w	r0, [lr]
 800508e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005092:	b29b      	uxth	r3, r3
 8005094:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005098:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800509c:	b292      	uxth	r2, r2
 800509e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80050a2:	45e1      	cmp	r9, ip
 80050a4:	f84e 2b04 	str.w	r2, [lr], #4
 80050a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80050ac:	d2de      	bcs.n	800506c <quorem+0x42>
 80050ae:	9b00      	ldr	r3, [sp, #0]
 80050b0:	58eb      	ldr	r3, [r5, r3]
 80050b2:	b92b      	cbnz	r3, 80050c0 <quorem+0x96>
 80050b4:	9b01      	ldr	r3, [sp, #4]
 80050b6:	3b04      	subs	r3, #4
 80050b8:	429d      	cmp	r5, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	d32f      	bcc.n	800511e <quorem+0xf4>
 80050be:	613c      	str	r4, [r7, #16]
 80050c0:	4638      	mov	r0, r7
 80050c2:	f001 f90d 	bl	80062e0 <__mcmp>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	db25      	blt.n	8005116 <quorem+0xec>
 80050ca:	4629      	mov	r1, r5
 80050cc:	2000      	movs	r0, #0
 80050ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80050d2:	f8d1 c000 	ldr.w	ip, [r1]
 80050d6:	fa1f fe82 	uxth.w	lr, r2
 80050da:	fa1f f38c 	uxth.w	r3, ip
 80050de:	eba3 030e 	sub.w	r3, r3, lr
 80050e2:	4403      	add	r3, r0
 80050e4:	0c12      	lsrs	r2, r2, #16
 80050e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80050ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050f4:	45c1      	cmp	r9, r8
 80050f6:	f841 3b04 	str.w	r3, [r1], #4
 80050fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80050fe:	d2e6      	bcs.n	80050ce <quorem+0xa4>
 8005100:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005104:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005108:	b922      	cbnz	r2, 8005114 <quorem+0xea>
 800510a:	3b04      	subs	r3, #4
 800510c:	429d      	cmp	r5, r3
 800510e:	461a      	mov	r2, r3
 8005110:	d30b      	bcc.n	800512a <quorem+0x100>
 8005112:	613c      	str	r4, [r7, #16]
 8005114:	3601      	adds	r6, #1
 8005116:	4630      	mov	r0, r6
 8005118:	b003      	add	sp, #12
 800511a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800511e:	6812      	ldr	r2, [r2, #0]
 8005120:	3b04      	subs	r3, #4
 8005122:	2a00      	cmp	r2, #0
 8005124:	d1cb      	bne.n	80050be <quorem+0x94>
 8005126:	3c01      	subs	r4, #1
 8005128:	e7c6      	b.n	80050b8 <quorem+0x8e>
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	3b04      	subs	r3, #4
 800512e:	2a00      	cmp	r2, #0
 8005130:	d1ef      	bne.n	8005112 <quorem+0xe8>
 8005132:	3c01      	subs	r4, #1
 8005134:	e7ea      	b.n	800510c <quorem+0xe2>
 8005136:	2000      	movs	r0, #0
 8005138:	e7ee      	b.n	8005118 <quorem+0xee>
 800513a:	0000      	movs	r0, r0
 800513c:	0000      	movs	r0, r0
	...

08005140 <_dtoa_r>:
 8005140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	ed2d 8b02 	vpush	{d8}
 8005148:	69c7      	ldr	r7, [r0, #28]
 800514a:	b091      	sub	sp, #68	@ 0x44
 800514c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005150:	ec55 4b10 	vmov	r4, r5, d0
 8005154:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8005156:	9107      	str	r1, [sp, #28]
 8005158:	4681      	mov	r9, r0
 800515a:	9209      	str	r2, [sp, #36]	@ 0x24
 800515c:	930d      	str	r3, [sp, #52]	@ 0x34
 800515e:	b97f      	cbnz	r7, 8005180 <_dtoa_r+0x40>
 8005160:	2010      	movs	r0, #16
 8005162:	f000 fd95 	bl	8005c90 <malloc>
 8005166:	4602      	mov	r2, r0
 8005168:	f8c9 001c 	str.w	r0, [r9, #28]
 800516c:	b920      	cbnz	r0, 8005178 <_dtoa_r+0x38>
 800516e:	4ba0      	ldr	r3, [pc, #640]	@ (80053f0 <_dtoa_r+0x2b0>)
 8005170:	21ef      	movs	r1, #239	@ 0xef
 8005172:	48a0      	ldr	r0, [pc, #640]	@ (80053f4 <_dtoa_r+0x2b4>)
 8005174:	f001 fbf8 	bl	8006968 <__assert_func>
 8005178:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800517c:	6007      	str	r7, [r0, #0]
 800517e:	60c7      	str	r7, [r0, #12]
 8005180:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	b159      	cbz	r1, 80051a0 <_dtoa_r+0x60>
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	604a      	str	r2, [r1, #4]
 800518c:	2301      	movs	r3, #1
 800518e:	4093      	lsls	r3, r2
 8005190:	608b      	str	r3, [r1, #8]
 8005192:	4648      	mov	r0, r9
 8005194:	f000 fe72 	bl	8005e7c <_Bfree>
 8005198:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	1e2b      	subs	r3, r5, #0
 80051a2:	bfbb      	ittet	lt
 80051a4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80051a8:	9303      	strlt	r3, [sp, #12]
 80051aa:	2300      	movge	r3, #0
 80051ac:	2201      	movlt	r2, #1
 80051ae:	bfac      	ite	ge
 80051b0:	6033      	strge	r3, [r6, #0]
 80051b2:	6032      	strlt	r2, [r6, #0]
 80051b4:	4b90      	ldr	r3, [pc, #576]	@ (80053f8 <_dtoa_r+0x2b8>)
 80051b6:	9e03      	ldr	r6, [sp, #12]
 80051b8:	43b3      	bics	r3, r6
 80051ba:	d110      	bne.n	80051de <_dtoa_r+0x9e>
 80051bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80051be:	f242 730f 	movw	r3, #9999	@ 0x270f
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80051c8:	4323      	orrs	r3, r4
 80051ca:	f000 84e6 	beq.w	8005b9a <_dtoa_r+0xa5a>
 80051ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80051d0:	4f8a      	ldr	r7, [pc, #552]	@ (80053fc <_dtoa_r+0x2bc>)
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 84e8 	beq.w	8005ba8 <_dtoa_r+0xa68>
 80051d8:	1cfb      	adds	r3, r7, #3
 80051da:	f000 bce3 	b.w	8005ba4 <_dtoa_r+0xa64>
 80051de:	ed9d 8b02 	vldr	d8, [sp, #8]
 80051e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80051e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ea:	d10a      	bne.n	8005202 <_dtoa_r+0xc2>
 80051ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80051ee:	2301      	movs	r3, #1
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80051f4:	b113      	cbz	r3, 80051fc <_dtoa_r+0xbc>
 80051f6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80051f8:	4b81      	ldr	r3, [pc, #516]	@ (8005400 <_dtoa_r+0x2c0>)
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	4f81      	ldr	r7, [pc, #516]	@ (8005404 <_dtoa_r+0x2c4>)
 80051fe:	f000 bcd3 	b.w	8005ba8 <_dtoa_r+0xa68>
 8005202:	aa0e      	add	r2, sp, #56	@ 0x38
 8005204:	a90f      	add	r1, sp, #60	@ 0x3c
 8005206:	4648      	mov	r0, r9
 8005208:	eeb0 0b48 	vmov.f64	d0, d8
 800520c:	f001 f918 	bl	8006440 <__d2b>
 8005210:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8005214:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005216:	9001      	str	r0, [sp, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d045      	beq.n	80052a8 <_dtoa_r+0x168>
 800521c:	eeb0 7b48 	vmov.f64	d7, d8
 8005220:	ee18 1a90 	vmov	r1, s17
 8005224:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005228:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800522c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005230:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005234:	2500      	movs	r5, #0
 8005236:	ee07 1a90 	vmov	s15, r1
 800523a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800523e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80053d8 <_dtoa_r+0x298>
 8005242:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005246:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80053e0 <_dtoa_r+0x2a0>
 800524a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800524e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80053e8 <_dtoa_r+0x2a8>
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800525a:	eeb0 7b46 	vmov.f64	d7, d6
 800525e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005262:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005266:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526e:	ee16 8a90 	vmov	r8, s13
 8005272:	d508      	bpl.n	8005286 <_dtoa_r+0x146>
 8005274:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005278:	eeb4 6b47 	vcmp.f64	d6, d7
 800527c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005280:	bf18      	it	ne
 8005282:	f108 38ff 	addne.w	r8, r8, #4294967295
 8005286:	f1b8 0f16 	cmp.w	r8, #22
 800528a:	d82b      	bhi.n	80052e4 <_dtoa_r+0x1a4>
 800528c:	495e      	ldr	r1, [pc, #376]	@ (8005408 <_dtoa_r+0x2c8>)
 800528e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8005292:	ed91 7b00 	vldr	d7, [r1]
 8005296:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800529a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529e:	d501      	bpl.n	80052a4 <_dtoa_r+0x164>
 80052a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80052a4:	2100      	movs	r1, #0
 80052a6:	e01e      	b.n	80052e6 <_dtoa_r+0x1a6>
 80052a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052aa:	4413      	add	r3, r2
 80052ac:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80052b0:	2920      	cmp	r1, #32
 80052b2:	bfc1      	itttt	gt
 80052b4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80052b8:	408e      	lslgt	r6, r1
 80052ba:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80052be:	fa24 f101 	lsrgt.w	r1, r4, r1
 80052c2:	bfd6      	itet	le
 80052c4:	f1c1 0120 	rsble	r1, r1, #32
 80052c8:	4331      	orrgt	r1, r6
 80052ca:	fa04 f101 	lslle.w	r1, r4, r1
 80052ce:	ee07 1a90 	vmov	s15, r1
 80052d2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80052d6:	3b01      	subs	r3, #1
 80052d8:	ee17 1a90 	vmov	r1, s15
 80052dc:	2501      	movs	r5, #1
 80052de:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80052e2:	e7a8      	b.n	8005236 <_dtoa_r+0xf6>
 80052e4:	2101      	movs	r1, #1
 80052e6:	1ad2      	subs	r2, r2, r3
 80052e8:	1e53      	subs	r3, r2, #1
 80052ea:	9306      	str	r3, [sp, #24]
 80052ec:	bf45      	ittet	mi
 80052ee:	f1c2 0301 	rsbmi	r3, r2, #1
 80052f2:	9304      	strmi	r3, [sp, #16]
 80052f4:	2300      	movpl	r3, #0
 80052f6:	2300      	movmi	r3, #0
 80052f8:	bf4c      	ite	mi
 80052fa:	9306      	strmi	r3, [sp, #24]
 80052fc:	9304      	strpl	r3, [sp, #16]
 80052fe:	f1b8 0f00 	cmp.w	r8, #0
 8005302:	910c      	str	r1, [sp, #48]	@ 0x30
 8005304:	db18      	blt.n	8005338 <_dtoa_r+0x1f8>
 8005306:	9b06      	ldr	r3, [sp, #24]
 8005308:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800530c:	4443      	add	r3, r8
 800530e:	9306      	str	r3, [sp, #24]
 8005310:	2300      	movs	r3, #0
 8005312:	9a07      	ldr	r2, [sp, #28]
 8005314:	2a09      	cmp	r2, #9
 8005316:	d845      	bhi.n	80053a4 <_dtoa_r+0x264>
 8005318:	2a05      	cmp	r2, #5
 800531a:	bfc4      	itt	gt
 800531c:	3a04      	subgt	r2, #4
 800531e:	9207      	strgt	r2, [sp, #28]
 8005320:	9a07      	ldr	r2, [sp, #28]
 8005322:	f1a2 0202 	sub.w	r2, r2, #2
 8005326:	bfcc      	ite	gt
 8005328:	2400      	movgt	r4, #0
 800532a:	2401      	movle	r4, #1
 800532c:	2a03      	cmp	r2, #3
 800532e:	d844      	bhi.n	80053ba <_dtoa_r+0x27a>
 8005330:	e8df f002 	tbb	[pc, r2]
 8005334:	0b173634 	.word	0x0b173634
 8005338:	9b04      	ldr	r3, [sp, #16]
 800533a:	2200      	movs	r2, #0
 800533c:	eba3 0308 	sub.w	r3, r3, r8
 8005340:	9304      	str	r3, [sp, #16]
 8005342:	920a      	str	r2, [sp, #40]	@ 0x28
 8005344:	f1c8 0300 	rsb	r3, r8, #0
 8005348:	e7e3      	b.n	8005312 <_dtoa_r+0x1d2>
 800534a:	2201      	movs	r2, #1
 800534c:	9208      	str	r2, [sp, #32]
 800534e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005350:	eb08 0b02 	add.w	fp, r8, r2
 8005354:	f10b 0a01 	add.w	sl, fp, #1
 8005358:	4652      	mov	r2, sl
 800535a:	2a01      	cmp	r2, #1
 800535c:	bfb8      	it	lt
 800535e:	2201      	movlt	r2, #1
 8005360:	e006      	b.n	8005370 <_dtoa_r+0x230>
 8005362:	2201      	movs	r2, #1
 8005364:	9208      	str	r2, [sp, #32]
 8005366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005368:	2a00      	cmp	r2, #0
 800536a:	dd29      	ble.n	80053c0 <_dtoa_r+0x280>
 800536c:	4693      	mov	fp, r2
 800536e:	4692      	mov	sl, r2
 8005370:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8005374:	2100      	movs	r1, #0
 8005376:	2004      	movs	r0, #4
 8005378:	f100 0614 	add.w	r6, r0, #20
 800537c:	4296      	cmp	r6, r2
 800537e:	d926      	bls.n	80053ce <_dtoa_r+0x28e>
 8005380:	6079      	str	r1, [r7, #4]
 8005382:	4648      	mov	r0, r9
 8005384:	9305      	str	r3, [sp, #20]
 8005386:	f000 fd39 	bl	8005dfc <_Balloc>
 800538a:	9b05      	ldr	r3, [sp, #20]
 800538c:	4607      	mov	r7, r0
 800538e:	2800      	cmp	r0, #0
 8005390:	d13e      	bne.n	8005410 <_dtoa_r+0x2d0>
 8005392:	4b1e      	ldr	r3, [pc, #120]	@ (800540c <_dtoa_r+0x2cc>)
 8005394:	4602      	mov	r2, r0
 8005396:	f240 11af 	movw	r1, #431	@ 0x1af
 800539a:	e6ea      	b.n	8005172 <_dtoa_r+0x32>
 800539c:	2200      	movs	r2, #0
 800539e:	e7e1      	b.n	8005364 <_dtoa_r+0x224>
 80053a0:	2200      	movs	r2, #0
 80053a2:	e7d3      	b.n	800534c <_dtoa_r+0x20c>
 80053a4:	2401      	movs	r4, #1
 80053a6:	2200      	movs	r2, #0
 80053a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80053ac:	f04f 3bff 	mov.w	fp, #4294967295
 80053b0:	2100      	movs	r1, #0
 80053b2:	46da      	mov	sl, fp
 80053b4:	2212      	movs	r2, #18
 80053b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80053b8:	e7da      	b.n	8005370 <_dtoa_r+0x230>
 80053ba:	2201      	movs	r2, #1
 80053bc:	9208      	str	r2, [sp, #32]
 80053be:	e7f5      	b.n	80053ac <_dtoa_r+0x26c>
 80053c0:	f04f 0b01 	mov.w	fp, #1
 80053c4:	46da      	mov	sl, fp
 80053c6:	465a      	mov	r2, fp
 80053c8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80053cc:	e7d0      	b.n	8005370 <_dtoa_r+0x230>
 80053ce:	3101      	adds	r1, #1
 80053d0:	0040      	lsls	r0, r0, #1
 80053d2:	e7d1      	b.n	8005378 <_dtoa_r+0x238>
 80053d4:	f3af 8000 	nop.w
 80053d8:	636f4361 	.word	0x636f4361
 80053dc:	3fd287a7 	.word	0x3fd287a7
 80053e0:	8b60c8b3 	.word	0x8b60c8b3
 80053e4:	3fc68a28 	.word	0x3fc68a28
 80053e8:	509f79fb 	.word	0x509f79fb
 80053ec:	3fd34413 	.word	0x3fd34413
 80053f0:	0800718d 	.word	0x0800718d
 80053f4:	080071a4 	.word	0x080071a4
 80053f8:	7ff00000 	.word	0x7ff00000
 80053fc:	08007189 	.word	0x08007189
 8005400:	0800715d 	.word	0x0800715d
 8005404:	0800715c 	.word	0x0800715c
 8005408:	080072f8 	.word	0x080072f8
 800540c:	080071fc 	.word	0x080071fc
 8005410:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8005414:	f1ba 0f0e 	cmp.w	sl, #14
 8005418:	6010      	str	r0, [r2, #0]
 800541a:	d86e      	bhi.n	80054fa <_dtoa_r+0x3ba>
 800541c:	2c00      	cmp	r4, #0
 800541e:	d06c      	beq.n	80054fa <_dtoa_r+0x3ba>
 8005420:	f1b8 0f00 	cmp.w	r8, #0
 8005424:	f340 80b4 	ble.w	8005590 <_dtoa_r+0x450>
 8005428:	4ac8      	ldr	r2, [pc, #800]	@ (800574c <_dtoa_r+0x60c>)
 800542a:	f008 010f 	and.w	r1, r8, #15
 800542e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005432:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8005436:	ed92 7b00 	vldr	d7, [r2]
 800543a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800543e:	f000 809b 	beq.w	8005578 <_dtoa_r+0x438>
 8005442:	4ac3      	ldr	r2, [pc, #780]	@ (8005750 <_dtoa_r+0x610>)
 8005444:	ed92 6b08 	vldr	d6, [r2, #32]
 8005448:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800544c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005450:	f001 010f 	and.w	r1, r1, #15
 8005454:	2203      	movs	r2, #3
 8005456:	48be      	ldr	r0, [pc, #760]	@ (8005750 <_dtoa_r+0x610>)
 8005458:	2900      	cmp	r1, #0
 800545a:	f040 808f 	bne.w	800557c <_dtoa_r+0x43c>
 800545e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005462:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005466:	ed8d 7b02 	vstr	d7, [sp, #8]
 800546a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800546c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005470:	2900      	cmp	r1, #0
 8005472:	f000 80b3 	beq.w	80055dc <_dtoa_r+0x49c>
 8005476:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800547a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800547e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005482:	f140 80ab 	bpl.w	80055dc <_dtoa_r+0x49c>
 8005486:	f1ba 0f00 	cmp.w	sl, #0
 800548a:	f000 80a7 	beq.w	80055dc <_dtoa_r+0x49c>
 800548e:	f1bb 0f00 	cmp.w	fp, #0
 8005492:	dd30      	ble.n	80054f6 <_dtoa_r+0x3b6>
 8005494:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8005498:	ee27 7b06 	vmul.f64	d7, d7, d6
 800549c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80054a0:	f108 31ff 	add.w	r1, r8, #4294967295
 80054a4:	9105      	str	r1, [sp, #20]
 80054a6:	3201      	adds	r2, #1
 80054a8:	465c      	mov	r4, fp
 80054aa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80054ae:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80054b2:	ee07 2a90 	vmov	s15, r2
 80054b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80054ba:	eea7 5b06 	vfma.f64	d5, d7, d6
 80054be:	ee15 2a90 	vmov	r2, s11
 80054c2:	ec51 0b15 	vmov	r0, r1, d5
 80054c6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80054ca:	2c00      	cmp	r4, #0
 80054cc:	f040 808a 	bne.w	80055e4 <_dtoa_r+0x4a4>
 80054d0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80054d4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80054d8:	ec41 0b17 	vmov	d7, r0, r1
 80054dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e4:	f300 826a 	bgt.w	80059bc <_dtoa_r+0x87c>
 80054e8:	eeb1 7b47 	vneg.f64	d7, d7
 80054ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f4:	d423      	bmi.n	800553e <_dtoa_r+0x3fe>
 80054f6:	ed8d 8b02 	vstr	d8, [sp, #8]
 80054fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80054fc:	2a00      	cmp	r2, #0
 80054fe:	f2c0 8129 	blt.w	8005754 <_dtoa_r+0x614>
 8005502:	f1b8 0f0e 	cmp.w	r8, #14
 8005506:	f300 8125 	bgt.w	8005754 <_dtoa_r+0x614>
 800550a:	4b90      	ldr	r3, [pc, #576]	@ (800574c <_dtoa_r+0x60c>)
 800550c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005510:	ed93 6b00 	vldr	d6, [r3]
 8005514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005516:	2b00      	cmp	r3, #0
 8005518:	f280 80c8 	bge.w	80056ac <_dtoa_r+0x56c>
 800551c:	f1ba 0f00 	cmp.w	sl, #0
 8005520:	f300 80c4 	bgt.w	80056ac <_dtoa_r+0x56c>
 8005524:	d10b      	bne.n	800553e <_dtoa_r+0x3fe>
 8005526:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800552a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800552e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005532:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553a:	f2c0 823c 	blt.w	80059b6 <_dtoa_r+0x876>
 800553e:	2400      	movs	r4, #0
 8005540:	4625      	mov	r5, r4
 8005542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005544:	43db      	mvns	r3, r3
 8005546:	9305      	str	r3, [sp, #20]
 8005548:	463e      	mov	r6, r7
 800554a:	f04f 0800 	mov.w	r8, #0
 800554e:	4621      	mov	r1, r4
 8005550:	4648      	mov	r0, r9
 8005552:	f000 fc93 	bl	8005e7c <_Bfree>
 8005556:	2d00      	cmp	r5, #0
 8005558:	f000 80a2 	beq.w	80056a0 <_dtoa_r+0x560>
 800555c:	f1b8 0f00 	cmp.w	r8, #0
 8005560:	d005      	beq.n	800556e <_dtoa_r+0x42e>
 8005562:	45a8      	cmp	r8, r5
 8005564:	d003      	beq.n	800556e <_dtoa_r+0x42e>
 8005566:	4641      	mov	r1, r8
 8005568:	4648      	mov	r0, r9
 800556a:	f000 fc87 	bl	8005e7c <_Bfree>
 800556e:	4629      	mov	r1, r5
 8005570:	4648      	mov	r0, r9
 8005572:	f000 fc83 	bl	8005e7c <_Bfree>
 8005576:	e093      	b.n	80056a0 <_dtoa_r+0x560>
 8005578:	2202      	movs	r2, #2
 800557a:	e76c      	b.n	8005456 <_dtoa_r+0x316>
 800557c:	07cc      	lsls	r4, r1, #31
 800557e:	d504      	bpl.n	800558a <_dtoa_r+0x44a>
 8005580:	ed90 6b00 	vldr	d6, [r0]
 8005584:	3201      	adds	r2, #1
 8005586:	ee27 7b06 	vmul.f64	d7, d7, d6
 800558a:	1049      	asrs	r1, r1, #1
 800558c:	3008      	adds	r0, #8
 800558e:	e763      	b.n	8005458 <_dtoa_r+0x318>
 8005590:	d022      	beq.n	80055d8 <_dtoa_r+0x498>
 8005592:	f1c8 0100 	rsb	r1, r8, #0
 8005596:	4a6d      	ldr	r2, [pc, #436]	@ (800574c <_dtoa_r+0x60c>)
 8005598:	f001 000f 	and.w	r0, r1, #15
 800559c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80055a0:	ed92 7b00 	vldr	d7, [r2]
 80055a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80055a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80055ac:	4868      	ldr	r0, [pc, #416]	@ (8005750 <_dtoa_r+0x610>)
 80055ae:	1109      	asrs	r1, r1, #4
 80055b0:	2400      	movs	r4, #0
 80055b2:	2202      	movs	r2, #2
 80055b4:	b929      	cbnz	r1, 80055c2 <_dtoa_r+0x482>
 80055b6:	2c00      	cmp	r4, #0
 80055b8:	f43f af57 	beq.w	800546a <_dtoa_r+0x32a>
 80055bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80055c0:	e753      	b.n	800546a <_dtoa_r+0x32a>
 80055c2:	07ce      	lsls	r6, r1, #31
 80055c4:	d505      	bpl.n	80055d2 <_dtoa_r+0x492>
 80055c6:	ed90 6b00 	vldr	d6, [r0]
 80055ca:	3201      	adds	r2, #1
 80055cc:	2401      	movs	r4, #1
 80055ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80055d2:	1049      	asrs	r1, r1, #1
 80055d4:	3008      	adds	r0, #8
 80055d6:	e7ed      	b.n	80055b4 <_dtoa_r+0x474>
 80055d8:	2202      	movs	r2, #2
 80055da:	e746      	b.n	800546a <_dtoa_r+0x32a>
 80055dc:	f8cd 8014 	str.w	r8, [sp, #20]
 80055e0:	4654      	mov	r4, sl
 80055e2:	e762      	b.n	80054aa <_dtoa_r+0x36a>
 80055e4:	4a59      	ldr	r2, [pc, #356]	@ (800574c <_dtoa_r+0x60c>)
 80055e6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80055ea:	ed12 4b02 	vldr	d4, [r2, #-8]
 80055ee:	9a08      	ldr	r2, [sp, #32]
 80055f0:	ec41 0b17 	vmov	d7, r0, r1
 80055f4:	443c      	add	r4, r7
 80055f6:	b34a      	cbz	r2, 800564c <_dtoa_r+0x50c>
 80055f8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80055fc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8005600:	463e      	mov	r6, r7
 8005602:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005606:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800560a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800560e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005612:	ee14 2a90 	vmov	r2, s9
 8005616:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800561a:	3230      	adds	r2, #48	@ 0x30
 800561c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005620:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005628:	f806 2b01 	strb.w	r2, [r6], #1
 800562c:	d438      	bmi.n	80056a0 <_dtoa_r+0x560>
 800562e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005632:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563a:	d46e      	bmi.n	800571a <_dtoa_r+0x5da>
 800563c:	42a6      	cmp	r6, r4
 800563e:	f43f af5a 	beq.w	80054f6 <_dtoa_r+0x3b6>
 8005642:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005646:	ee26 6b03 	vmul.f64	d6, d6, d3
 800564a:	e7e0      	b.n	800560e <_dtoa_r+0x4ce>
 800564c:	4621      	mov	r1, r4
 800564e:	463e      	mov	r6, r7
 8005650:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005654:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005658:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800565c:	ee14 2a90 	vmov	r2, s9
 8005660:	3230      	adds	r2, #48	@ 0x30
 8005662:	f806 2b01 	strb.w	r2, [r6], #1
 8005666:	42a6      	cmp	r6, r4
 8005668:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800566c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005670:	d119      	bne.n	80056a6 <_dtoa_r+0x566>
 8005672:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8005676:	ee37 4b05 	vadd.f64	d4, d7, d5
 800567a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800567e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005682:	dc4a      	bgt.n	800571a <_dtoa_r+0x5da>
 8005684:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005688:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800568c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005690:	f57f af31 	bpl.w	80054f6 <_dtoa_r+0x3b6>
 8005694:	460e      	mov	r6, r1
 8005696:	3901      	subs	r1, #1
 8005698:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800569c:	2b30      	cmp	r3, #48	@ 0x30
 800569e:	d0f9      	beq.n	8005694 <_dtoa_r+0x554>
 80056a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80056a4:	e027      	b.n	80056f6 <_dtoa_r+0x5b6>
 80056a6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80056aa:	e7d5      	b.n	8005658 <_dtoa_r+0x518>
 80056ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056b0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80056b4:	463e      	mov	r6, r7
 80056b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80056ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80056be:	ee15 3a10 	vmov	r3, s10
 80056c2:	3330      	adds	r3, #48	@ 0x30
 80056c4:	f806 3b01 	strb.w	r3, [r6], #1
 80056c8:	1bf3      	subs	r3, r6, r7
 80056ca:	459a      	cmp	sl, r3
 80056cc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80056d0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80056d4:	d132      	bne.n	800573c <_dtoa_r+0x5fc>
 80056d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80056da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80056de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e2:	dc18      	bgt.n	8005716 <_dtoa_r+0x5d6>
 80056e4:	eeb4 7b46 	vcmp.f64	d7, d6
 80056e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ec:	d103      	bne.n	80056f6 <_dtoa_r+0x5b6>
 80056ee:	ee15 3a10 	vmov	r3, s10
 80056f2:	07db      	lsls	r3, r3, #31
 80056f4:	d40f      	bmi.n	8005716 <_dtoa_r+0x5d6>
 80056f6:	9901      	ldr	r1, [sp, #4]
 80056f8:	4648      	mov	r0, r9
 80056fa:	f000 fbbf 	bl	8005e7c <_Bfree>
 80056fe:	2300      	movs	r3, #0
 8005700:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005702:	7033      	strb	r3, [r6, #0]
 8005704:	f108 0301 	add.w	r3, r8, #1
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 824b 	beq.w	8005ba8 <_dtoa_r+0xa68>
 8005712:	601e      	str	r6, [r3, #0]
 8005714:	e248      	b.n	8005ba8 <_dtoa_r+0xa68>
 8005716:	f8cd 8014 	str.w	r8, [sp, #20]
 800571a:	4633      	mov	r3, r6
 800571c:	461e      	mov	r6, r3
 800571e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005722:	2a39      	cmp	r2, #57	@ 0x39
 8005724:	d106      	bne.n	8005734 <_dtoa_r+0x5f4>
 8005726:	429f      	cmp	r7, r3
 8005728:	d1f8      	bne.n	800571c <_dtoa_r+0x5dc>
 800572a:	9a05      	ldr	r2, [sp, #20]
 800572c:	3201      	adds	r2, #1
 800572e:	9205      	str	r2, [sp, #20]
 8005730:	2230      	movs	r2, #48	@ 0x30
 8005732:	703a      	strb	r2, [r7, #0]
 8005734:	781a      	ldrb	r2, [r3, #0]
 8005736:	3201      	adds	r2, #1
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	e7b1      	b.n	80056a0 <_dtoa_r+0x560>
 800573c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005740:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005748:	d1b5      	bne.n	80056b6 <_dtoa_r+0x576>
 800574a:	e7d4      	b.n	80056f6 <_dtoa_r+0x5b6>
 800574c:	080072f8 	.word	0x080072f8
 8005750:	080072d0 	.word	0x080072d0
 8005754:	9908      	ldr	r1, [sp, #32]
 8005756:	2900      	cmp	r1, #0
 8005758:	f000 80e9 	beq.w	800592e <_dtoa_r+0x7ee>
 800575c:	9907      	ldr	r1, [sp, #28]
 800575e:	2901      	cmp	r1, #1
 8005760:	f300 80cb 	bgt.w	80058fa <_dtoa_r+0x7ba>
 8005764:	2d00      	cmp	r5, #0
 8005766:	f000 80c4 	beq.w	80058f2 <_dtoa_r+0x7b2>
 800576a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800576e:	9e04      	ldr	r6, [sp, #16]
 8005770:	461c      	mov	r4, r3
 8005772:	9305      	str	r3, [sp, #20]
 8005774:	9b04      	ldr	r3, [sp, #16]
 8005776:	4413      	add	r3, r2
 8005778:	9304      	str	r3, [sp, #16]
 800577a:	9b06      	ldr	r3, [sp, #24]
 800577c:	2101      	movs	r1, #1
 800577e:	4413      	add	r3, r2
 8005780:	4648      	mov	r0, r9
 8005782:	9306      	str	r3, [sp, #24]
 8005784:	f000 fc2e 	bl	8005fe4 <__i2b>
 8005788:	9b05      	ldr	r3, [sp, #20]
 800578a:	4605      	mov	r5, r0
 800578c:	b166      	cbz	r6, 80057a8 <_dtoa_r+0x668>
 800578e:	9a06      	ldr	r2, [sp, #24]
 8005790:	2a00      	cmp	r2, #0
 8005792:	dd09      	ble.n	80057a8 <_dtoa_r+0x668>
 8005794:	42b2      	cmp	r2, r6
 8005796:	9904      	ldr	r1, [sp, #16]
 8005798:	bfa8      	it	ge
 800579a:	4632      	movge	r2, r6
 800579c:	1a89      	subs	r1, r1, r2
 800579e:	9104      	str	r1, [sp, #16]
 80057a0:	9906      	ldr	r1, [sp, #24]
 80057a2:	1ab6      	subs	r6, r6, r2
 80057a4:	1a8a      	subs	r2, r1, r2
 80057a6:	9206      	str	r2, [sp, #24]
 80057a8:	b30b      	cbz	r3, 80057ee <_dtoa_r+0x6ae>
 80057aa:	9a08      	ldr	r2, [sp, #32]
 80057ac:	2a00      	cmp	r2, #0
 80057ae:	f000 80c5 	beq.w	800593c <_dtoa_r+0x7fc>
 80057b2:	2c00      	cmp	r4, #0
 80057b4:	f000 80bf 	beq.w	8005936 <_dtoa_r+0x7f6>
 80057b8:	4629      	mov	r1, r5
 80057ba:	4622      	mov	r2, r4
 80057bc:	4648      	mov	r0, r9
 80057be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057c0:	f000 fcc8 	bl	8006154 <__pow5mult>
 80057c4:	9a01      	ldr	r2, [sp, #4]
 80057c6:	4601      	mov	r1, r0
 80057c8:	4605      	mov	r5, r0
 80057ca:	4648      	mov	r0, r9
 80057cc:	f000 fc20 	bl	8006010 <__multiply>
 80057d0:	9901      	ldr	r1, [sp, #4]
 80057d2:	9005      	str	r0, [sp, #20]
 80057d4:	4648      	mov	r0, r9
 80057d6:	f000 fb51 	bl	8005e7c <_Bfree>
 80057da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057dc:	1b1b      	subs	r3, r3, r4
 80057de:	f000 80b0 	beq.w	8005942 <_dtoa_r+0x802>
 80057e2:	9905      	ldr	r1, [sp, #20]
 80057e4:	461a      	mov	r2, r3
 80057e6:	4648      	mov	r0, r9
 80057e8:	f000 fcb4 	bl	8006154 <__pow5mult>
 80057ec:	9001      	str	r0, [sp, #4]
 80057ee:	2101      	movs	r1, #1
 80057f0:	4648      	mov	r0, r9
 80057f2:	f000 fbf7 	bl	8005fe4 <__i2b>
 80057f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057f8:	4604      	mov	r4, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 81da 	beq.w	8005bb4 <_dtoa_r+0xa74>
 8005800:	461a      	mov	r2, r3
 8005802:	4601      	mov	r1, r0
 8005804:	4648      	mov	r0, r9
 8005806:	f000 fca5 	bl	8006154 <__pow5mult>
 800580a:	9b07      	ldr	r3, [sp, #28]
 800580c:	2b01      	cmp	r3, #1
 800580e:	4604      	mov	r4, r0
 8005810:	f300 80a0 	bgt.w	8005954 <_dtoa_r+0x814>
 8005814:	9b02      	ldr	r3, [sp, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	f040 8096 	bne.w	8005948 <_dtoa_r+0x808>
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005822:	2a00      	cmp	r2, #0
 8005824:	f040 8092 	bne.w	800594c <_dtoa_r+0x80c>
 8005828:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800582c:	0d12      	lsrs	r2, r2, #20
 800582e:	0512      	lsls	r2, r2, #20
 8005830:	2a00      	cmp	r2, #0
 8005832:	f000 808d 	beq.w	8005950 <_dtoa_r+0x810>
 8005836:	9b04      	ldr	r3, [sp, #16]
 8005838:	3301      	adds	r3, #1
 800583a:	9304      	str	r3, [sp, #16]
 800583c:	9b06      	ldr	r3, [sp, #24]
 800583e:	3301      	adds	r3, #1
 8005840:	9306      	str	r3, [sp, #24]
 8005842:	2301      	movs	r3, #1
 8005844:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005846:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 81b9 	beq.w	8005bc0 <_dtoa_r+0xa80>
 800584e:	6922      	ldr	r2, [r4, #16]
 8005850:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005854:	6910      	ldr	r0, [r2, #16]
 8005856:	f000 fb79 	bl	8005f4c <__hi0bits>
 800585a:	f1c0 0020 	rsb	r0, r0, #32
 800585e:	9b06      	ldr	r3, [sp, #24]
 8005860:	4418      	add	r0, r3
 8005862:	f010 001f 	ands.w	r0, r0, #31
 8005866:	f000 8081 	beq.w	800596c <_dtoa_r+0x82c>
 800586a:	f1c0 0220 	rsb	r2, r0, #32
 800586e:	2a04      	cmp	r2, #4
 8005870:	dd73      	ble.n	800595a <_dtoa_r+0x81a>
 8005872:	9b04      	ldr	r3, [sp, #16]
 8005874:	f1c0 001c 	rsb	r0, r0, #28
 8005878:	4403      	add	r3, r0
 800587a:	9304      	str	r3, [sp, #16]
 800587c:	9b06      	ldr	r3, [sp, #24]
 800587e:	4406      	add	r6, r0
 8005880:	4403      	add	r3, r0
 8005882:	9306      	str	r3, [sp, #24]
 8005884:	9b04      	ldr	r3, [sp, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	dd05      	ble.n	8005896 <_dtoa_r+0x756>
 800588a:	9901      	ldr	r1, [sp, #4]
 800588c:	461a      	mov	r2, r3
 800588e:	4648      	mov	r0, r9
 8005890:	f000 fcba 	bl	8006208 <__lshift>
 8005894:	9001      	str	r0, [sp, #4]
 8005896:	9b06      	ldr	r3, [sp, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	dd05      	ble.n	80058a8 <_dtoa_r+0x768>
 800589c:	4621      	mov	r1, r4
 800589e:	461a      	mov	r2, r3
 80058a0:	4648      	mov	r0, r9
 80058a2:	f000 fcb1 	bl	8006208 <__lshift>
 80058a6:	4604      	mov	r4, r0
 80058a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d060      	beq.n	8005970 <_dtoa_r+0x830>
 80058ae:	9801      	ldr	r0, [sp, #4]
 80058b0:	4621      	mov	r1, r4
 80058b2:	f000 fd15 	bl	80062e0 <__mcmp>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	da5a      	bge.n	8005970 <_dtoa_r+0x830>
 80058ba:	f108 33ff 	add.w	r3, r8, #4294967295
 80058be:	9305      	str	r3, [sp, #20]
 80058c0:	9901      	ldr	r1, [sp, #4]
 80058c2:	2300      	movs	r3, #0
 80058c4:	220a      	movs	r2, #10
 80058c6:	4648      	mov	r0, r9
 80058c8:	f000 fafa 	bl	8005ec0 <__multadd>
 80058cc:	9b08      	ldr	r3, [sp, #32]
 80058ce:	9001      	str	r0, [sp, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 8177 	beq.w	8005bc4 <_dtoa_r+0xa84>
 80058d6:	4629      	mov	r1, r5
 80058d8:	2300      	movs	r3, #0
 80058da:	220a      	movs	r2, #10
 80058dc:	4648      	mov	r0, r9
 80058de:	f000 faef 	bl	8005ec0 <__multadd>
 80058e2:	f1bb 0f00 	cmp.w	fp, #0
 80058e6:	4605      	mov	r5, r0
 80058e8:	dc6e      	bgt.n	80059c8 <_dtoa_r+0x888>
 80058ea:	9b07      	ldr	r3, [sp, #28]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	dc48      	bgt.n	8005982 <_dtoa_r+0x842>
 80058f0:	e06a      	b.n	80059c8 <_dtoa_r+0x888>
 80058f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80058f4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80058f8:	e739      	b.n	800576e <_dtoa_r+0x62e>
 80058fa:	f10a 34ff 	add.w	r4, sl, #4294967295
 80058fe:	42a3      	cmp	r3, r4
 8005900:	db07      	blt.n	8005912 <_dtoa_r+0x7d2>
 8005902:	f1ba 0f00 	cmp.w	sl, #0
 8005906:	eba3 0404 	sub.w	r4, r3, r4
 800590a:	db0b      	blt.n	8005924 <_dtoa_r+0x7e4>
 800590c:	9e04      	ldr	r6, [sp, #16]
 800590e:	4652      	mov	r2, sl
 8005910:	e72f      	b.n	8005772 <_dtoa_r+0x632>
 8005912:	1ae2      	subs	r2, r4, r3
 8005914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005916:	9e04      	ldr	r6, [sp, #16]
 8005918:	4413      	add	r3, r2
 800591a:	930a      	str	r3, [sp, #40]	@ 0x28
 800591c:	4652      	mov	r2, sl
 800591e:	4623      	mov	r3, r4
 8005920:	2400      	movs	r4, #0
 8005922:	e726      	b.n	8005772 <_dtoa_r+0x632>
 8005924:	9a04      	ldr	r2, [sp, #16]
 8005926:	eba2 060a 	sub.w	r6, r2, sl
 800592a:	2200      	movs	r2, #0
 800592c:	e721      	b.n	8005772 <_dtoa_r+0x632>
 800592e:	9e04      	ldr	r6, [sp, #16]
 8005930:	9d08      	ldr	r5, [sp, #32]
 8005932:	461c      	mov	r4, r3
 8005934:	e72a      	b.n	800578c <_dtoa_r+0x64c>
 8005936:	9a01      	ldr	r2, [sp, #4]
 8005938:	9205      	str	r2, [sp, #20]
 800593a:	e752      	b.n	80057e2 <_dtoa_r+0x6a2>
 800593c:	9901      	ldr	r1, [sp, #4]
 800593e:	461a      	mov	r2, r3
 8005940:	e751      	b.n	80057e6 <_dtoa_r+0x6a6>
 8005942:	9b05      	ldr	r3, [sp, #20]
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	e752      	b.n	80057ee <_dtoa_r+0x6ae>
 8005948:	2300      	movs	r3, #0
 800594a:	e77b      	b.n	8005844 <_dtoa_r+0x704>
 800594c:	9b02      	ldr	r3, [sp, #8]
 800594e:	e779      	b.n	8005844 <_dtoa_r+0x704>
 8005950:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005952:	e778      	b.n	8005846 <_dtoa_r+0x706>
 8005954:	2300      	movs	r3, #0
 8005956:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005958:	e779      	b.n	800584e <_dtoa_r+0x70e>
 800595a:	d093      	beq.n	8005884 <_dtoa_r+0x744>
 800595c:	9b04      	ldr	r3, [sp, #16]
 800595e:	321c      	adds	r2, #28
 8005960:	4413      	add	r3, r2
 8005962:	9304      	str	r3, [sp, #16]
 8005964:	9b06      	ldr	r3, [sp, #24]
 8005966:	4416      	add	r6, r2
 8005968:	4413      	add	r3, r2
 800596a:	e78a      	b.n	8005882 <_dtoa_r+0x742>
 800596c:	4602      	mov	r2, r0
 800596e:	e7f5      	b.n	800595c <_dtoa_r+0x81c>
 8005970:	f1ba 0f00 	cmp.w	sl, #0
 8005974:	f8cd 8014 	str.w	r8, [sp, #20]
 8005978:	46d3      	mov	fp, sl
 800597a:	dc21      	bgt.n	80059c0 <_dtoa_r+0x880>
 800597c:	9b07      	ldr	r3, [sp, #28]
 800597e:	2b02      	cmp	r3, #2
 8005980:	dd1e      	ble.n	80059c0 <_dtoa_r+0x880>
 8005982:	f1bb 0f00 	cmp.w	fp, #0
 8005986:	f47f addc 	bne.w	8005542 <_dtoa_r+0x402>
 800598a:	4621      	mov	r1, r4
 800598c:	465b      	mov	r3, fp
 800598e:	2205      	movs	r2, #5
 8005990:	4648      	mov	r0, r9
 8005992:	f000 fa95 	bl	8005ec0 <__multadd>
 8005996:	4601      	mov	r1, r0
 8005998:	4604      	mov	r4, r0
 800599a:	9801      	ldr	r0, [sp, #4]
 800599c:	f000 fca0 	bl	80062e0 <__mcmp>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f77f adce 	ble.w	8005542 <_dtoa_r+0x402>
 80059a6:	463e      	mov	r6, r7
 80059a8:	2331      	movs	r3, #49	@ 0x31
 80059aa:	f806 3b01 	strb.w	r3, [r6], #1
 80059ae:	9b05      	ldr	r3, [sp, #20]
 80059b0:	3301      	adds	r3, #1
 80059b2:	9305      	str	r3, [sp, #20]
 80059b4:	e5c9      	b.n	800554a <_dtoa_r+0x40a>
 80059b6:	f8cd 8014 	str.w	r8, [sp, #20]
 80059ba:	4654      	mov	r4, sl
 80059bc:	4625      	mov	r5, r4
 80059be:	e7f2      	b.n	80059a6 <_dtoa_r+0x866>
 80059c0:	9b08      	ldr	r3, [sp, #32]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 8102 	beq.w	8005bcc <_dtoa_r+0xa8c>
 80059c8:	2e00      	cmp	r6, #0
 80059ca:	dd05      	ble.n	80059d8 <_dtoa_r+0x898>
 80059cc:	4629      	mov	r1, r5
 80059ce:	4632      	mov	r2, r6
 80059d0:	4648      	mov	r0, r9
 80059d2:	f000 fc19 	bl	8006208 <__lshift>
 80059d6:	4605      	mov	r5, r0
 80059d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d058      	beq.n	8005a90 <_dtoa_r+0x950>
 80059de:	6869      	ldr	r1, [r5, #4]
 80059e0:	4648      	mov	r0, r9
 80059e2:	f000 fa0b 	bl	8005dfc <_Balloc>
 80059e6:	4606      	mov	r6, r0
 80059e8:	b928      	cbnz	r0, 80059f6 <_dtoa_r+0x8b6>
 80059ea:	4b82      	ldr	r3, [pc, #520]	@ (8005bf4 <_dtoa_r+0xab4>)
 80059ec:	4602      	mov	r2, r0
 80059ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80059f2:	f7ff bbbe 	b.w	8005172 <_dtoa_r+0x32>
 80059f6:	692a      	ldr	r2, [r5, #16]
 80059f8:	3202      	adds	r2, #2
 80059fa:	0092      	lsls	r2, r2, #2
 80059fc:	f105 010c 	add.w	r1, r5, #12
 8005a00:	300c      	adds	r0, #12
 8005a02:	f000 ffa3 	bl	800694c <memcpy>
 8005a06:	2201      	movs	r2, #1
 8005a08:	4631      	mov	r1, r6
 8005a0a:	4648      	mov	r0, r9
 8005a0c:	f000 fbfc 	bl	8006208 <__lshift>
 8005a10:	1c7b      	adds	r3, r7, #1
 8005a12:	9304      	str	r3, [sp, #16]
 8005a14:	eb07 030b 	add.w	r3, r7, fp
 8005a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a1a:	9b02      	ldr	r3, [sp, #8]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	46a8      	mov	r8, r5
 8005a22:	9308      	str	r3, [sp, #32]
 8005a24:	4605      	mov	r5, r0
 8005a26:	9b04      	ldr	r3, [sp, #16]
 8005a28:	9801      	ldr	r0, [sp, #4]
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005a30:	f7ff fafb 	bl	800502a <quorem>
 8005a34:	4641      	mov	r1, r8
 8005a36:	9002      	str	r0, [sp, #8]
 8005a38:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8005a3c:	9801      	ldr	r0, [sp, #4]
 8005a3e:	f000 fc4f 	bl	80062e0 <__mcmp>
 8005a42:	462a      	mov	r2, r5
 8005a44:	9006      	str	r0, [sp, #24]
 8005a46:	4621      	mov	r1, r4
 8005a48:	4648      	mov	r0, r9
 8005a4a:	f000 fc65 	bl	8006318 <__mdiff>
 8005a4e:	68c2      	ldr	r2, [r0, #12]
 8005a50:	4606      	mov	r6, r0
 8005a52:	b9fa      	cbnz	r2, 8005a94 <_dtoa_r+0x954>
 8005a54:	4601      	mov	r1, r0
 8005a56:	9801      	ldr	r0, [sp, #4]
 8005a58:	f000 fc42 	bl	80062e0 <__mcmp>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	4631      	mov	r1, r6
 8005a60:	4648      	mov	r0, r9
 8005a62:	920a      	str	r2, [sp, #40]	@ 0x28
 8005a64:	f000 fa0a 	bl	8005e7c <_Bfree>
 8005a68:	9b07      	ldr	r3, [sp, #28]
 8005a6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a6c:	9e04      	ldr	r6, [sp, #16]
 8005a6e:	ea42 0103 	orr.w	r1, r2, r3
 8005a72:	9b08      	ldr	r3, [sp, #32]
 8005a74:	4319      	orrs	r1, r3
 8005a76:	d10f      	bne.n	8005a98 <_dtoa_r+0x958>
 8005a78:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005a7c:	d028      	beq.n	8005ad0 <_dtoa_r+0x990>
 8005a7e:	9b06      	ldr	r3, [sp, #24]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	dd02      	ble.n	8005a8a <_dtoa_r+0x94a>
 8005a84:	9b02      	ldr	r3, [sp, #8]
 8005a86:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8005a8a:	f88b a000 	strb.w	sl, [fp]
 8005a8e:	e55e      	b.n	800554e <_dtoa_r+0x40e>
 8005a90:	4628      	mov	r0, r5
 8005a92:	e7bd      	b.n	8005a10 <_dtoa_r+0x8d0>
 8005a94:	2201      	movs	r2, #1
 8005a96:	e7e2      	b.n	8005a5e <_dtoa_r+0x91e>
 8005a98:	9b06      	ldr	r3, [sp, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	db04      	blt.n	8005aa8 <_dtoa_r+0x968>
 8005a9e:	9907      	ldr	r1, [sp, #28]
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	9908      	ldr	r1, [sp, #32]
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	d120      	bne.n	8005aea <_dtoa_r+0x9aa>
 8005aa8:	2a00      	cmp	r2, #0
 8005aaa:	ddee      	ble.n	8005a8a <_dtoa_r+0x94a>
 8005aac:	9901      	ldr	r1, [sp, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	4648      	mov	r0, r9
 8005ab2:	f000 fba9 	bl	8006208 <__lshift>
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	9001      	str	r0, [sp, #4]
 8005aba:	f000 fc11 	bl	80062e0 <__mcmp>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	dc03      	bgt.n	8005aca <_dtoa_r+0x98a>
 8005ac2:	d1e2      	bne.n	8005a8a <_dtoa_r+0x94a>
 8005ac4:	f01a 0f01 	tst.w	sl, #1
 8005ac8:	d0df      	beq.n	8005a8a <_dtoa_r+0x94a>
 8005aca:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005ace:	d1d9      	bne.n	8005a84 <_dtoa_r+0x944>
 8005ad0:	2339      	movs	r3, #57	@ 0x39
 8005ad2:	f88b 3000 	strb.w	r3, [fp]
 8005ad6:	4633      	mov	r3, r6
 8005ad8:	461e      	mov	r6, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005ae0:	2a39      	cmp	r2, #57	@ 0x39
 8005ae2:	d052      	beq.n	8005b8a <_dtoa_r+0xa4a>
 8005ae4:	3201      	adds	r2, #1
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	e531      	b.n	800554e <_dtoa_r+0x40e>
 8005aea:	2a00      	cmp	r2, #0
 8005aec:	dd07      	ble.n	8005afe <_dtoa_r+0x9be>
 8005aee:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005af2:	d0ed      	beq.n	8005ad0 <_dtoa_r+0x990>
 8005af4:	f10a 0301 	add.w	r3, sl, #1
 8005af8:	f88b 3000 	strb.w	r3, [fp]
 8005afc:	e527      	b.n	800554e <_dtoa_r+0x40e>
 8005afe:	9b04      	ldr	r3, [sp, #16]
 8005b00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b02:	f803 ac01 	strb.w	sl, [r3, #-1]
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d029      	beq.n	8005b5e <_dtoa_r+0xa1e>
 8005b0a:	9901      	ldr	r1, [sp, #4]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	220a      	movs	r2, #10
 8005b10:	4648      	mov	r0, r9
 8005b12:	f000 f9d5 	bl	8005ec0 <__multadd>
 8005b16:	45a8      	cmp	r8, r5
 8005b18:	9001      	str	r0, [sp, #4]
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	f04f 020a 	mov.w	r2, #10
 8005b22:	4641      	mov	r1, r8
 8005b24:	4648      	mov	r0, r9
 8005b26:	d107      	bne.n	8005b38 <_dtoa_r+0x9f8>
 8005b28:	f000 f9ca 	bl	8005ec0 <__multadd>
 8005b2c:	4680      	mov	r8, r0
 8005b2e:	4605      	mov	r5, r0
 8005b30:	9b04      	ldr	r3, [sp, #16]
 8005b32:	3301      	adds	r3, #1
 8005b34:	9304      	str	r3, [sp, #16]
 8005b36:	e776      	b.n	8005a26 <_dtoa_r+0x8e6>
 8005b38:	f000 f9c2 	bl	8005ec0 <__multadd>
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	4680      	mov	r8, r0
 8005b40:	2300      	movs	r3, #0
 8005b42:	220a      	movs	r2, #10
 8005b44:	4648      	mov	r0, r9
 8005b46:	f000 f9bb 	bl	8005ec0 <__multadd>
 8005b4a:	4605      	mov	r5, r0
 8005b4c:	e7f0      	b.n	8005b30 <_dtoa_r+0x9f0>
 8005b4e:	f1bb 0f00 	cmp.w	fp, #0
 8005b52:	bfcc      	ite	gt
 8005b54:	465e      	movgt	r6, fp
 8005b56:	2601      	movle	r6, #1
 8005b58:	443e      	add	r6, r7
 8005b5a:	f04f 0800 	mov.w	r8, #0
 8005b5e:	9901      	ldr	r1, [sp, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	4648      	mov	r0, r9
 8005b64:	f000 fb50 	bl	8006208 <__lshift>
 8005b68:	4621      	mov	r1, r4
 8005b6a:	9001      	str	r0, [sp, #4]
 8005b6c:	f000 fbb8 	bl	80062e0 <__mcmp>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	dcb0      	bgt.n	8005ad6 <_dtoa_r+0x996>
 8005b74:	d102      	bne.n	8005b7c <_dtoa_r+0xa3c>
 8005b76:	f01a 0f01 	tst.w	sl, #1
 8005b7a:	d1ac      	bne.n	8005ad6 <_dtoa_r+0x996>
 8005b7c:	4633      	mov	r3, r6
 8005b7e:	461e      	mov	r6, r3
 8005b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b84:	2a30      	cmp	r2, #48	@ 0x30
 8005b86:	d0fa      	beq.n	8005b7e <_dtoa_r+0xa3e>
 8005b88:	e4e1      	b.n	800554e <_dtoa_r+0x40e>
 8005b8a:	429f      	cmp	r7, r3
 8005b8c:	d1a4      	bne.n	8005ad8 <_dtoa_r+0x998>
 8005b8e:	9b05      	ldr	r3, [sp, #20]
 8005b90:	3301      	adds	r3, #1
 8005b92:	9305      	str	r3, [sp, #20]
 8005b94:	2331      	movs	r3, #49	@ 0x31
 8005b96:	703b      	strb	r3, [r7, #0]
 8005b98:	e4d9      	b.n	800554e <_dtoa_r+0x40e>
 8005b9a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005b9c:	4f16      	ldr	r7, [pc, #88]	@ (8005bf8 <_dtoa_r+0xab8>)
 8005b9e:	b11b      	cbz	r3, 8005ba8 <_dtoa_r+0xa68>
 8005ba0:	f107 0308 	add.w	r3, r7, #8
 8005ba4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	4638      	mov	r0, r7
 8005baa:	b011      	add	sp, #68	@ 0x44
 8005bac:	ecbd 8b02 	vpop	{d8}
 8005bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb4:	9b07      	ldr	r3, [sp, #28]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	f77f ae2c 	ble.w	8005814 <_dtoa_r+0x6d4>
 8005bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	e64c      	b.n	800585e <_dtoa_r+0x71e>
 8005bc4:	f1bb 0f00 	cmp.w	fp, #0
 8005bc8:	f77f aed8 	ble.w	800597c <_dtoa_r+0x83c>
 8005bcc:	463e      	mov	r6, r7
 8005bce:	9801      	ldr	r0, [sp, #4]
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	f7ff fa2a 	bl	800502a <quorem>
 8005bd6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8005bda:	f806 ab01 	strb.w	sl, [r6], #1
 8005bde:	1bf2      	subs	r2, r6, r7
 8005be0:	4593      	cmp	fp, r2
 8005be2:	ddb4      	ble.n	8005b4e <_dtoa_r+0xa0e>
 8005be4:	9901      	ldr	r1, [sp, #4]
 8005be6:	2300      	movs	r3, #0
 8005be8:	220a      	movs	r2, #10
 8005bea:	4648      	mov	r0, r9
 8005bec:	f000 f968 	bl	8005ec0 <__multadd>
 8005bf0:	9001      	str	r0, [sp, #4]
 8005bf2:	e7ec      	b.n	8005bce <_dtoa_r+0xa8e>
 8005bf4:	080071fc 	.word	0x080071fc
 8005bf8:	08007180 	.word	0x08007180

08005bfc <_free_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4605      	mov	r5, r0
 8005c00:	2900      	cmp	r1, #0
 8005c02:	d041      	beq.n	8005c88 <_free_r+0x8c>
 8005c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c08:	1f0c      	subs	r4, r1, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	bfb8      	it	lt
 8005c0e:	18e4      	addlt	r4, r4, r3
 8005c10:	f000 f8e8 	bl	8005de4 <__malloc_lock>
 8005c14:	4a1d      	ldr	r2, [pc, #116]	@ (8005c8c <_free_r+0x90>)
 8005c16:	6813      	ldr	r3, [r2, #0]
 8005c18:	b933      	cbnz	r3, 8005c28 <_free_r+0x2c>
 8005c1a:	6063      	str	r3, [r4, #4]
 8005c1c:	6014      	str	r4, [r2, #0]
 8005c1e:	4628      	mov	r0, r5
 8005c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c24:	f000 b8e4 	b.w	8005df0 <__malloc_unlock>
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	d908      	bls.n	8005c3e <_free_r+0x42>
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	1821      	adds	r1, r4, r0
 8005c30:	428b      	cmp	r3, r1
 8005c32:	bf01      	itttt	eq
 8005c34:	6819      	ldreq	r1, [r3, #0]
 8005c36:	685b      	ldreq	r3, [r3, #4]
 8005c38:	1809      	addeq	r1, r1, r0
 8005c3a:	6021      	streq	r1, [r4, #0]
 8005c3c:	e7ed      	b.n	8005c1a <_free_r+0x1e>
 8005c3e:	461a      	mov	r2, r3
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	b10b      	cbz	r3, 8005c48 <_free_r+0x4c>
 8005c44:	42a3      	cmp	r3, r4
 8005c46:	d9fa      	bls.n	8005c3e <_free_r+0x42>
 8005c48:	6811      	ldr	r1, [r2, #0]
 8005c4a:	1850      	adds	r0, r2, r1
 8005c4c:	42a0      	cmp	r0, r4
 8005c4e:	d10b      	bne.n	8005c68 <_free_r+0x6c>
 8005c50:	6820      	ldr	r0, [r4, #0]
 8005c52:	4401      	add	r1, r0
 8005c54:	1850      	adds	r0, r2, r1
 8005c56:	4283      	cmp	r3, r0
 8005c58:	6011      	str	r1, [r2, #0]
 8005c5a:	d1e0      	bne.n	8005c1e <_free_r+0x22>
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	6053      	str	r3, [r2, #4]
 8005c62:	4408      	add	r0, r1
 8005c64:	6010      	str	r0, [r2, #0]
 8005c66:	e7da      	b.n	8005c1e <_free_r+0x22>
 8005c68:	d902      	bls.n	8005c70 <_free_r+0x74>
 8005c6a:	230c      	movs	r3, #12
 8005c6c:	602b      	str	r3, [r5, #0]
 8005c6e:	e7d6      	b.n	8005c1e <_free_r+0x22>
 8005c70:	6820      	ldr	r0, [r4, #0]
 8005c72:	1821      	adds	r1, r4, r0
 8005c74:	428b      	cmp	r3, r1
 8005c76:	bf04      	itt	eq
 8005c78:	6819      	ldreq	r1, [r3, #0]
 8005c7a:	685b      	ldreq	r3, [r3, #4]
 8005c7c:	6063      	str	r3, [r4, #4]
 8005c7e:	bf04      	itt	eq
 8005c80:	1809      	addeq	r1, r1, r0
 8005c82:	6021      	streq	r1, [r4, #0]
 8005c84:	6054      	str	r4, [r2, #4]
 8005c86:	e7ca      	b.n	8005c1e <_free_r+0x22>
 8005c88:	bd38      	pop	{r3, r4, r5, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000534 	.word	0x20000534

08005c90 <malloc>:
 8005c90:	4b02      	ldr	r3, [pc, #8]	@ (8005c9c <malloc+0xc>)
 8005c92:	4601      	mov	r1, r0
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	f000 b825 	b.w	8005ce4 <_malloc_r>
 8005c9a:	bf00      	nop
 8005c9c:	20000018 	.word	0x20000018

08005ca0 <sbrk_aligned>:
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	4e0f      	ldr	r6, [pc, #60]	@ (8005ce0 <sbrk_aligned+0x40>)
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	6831      	ldr	r1, [r6, #0]
 8005ca8:	4605      	mov	r5, r0
 8005caa:	b911      	cbnz	r1, 8005cb2 <sbrk_aligned+0x12>
 8005cac:	f000 fe3e 	bl	800692c <_sbrk_r>
 8005cb0:	6030      	str	r0, [r6, #0]
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	f000 fe39 	bl	800692c <_sbrk_r>
 8005cba:	1c43      	adds	r3, r0, #1
 8005cbc:	d103      	bne.n	8005cc6 <sbrk_aligned+0x26>
 8005cbe:	f04f 34ff 	mov.w	r4, #4294967295
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	bd70      	pop	{r4, r5, r6, pc}
 8005cc6:	1cc4      	adds	r4, r0, #3
 8005cc8:	f024 0403 	bic.w	r4, r4, #3
 8005ccc:	42a0      	cmp	r0, r4
 8005cce:	d0f8      	beq.n	8005cc2 <sbrk_aligned+0x22>
 8005cd0:	1a21      	subs	r1, r4, r0
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f000 fe2a 	bl	800692c <_sbrk_r>
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d1f2      	bne.n	8005cc2 <sbrk_aligned+0x22>
 8005cdc:	e7ef      	b.n	8005cbe <sbrk_aligned+0x1e>
 8005cde:	bf00      	nop
 8005ce0:	20000530 	.word	0x20000530

08005ce4 <_malloc_r>:
 8005ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce8:	1ccd      	adds	r5, r1, #3
 8005cea:	f025 0503 	bic.w	r5, r5, #3
 8005cee:	3508      	adds	r5, #8
 8005cf0:	2d0c      	cmp	r5, #12
 8005cf2:	bf38      	it	cc
 8005cf4:	250c      	movcc	r5, #12
 8005cf6:	2d00      	cmp	r5, #0
 8005cf8:	4606      	mov	r6, r0
 8005cfa:	db01      	blt.n	8005d00 <_malloc_r+0x1c>
 8005cfc:	42a9      	cmp	r1, r5
 8005cfe:	d904      	bls.n	8005d0a <_malloc_r+0x26>
 8005d00:	230c      	movs	r3, #12
 8005d02:	6033      	str	r3, [r6, #0]
 8005d04:	2000      	movs	r0, #0
 8005d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005de0 <_malloc_r+0xfc>
 8005d0e:	f000 f869 	bl	8005de4 <__malloc_lock>
 8005d12:	f8d8 3000 	ldr.w	r3, [r8]
 8005d16:	461c      	mov	r4, r3
 8005d18:	bb44      	cbnz	r4, 8005d6c <_malloc_r+0x88>
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f7ff ffbf 	bl	8005ca0 <sbrk_aligned>
 8005d22:	1c43      	adds	r3, r0, #1
 8005d24:	4604      	mov	r4, r0
 8005d26:	d158      	bne.n	8005dda <_malloc_r+0xf6>
 8005d28:	f8d8 4000 	ldr.w	r4, [r8]
 8005d2c:	4627      	mov	r7, r4
 8005d2e:	2f00      	cmp	r7, #0
 8005d30:	d143      	bne.n	8005dba <_malloc_r+0xd6>
 8005d32:	2c00      	cmp	r4, #0
 8005d34:	d04b      	beq.n	8005dce <_malloc_r+0xea>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	4639      	mov	r1, r7
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	eb04 0903 	add.w	r9, r4, r3
 8005d40:	f000 fdf4 	bl	800692c <_sbrk_r>
 8005d44:	4581      	cmp	r9, r0
 8005d46:	d142      	bne.n	8005dce <_malloc_r+0xea>
 8005d48:	6821      	ldr	r1, [r4, #0]
 8005d4a:	1a6d      	subs	r5, r5, r1
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f7ff ffa6 	bl	8005ca0 <sbrk_aligned>
 8005d54:	3001      	adds	r0, #1
 8005d56:	d03a      	beq.n	8005dce <_malloc_r+0xea>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	442b      	add	r3, r5
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	bb62      	cbnz	r2, 8005dc0 <_malloc_r+0xdc>
 8005d66:	f8c8 7000 	str.w	r7, [r8]
 8005d6a:	e00f      	b.n	8005d8c <_malloc_r+0xa8>
 8005d6c:	6822      	ldr	r2, [r4, #0]
 8005d6e:	1b52      	subs	r2, r2, r5
 8005d70:	d420      	bmi.n	8005db4 <_malloc_r+0xd0>
 8005d72:	2a0b      	cmp	r2, #11
 8005d74:	d917      	bls.n	8005da6 <_malloc_r+0xc2>
 8005d76:	1961      	adds	r1, r4, r5
 8005d78:	42a3      	cmp	r3, r4
 8005d7a:	6025      	str	r5, [r4, #0]
 8005d7c:	bf18      	it	ne
 8005d7e:	6059      	strne	r1, [r3, #4]
 8005d80:	6863      	ldr	r3, [r4, #4]
 8005d82:	bf08      	it	eq
 8005d84:	f8c8 1000 	streq.w	r1, [r8]
 8005d88:	5162      	str	r2, [r4, r5]
 8005d8a:	604b      	str	r3, [r1, #4]
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	f000 f82f 	bl	8005df0 <__malloc_unlock>
 8005d92:	f104 000b 	add.w	r0, r4, #11
 8005d96:	1d23      	adds	r3, r4, #4
 8005d98:	f020 0007 	bic.w	r0, r0, #7
 8005d9c:	1ac2      	subs	r2, r0, r3
 8005d9e:	bf1c      	itt	ne
 8005da0:	1a1b      	subne	r3, r3, r0
 8005da2:	50a3      	strne	r3, [r4, r2]
 8005da4:	e7af      	b.n	8005d06 <_malloc_r+0x22>
 8005da6:	6862      	ldr	r2, [r4, #4]
 8005da8:	42a3      	cmp	r3, r4
 8005daa:	bf0c      	ite	eq
 8005dac:	f8c8 2000 	streq.w	r2, [r8]
 8005db0:	605a      	strne	r2, [r3, #4]
 8005db2:	e7eb      	b.n	8005d8c <_malloc_r+0xa8>
 8005db4:	4623      	mov	r3, r4
 8005db6:	6864      	ldr	r4, [r4, #4]
 8005db8:	e7ae      	b.n	8005d18 <_malloc_r+0x34>
 8005dba:	463c      	mov	r4, r7
 8005dbc:	687f      	ldr	r7, [r7, #4]
 8005dbe:	e7b6      	b.n	8005d2e <_malloc_r+0x4a>
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	42a3      	cmp	r3, r4
 8005dc6:	d1fb      	bne.n	8005dc0 <_malloc_r+0xdc>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	6053      	str	r3, [r2, #4]
 8005dcc:	e7de      	b.n	8005d8c <_malloc_r+0xa8>
 8005dce:	230c      	movs	r3, #12
 8005dd0:	6033      	str	r3, [r6, #0]
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f000 f80c 	bl	8005df0 <__malloc_unlock>
 8005dd8:	e794      	b.n	8005d04 <_malloc_r+0x20>
 8005dda:	6005      	str	r5, [r0, #0]
 8005ddc:	e7d6      	b.n	8005d8c <_malloc_r+0xa8>
 8005dde:	bf00      	nop
 8005de0:	20000534 	.word	0x20000534

08005de4 <__malloc_lock>:
 8005de4:	4801      	ldr	r0, [pc, #4]	@ (8005dec <__malloc_lock+0x8>)
 8005de6:	f7ff b91e 	b.w	8005026 <__retarget_lock_acquire_recursive>
 8005dea:	bf00      	nop
 8005dec:	2000052c 	.word	0x2000052c

08005df0 <__malloc_unlock>:
 8005df0:	4801      	ldr	r0, [pc, #4]	@ (8005df8 <__malloc_unlock+0x8>)
 8005df2:	f7ff b919 	b.w	8005028 <__retarget_lock_release_recursive>
 8005df6:	bf00      	nop
 8005df8:	2000052c 	.word	0x2000052c

08005dfc <_Balloc>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	69c6      	ldr	r6, [r0, #28]
 8005e00:	4604      	mov	r4, r0
 8005e02:	460d      	mov	r5, r1
 8005e04:	b976      	cbnz	r6, 8005e24 <_Balloc+0x28>
 8005e06:	2010      	movs	r0, #16
 8005e08:	f7ff ff42 	bl	8005c90 <malloc>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	61e0      	str	r0, [r4, #28]
 8005e10:	b920      	cbnz	r0, 8005e1c <_Balloc+0x20>
 8005e12:	4b18      	ldr	r3, [pc, #96]	@ (8005e74 <_Balloc+0x78>)
 8005e14:	4818      	ldr	r0, [pc, #96]	@ (8005e78 <_Balloc+0x7c>)
 8005e16:	216b      	movs	r1, #107	@ 0x6b
 8005e18:	f000 fda6 	bl	8006968 <__assert_func>
 8005e1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e20:	6006      	str	r6, [r0, #0]
 8005e22:	60c6      	str	r6, [r0, #12]
 8005e24:	69e6      	ldr	r6, [r4, #28]
 8005e26:	68f3      	ldr	r3, [r6, #12]
 8005e28:	b183      	cbz	r3, 8005e4c <_Balloc+0x50>
 8005e2a:	69e3      	ldr	r3, [r4, #28]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e32:	b9b8      	cbnz	r0, 8005e64 <_Balloc+0x68>
 8005e34:	2101      	movs	r1, #1
 8005e36:	fa01 f605 	lsl.w	r6, r1, r5
 8005e3a:	1d72      	adds	r2, r6, #5
 8005e3c:	0092      	lsls	r2, r2, #2
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f000 fdb0 	bl	80069a4 <_calloc_r>
 8005e44:	b160      	cbz	r0, 8005e60 <_Balloc+0x64>
 8005e46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e4a:	e00e      	b.n	8005e6a <_Balloc+0x6e>
 8005e4c:	2221      	movs	r2, #33	@ 0x21
 8005e4e:	2104      	movs	r1, #4
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 fda7 	bl	80069a4 <_calloc_r>
 8005e56:	69e3      	ldr	r3, [r4, #28]
 8005e58:	60f0      	str	r0, [r6, #12]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e4      	bne.n	8005e2a <_Balloc+0x2e>
 8005e60:	2000      	movs	r0, #0
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	6802      	ldr	r2, [r0, #0]
 8005e66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e70:	e7f7      	b.n	8005e62 <_Balloc+0x66>
 8005e72:	bf00      	nop
 8005e74:	0800718d 	.word	0x0800718d
 8005e78:	0800720d 	.word	0x0800720d

08005e7c <_Bfree>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	69c6      	ldr	r6, [r0, #28]
 8005e80:	4605      	mov	r5, r0
 8005e82:	460c      	mov	r4, r1
 8005e84:	b976      	cbnz	r6, 8005ea4 <_Bfree+0x28>
 8005e86:	2010      	movs	r0, #16
 8005e88:	f7ff ff02 	bl	8005c90 <malloc>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	61e8      	str	r0, [r5, #28]
 8005e90:	b920      	cbnz	r0, 8005e9c <_Bfree+0x20>
 8005e92:	4b09      	ldr	r3, [pc, #36]	@ (8005eb8 <_Bfree+0x3c>)
 8005e94:	4809      	ldr	r0, [pc, #36]	@ (8005ebc <_Bfree+0x40>)
 8005e96:	218f      	movs	r1, #143	@ 0x8f
 8005e98:	f000 fd66 	bl	8006968 <__assert_func>
 8005e9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ea0:	6006      	str	r6, [r0, #0]
 8005ea2:	60c6      	str	r6, [r0, #12]
 8005ea4:	b13c      	cbz	r4, 8005eb6 <_Bfree+0x3a>
 8005ea6:	69eb      	ldr	r3, [r5, #28]
 8005ea8:	6862      	ldr	r2, [r4, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005eb0:	6021      	str	r1, [r4, #0]
 8005eb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}
 8005eb8:	0800718d 	.word	0x0800718d
 8005ebc:	0800720d 	.word	0x0800720d

08005ec0 <__multadd>:
 8005ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec4:	690d      	ldr	r5, [r1, #16]
 8005ec6:	4607      	mov	r7, r0
 8005ec8:	460c      	mov	r4, r1
 8005eca:	461e      	mov	r6, r3
 8005ecc:	f101 0c14 	add.w	ip, r1, #20
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	f8dc 3000 	ldr.w	r3, [ip]
 8005ed6:	b299      	uxth	r1, r3
 8005ed8:	fb02 6101 	mla	r1, r2, r1, r6
 8005edc:	0c1e      	lsrs	r6, r3, #16
 8005ede:	0c0b      	lsrs	r3, r1, #16
 8005ee0:	fb02 3306 	mla	r3, r2, r6, r3
 8005ee4:	b289      	uxth	r1, r1
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005eec:	4285      	cmp	r5, r0
 8005eee:	f84c 1b04 	str.w	r1, [ip], #4
 8005ef2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ef6:	dcec      	bgt.n	8005ed2 <__multadd+0x12>
 8005ef8:	b30e      	cbz	r6, 8005f3e <__multadd+0x7e>
 8005efa:	68a3      	ldr	r3, [r4, #8]
 8005efc:	42ab      	cmp	r3, r5
 8005efe:	dc19      	bgt.n	8005f34 <__multadd+0x74>
 8005f00:	6861      	ldr	r1, [r4, #4]
 8005f02:	4638      	mov	r0, r7
 8005f04:	3101      	adds	r1, #1
 8005f06:	f7ff ff79 	bl	8005dfc <_Balloc>
 8005f0a:	4680      	mov	r8, r0
 8005f0c:	b928      	cbnz	r0, 8005f1a <__multadd+0x5a>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	4b0c      	ldr	r3, [pc, #48]	@ (8005f44 <__multadd+0x84>)
 8005f12:	480d      	ldr	r0, [pc, #52]	@ (8005f48 <__multadd+0x88>)
 8005f14:	21ba      	movs	r1, #186	@ 0xba
 8005f16:	f000 fd27 	bl	8006968 <__assert_func>
 8005f1a:	6922      	ldr	r2, [r4, #16]
 8005f1c:	3202      	adds	r2, #2
 8005f1e:	f104 010c 	add.w	r1, r4, #12
 8005f22:	0092      	lsls	r2, r2, #2
 8005f24:	300c      	adds	r0, #12
 8005f26:	f000 fd11 	bl	800694c <memcpy>
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	f7ff ffa5 	bl	8005e7c <_Bfree>
 8005f32:	4644      	mov	r4, r8
 8005f34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f38:	3501      	adds	r5, #1
 8005f3a:	615e      	str	r6, [r3, #20]
 8005f3c:	6125      	str	r5, [r4, #16]
 8005f3e:	4620      	mov	r0, r4
 8005f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f44:	080071fc 	.word	0x080071fc
 8005f48:	0800720d 	.word	0x0800720d

08005f4c <__hi0bits>:
 8005f4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005f50:	4603      	mov	r3, r0
 8005f52:	bf36      	itet	cc
 8005f54:	0403      	lslcc	r3, r0, #16
 8005f56:	2000      	movcs	r0, #0
 8005f58:	2010      	movcc	r0, #16
 8005f5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f5e:	bf3c      	itt	cc
 8005f60:	021b      	lslcc	r3, r3, #8
 8005f62:	3008      	addcc	r0, #8
 8005f64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f68:	bf3c      	itt	cc
 8005f6a:	011b      	lslcc	r3, r3, #4
 8005f6c:	3004      	addcc	r0, #4
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f72:	bf3c      	itt	cc
 8005f74:	009b      	lslcc	r3, r3, #2
 8005f76:	3002      	addcc	r0, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	db05      	blt.n	8005f88 <__hi0bits+0x3c>
 8005f7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005f80:	f100 0001 	add.w	r0, r0, #1
 8005f84:	bf08      	it	eq
 8005f86:	2020      	moveq	r0, #32
 8005f88:	4770      	bx	lr

08005f8a <__lo0bits>:
 8005f8a:	6803      	ldr	r3, [r0, #0]
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	f013 0007 	ands.w	r0, r3, #7
 8005f92:	d00b      	beq.n	8005fac <__lo0bits+0x22>
 8005f94:	07d9      	lsls	r1, r3, #31
 8005f96:	d421      	bmi.n	8005fdc <__lo0bits+0x52>
 8005f98:	0798      	lsls	r0, r3, #30
 8005f9a:	bf49      	itett	mi
 8005f9c:	085b      	lsrmi	r3, r3, #1
 8005f9e:	089b      	lsrpl	r3, r3, #2
 8005fa0:	2001      	movmi	r0, #1
 8005fa2:	6013      	strmi	r3, [r2, #0]
 8005fa4:	bf5c      	itt	pl
 8005fa6:	6013      	strpl	r3, [r2, #0]
 8005fa8:	2002      	movpl	r0, #2
 8005faa:	4770      	bx	lr
 8005fac:	b299      	uxth	r1, r3
 8005fae:	b909      	cbnz	r1, 8005fb4 <__lo0bits+0x2a>
 8005fb0:	0c1b      	lsrs	r3, r3, #16
 8005fb2:	2010      	movs	r0, #16
 8005fb4:	b2d9      	uxtb	r1, r3
 8005fb6:	b909      	cbnz	r1, 8005fbc <__lo0bits+0x32>
 8005fb8:	3008      	adds	r0, #8
 8005fba:	0a1b      	lsrs	r3, r3, #8
 8005fbc:	0719      	lsls	r1, r3, #28
 8005fbe:	bf04      	itt	eq
 8005fc0:	091b      	lsreq	r3, r3, #4
 8005fc2:	3004      	addeq	r0, #4
 8005fc4:	0799      	lsls	r1, r3, #30
 8005fc6:	bf04      	itt	eq
 8005fc8:	089b      	lsreq	r3, r3, #2
 8005fca:	3002      	addeq	r0, #2
 8005fcc:	07d9      	lsls	r1, r3, #31
 8005fce:	d403      	bmi.n	8005fd8 <__lo0bits+0x4e>
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	f100 0001 	add.w	r0, r0, #1
 8005fd6:	d003      	beq.n	8005fe0 <__lo0bits+0x56>
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	4770      	bx	lr
 8005fdc:	2000      	movs	r0, #0
 8005fde:	4770      	bx	lr
 8005fe0:	2020      	movs	r0, #32
 8005fe2:	4770      	bx	lr

08005fe4 <__i2b>:
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	2101      	movs	r1, #1
 8005fea:	f7ff ff07 	bl	8005dfc <_Balloc>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	b928      	cbnz	r0, 8005ffe <__i2b+0x1a>
 8005ff2:	4b05      	ldr	r3, [pc, #20]	@ (8006008 <__i2b+0x24>)
 8005ff4:	4805      	ldr	r0, [pc, #20]	@ (800600c <__i2b+0x28>)
 8005ff6:	f240 1145 	movw	r1, #325	@ 0x145
 8005ffa:	f000 fcb5 	bl	8006968 <__assert_func>
 8005ffe:	2301      	movs	r3, #1
 8006000:	6144      	str	r4, [r0, #20]
 8006002:	6103      	str	r3, [r0, #16]
 8006004:	bd10      	pop	{r4, pc}
 8006006:	bf00      	nop
 8006008:	080071fc 	.word	0x080071fc
 800600c:	0800720d 	.word	0x0800720d

08006010 <__multiply>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	4617      	mov	r7, r2
 8006016:	690a      	ldr	r2, [r1, #16]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	429a      	cmp	r2, r3
 800601c:	bfa8      	it	ge
 800601e:	463b      	movge	r3, r7
 8006020:	4689      	mov	r9, r1
 8006022:	bfa4      	itt	ge
 8006024:	460f      	movge	r7, r1
 8006026:	4699      	movge	r9, r3
 8006028:	693d      	ldr	r5, [r7, #16]
 800602a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	eb05 060a 	add.w	r6, r5, sl
 8006036:	42b3      	cmp	r3, r6
 8006038:	b085      	sub	sp, #20
 800603a:	bfb8      	it	lt
 800603c:	3101      	addlt	r1, #1
 800603e:	f7ff fedd 	bl	8005dfc <_Balloc>
 8006042:	b930      	cbnz	r0, 8006052 <__multiply+0x42>
 8006044:	4602      	mov	r2, r0
 8006046:	4b41      	ldr	r3, [pc, #260]	@ (800614c <__multiply+0x13c>)
 8006048:	4841      	ldr	r0, [pc, #260]	@ (8006150 <__multiply+0x140>)
 800604a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800604e:	f000 fc8b 	bl	8006968 <__assert_func>
 8006052:	f100 0414 	add.w	r4, r0, #20
 8006056:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800605a:	4623      	mov	r3, r4
 800605c:	2200      	movs	r2, #0
 800605e:	4573      	cmp	r3, lr
 8006060:	d320      	bcc.n	80060a4 <__multiply+0x94>
 8006062:	f107 0814 	add.w	r8, r7, #20
 8006066:	f109 0114 	add.w	r1, r9, #20
 800606a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800606e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006072:	9302      	str	r3, [sp, #8]
 8006074:	1beb      	subs	r3, r5, r7
 8006076:	3b15      	subs	r3, #21
 8006078:	f023 0303 	bic.w	r3, r3, #3
 800607c:	3304      	adds	r3, #4
 800607e:	3715      	adds	r7, #21
 8006080:	42bd      	cmp	r5, r7
 8006082:	bf38      	it	cc
 8006084:	2304      	movcc	r3, #4
 8006086:	9301      	str	r3, [sp, #4]
 8006088:	9b02      	ldr	r3, [sp, #8]
 800608a:	9103      	str	r1, [sp, #12]
 800608c:	428b      	cmp	r3, r1
 800608e:	d80c      	bhi.n	80060aa <__multiply+0x9a>
 8006090:	2e00      	cmp	r6, #0
 8006092:	dd03      	ble.n	800609c <__multiply+0x8c>
 8006094:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006098:	2b00      	cmp	r3, #0
 800609a:	d055      	beq.n	8006148 <__multiply+0x138>
 800609c:	6106      	str	r6, [r0, #16]
 800609e:	b005      	add	sp, #20
 80060a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a4:	f843 2b04 	str.w	r2, [r3], #4
 80060a8:	e7d9      	b.n	800605e <__multiply+0x4e>
 80060aa:	f8b1 a000 	ldrh.w	sl, [r1]
 80060ae:	f1ba 0f00 	cmp.w	sl, #0
 80060b2:	d01f      	beq.n	80060f4 <__multiply+0xe4>
 80060b4:	46c4      	mov	ip, r8
 80060b6:	46a1      	mov	r9, r4
 80060b8:	2700      	movs	r7, #0
 80060ba:	f85c 2b04 	ldr.w	r2, [ip], #4
 80060be:	f8d9 3000 	ldr.w	r3, [r9]
 80060c2:	fa1f fb82 	uxth.w	fp, r2
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	fb0a 330b 	mla	r3, sl, fp, r3
 80060cc:	443b      	add	r3, r7
 80060ce:	f8d9 7000 	ldr.w	r7, [r9]
 80060d2:	0c12      	lsrs	r2, r2, #16
 80060d4:	0c3f      	lsrs	r7, r7, #16
 80060d6:	fb0a 7202 	mla	r2, sl, r2, r7
 80060da:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80060de:	b29b      	uxth	r3, r3
 80060e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060e4:	4565      	cmp	r5, ip
 80060e6:	f849 3b04 	str.w	r3, [r9], #4
 80060ea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80060ee:	d8e4      	bhi.n	80060ba <__multiply+0xaa>
 80060f0:	9b01      	ldr	r3, [sp, #4]
 80060f2:	50e7      	str	r7, [r4, r3]
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80060fa:	3104      	adds	r1, #4
 80060fc:	f1b9 0f00 	cmp.w	r9, #0
 8006100:	d020      	beq.n	8006144 <__multiply+0x134>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	4647      	mov	r7, r8
 8006106:	46a4      	mov	ip, r4
 8006108:	f04f 0a00 	mov.w	sl, #0
 800610c:	f8b7 b000 	ldrh.w	fp, [r7]
 8006110:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006114:	fb09 220b 	mla	r2, r9, fp, r2
 8006118:	4452      	add	r2, sl
 800611a:	b29b      	uxth	r3, r3
 800611c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006120:	f84c 3b04 	str.w	r3, [ip], #4
 8006124:	f857 3b04 	ldr.w	r3, [r7], #4
 8006128:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800612c:	f8bc 3000 	ldrh.w	r3, [ip]
 8006130:	fb09 330a 	mla	r3, r9, sl, r3
 8006134:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006138:	42bd      	cmp	r5, r7
 800613a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800613e:	d8e5      	bhi.n	800610c <__multiply+0xfc>
 8006140:	9a01      	ldr	r2, [sp, #4]
 8006142:	50a3      	str	r3, [r4, r2]
 8006144:	3404      	adds	r4, #4
 8006146:	e79f      	b.n	8006088 <__multiply+0x78>
 8006148:	3e01      	subs	r6, #1
 800614a:	e7a1      	b.n	8006090 <__multiply+0x80>
 800614c:	080071fc 	.word	0x080071fc
 8006150:	0800720d 	.word	0x0800720d

08006154 <__pow5mult>:
 8006154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006158:	4615      	mov	r5, r2
 800615a:	f012 0203 	ands.w	r2, r2, #3
 800615e:	4607      	mov	r7, r0
 8006160:	460e      	mov	r6, r1
 8006162:	d007      	beq.n	8006174 <__pow5mult+0x20>
 8006164:	4c25      	ldr	r4, [pc, #148]	@ (80061fc <__pow5mult+0xa8>)
 8006166:	3a01      	subs	r2, #1
 8006168:	2300      	movs	r3, #0
 800616a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800616e:	f7ff fea7 	bl	8005ec0 <__multadd>
 8006172:	4606      	mov	r6, r0
 8006174:	10ad      	asrs	r5, r5, #2
 8006176:	d03d      	beq.n	80061f4 <__pow5mult+0xa0>
 8006178:	69fc      	ldr	r4, [r7, #28]
 800617a:	b97c      	cbnz	r4, 800619c <__pow5mult+0x48>
 800617c:	2010      	movs	r0, #16
 800617e:	f7ff fd87 	bl	8005c90 <malloc>
 8006182:	4602      	mov	r2, r0
 8006184:	61f8      	str	r0, [r7, #28]
 8006186:	b928      	cbnz	r0, 8006194 <__pow5mult+0x40>
 8006188:	4b1d      	ldr	r3, [pc, #116]	@ (8006200 <__pow5mult+0xac>)
 800618a:	481e      	ldr	r0, [pc, #120]	@ (8006204 <__pow5mult+0xb0>)
 800618c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006190:	f000 fbea 	bl	8006968 <__assert_func>
 8006194:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006198:	6004      	str	r4, [r0, #0]
 800619a:	60c4      	str	r4, [r0, #12]
 800619c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80061a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061a4:	b94c      	cbnz	r4, 80061ba <__pow5mult+0x66>
 80061a6:	f240 2171 	movw	r1, #625	@ 0x271
 80061aa:	4638      	mov	r0, r7
 80061ac:	f7ff ff1a 	bl	8005fe4 <__i2b>
 80061b0:	2300      	movs	r3, #0
 80061b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80061b6:	4604      	mov	r4, r0
 80061b8:	6003      	str	r3, [r0, #0]
 80061ba:	f04f 0900 	mov.w	r9, #0
 80061be:	07eb      	lsls	r3, r5, #31
 80061c0:	d50a      	bpl.n	80061d8 <__pow5mult+0x84>
 80061c2:	4631      	mov	r1, r6
 80061c4:	4622      	mov	r2, r4
 80061c6:	4638      	mov	r0, r7
 80061c8:	f7ff ff22 	bl	8006010 <__multiply>
 80061cc:	4631      	mov	r1, r6
 80061ce:	4680      	mov	r8, r0
 80061d0:	4638      	mov	r0, r7
 80061d2:	f7ff fe53 	bl	8005e7c <_Bfree>
 80061d6:	4646      	mov	r6, r8
 80061d8:	106d      	asrs	r5, r5, #1
 80061da:	d00b      	beq.n	80061f4 <__pow5mult+0xa0>
 80061dc:	6820      	ldr	r0, [r4, #0]
 80061de:	b938      	cbnz	r0, 80061f0 <__pow5mult+0x9c>
 80061e0:	4622      	mov	r2, r4
 80061e2:	4621      	mov	r1, r4
 80061e4:	4638      	mov	r0, r7
 80061e6:	f7ff ff13 	bl	8006010 <__multiply>
 80061ea:	6020      	str	r0, [r4, #0]
 80061ec:	f8c0 9000 	str.w	r9, [r0]
 80061f0:	4604      	mov	r4, r0
 80061f2:	e7e4      	b.n	80061be <__pow5mult+0x6a>
 80061f4:	4630      	mov	r0, r6
 80061f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061fa:	bf00      	nop
 80061fc:	080072c0 	.word	0x080072c0
 8006200:	0800718d 	.word	0x0800718d
 8006204:	0800720d 	.word	0x0800720d

08006208 <__lshift>:
 8006208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	460c      	mov	r4, r1
 800620e:	6849      	ldr	r1, [r1, #4]
 8006210:	6923      	ldr	r3, [r4, #16]
 8006212:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006216:	68a3      	ldr	r3, [r4, #8]
 8006218:	4607      	mov	r7, r0
 800621a:	4691      	mov	r9, r2
 800621c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006220:	f108 0601 	add.w	r6, r8, #1
 8006224:	42b3      	cmp	r3, r6
 8006226:	db0b      	blt.n	8006240 <__lshift+0x38>
 8006228:	4638      	mov	r0, r7
 800622a:	f7ff fde7 	bl	8005dfc <_Balloc>
 800622e:	4605      	mov	r5, r0
 8006230:	b948      	cbnz	r0, 8006246 <__lshift+0x3e>
 8006232:	4602      	mov	r2, r0
 8006234:	4b28      	ldr	r3, [pc, #160]	@ (80062d8 <__lshift+0xd0>)
 8006236:	4829      	ldr	r0, [pc, #164]	@ (80062dc <__lshift+0xd4>)
 8006238:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800623c:	f000 fb94 	bl	8006968 <__assert_func>
 8006240:	3101      	adds	r1, #1
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	e7ee      	b.n	8006224 <__lshift+0x1c>
 8006246:	2300      	movs	r3, #0
 8006248:	f100 0114 	add.w	r1, r0, #20
 800624c:	f100 0210 	add.w	r2, r0, #16
 8006250:	4618      	mov	r0, r3
 8006252:	4553      	cmp	r3, sl
 8006254:	db33      	blt.n	80062be <__lshift+0xb6>
 8006256:	6920      	ldr	r0, [r4, #16]
 8006258:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800625c:	f104 0314 	add.w	r3, r4, #20
 8006260:	f019 091f 	ands.w	r9, r9, #31
 8006264:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006268:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800626c:	d02b      	beq.n	80062c6 <__lshift+0xbe>
 800626e:	f1c9 0e20 	rsb	lr, r9, #32
 8006272:	468a      	mov	sl, r1
 8006274:	2200      	movs	r2, #0
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	fa00 f009 	lsl.w	r0, r0, r9
 800627c:	4310      	orrs	r0, r2
 800627e:	f84a 0b04 	str.w	r0, [sl], #4
 8006282:	f853 2b04 	ldr.w	r2, [r3], #4
 8006286:	459c      	cmp	ip, r3
 8006288:	fa22 f20e 	lsr.w	r2, r2, lr
 800628c:	d8f3      	bhi.n	8006276 <__lshift+0x6e>
 800628e:	ebac 0304 	sub.w	r3, ip, r4
 8006292:	3b15      	subs	r3, #21
 8006294:	f023 0303 	bic.w	r3, r3, #3
 8006298:	3304      	adds	r3, #4
 800629a:	f104 0015 	add.w	r0, r4, #21
 800629e:	4560      	cmp	r0, ip
 80062a0:	bf88      	it	hi
 80062a2:	2304      	movhi	r3, #4
 80062a4:	50ca      	str	r2, [r1, r3]
 80062a6:	b10a      	cbz	r2, 80062ac <__lshift+0xa4>
 80062a8:	f108 0602 	add.w	r6, r8, #2
 80062ac:	3e01      	subs	r6, #1
 80062ae:	4638      	mov	r0, r7
 80062b0:	612e      	str	r6, [r5, #16]
 80062b2:	4621      	mov	r1, r4
 80062b4:	f7ff fde2 	bl	8005e7c <_Bfree>
 80062b8:	4628      	mov	r0, r5
 80062ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062be:	f842 0f04 	str.w	r0, [r2, #4]!
 80062c2:	3301      	adds	r3, #1
 80062c4:	e7c5      	b.n	8006252 <__lshift+0x4a>
 80062c6:	3904      	subs	r1, #4
 80062c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80062cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80062d0:	459c      	cmp	ip, r3
 80062d2:	d8f9      	bhi.n	80062c8 <__lshift+0xc0>
 80062d4:	e7ea      	b.n	80062ac <__lshift+0xa4>
 80062d6:	bf00      	nop
 80062d8:	080071fc 	.word	0x080071fc
 80062dc:	0800720d 	.word	0x0800720d

080062e0 <__mcmp>:
 80062e0:	690a      	ldr	r2, [r1, #16]
 80062e2:	4603      	mov	r3, r0
 80062e4:	6900      	ldr	r0, [r0, #16]
 80062e6:	1a80      	subs	r0, r0, r2
 80062e8:	b530      	push	{r4, r5, lr}
 80062ea:	d10e      	bne.n	800630a <__mcmp+0x2a>
 80062ec:	3314      	adds	r3, #20
 80062ee:	3114      	adds	r1, #20
 80062f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80062f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006300:	4295      	cmp	r5, r2
 8006302:	d003      	beq.n	800630c <__mcmp+0x2c>
 8006304:	d205      	bcs.n	8006312 <__mcmp+0x32>
 8006306:	f04f 30ff 	mov.w	r0, #4294967295
 800630a:	bd30      	pop	{r4, r5, pc}
 800630c:	42a3      	cmp	r3, r4
 800630e:	d3f3      	bcc.n	80062f8 <__mcmp+0x18>
 8006310:	e7fb      	b.n	800630a <__mcmp+0x2a>
 8006312:	2001      	movs	r0, #1
 8006314:	e7f9      	b.n	800630a <__mcmp+0x2a>
	...

08006318 <__mdiff>:
 8006318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631c:	4689      	mov	r9, r1
 800631e:	4606      	mov	r6, r0
 8006320:	4611      	mov	r1, r2
 8006322:	4648      	mov	r0, r9
 8006324:	4614      	mov	r4, r2
 8006326:	f7ff ffdb 	bl	80062e0 <__mcmp>
 800632a:	1e05      	subs	r5, r0, #0
 800632c:	d112      	bne.n	8006354 <__mdiff+0x3c>
 800632e:	4629      	mov	r1, r5
 8006330:	4630      	mov	r0, r6
 8006332:	f7ff fd63 	bl	8005dfc <_Balloc>
 8006336:	4602      	mov	r2, r0
 8006338:	b928      	cbnz	r0, 8006346 <__mdiff+0x2e>
 800633a:	4b3f      	ldr	r3, [pc, #252]	@ (8006438 <__mdiff+0x120>)
 800633c:	f240 2137 	movw	r1, #567	@ 0x237
 8006340:	483e      	ldr	r0, [pc, #248]	@ (800643c <__mdiff+0x124>)
 8006342:	f000 fb11 	bl	8006968 <__assert_func>
 8006346:	2301      	movs	r3, #1
 8006348:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800634c:	4610      	mov	r0, r2
 800634e:	b003      	add	sp, #12
 8006350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006354:	bfbc      	itt	lt
 8006356:	464b      	movlt	r3, r9
 8006358:	46a1      	movlt	r9, r4
 800635a:	4630      	mov	r0, r6
 800635c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006360:	bfba      	itte	lt
 8006362:	461c      	movlt	r4, r3
 8006364:	2501      	movlt	r5, #1
 8006366:	2500      	movge	r5, #0
 8006368:	f7ff fd48 	bl	8005dfc <_Balloc>
 800636c:	4602      	mov	r2, r0
 800636e:	b918      	cbnz	r0, 8006378 <__mdiff+0x60>
 8006370:	4b31      	ldr	r3, [pc, #196]	@ (8006438 <__mdiff+0x120>)
 8006372:	f240 2145 	movw	r1, #581	@ 0x245
 8006376:	e7e3      	b.n	8006340 <__mdiff+0x28>
 8006378:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800637c:	6926      	ldr	r6, [r4, #16]
 800637e:	60c5      	str	r5, [r0, #12]
 8006380:	f109 0310 	add.w	r3, r9, #16
 8006384:	f109 0514 	add.w	r5, r9, #20
 8006388:	f104 0e14 	add.w	lr, r4, #20
 800638c:	f100 0b14 	add.w	fp, r0, #20
 8006390:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006394:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	46d9      	mov	r9, fp
 800639c:	f04f 0c00 	mov.w	ip, #0
 80063a0:	9b01      	ldr	r3, [sp, #4]
 80063a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80063a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	fa1f f38a 	uxth.w	r3, sl
 80063b0:	4619      	mov	r1, r3
 80063b2:	b283      	uxth	r3, r0
 80063b4:	1acb      	subs	r3, r1, r3
 80063b6:	0c00      	lsrs	r0, r0, #16
 80063b8:	4463      	add	r3, ip
 80063ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80063be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80063c8:	4576      	cmp	r6, lr
 80063ca:	f849 3b04 	str.w	r3, [r9], #4
 80063ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063d2:	d8e5      	bhi.n	80063a0 <__mdiff+0x88>
 80063d4:	1b33      	subs	r3, r6, r4
 80063d6:	3b15      	subs	r3, #21
 80063d8:	f023 0303 	bic.w	r3, r3, #3
 80063dc:	3415      	adds	r4, #21
 80063de:	3304      	adds	r3, #4
 80063e0:	42a6      	cmp	r6, r4
 80063e2:	bf38      	it	cc
 80063e4:	2304      	movcc	r3, #4
 80063e6:	441d      	add	r5, r3
 80063e8:	445b      	add	r3, fp
 80063ea:	461e      	mov	r6, r3
 80063ec:	462c      	mov	r4, r5
 80063ee:	4544      	cmp	r4, r8
 80063f0:	d30e      	bcc.n	8006410 <__mdiff+0xf8>
 80063f2:	f108 0103 	add.w	r1, r8, #3
 80063f6:	1b49      	subs	r1, r1, r5
 80063f8:	f021 0103 	bic.w	r1, r1, #3
 80063fc:	3d03      	subs	r5, #3
 80063fe:	45a8      	cmp	r8, r5
 8006400:	bf38      	it	cc
 8006402:	2100      	movcc	r1, #0
 8006404:	440b      	add	r3, r1
 8006406:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800640a:	b191      	cbz	r1, 8006432 <__mdiff+0x11a>
 800640c:	6117      	str	r7, [r2, #16]
 800640e:	e79d      	b.n	800634c <__mdiff+0x34>
 8006410:	f854 1b04 	ldr.w	r1, [r4], #4
 8006414:	46e6      	mov	lr, ip
 8006416:	0c08      	lsrs	r0, r1, #16
 8006418:	fa1c fc81 	uxtah	ip, ip, r1
 800641c:	4471      	add	r1, lr
 800641e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006422:	b289      	uxth	r1, r1
 8006424:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006428:	f846 1b04 	str.w	r1, [r6], #4
 800642c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006430:	e7dd      	b.n	80063ee <__mdiff+0xd6>
 8006432:	3f01      	subs	r7, #1
 8006434:	e7e7      	b.n	8006406 <__mdiff+0xee>
 8006436:	bf00      	nop
 8006438:	080071fc 	.word	0x080071fc
 800643c:	0800720d 	.word	0x0800720d

08006440 <__d2b>:
 8006440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006444:	460f      	mov	r7, r1
 8006446:	2101      	movs	r1, #1
 8006448:	ec59 8b10 	vmov	r8, r9, d0
 800644c:	4616      	mov	r6, r2
 800644e:	f7ff fcd5 	bl	8005dfc <_Balloc>
 8006452:	4604      	mov	r4, r0
 8006454:	b930      	cbnz	r0, 8006464 <__d2b+0x24>
 8006456:	4602      	mov	r2, r0
 8006458:	4b23      	ldr	r3, [pc, #140]	@ (80064e8 <__d2b+0xa8>)
 800645a:	4824      	ldr	r0, [pc, #144]	@ (80064ec <__d2b+0xac>)
 800645c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006460:	f000 fa82 	bl	8006968 <__assert_func>
 8006464:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006468:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800646c:	b10d      	cbz	r5, 8006472 <__d2b+0x32>
 800646e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	f1b8 0300 	subs.w	r3, r8, #0
 8006478:	d023      	beq.n	80064c2 <__d2b+0x82>
 800647a:	4668      	mov	r0, sp
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	f7ff fd84 	bl	8005f8a <__lo0bits>
 8006482:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006486:	b1d0      	cbz	r0, 80064be <__d2b+0x7e>
 8006488:	f1c0 0320 	rsb	r3, r0, #32
 800648c:	fa02 f303 	lsl.w	r3, r2, r3
 8006490:	430b      	orrs	r3, r1
 8006492:	40c2      	lsrs	r2, r0
 8006494:	6163      	str	r3, [r4, #20]
 8006496:	9201      	str	r2, [sp, #4]
 8006498:	9b01      	ldr	r3, [sp, #4]
 800649a:	61a3      	str	r3, [r4, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	bf0c      	ite	eq
 80064a0:	2201      	moveq	r2, #1
 80064a2:	2202      	movne	r2, #2
 80064a4:	6122      	str	r2, [r4, #16]
 80064a6:	b1a5      	cbz	r5, 80064d2 <__d2b+0x92>
 80064a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80064ac:	4405      	add	r5, r0
 80064ae:	603d      	str	r5, [r7, #0]
 80064b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80064b4:	6030      	str	r0, [r6, #0]
 80064b6:	4620      	mov	r0, r4
 80064b8:	b003      	add	sp, #12
 80064ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064be:	6161      	str	r1, [r4, #20]
 80064c0:	e7ea      	b.n	8006498 <__d2b+0x58>
 80064c2:	a801      	add	r0, sp, #4
 80064c4:	f7ff fd61 	bl	8005f8a <__lo0bits>
 80064c8:	9b01      	ldr	r3, [sp, #4]
 80064ca:	6163      	str	r3, [r4, #20]
 80064cc:	3020      	adds	r0, #32
 80064ce:	2201      	movs	r2, #1
 80064d0:	e7e8      	b.n	80064a4 <__d2b+0x64>
 80064d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80064d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80064da:	6038      	str	r0, [r7, #0]
 80064dc:	6918      	ldr	r0, [r3, #16]
 80064de:	f7ff fd35 	bl	8005f4c <__hi0bits>
 80064e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80064e6:	e7e5      	b.n	80064b4 <__d2b+0x74>
 80064e8:	080071fc 	.word	0x080071fc
 80064ec:	0800720d 	.word	0x0800720d

080064f0 <__ssputs_r>:
 80064f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f4:	688e      	ldr	r6, [r1, #8]
 80064f6:	461f      	mov	r7, r3
 80064f8:	42be      	cmp	r6, r7
 80064fa:	680b      	ldr	r3, [r1, #0]
 80064fc:	4682      	mov	sl, r0
 80064fe:	460c      	mov	r4, r1
 8006500:	4690      	mov	r8, r2
 8006502:	d82d      	bhi.n	8006560 <__ssputs_r+0x70>
 8006504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006508:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800650c:	d026      	beq.n	800655c <__ssputs_r+0x6c>
 800650e:	6965      	ldr	r5, [r4, #20]
 8006510:	6909      	ldr	r1, [r1, #16]
 8006512:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006516:	eba3 0901 	sub.w	r9, r3, r1
 800651a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800651e:	1c7b      	adds	r3, r7, #1
 8006520:	444b      	add	r3, r9
 8006522:	106d      	asrs	r5, r5, #1
 8006524:	429d      	cmp	r5, r3
 8006526:	bf38      	it	cc
 8006528:	461d      	movcc	r5, r3
 800652a:	0553      	lsls	r3, r2, #21
 800652c:	d527      	bpl.n	800657e <__ssputs_r+0x8e>
 800652e:	4629      	mov	r1, r5
 8006530:	f7ff fbd8 	bl	8005ce4 <_malloc_r>
 8006534:	4606      	mov	r6, r0
 8006536:	b360      	cbz	r0, 8006592 <__ssputs_r+0xa2>
 8006538:	6921      	ldr	r1, [r4, #16]
 800653a:	464a      	mov	r2, r9
 800653c:	f000 fa06 	bl	800694c <memcpy>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	6126      	str	r6, [r4, #16]
 800654e:	6165      	str	r5, [r4, #20]
 8006550:	444e      	add	r6, r9
 8006552:	eba5 0509 	sub.w	r5, r5, r9
 8006556:	6026      	str	r6, [r4, #0]
 8006558:	60a5      	str	r5, [r4, #8]
 800655a:	463e      	mov	r6, r7
 800655c:	42be      	cmp	r6, r7
 800655e:	d900      	bls.n	8006562 <__ssputs_r+0x72>
 8006560:	463e      	mov	r6, r7
 8006562:	6820      	ldr	r0, [r4, #0]
 8006564:	4632      	mov	r2, r6
 8006566:	4641      	mov	r1, r8
 8006568:	f000 f9c6 	bl	80068f8 <memmove>
 800656c:	68a3      	ldr	r3, [r4, #8]
 800656e:	1b9b      	subs	r3, r3, r6
 8006570:	60a3      	str	r3, [r4, #8]
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	4433      	add	r3, r6
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	2000      	movs	r0, #0
 800657a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657e:	462a      	mov	r2, r5
 8006580:	f000 fa36 	bl	80069f0 <_realloc_r>
 8006584:	4606      	mov	r6, r0
 8006586:	2800      	cmp	r0, #0
 8006588:	d1e0      	bne.n	800654c <__ssputs_r+0x5c>
 800658a:	6921      	ldr	r1, [r4, #16]
 800658c:	4650      	mov	r0, sl
 800658e:	f7ff fb35 	bl	8005bfc <_free_r>
 8006592:	230c      	movs	r3, #12
 8006594:	f8ca 3000 	str.w	r3, [sl]
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800659e:	81a3      	strh	r3, [r4, #12]
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295
 80065a4:	e7e9      	b.n	800657a <__ssputs_r+0x8a>
	...

080065a8 <_svfiprintf_r>:
 80065a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	4698      	mov	r8, r3
 80065ae:	898b      	ldrh	r3, [r1, #12]
 80065b0:	061b      	lsls	r3, r3, #24
 80065b2:	b09d      	sub	sp, #116	@ 0x74
 80065b4:	4607      	mov	r7, r0
 80065b6:	460d      	mov	r5, r1
 80065b8:	4614      	mov	r4, r2
 80065ba:	d510      	bpl.n	80065de <_svfiprintf_r+0x36>
 80065bc:	690b      	ldr	r3, [r1, #16]
 80065be:	b973      	cbnz	r3, 80065de <_svfiprintf_r+0x36>
 80065c0:	2140      	movs	r1, #64	@ 0x40
 80065c2:	f7ff fb8f 	bl	8005ce4 <_malloc_r>
 80065c6:	6028      	str	r0, [r5, #0]
 80065c8:	6128      	str	r0, [r5, #16]
 80065ca:	b930      	cbnz	r0, 80065da <_svfiprintf_r+0x32>
 80065cc:	230c      	movs	r3, #12
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	f04f 30ff 	mov.w	r0, #4294967295
 80065d4:	b01d      	add	sp, #116	@ 0x74
 80065d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065da:	2340      	movs	r3, #64	@ 0x40
 80065dc:	616b      	str	r3, [r5, #20]
 80065de:	2300      	movs	r3, #0
 80065e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80065e2:	2320      	movs	r3, #32
 80065e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80065ec:	2330      	movs	r3, #48	@ 0x30
 80065ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800678c <_svfiprintf_r+0x1e4>
 80065f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065f6:	f04f 0901 	mov.w	r9, #1
 80065fa:	4623      	mov	r3, r4
 80065fc:	469a      	mov	sl, r3
 80065fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006602:	b10a      	cbz	r2, 8006608 <_svfiprintf_r+0x60>
 8006604:	2a25      	cmp	r2, #37	@ 0x25
 8006606:	d1f9      	bne.n	80065fc <_svfiprintf_r+0x54>
 8006608:	ebba 0b04 	subs.w	fp, sl, r4
 800660c:	d00b      	beq.n	8006626 <_svfiprintf_r+0x7e>
 800660e:	465b      	mov	r3, fp
 8006610:	4622      	mov	r2, r4
 8006612:	4629      	mov	r1, r5
 8006614:	4638      	mov	r0, r7
 8006616:	f7ff ff6b 	bl	80064f0 <__ssputs_r>
 800661a:	3001      	adds	r0, #1
 800661c:	f000 80a7 	beq.w	800676e <_svfiprintf_r+0x1c6>
 8006620:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006622:	445a      	add	r2, fp
 8006624:	9209      	str	r2, [sp, #36]	@ 0x24
 8006626:	f89a 3000 	ldrb.w	r3, [sl]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 809f 	beq.w	800676e <_svfiprintf_r+0x1c6>
 8006630:	2300      	movs	r3, #0
 8006632:	f04f 32ff 	mov.w	r2, #4294967295
 8006636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800663a:	f10a 0a01 	add.w	sl, sl, #1
 800663e:	9304      	str	r3, [sp, #16]
 8006640:	9307      	str	r3, [sp, #28]
 8006642:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006646:	931a      	str	r3, [sp, #104]	@ 0x68
 8006648:	4654      	mov	r4, sl
 800664a:	2205      	movs	r2, #5
 800664c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006650:	484e      	ldr	r0, [pc, #312]	@ (800678c <_svfiprintf_r+0x1e4>)
 8006652:	f7f9 fdf5 	bl	8000240 <memchr>
 8006656:	9a04      	ldr	r2, [sp, #16]
 8006658:	b9d8      	cbnz	r0, 8006692 <_svfiprintf_r+0xea>
 800665a:	06d0      	lsls	r0, r2, #27
 800665c:	bf44      	itt	mi
 800665e:	2320      	movmi	r3, #32
 8006660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006664:	0711      	lsls	r1, r2, #28
 8006666:	bf44      	itt	mi
 8006668:	232b      	movmi	r3, #43	@ 0x2b
 800666a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800666e:	f89a 3000 	ldrb.w	r3, [sl]
 8006672:	2b2a      	cmp	r3, #42	@ 0x2a
 8006674:	d015      	beq.n	80066a2 <_svfiprintf_r+0xfa>
 8006676:	9a07      	ldr	r2, [sp, #28]
 8006678:	4654      	mov	r4, sl
 800667a:	2000      	movs	r0, #0
 800667c:	f04f 0c0a 	mov.w	ip, #10
 8006680:	4621      	mov	r1, r4
 8006682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006686:	3b30      	subs	r3, #48	@ 0x30
 8006688:	2b09      	cmp	r3, #9
 800668a:	d94b      	bls.n	8006724 <_svfiprintf_r+0x17c>
 800668c:	b1b0      	cbz	r0, 80066bc <_svfiprintf_r+0x114>
 800668e:	9207      	str	r2, [sp, #28]
 8006690:	e014      	b.n	80066bc <_svfiprintf_r+0x114>
 8006692:	eba0 0308 	sub.w	r3, r0, r8
 8006696:	fa09 f303 	lsl.w	r3, r9, r3
 800669a:	4313      	orrs	r3, r2
 800669c:	9304      	str	r3, [sp, #16]
 800669e:	46a2      	mov	sl, r4
 80066a0:	e7d2      	b.n	8006648 <_svfiprintf_r+0xa0>
 80066a2:	9b03      	ldr	r3, [sp, #12]
 80066a4:	1d19      	adds	r1, r3, #4
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	9103      	str	r1, [sp, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	bfbb      	ittet	lt
 80066ae:	425b      	neglt	r3, r3
 80066b0:	f042 0202 	orrlt.w	r2, r2, #2
 80066b4:	9307      	strge	r3, [sp, #28]
 80066b6:	9307      	strlt	r3, [sp, #28]
 80066b8:	bfb8      	it	lt
 80066ba:	9204      	strlt	r2, [sp, #16]
 80066bc:	7823      	ldrb	r3, [r4, #0]
 80066be:	2b2e      	cmp	r3, #46	@ 0x2e
 80066c0:	d10a      	bne.n	80066d8 <_svfiprintf_r+0x130>
 80066c2:	7863      	ldrb	r3, [r4, #1]
 80066c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80066c6:	d132      	bne.n	800672e <_svfiprintf_r+0x186>
 80066c8:	9b03      	ldr	r3, [sp, #12]
 80066ca:	1d1a      	adds	r2, r3, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	9203      	str	r2, [sp, #12]
 80066d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066d4:	3402      	adds	r4, #2
 80066d6:	9305      	str	r3, [sp, #20]
 80066d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800679c <_svfiprintf_r+0x1f4>
 80066dc:	7821      	ldrb	r1, [r4, #0]
 80066de:	2203      	movs	r2, #3
 80066e0:	4650      	mov	r0, sl
 80066e2:	f7f9 fdad 	bl	8000240 <memchr>
 80066e6:	b138      	cbz	r0, 80066f8 <_svfiprintf_r+0x150>
 80066e8:	9b04      	ldr	r3, [sp, #16]
 80066ea:	eba0 000a 	sub.w	r0, r0, sl
 80066ee:	2240      	movs	r2, #64	@ 0x40
 80066f0:	4082      	lsls	r2, r0
 80066f2:	4313      	orrs	r3, r2
 80066f4:	3401      	adds	r4, #1
 80066f6:	9304      	str	r3, [sp, #16]
 80066f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066fc:	4824      	ldr	r0, [pc, #144]	@ (8006790 <_svfiprintf_r+0x1e8>)
 80066fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006702:	2206      	movs	r2, #6
 8006704:	f7f9 fd9c 	bl	8000240 <memchr>
 8006708:	2800      	cmp	r0, #0
 800670a:	d036      	beq.n	800677a <_svfiprintf_r+0x1d2>
 800670c:	4b21      	ldr	r3, [pc, #132]	@ (8006794 <_svfiprintf_r+0x1ec>)
 800670e:	bb1b      	cbnz	r3, 8006758 <_svfiprintf_r+0x1b0>
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	3307      	adds	r3, #7
 8006714:	f023 0307 	bic.w	r3, r3, #7
 8006718:	3308      	adds	r3, #8
 800671a:	9303      	str	r3, [sp, #12]
 800671c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800671e:	4433      	add	r3, r6
 8006720:	9309      	str	r3, [sp, #36]	@ 0x24
 8006722:	e76a      	b.n	80065fa <_svfiprintf_r+0x52>
 8006724:	fb0c 3202 	mla	r2, ip, r2, r3
 8006728:	460c      	mov	r4, r1
 800672a:	2001      	movs	r0, #1
 800672c:	e7a8      	b.n	8006680 <_svfiprintf_r+0xd8>
 800672e:	2300      	movs	r3, #0
 8006730:	3401      	adds	r4, #1
 8006732:	9305      	str	r3, [sp, #20]
 8006734:	4619      	mov	r1, r3
 8006736:	f04f 0c0a 	mov.w	ip, #10
 800673a:	4620      	mov	r0, r4
 800673c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006740:	3a30      	subs	r2, #48	@ 0x30
 8006742:	2a09      	cmp	r2, #9
 8006744:	d903      	bls.n	800674e <_svfiprintf_r+0x1a6>
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0c6      	beq.n	80066d8 <_svfiprintf_r+0x130>
 800674a:	9105      	str	r1, [sp, #20]
 800674c:	e7c4      	b.n	80066d8 <_svfiprintf_r+0x130>
 800674e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006752:	4604      	mov	r4, r0
 8006754:	2301      	movs	r3, #1
 8006756:	e7f0      	b.n	800673a <_svfiprintf_r+0x192>
 8006758:	ab03      	add	r3, sp, #12
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	462a      	mov	r2, r5
 800675e:	4b0e      	ldr	r3, [pc, #56]	@ (8006798 <_svfiprintf_r+0x1f0>)
 8006760:	a904      	add	r1, sp, #16
 8006762:	4638      	mov	r0, r7
 8006764:	f7fd ff00 	bl	8004568 <_printf_float>
 8006768:	1c42      	adds	r2, r0, #1
 800676a:	4606      	mov	r6, r0
 800676c:	d1d6      	bne.n	800671c <_svfiprintf_r+0x174>
 800676e:	89ab      	ldrh	r3, [r5, #12]
 8006770:	065b      	lsls	r3, r3, #25
 8006772:	f53f af2d 	bmi.w	80065d0 <_svfiprintf_r+0x28>
 8006776:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006778:	e72c      	b.n	80065d4 <_svfiprintf_r+0x2c>
 800677a:	ab03      	add	r3, sp, #12
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	462a      	mov	r2, r5
 8006780:	4b05      	ldr	r3, [pc, #20]	@ (8006798 <_svfiprintf_r+0x1f0>)
 8006782:	a904      	add	r1, sp, #16
 8006784:	4638      	mov	r0, r7
 8006786:	f7fe f977 	bl	8004a78 <_printf_i>
 800678a:	e7ed      	b.n	8006768 <_svfiprintf_r+0x1c0>
 800678c:	08007266 	.word	0x08007266
 8006790:	08007270 	.word	0x08007270
 8006794:	08004569 	.word	0x08004569
 8006798:	080064f1 	.word	0x080064f1
 800679c:	0800726c 	.word	0x0800726c

080067a0 <__sflush_r>:
 80067a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a8:	0716      	lsls	r6, r2, #28
 80067aa:	4605      	mov	r5, r0
 80067ac:	460c      	mov	r4, r1
 80067ae:	d454      	bmi.n	800685a <__sflush_r+0xba>
 80067b0:	684b      	ldr	r3, [r1, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dc02      	bgt.n	80067bc <__sflush_r+0x1c>
 80067b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	dd48      	ble.n	800684e <__sflush_r+0xae>
 80067bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067be:	2e00      	cmp	r6, #0
 80067c0:	d045      	beq.n	800684e <__sflush_r+0xae>
 80067c2:	2300      	movs	r3, #0
 80067c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80067c8:	682f      	ldr	r7, [r5, #0]
 80067ca:	6a21      	ldr	r1, [r4, #32]
 80067cc:	602b      	str	r3, [r5, #0]
 80067ce:	d030      	beq.n	8006832 <__sflush_r+0x92>
 80067d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	0759      	lsls	r1, r3, #29
 80067d6:	d505      	bpl.n	80067e4 <__sflush_r+0x44>
 80067d8:	6863      	ldr	r3, [r4, #4]
 80067da:	1ad2      	subs	r2, r2, r3
 80067dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80067de:	b10b      	cbz	r3, 80067e4 <__sflush_r+0x44>
 80067e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80067e2:	1ad2      	subs	r2, r2, r3
 80067e4:	2300      	movs	r3, #0
 80067e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067e8:	6a21      	ldr	r1, [r4, #32]
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b0      	blx	r6
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	d106      	bne.n	8006802 <__sflush_r+0x62>
 80067f4:	6829      	ldr	r1, [r5, #0]
 80067f6:	291d      	cmp	r1, #29
 80067f8:	d82b      	bhi.n	8006852 <__sflush_r+0xb2>
 80067fa:	4a2a      	ldr	r2, [pc, #168]	@ (80068a4 <__sflush_r+0x104>)
 80067fc:	40ca      	lsrs	r2, r1
 80067fe:	07d6      	lsls	r6, r2, #31
 8006800:	d527      	bpl.n	8006852 <__sflush_r+0xb2>
 8006802:	2200      	movs	r2, #0
 8006804:	6062      	str	r2, [r4, #4]
 8006806:	04d9      	lsls	r1, r3, #19
 8006808:	6922      	ldr	r2, [r4, #16]
 800680a:	6022      	str	r2, [r4, #0]
 800680c:	d504      	bpl.n	8006818 <__sflush_r+0x78>
 800680e:	1c42      	adds	r2, r0, #1
 8006810:	d101      	bne.n	8006816 <__sflush_r+0x76>
 8006812:	682b      	ldr	r3, [r5, #0]
 8006814:	b903      	cbnz	r3, 8006818 <__sflush_r+0x78>
 8006816:	6560      	str	r0, [r4, #84]	@ 0x54
 8006818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800681a:	602f      	str	r7, [r5, #0]
 800681c:	b1b9      	cbz	r1, 800684e <__sflush_r+0xae>
 800681e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006822:	4299      	cmp	r1, r3
 8006824:	d002      	beq.n	800682c <__sflush_r+0x8c>
 8006826:	4628      	mov	r0, r5
 8006828:	f7ff f9e8 	bl	8005bfc <_free_r>
 800682c:	2300      	movs	r3, #0
 800682e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006830:	e00d      	b.n	800684e <__sflush_r+0xae>
 8006832:	2301      	movs	r3, #1
 8006834:	4628      	mov	r0, r5
 8006836:	47b0      	blx	r6
 8006838:	4602      	mov	r2, r0
 800683a:	1c50      	adds	r0, r2, #1
 800683c:	d1c9      	bne.n	80067d2 <__sflush_r+0x32>
 800683e:	682b      	ldr	r3, [r5, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0c6      	beq.n	80067d2 <__sflush_r+0x32>
 8006844:	2b1d      	cmp	r3, #29
 8006846:	d001      	beq.n	800684c <__sflush_r+0xac>
 8006848:	2b16      	cmp	r3, #22
 800684a:	d11e      	bne.n	800688a <__sflush_r+0xea>
 800684c:	602f      	str	r7, [r5, #0]
 800684e:	2000      	movs	r0, #0
 8006850:	e022      	b.n	8006898 <__sflush_r+0xf8>
 8006852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006856:	b21b      	sxth	r3, r3
 8006858:	e01b      	b.n	8006892 <__sflush_r+0xf2>
 800685a:	690f      	ldr	r7, [r1, #16]
 800685c:	2f00      	cmp	r7, #0
 800685e:	d0f6      	beq.n	800684e <__sflush_r+0xae>
 8006860:	0793      	lsls	r3, r2, #30
 8006862:	680e      	ldr	r6, [r1, #0]
 8006864:	bf08      	it	eq
 8006866:	694b      	ldreq	r3, [r1, #20]
 8006868:	600f      	str	r7, [r1, #0]
 800686a:	bf18      	it	ne
 800686c:	2300      	movne	r3, #0
 800686e:	eba6 0807 	sub.w	r8, r6, r7
 8006872:	608b      	str	r3, [r1, #8]
 8006874:	f1b8 0f00 	cmp.w	r8, #0
 8006878:	dde9      	ble.n	800684e <__sflush_r+0xae>
 800687a:	6a21      	ldr	r1, [r4, #32]
 800687c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800687e:	4643      	mov	r3, r8
 8006880:	463a      	mov	r2, r7
 8006882:	4628      	mov	r0, r5
 8006884:	47b0      	blx	r6
 8006886:	2800      	cmp	r0, #0
 8006888:	dc08      	bgt.n	800689c <__sflush_r+0xfc>
 800688a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800688e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006892:	81a3      	strh	r3, [r4, #12]
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800689c:	4407      	add	r7, r0
 800689e:	eba8 0800 	sub.w	r8, r8, r0
 80068a2:	e7e7      	b.n	8006874 <__sflush_r+0xd4>
 80068a4:	20400001 	.word	0x20400001

080068a8 <_fflush_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	690b      	ldr	r3, [r1, #16]
 80068ac:	4605      	mov	r5, r0
 80068ae:	460c      	mov	r4, r1
 80068b0:	b913      	cbnz	r3, 80068b8 <_fflush_r+0x10>
 80068b2:	2500      	movs	r5, #0
 80068b4:	4628      	mov	r0, r5
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	b118      	cbz	r0, 80068c2 <_fflush_r+0x1a>
 80068ba:	6a03      	ldr	r3, [r0, #32]
 80068bc:	b90b      	cbnz	r3, 80068c2 <_fflush_r+0x1a>
 80068be:	f7fe fa85 	bl	8004dcc <__sinit>
 80068c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f3      	beq.n	80068b2 <_fflush_r+0xa>
 80068ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80068cc:	07d0      	lsls	r0, r2, #31
 80068ce:	d404      	bmi.n	80068da <_fflush_r+0x32>
 80068d0:	0599      	lsls	r1, r3, #22
 80068d2:	d402      	bmi.n	80068da <_fflush_r+0x32>
 80068d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068d6:	f7fe fba6 	bl	8005026 <__retarget_lock_acquire_recursive>
 80068da:	4628      	mov	r0, r5
 80068dc:	4621      	mov	r1, r4
 80068de:	f7ff ff5f 	bl	80067a0 <__sflush_r>
 80068e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068e4:	07da      	lsls	r2, r3, #31
 80068e6:	4605      	mov	r5, r0
 80068e8:	d4e4      	bmi.n	80068b4 <_fflush_r+0xc>
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	059b      	lsls	r3, r3, #22
 80068ee:	d4e1      	bmi.n	80068b4 <_fflush_r+0xc>
 80068f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068f2:	f7fe fb99 	bl	8005028 <__retarget_lock_release_recursive>
 80068f6:	e7dd      	b.n	80068b4 <_fflush_r+0xc>

080068f8 <memmove>:
 80068f8:	4288      	cmp	r0, r1
 80068fa:	b510      	push	{r4, lr}
 80068fc:	eb01 0402 	add.w	r4, r1, r2
 8006900:	d902      	bls.n	8006908 <memmove+0x10>
 8006902:	4284      	cmp	r4, r0
 8006904:	4623      	mov	r3, r4
 8006906:	d807      	bhi.n	8006918 <memmove+0x20>
 8006908:	1e43      	subs	r3, r0, #1
 800690a:	42a1      	cmp	r1, r4
 800690c:	d008      	beq.n	8006920 <memmove+0x28>
 800690e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006912:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006916:	e7f8      	b.n	800690a <memmove+0x12>
 8006918:	4402      	add	r2, r0
 800691a:	4601      	mov	r1, r0
 800691c:	428a      	cmp	r2, r1
 800691e:	d100      	bne.n	8006922 <memmove+0x2a>
 8006920:	bd10      	pop	{r4, pc}
 8006922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800692a:	e7f7      	b.n	800691c <memmove+0x24>

0800692c <_sbrk_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d06      	ldr	r5, [pc, #24]	@ (8006948 <_sbrk_r+0x1c>)
 8006930:	2300      	movs	r3, #0
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	602b      	str	r3, [r5, #0]
 8006938:	f7fa fb08 	bl	8000f4c <_sbrk>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_sbrk_r+0x1a>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_sbrk_r+0x1a>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	20000528 	.word	0x20000528

0800694c <memcpy>:
 800694c:	440a      	add	r2, r1
 800694e:	4291      	cmp	r1, r2
 8006950:	f100 33ff 	add.w	r3, r0, #4294967295
 8006954:	d100      	bne.n	8006958 <memcpy+0xc>
 8006956:	4770      	bx	lr
 8006958:	b510      	push	{r4, lr}
 800695a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800695e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006962:	4291      	cmp	r1, r2
 8006964:	d1f9      	bne.n	800695a <memcpy+0xe>
 8006966:	bd10      	pop	{r4, pc}

08006968 <__assert_func>:
 8006968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800696a:	4614      	mov	r4, r2
 800696c:	461a      	mov	r2, r3
 800696e:	4b09      	ldr	r3, [pc, #36]	@ (8006994 <__assert_func+0x2c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4605      	mov	r5, r0
 8006974:	68d8      	ldr	r0, [r3, #12]
 8006976:	b14c      	cbz	r4, 800698c <__assert_func+0x24>
 8006978:	4b07      	ldr	r3, [pc, #28]	@ (8006998 <__assert_func+0x30>)
 800697a:	9100      	str	r1, [sp, #0]
 800697c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006980:	4906      	ldr	r1, [pc, #24]	@ (800699c <__assert_func+0x34>)
 8006982:	462b      	mov	r3, r5
 8006984:	f000 f870 	bl	8006a68 <fiprintf>
 8006988:	f000 f880 	bl	8006a8c <abort>
 800698c:	4b04      	ldr	r3, [pc, #16]	@ (80069a0 <__assert_func+0x38>)
 800698e:	461c      	mov	r4, r3
 8006990:	e7f3      	b.n	800697a <__assert_func+0x12>
 8006992:	bf00      	nop
 8006994:	20000018 	.word	0x20000018
 8006998:	08007281 	.word	0x08007281
 800699c:	0800728e 	.word	0x0800728e
 80069a0:	080072bc 	.word	0x080072bc

080069a4 <_calloc_r>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	fba1 5402 	umull	r5, r4, r1, r2
 80069aa:	b934      	cbnz	r4, 80069ba <_calloc_r+0x16>
 80069ac:	4629      	mov	r1, r5
 80069ae:	f7ff f999 	bl	8005ce4 <_malloc_r>
 80069b2:	4606      	mov	r6, r0
 80069b4:	b928      	cbnz	r0, 80069c2 <_calloc_r+0x1e>
 80069b6:	4630      	mov	r0, r6
 80069b8:	bd70      	pop	{r4, r5, r6, pc}
 80069ba:	220c      	movs	r2, #12
 80069bc:	6002      	str	r2, [r0, #0]
 80069be:	2600      	movs	r6, #0
 80069c0:	e7f9      	b.n	80069b6 <_calloc_r+0x12>
 80069c2:	462a      	mov	r2, r5
 80069c4:	4621      	mov	r1, r4
 80069c6:	f7fe fab0 	bl	8004f2a <memset>
 80069ca:	e7f4      	b.n	80069b6 <_calloc_r+0x12>

080069cc <__ascii_mbtowc>:
 80069cc:	b082      	sub	sp, #8
 80069ce:	b901      	cbnz	r1, 80069d2 <__ascii_mbtowc+0x6>
 80069d0:	a901      	add	r1, sp, #4
 80069d2:	b142      	cbz	r2, 80069e6 <__ascii_mbtowc+0x1a>
 80069d4:	b14b      	cbz	r3, 80069ea <__ascii_mbtowc+0x1e>
 80069d6:	7813      	ldrb	r3, [r2, #0]
 80069d8:	600b      	str	r3, [r1, #0]
 80069da:	7812      	ldrb	r2, [r2, #0]
 80069dc:	1e10      	subs	r0, r2, #0
 80069de:	bf18      	it	ne
 80069e0:	2001      	movne	r0, #1
 80069e2:	b002      	add	sp, #8
 80069e4:	4770      	bx	lr
 80069e6:	4610      	mov	r0, r2
 80069e8:	e7fb      	b.n	80069e2 <__ascii_mbtowc+0x16>
 80069ea:	f06f 0001 	mvn.w	r0, #1
 80069ee:	e7f8      	b.n	80069e2 <__ascii_mbtowc+0x16>

080069f0 <_realloc_r>:
 80069f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069f4:	4607      	mov	r7, r0
 80069f6:	4614      	mov	r4, r2
 80069f8:	460d      	mov	r5, r1
 80069fa:	b921      	cbnz	r1, 8006a06 <_realloc_r+0x16>
 80069fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a00:	4611      	mov	r1, r2
 8006a02:	f7ff b96f 	b.w	8005ce4 <_malloc_r>
 8006a06:	b92a      	cbnz	r2, 8006a14 <_realloc_r+0x24>
 8006a08:	f7ff f8f8 	bl	8005bfc <_free_r>
 8006a0c:	4625      	mov	r5, r4
 8006a0e:	4628      	mov	r0, r5
 8006a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a14:	f000 f841 	bl	8006a9a <_malloc_usable_size_r>
 8006a18:	4284      	cmp	r4, r0
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	d802      	bhi.n	8006a24 <_realloc_r+0x34>
 8006a1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a22:	d8f4      	bhi.n	8006a0e <_realloc_r+0x1e>
 8006a24:	4621      	mov	r1, r4
 8006a26:	4638      	mov	r0, r7
 8006a28:	f7ff f95c 	bl	8005ce4 <_malloc_r>
 8006a2c:	4680      	mov	r8, r0
 8006a2e:	b908      	cbnz	r0, 8006a34 <_realloc_r+0x44>
 8006a30:	4645      	mov	r5, r8
 8006a32:	e7ec      	b.n	8006a0e <_realloc_r+0x1e>
 8006a34:	42b4      	cmp	r4, r6
 8006a36:	4622      	mov	r2, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	bf28      	it	cs
 8006a3c:	4632      	movcs	r2, r6
 8006a3e:	f7ff ff85 	bl	800694c <memcpy>
 8006a42:	4629      	mov	r1, r5
 8006a44:	4638      	mov	r0, r7
 8006a46:	f7ff f8d9 	bl	8005bfc <_free_r>
 8006a4a:	e7f1      	b.n	8006a30 <_realloc_r+0x40>

08006a4c <__ascii_wctomb>:
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	4608      	mov	r0, r1
 8006a50:	b141      	cbz	r1, 8006a64 <__ascii_wctomb+0x18>
 8006a52:	2aff      	cmp	r2, #255	@ 0xff
 8006a54:	d904      	bls.n	8006a60 <__ascii_wctomb+0x14>
 8006a56:	228a      	movs	r2, #138	@ 0x8a
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5e:	4770      	bx	lr
 8006a60:	700a      	strb	r2, [r1, #0]
 8006a62:	2001      	movs	r0, #1
 8006a64:	4770      	bx	lr
	...

08006a68 <fiprintf>:
 8006a68:	b40e      	push	{r1, r2, r3}
 8006a6a:	b503      	push	{r0, r1, lr}
 8006a6c:	4601      	mov	r1, r0
 8006a6e:	ab03      	add	r3, sp, #12
 8006a70:	4805      	ldr	r0, [pc, #20]	@ (8006a88 <fiprintf+0x20>)
 8006a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a76:	6800      	ldr	r0, [r0, #0]
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	f000 f83f 	bl	8006afc <_vfiprintf_r>
 8006a7e:	b002      	add	sp, #8
 8006a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a84:	b003      	add	sp, #12
 8006a86:	4770      	bx	lr
 8006a88:	20000018 	.word	0x20000018

08006a8c <abort>:
 8006a8c:	b508      	push	{r3, lr}
 8006a8e:	2006      	movs	r0, #6
 8006a90:	f000 fa08 	bl	8006ea4 <raise>
 8006a94:	2001      	movs	r0, #1
 8006a96:	f7fa f9e1 	bl	8000e5c <_exit>

08006a9a <_malloc_usable_size_r>:
 8006a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a9e:	1f18      	subs	r0, r3, #4
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bfbc      	itt	lt
 8006aa4:	580b      	ldrlt	r3, [r1, r0]
 8006aa6:	18c0      	addlt	r0, r0, r3
 8006aa8:	4770      	bx	lr

08006aaa <__sfputc_r>:
 8006aaa:	6893      	ldr	r3, [r2, #8]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	b410      	push	{r4}
 8006ab2:	6093      	str	r3, [r2, #8]
 8006ab4:	da08      	bge.n	8006ac8 <__sfputc_r+0x1e>
 8006ab6:	6994      	ldr	r4, [r2, #24]
 8006ab8:	42a3      	cmp	r3, r4
 8006aba:	db01      	blt.n	8006ac0 <__sfputc_r+0x16>
 8006abc:	290a      	cmp	r1, #10
 8006abe:	d103      	bne.n	8006ac8 <__sfputc_r+0x1e>
 8006ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ac4:	f000 b932 	b.w	8006d2c <__swbuf_r>
 8006ac8:	6813      	ldr	r3, [r2, #0]
 8006aca:	1c58      	adds	r0, r3, #1
 8006acc:	6010      	str	r0, [r2, #0]
 8006ace:	7019      	strb	r1, [r3, #0]
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <__sfputs_r>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	4606      	mov	r6, r0
 8006adc:	460f      	mov	r7, r1
 8006ade:	4614      	mov	r4, r2
 8006ae0:	18d5      	adds	r5, r2, r3
 8006ae2:	42ac      	cmp	r4, r5
 8006ae4:	d101      	bne.n	8006aea <__sfputs_r+0x12>
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	e007      	b.n	8006afa <__sfputs_r+0x22>
 8006aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aee:	463a      	mov	r2, r7
 8006af0:	4630      	mov	r0, r6
 8006af2:	f7ff ffda 	bl	8006aaa <__sfputc_r>
 8006af6:	1c43      	adds	r3, r0, #1
 8006af8:	d1f3      	bne.n	8006ae2 <__sfputs_r+0xa>
 8006afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006afc <_vfiprintf_r>:
 8006afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b00:	460d      	mov	r5, r1
 8006b02:	b09d      	sub	sp, #116	@ 0x74
 8006b04:	4614      	mov	r4, r2
 8006b06:	4698      	mov	r8, r3
 8006b08:	4606      	mov	r6, r0
 8006b0a:	b118      	cbz	r0, 8006b14 <_vfiprintf_r+0x18>
 8006b0c:	6a03      	ldr	r3, [r0, #32]
 8006b0e:	b90b      	cbnz	r3, 8006b14 <_vfiprintf_r+0x18>
 8006b10:	f7fe f95c 	bl	8004dcc <__sinit>
 8006b14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b16:	07d9      	lsls	r1, r3, #31
 8006b18:	d405      	bmi.n	8006b26 <_vfiprintf_r+0x2a>
 8006b1a:	89ab      	ldrh	r3, [r5, #12]
 8006b1c:	059a      	lsls	r2, r3, #22
 8006b1e:	d402      	bmi.n	8006b26 <_vfiprintf_r+0x2a>
 8006b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b22:	f7fe fa80 	bl	8005026 <__retarget_lock_acquire_recursive>
 8006b26:	89ab      	ldrh	r3, [r5, #12]
 8006b28:	071b      	lsls	r3, r3, #28
 8006b2a:	d501      	bpl.n	8006b30 <_vfiprintf_r+0x34>
 8006b2c:	692b      	ldr	r3, [r5, #16]
 8006b2e:	b99b      	cbnz	r3, 8006b58 <_vfiprintf_r+0x5c>
 8006b30:	4629      	mov	r1, r5
 8006b32:	4630      	mov	r0, r6
 8006b34:	f000 f938 	bl	8006da8 <__swsetup_r>
 8006b38:	b170      	cbz	r0, 8006b58 <_vfiprintf_r+0x5c>
 8006b3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b3c:	07dc      	lsls	r4, r3, #31
 8006b3e:	d504      	bpl.n	8006b4a <_vfiprintf_r+0x4e>
 8006b40:	f04f 30ff 	mov.w	r0, #4294967295
 8006b44:	b01d      	add	sp, #116	@ 0x74
 8006b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4a:	89ab      	ldrh	r3, [r5, #12]
 8006b4c:	0598      	lsls	r0, r3, #22
 8006b4e:	d4f7      	bmi.n	8006b40 <_vfiprintf_r+0x44>
 8006b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b52:	f7fe fa69 	bl	8005028 <__retarget_lock_release_recursive>
 8006b56:	e7f3      	b.n	8006b40 <_vfiprintf_r+0x44>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b5c:	2320      	movs	r3, #32
 8006b5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b62:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b66:	2330      	movs	r3, #48	@ 0x30
 8006b68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d18 <_vfiprintf_r+0x21c>
 8006b6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b70:	f04f 0901 	mov.w	r9, #1
 8006b74:	4623      	mov	r3, r4
 8006b76:	469a      	mov	sl, r3
 8006b78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b7c:	b10a      	cbz	r2, 8006b82 <_vfiprintf_r+0x86>
 8006b7e:	2a25      	cmp	r2, #37	@ 0x25
 8006b80:	d1f9      	bne.n	8006b76 <_vfiprintf_r+0x7a>
 8006b82:	ebba 0b04 	subs.w	fp, sl, r4
 8006b86:	d00b      	beq.n	8006ba0 <_vfiprintf_r+0xa4>
 8006b88:	465b      	mov	r3, fp
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	4630      	mov	r0, r6
 8006b90:	f7ff ffa2 	bl	8006ad8 <__sfputs_r>
 8006b94:	3001      	adds	r0, #1
 8006b96:	f000 80a7 	beq.w	8006ce8 <_vfiprintf_r+0x1ec>
 8006b9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b9c:	445a      	add	r2, fp
 8006b9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 809f 	beq.w	8006ce8 <_vfiprintf_r+0x1ec>
 8006baa:	2300      	movs	r3, #0
 8006bac:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bb4:	f10a 0a01 	add.w	sl, sl, #1
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	9307      	str	r3, [sp, #28]
 8006bbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bc2:	4654      	mov	r4, sl
 8006bc4:	2205      	movs	r2, #5
 8006bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bca:	4853      	ldr	r0, [pc, #332]	@ (8006d18 <_vfiprintf_r+0x21c>)
 8006bcc:	f7f9 fb38 	bl	8000240 <memchr>
 8006bd0:	9a04      	ldr	r2, [sp, #16]
 8006bd2:	b9d8      	cbnz	r0, 8006c0c <_vfiprintf_r+0x110>
 8006bd4:	06d1      	lsls	r1, r2, #27
 8006bd6:	bf44      	itt	mi
 8006bd8:	2320      	movmi	r3, #32
 8006bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bde:	0713      	lsls	r3, r2, #28
 8006be0:	bf44      	itt	mi
 8006be2:	232b      	movmi	r3, #43	@ 0x2b
 8006be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006be8:	f89a 3000 	ldrb.w	r3, [sl]
 8006bec:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bee:	d015      	beq.n	8006c1c <_vfiprintf_r+0x120>
 8006bf0:	9a07      	ldr	r2, [sp, #28]
 8006bf2:	4654      	mov	r4, sl
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	f04f 0c0a 	mov.w	ip, #10
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c00:	3b30      	subs	r3, #48	@ 0x30
 8006c02:	2b09      	cmp	r3, #9
 8006c04:	d94b      	bls.n	8006c9e <_vfiprintf_r+0x1a2>
 8006c06:	b1b0      	cbz	r0, 8006c36 <_vfiprintf_r+0x13a>
 8006c08:	9207      	str	r2, [sp, #28]
 8006c0a:	e014      	b.n	8006c36 <_vfiprintf_r+0x13a>
 8006c0c:	eba0 0308 	sub.w	r3, r0, r8
 8006c10:	fa09 f303 	lsl.w	r3, r9, r3
 8006c14:	4313      	orrs	r3, r2
 8006c16:	9304      	str	r3, [sp, #16]
 8006c18:	46a2      	mov	sl, r4
 8006c1a:	e7d2      	b.n	8006bc2 <_vfiprintf_r+0xc6>
 8006c1c:	9b03      	ldr	r3, [sp, #12]
 8006c1e:	1d19      	adds	r1, r3, #4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	9103      	str	r1, [sp, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bfbb      	ittet	lt
 8006c28:	425b      	neglt	r3, r3
 8006c2a:	f042 0202 	orrlt.w	r2, r2, #2
 8006c2e:	9307      	strge	r3, [sp, #28]
 8006c30:	9307      	strlt	r3, [sp, #28]
 8006c32:	bfb8      	it	lt
 8006c34:	9204      	strlt	r2, [sp, #16]
 8006c36:	7823      	ldrb	r3, [r4, #0]
 8006c38:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c3a:	d10a      	bne.n	8006c52 <_vfiprintf_r+0x156>
 8006c3c:	7863      	ldrb	r3, [r4, #1]
 8006c3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c40:	d132      	bne.n	8006ca8 <_vfiprintf_r+0x1ac>
 8006c42:	9b03      	ldr	r3, [sp, #12]
 8006c44:	1d1a      	adds	r2, r3, #4
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	9203      	str	r2, [sp, #12]
 8006c4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c4e:	3402      	adds	r4, #2
 8006c50:	9305      	str	r3, [sp, #20]
 8006c52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d28 <_vfiprintf_r+0x22c>
 8006c56:	7821      	ldrb	r1, [r4, #0]
 8006c58:	2203      	movs	r2, #3
 8006c5a:	4650      	mov	r0, sl
 8006c5c:	f7f9 faf0 	bl	8000240 <memchr>
 8006c60:	b138      	cbz	r0, 8006c72 <_vfiprintf_r+0x176>
 8006c62:	9b04      	ldr	r3, [sp, #16]
 8006c64:	eba0 000a 	sub.w	r0, r0, sl
 8006c68:	2240      	movs	r2, #64	@ 0x40
 8006c6a:	4082      	lsls	r2, r0
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	3401      	adds	r4, #1
 8006c70:	9304      	str	r3, [sp, #16]
 8006c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c76:	4829      	ldr	r0, [pc, #164]	@ (8006d1c <_vfiprintf_r+0x220>)
 8006c78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c7c:	2206      	movs	r2, #6
 8006c7e:	f7f9 fadf 	bl	8000240 <memchr>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d03f      	beq.n	8006d06 <_vfiprintf_r+0x20a>
 8006c86:	4b26      	ldr	r3, [pc, #152]	@ (8006d20 <_vfiprintf_r+0x224>)
 8006c88:	bb1b      	cbnz	r3, 8006cd2 <_vfiprintf_r+0x1d6>
 8006c8a:	9b03      	ldr	r3, [sp, #12]
 8006c8c:	3307      	adds	r3, #7
 8006c8e:	f023 0307 	bic.w	r3, r3, #7
 8006c92:	3308      	adds	r3, #8
 8006c94:	9303      	str	r3, [sp, #12]
 8006c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c98:	443b      	add	r3, r7
 8006c9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c9c:	e76a      	b.n	8006b74 <_vfiprintf_r+0x78>
 8006c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	2001      	movs	r0, #1
 8006ca6:	e7a8      	b.n	8006bfa <_vfiprintf_r+0xfe>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	3401      	adds	r4, #1
 8006cac:	9305      	str	r3, [sp, #20]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	f04f 0c0a 	mov.w	ip, #10
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cba:	3a30      	subs	r2, #48	@ 0x30
 8006cbc:	2a09      	cmp	r2, #9
 8006cbe:	d903      	bls.n	8006cc8 <_vfiprintf_r+0x1cc>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0c6      	beq.n	8006c52 <_vfiprintf_r+0x156>
 8006cc4:	9105      	str	r1, [sp, #20]
 8006cc6:	e7c4      	b.n	8006c52 <_vfiprintf_r+0x156>
 8006cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ccc:	4604      	mov	r4, r0
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e7f0      	b.n	8006cb4 <_vfiprintf_r+0x1b8>
 8006cd2:	ab03      	add	r3, sp, #12
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	462a      	mov	r2, r5
 8006cd8:	4b12      	ldr	r3, [pc, #72]	@ (8006d24 <_vfiprintf_r+0x228>)
 8006cda:	a904      	add	r1, sp, #16
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f7fd fc43 	bl	8004568 <_printf_float>
 8006ce2:	4607      	mov	r7, r0
 8006ce4:	1c78      	adds	r0, r7, #1
 8006ce6:	d1d6      	bne.n	8006c96 <_vfiprintf_r+0x19a>
 8006ce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cea:	07d9      	lsls	r1, r3, #31
 8006cec:	d405      	bmi.n	8006cfa <_vfiprintf_r+0x1fe>
 8006cee:	89ab      	ldrh	r3, [r5, #12]
 8006cf0:	059a      	lsls	r2, r3, #22
 8006cf2:	d402      	bmi.n	8006cfa <_vfiprintf_r+0x1fe>
 8006cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cf6:	f7fe f997 	bl	8005028 <__retarget_lock_release_recursive>
 8006cfa:	89ab      	ldrh	r3, [r5, #12]
 8006cfc:	065b      	lsls	r3, r3, #25
 8006cfe:	f53f af1f 	bmi.w	8006b40 <_vfiprintf_r+0x44>
 8006d02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d04:	e71e      	b.n	8006b44 <_vfiprintf_r+0x48>
 8006d06:	ab03      	add	r3, sp, #12
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	462a      	mov	r2, r5
 8006d0c:	4b05      	ldr	r3, [pc, #20]	@ (8006d24 <_vfiprintf_r+0x228>)
 8006d0e:	a904      	add	r1, sp, #16
 8006d10:	4630      	mov	r0, r6
 8006d12:	f7fd feb1 	bl	8004a78 <_printf_i>
 8006d16:	e7e4      	b.n	8006ce2 <_vfiprintf_r+0x1e6>
 8006d18:	08007266 	.word	0x08007266
 8006d1c:	08007270 	.word	0x08007270
 8006d20:	08004569 	.word	0x08004569
 8006d24:	08006ad9 	.word	0x08006ad9
 8006d28:	0800726c 	.word	0x0800726c

08006d2c <__swbuf_r>:
 8006d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2e:	460e      	mov	r6, r1
 8006d30:	4614      	mov	r4, r2
 8006d32:	4605      	mov	r5, r0
 8006d34:	b118      	cbz	r0, 8006d3e <__swbuf_r+0x12>
 8006d36:	6a03      	ldr	r3, [r0, #32]
 8006d38:	b90b      	cbnz	r3, 8006d3e <__swbuf_r+0x12>
 8006d3a:	f7fe f847 	bl	8004dcc <__sinit>
 8006d3e:	69a3      	ldr	r3, [r4, #24]
 8006d40:	60a3      	str	r3, [r4, #8]
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	071a      	lsls	r2, r3, #28
 8006d46:	d501      	bpl.n	8006d4c <__swbuf_r+0x20>
 8006d48:	6923      	ldr	r3, [r4, #16]
 8006d4a:	b943      	cbnz	r3, 8006d5e <__swbuf_r+0x32>
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f000 f82a 	bl	8006da8 <__swsetup_r>
 8006d54:	b118      	cbz	r0, 8006d5e <__swbuf_r+0x32>
 8006d56:	f04f 37ff 	mov.w	r7, #4294967295
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	6922      	ldr	r2, [r4, #16]
 8006d62:	1a98      	subs	r0, r3, r2
 8006d64:	6963      	ldr	r3, [r4, #20]
 8006d66:	b2f6      	uxtb	r6, r6
 8006d68:	4283      	cmp	r3, r0
 8006d6a:	4637      	mov	r7, r6
 8006d6c:	dc05      	bgt.n	8006d7a <__swbuf_r+0x4e>
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4628      	mov	r0, r5
 8006d72:	f7ff fd99 	bl	80068a8 <_fflush_r>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d1ed      	bne.n	8006d56 <__swbuf_r+0x2a>
 8006d7a:	68a3      	ldr	r3, [r4, #8]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	60a3      	str	r3, [r4, #8]
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	6022      	str	r2, [r4, #0]
 8006d86:	701e      	strb	r6, [r3, #0]
 8006d88:	6962      	ldr	r2, [r4, #20]
 8006d8a:	1c43      	adds	r3, r0, #1
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d004      	beq.n	8006d9a <__swbuf_r+0x6e>
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	07db      	lsls	r3, r3, #31
 8006d94:	d5e1      	bpl.n	8006d5a <__swbuf_r+0x2e>
 8006d96:	2e0a      	cmp	r6, #10
 8006d98:	d1df      	bne.n	8006d5a <__swbuf_r+0x2e>
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f7ff fd83 	bl	80068a8 <_fflush_r>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	d0d9      	beq.n	8006d5a <__swbuf_r+0x2e>
 8006da6:	e7d6      	b.n	8006d56 <__swbuf_r+0x2a>

08006da8 <__swsetup_r>:
 8006da8:	b538      	push	{r3, r4, r5, lr}
 8006daa:	4b29      	ldr	r3, [pc, #164]	@ (8006e50 <__swsetup_r+0xa8>)
 8006dac:	4605      	mov	r5, r0
 8006dae:	6818      	ldr	r0, [r3, #0]
 8006db0:	460c      	mov	r4, r1
 8006db2:	b118      	cbz	r0, 8006dbc <__swsetup_r+0x14>
 8006db4:	6a03      	ldr	r3, [r0, #32]
 8006db6:	b90b      	cbnz	r3, 8006dbc <__swsetup_r+0x14>
 8006db8:	f7fe f808 	bl	8004dcc <__sinit>
 8006dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dc0:	0719      	lsls	r1, r3, #28
 8006dc2:	d422      	bmi.n	8006e0a <__swsetup_r+0x62>
 8006dc4:	06da      	lsls	r2, r3, #27
 8006dc6:	d407      	bmi.n	8006dd8 <__swsetup_r+0x30>
 8006dc8:	2209      	movs	r2, #9
 8006dca:	602a      	str	r2, [r5, #0]
 8006dcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dd0:	81a3      	strh	r3, [r4, #12]
 8006dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd6:	e033      	b.n	8006e40 <__swsetup_r+0x98>
 8006dd8:	0758      	lsls	r0, r3, #29
 8006dda:	d512      	bpl.n	8006e02 <__swsetup_r+0x5a>
 8006ddc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dde:	b141      	cbz	r1, 8006df2 <__swsetup_r+0x4a>
 8006de0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006de4:	4299      	cmp	r1, r3
 8006de6:	d002      	beq.n	8006dee <__swsetup_r+0x46>
 8006de8:	4628      	mov	r0, r5
 8006dea:	f7fe ff07 	bl	8005bfc <_free_r>
 8006dee:	2300      	movs	r3, #0
 8006df0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006df8:	81a3      	strh	r3, [r4, #12]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	6063      	str	r3, [r4, #4]
 8006dfe:	6923      	ldr	r3, [r4, #16]
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	f043 0308 	orr.w	r3, r3, #8
 8006e08:	81a3      	strh	r3, [r4, #12]
 8006e0a:	6923      	ldr	r3, [r4, #16]
 8006e0c:	b94b      	cbnz	r3, 8006e22 <__swsetup_r+0x7a>
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e18:	d003      	beq.n	8006e22 <__swsetup_r+0x7a>
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f000 f883 	bl	8006f28 <__smakebuf_r>
 8006e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e26:	f013 0201 	ands.w	r2, r3, #1
 8006e2a:	d00a      	beq.n	8006e42 <__swsetup_r+0x9a>
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	60a2      	str	r2, [r4, #8]
 8006e30:	6962      	ldr	r2, [r4, #20]
 8006e32:	4252      	negs	r2, r2
 8006e34:	61a2      	str	r2, [r4, #24]
 8006e36:	6922      	ldr	r2, [r4, #16]
 8006e38:	b942      	cbnz	r2, 8006e4c <__swsetup_r+0xa4>
 8006e3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e3e:	d1c5      	bne.n	8006dcc <__swsetup_r+0x24>
 8006e40:	bd38      	pop	{r3, r4, r5, pc}
 8006e42:	0799      	lsls	r1, r3, #30
 8006e44:	bf58      	it	pl
 8006e46:	6962      	ldrpl	r2, [r4, #20]
 8006e48:	60a2      	str	r2, [r4, #8]
 8006e4a:	e7f4      	b.n	8006e36 <__swsetup_r+0x8e>
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	e7f7      	b.n	8006e40 <__swsetup_r+0x98>
 8006e50:	20000018 	.word	0x20000018

08006e54 <_raise_r>:
 8006e54:	291f      	cmp	r1, #31
 8006e56:	b538      	push	{r3, r4, r5, lr}
 8006e58:	4605      	mov	r5, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	d904      	bls.n	8006e68 <_raise_r+0x14>
 8006e5e:	2316      	movs	r3, #22
 8006e60:	6003      	str	r3, [r0, #0]
 8006e62:	f04f 30ff 	mov.w	r0, #4294967295
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006e6a:	b112      	cbz	r2, 8006e72 <_raise_r+0x1e>
 8006e6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e70:	b94b      	cbnz	r3, 8006e86 <_raise_r+0x32>
 8006e72:	4628      	mov	r0, r5
 8006e74:	f000 f830 	bl	8006ed8 <_getpid_r>
 8006e78:	4622      	mov	r2, r4
 8006e7a:	4601      	mov	r1, r0
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e82:	f000 b817 	b.w	8006eb4 <_kill_r>
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d00a      	beq.n	8006ea0 <_raise_r+0x4c>
 8006e8a:	1c59      	adds	r1, r3, #1
 8006e8c:	d103      	bne.n	8006e96 <_raise_r+0x42>
 8006e8e:	2316      	movs	r3, #22
 8006e90:	6003      	str	r3, [r0, #0]
 8006e92:	2001      	movs	r0, #1
 8006e94:	e7e7      	b.n	8006e66 <_raise_r+0x12>
 8006e96:	2100      	movs	r1, #0
 8006e98:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	4798      	blx	r3
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	e7e0      	b.n	8006e66 <_raise_r+0x12>

08006ea4 <raise>:
 8006ea4:	4b02      	ldr	r3, [pc, #8]	@ (8006eb0 <raise+0xc>)
 8006ea6:	4601      	mov	r1, r0
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	f7ff bfd3 	b.w	8006e54 <_raise_r>
 8006eae:	bf00      	nop
 8006eb0:	20000018 	.word	0x20000018

08006eb4 <_kill_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d07      	ldr	r5, [pc, #28]	@ (8006ed4 <_kill_r+0x20>)
 8006eb8:	2300      	movs	r3, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	602b      	str	r3, [r5, #0]
 8006ec2:	f7f9 ffbb 	bl	8000e3c <_kill>
 8006ec6:	1c43      	adds	r3, r0, #1
 8006ec8:	d102      	bne.n	8006ed0 <_kill_r+0x1c>
 8006eca:	682b      	ldr	r3, [r5, #0]
 8006ecc:	b103      	cbz	r3, 8006ed0 <_kill_r+0x1c>
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	bd38      	pop	{r3, r4, r5, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20000528 	.word	0x20000528

08006ed8 <_getpid_r>:
 8006ed8:	f7f9 bfa8 	b.w	8000e2c <_getpid>

08006edc <__swhatbuf_r>:
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	460c      	mov	r4, r1
 8006ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	b096      	sub	sp, #88	@ 0x58
 8006ee8:	4615      	mov	r5, r2
 8006eea:	461e      	mov	r6, r3
 8006eec:	da0d      	bge.n	8006f0a <__swhatbuf_r+0x2e>
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ef4:	f04f 0100 	mov.w	r1, #0
 8006ef8:	bf14      	ite	ne
 8006efa:	2340      	movne	r3, #64	@ 0x40
 8006efc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f00:	2000      	movs	r0, #0
 8006f02:	6031      	str	r1, [r6, #0]
 8006f04:	602b      	str	r3, [r5, #0]
 8006f06:	b016      	add	sp, #88	@ 0x58
 8006f08:	bd70      	pop	{r4, r5, r6, pc}
 8006f0a:	466a      	mov	r2, sp
 8006f0c:	f000 f848 	bl	8006fa0 <_fstat_r>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	dbec      	blt.n	8006eee <__swhatbuf_r+0x12>
 8006f14:	9901      	ldr	r1, [sp, #4]
 8006f16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f1e:	4259      	negs	r1, r3
 8006f20:	4159      	adcs	r1, r3
 8006f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f26:	e7eb      	b.n	8006f00 <__swhatbuf_r+0x24>

08006f28 <__smakebuf_r>:
 8006f28:	898b      	ldrh	r3, [r1, #12]
 8006f2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f2c:	079d      	lsls	r5, r3, #30
 8006f2e:	4606      	mov	r6, r0
 8006f30:	460c      	mov	r4, r1
 8006f32:	d507      	bpl.n	8006f44 <__smakebuf_r+0x1c>
 8006f34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	6123      	str	r3, [r4, #16]
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	6163      	str	r3, [r4, #20]
 8006f40:	b003      	add	sp, #12
 8006f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f44:	ab01      	add	r3, sp, #4
 8006f46:	466a      	mov	r2, sp
 8006f48:	f7ff ffc8 	bl	8006edc <__swhatbuf_r>
 8006f4c:	9f00      	ldr	r7, [sp, #0]
 8006f4e:	4605      	mov	r5, r0
 8006f50:	4639      	mov	r1, r7
 8006f52:	4630      	mov	r0, r6
 8006f54:	f7fe fec6 	bl	8005ce4 <_malloc_r>
 8006f58:	b948      	cbnz	r0, 8006f6e <__smakebuf_r+0x46>
 8006f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f5e:	059a      	lsls	r2, r3, #22
 8006f60:	d4ee      	bmi.n	8006f40 <__smakebuf_r+0x18>
 8006f62:	f023 0303 	bic.w	r3, r3, #3
 8006f66:	f043 0302 	orr.w	r3, r3, #2
 8006f6a:	81a3      	strh	r3, [r4, #12]
 8006f6c:	e7e2      	b.n	8006f34 <__smakebuf_r+0xc>
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	6020      	str	r0, [r4, #0]
 8006f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f76:	81a3      	strh	r3, [r4, #12]
 8006f78:	9b01      	ldr	r3, [sp, #4]
 8006f7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f7e:	b15b      	cbz	r3, 8006f98 <__smakebuf_r+0x70>
 8006f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f84:	4630      	mov	r0, r6
 8006f86:	f000 f81d 	bl	8006fc4 <_isatty_r>
 8006f8a:	b128      	cbz	r0, 8006f98 <__smakebuf_r+0x70>
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	f023 0303 	bic.w	r3, r3, #3
 8006f92:	f043 0301 	orr.w	r3, r3, #1
 8006f96:	81a3      	strh	r3, [r4, #12]
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	431d      	orrs	r5, r3
 8006f9c:	81a5      	strh	r5, [r4, #12]
 8006f9e:	e7cf      	b.n	8006f40 <__smakebuf_r+0x18>

08006fa0 <_fstat_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4d07      	ldr	r5, [pc, #28]	@ (8006fc0 <_fstat_r+0x20>)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	4608      	mov	r0, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	602b      	str	r3, [r5, #0]
 8006fae:	f7f9 ffa5 	bl	8000efc <_fstat>
 8006fb2:	1c43      	adds	r3, r0, #1
 8006fb4:	d102      	bne.n	8006fbc <_fstat_r+0x1c>
 8006fb6:	682b      	ldr	r3, [r5, #0]
 8006fb8:	b103      	cbz	r3, 8006fbc <_fstat_r+0x1c>
 8006fba:	6023      	str	r3, [r4, #0]
 8006fbc:	bd38      	pop	{r3, r4, r5, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000528 	.word	0x20000528

08006fc4 <_isatty_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4d06      	ldr	r5, [pc, #24]	@ (8006fe0 <_isatty_r+0x1c>)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4608      	mov	r0, r1
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	f7f9 ffa4 	bl	8000f1c <_isatty>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_isatty_r+0x1a>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_isatty_r+0x1a>
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	20000528 	.word	0x20000528

08006fe4 <_init>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	bf00      	nop
 8006fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fea:	bc08      	pop	{r3}
 8006fec:	469e      	mov	lr, r3
 8006fee:	4770      	bx	lr

08006ff0 <_fini>:
 8006ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff2:	bf00      	nop
 8006ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff6:	bc08      	pop	{r3}
 8006ff8:	469e      	mov	lr, r3
 8006ffa:	4770      	bx	lr
