
Lab3_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b08  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002d00  08002d00  00003d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d18  08002d18  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002d18  08002d18  00003d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d20  08002d20  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d20  08002d20  00003d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d24  08002d24  00003d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d28  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002d34  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002d34  000040b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009222  00000000  00000000  0000403a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000166a  00000000  00000000  0000d25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000e8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000545  00000000  00000000  0000efb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002608a  00000000  00000000  0000f4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d7a  00000000  00000000  00035587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed28c  00000000  00000000  0003f301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c58d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac4  00000000  00000000  0012c5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012e094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002ce8 	.word	0x08002ce8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002ce8 	.word	0x08002ce8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <MX_GPIO_Init+0x2c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a08      	ldr	r2, [pc, #32]	@ (8000590 <MX_GPIO_Init+0x2c>)
 8000570:	f043 0308 	orr.w	r3, r3, #8
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <MX_GPIO_Init+0x2c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40023800 	.word	0x40023800

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000598:	f000 f870 	bl	800067c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 f9bf 	bl	800091e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f810 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f7ff ffde 	bl	8000564 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005a8:	f000 f900 	bl	80007ac <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart3, (uint8_t*)&ch1, 1, 1000);
 80005ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005b0:	2201      	movs	r2, #1
 80005b2:	4902      	ldr	r1, [pc, #8]	@ (80005bc <main+0x28>)
 80005b4:	4802      	ldr	r0, [pc, #8]	@ (80005c0 <main+0x2c>)
 80005b6:	f001 fe23 	bl	8002200 <HAL_UART_Receive>
 80005ba:	e7f7      	b.n	80005ac <main+0x18>
 80005bc:	20000028 	.word	0x20000028
 80005c0:	2000002c 	.word	0x2000002c

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2234      	movs	r2, #52	@ 0x34
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fb5b 	bl	8002c8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <SystemClock_Config+0xb0>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <SystemClock_Config+0xb0>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <SystemClock_Config+0xb0>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <SystemClock_Config+0xb4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000608:	4a1b      	ldr	r2, [pc, #108]	@ (8000678 <SystemClock_Config+0xb4>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <SystemClock_Config+0xb4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000628:	2300      	movs	r3, #0
 800062a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fcdb 	bl	8000fec <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800063c:	f000 f84a 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f000 ff74 	bl	8001548 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000666:	f000 f835 	bl	80006d4 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	@ 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800068e:	f000 fa89 	bl	8000ba4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000692:	2301      	movs	r3, #1
 8000694:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000696:	2300      	movs	r3, #0
 8000698:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800069e:	231f      	movs	r3, #31
 80006a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80006a2:	2387      	movs	r3, #135	@ 0x87
 80006a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006aa:	2300      	movs	r3, #0
 80006ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006ae:	2301      	movs	r3, #1
 80006b0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80006b2:	2301      	movs	r3, #1
 80006b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006be:	463b      	mov	r3, r7
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 faa7 	bl	8000c14 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006c6:	2004      	movs	r0, #4
 80006c8:	f000 fa84 	bl	8000bd4 <HAL_MPU_Enable>

}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <Error_Handler+0x8>

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <HAL_MspInit+0x44>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000724 <HAL_MspInit+0x44>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <HAL_MspInit+0x44>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <HAL_MspInit+0x44>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000702:	4a08      	ldr	r2, [pc, #32]	@ (8000724 <HAL_MspInit+0x44>)
 8000704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000708:	6453      	str	r3, [r2, #68]	@ 0x44
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <HAL_MspInit+0x44>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <NMI_Handler+0x4>

08000730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <MemManage_Handler+0x4>

08000740 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <UsageFault_Handler+0x4>

08000750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077e:	f000 f90b 	bl	8000998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <SystemInit+0x20>)
 800078e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000792:	4a05      	ldr	r2, [pc, #20]	@ (80007a8 <SystemInit+0x20>)
 8000794:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000798:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	@ (8000808 <MX_USART3_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007f0:	f001 fcb8 	bl	8002164 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f7ff ff6b 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000002c 	.word	0x2000002c
 8000808:	40004800 	.word	0x40004800

0800080c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b0ae      	sub	sp, #184	@ 0xb8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2290      	movs	r2, #144	@ 0x90
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f002 fa2e 	bl	8002c8e <memset>
  if(uartHandle->Instance==USART3)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a22      	ldr	r2, [pc, #136]	@ (80008c0 <HAL_UART_MspInit+0xb4>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d13c      	bne.n	80008b6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800083c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000840:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000842:	2300      	movs	r3, #0
 8000844:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4618      	mov	r0, r3
 800084c:	f001 f862 	bl	8001914 <HAL_RCCEx_PeriphCLKConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000856:	f7ff ff3d 	bl	80006d4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800085a:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <HAL_UART_MspInit+0xb8>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <HAL_UART_MspInit+0xb8>)
 8000860:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000864:	6413      	str	r3, [r2, #64]	@ 0x40
 8000866:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <HAL_UART_MspInit+0xb8>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <HAL_UART_MspInit+0xb8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a13      	ldr	r2, [pc, #76]	@ (80008c4 <HAL_UART_MspInit+0xb8>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <HAL_UART_MspInit+0xb8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800088a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800088e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008a4:	2307      	movs	r3, #7
 80008a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008aa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <HAL_UART_MspInit+0xbc>)
 80008b2:	f000 f9ef 	bl	8000c94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80008b6:	bf00      	nop
 80008b8:	37b8      	adds	r7, #184	@ 0xb8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40004800 	.word	0x40004800
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020c00 	.word	0x40020c00

080008cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000904 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008d0:	f7ff ff5a 	bl	8000788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d4:	480c      	ldr	r0, [pc, #48]	@ (8000908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008d6:	490d      	ldr	r1, [pc, #52]	@ (800090c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80008fa:	f002 f9d1 	bl	8002ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fe:	f7ff fe49 	bl	8000594 <main>
  bx  lr    
 8000902:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000904:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000910:	08002d28 	.word	0x08002d28
  ldr r2, =_sbss
 8000914:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000918:	200000b8 	.word	0x200000b8

0800091c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC_IRQHandler>

0800091e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000922:	2003      	movs	r0, #3
 8000924:	f000 f90a 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000928:	200f      	movs	r0, #15
 800092a:	f000 f805 	bl	8000938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092e:	f7ff fed7 	bl	80006e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <HAL_InitTick+0x54>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_InitTick+0x58>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000952:	fbb2 f3f3 	udiv	r3, r2, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f917 	bl	8000b8a <HAL_SYSTICK_Config>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	e00e      	b.n	8000984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b0f      	cmp	r3, #15
 800096a:	d80a      	bhi.n	8000982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800096c:	2200      	movs	r2, #0
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	f000 f8ed 	bl	8000b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000978:	4a06      	ldr	r2, [pc, #24]	@ (8000994 <HAL_InitTick+0x5c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
 8000980:	e000      	b.n	8000984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000000 	.word	0x20000000
 8000990:	20000008 	.word	0x20000008
 8000994:	20000004 	.word	0x20000004

08000998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_IncTick+0x20>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_IncTick+0x24>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	4a04      	ldr	r2, [pc, #16]	@ (80009bc <HAL_IncTick+0x24>)
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008
 80009bc:	200000b4 	.word	0x200000b4

080009c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return uwTick;
 80009c4:	4b03      	ldr	r3, [pc, #12]	@ (80009d4 <HAL_GetTick+0x14>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	200000b4 	.word	0x200000b4

080009d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x40>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f4:	4013      	ands	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	4313      	orrs	r3, r2
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x40>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00
 8000a1c:	05fa0000 	.word	0x05fa0000

08000a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a24:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <__NVIC_GetPriorityGrouping+0x18>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	f003 0307 	and.w	r3, r3, #7
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db0a      	blt.n	8000a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	490c      	ldr	r1, [pc, #48]	@ (8000a88 <__NVIC_SetPriority+0x4c>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	0112      	lsls	r2, r2, #4
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	440b      	add	r3, r1
 8000a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a64:	e00a      	b.n	8000a7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4908      	ldr	r1, [pc, #32]	@ (8000a8c <__NVIC_SetPriority+0x50>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	f003 030f 	and.w	r3, r3, #15
 8000a72:	3b04      	subs	r3, #4
 8000a74:	0112      	lsls	r2, r2, #4
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	440b      	add	r3, r1
 8000a7a:	761a      	strb	r2, [r3, #24]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	@ 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	f1c3 0307 	rsb	r3, r3, #7
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	bf28      	it	cs
 8000aae:	2304      	movcs	r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	d902      	bls.n	8000ac0 <NVIC_EncodePriority+0x30>
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3b03      	subs	r3, #3
 8000abe:	e000      	b.n	8000ac2 <NVIC_EncodePriority+0x32>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43d9      	mvns	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	4313      	orrs	r3, r2
         );
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3724      	adds	r7, #36	@ 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b08:	d301      	bcc.n	8000b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00f      	b.n	8000b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <SysTick_Config+0x40>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b16:	210f      	movs	r1, #15
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f7ff ff8e 	bl	8000a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <SysTick_Config+0x40>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b26:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <SysTick_Config+0x40>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff47 	bl	80009d8 <__NVIC_SetPriorityGrouping>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b64:	f7ff ff5c 	bl	8000a20 <__NVIC_GetPriorityGrouping>
 8000b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	6978      	ldr	r0, [r7, #20]
 8000b70:	f7ff ff8e 	bl	8000a90 <NVIC_EncodePriority>
 8000b74:	4602      	mov	r2, r0
 8000b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff5d 	bl	8000a3c <__NVIC_SetPriority>
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ffb0 	bl	8000af8 <SysTick_Config>
 8000b98:	4603      	mov	r3, r0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ba8:	f3bf 8f5f 	dmb	sy
}
 8000bac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <HAL_MPU_Disable+0x28>)
 8000bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bb2:	4a06      	ldr	r2, [pc, #24]	@ (8000bcc <HAL_MPU_Disable+0x28>)
 8000bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bb8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000bba:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <HAL_MPU_Disable+0x2c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00
 8000bd0:	e000ed90 	.word	0xe000ed90

08000bd4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000c0c <HAL_MPU_Enable+0x38>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <HAL_MPU_Enable+0x3c>)
 8000be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bea:	4a09      	ldr	r2, [pc, #36]	@ (8000c10 <HAL_MPU_Enable+0x3c>)
 8000bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bf0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000bf2:	f3bf 8f4f 	dsb	sy
}
 8000bf6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bf8:	f3bf 8f6f 	isb	sy
}
 8000bfc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed90 	.word	0xe000ed90
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	785a      	ldrb	r2, [r3, #1]
 8000c20:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <HAL_MPU_ConfigRegion+0x7c>)
 8000c22:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000c24:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <HAL_MPU_ConfigRegion+0x7c>)
 8000c26:	691b      	ldr	r3, [r3, #16]
 8000c28:	4a19      	ldr	r2, [pc, #100]	@ (8000c90 <HAL_MPU_ConfigRegion+0x7c>)
 8000c2a:	f023 0301 	bic.w	r3, r3, #1
 8000c2e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000c30:	4a17      	ldr	r2, [pc, #92]	@ (8000c90 <HAL_MPU_ConfigRegion+0x7c>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7b1b      	ldrb	r3, [r3, #12]
 8000c3c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7adb      	ldrb	r3, [r3, #11]
 8000c42:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7a9b      	ldrb	r3, [r3, #10]
 8000c4a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7b5b      	ldrb	r3, [r3, #13]
 8000c52:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	7b9b      	ldrb	r3, [r3, #14]
 8000c5a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7bdb      	ldrb	r3, [r3, #15]
 8000c62:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7a5b      	ldrb	r3, [r3, #9]
 8000c6a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7a1b      	ldrb	r3, [r3, #8]
 8000c72:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c74:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c7c:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c7e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c80:	6113      	str	r3, [r2, #16]
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed90 	.word	0xe000ed90

08000c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	@ 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	e175      	b.n	8000fa0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	f040 8164 	bne.w	8000f9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d005      	beq.n	8000cea <HAL_GPIO_Init+0x56>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d130      	bne.n	8000d4c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	091b      	lsrs	r3, r3, #4
 8000d36:	f003 0201 	and.w	r2, r3, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d017      	beq.n	8000d88 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d123      	bne.n	8000ddc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	08da      	lsrs	r2, r3, #3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3208      	adds	r2, #8
 8000d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	69b9      	ldr	r1, [r7, #24]
 8000dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0203 	and.w	r2, r3, #3
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80be 	beq.w	8000f9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	4b66      	ldr	r3, [pc, #408]	@ (8000fb8 <HAL_GPIO_Init+0x324>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	4a65      	ldr	r2, [pc, #404]	@ (8000fb8 <HAL_GPIO_Init+0x324>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2a:	4b63      	ldr	r3, [pc, #396]	@ (8000fb8 <HAL_GPIO_Init+0x324>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e36:	4a61      	ldr	r2, [pc, #388]	@ (8000fbc <HAL_GPIO_Init+0x328>)
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a58      	ldr	r2, [pc, #352]	@ (8000fc0 <HAL_GPIO_Init+0x32c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d037      	beq.n	8000ed2 <HAL_GPIO_Init+0x23e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a57      	ldr	r2, [pc, #348]	@ (8000fc4 <HAL_GPIO_Init+0x330>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d031      	beq.n	8000ece <HAL_GPIO_Init+0x23a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a56      	ldr	r2, [pc, #344]	@ (8000fc8 <HAL_GPIO_Init+0x334>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d02b      	beq.n	8000eca <HAL_GPIO_Init+0x236>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a55      	ldr	r2, [pc, #340]	@ (8000fcc <HAL_GPIO_Init+0x338>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d025      	beq.n	8000ec6 <HAL_GPIO_Init+0x232>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a54      	ldr	r2, [pc, #336]	@ (8000fd0 <HAL_GPIO_Init+0x33c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d01f      	beq.n	8000ec2 <HAL_GPIO_Init+0x22e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a53      	ldr	r2, [pc, #332]	@ (8000fd4 <HAL_GPIO_Init+0x340>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d019      	beq.n	8000ebe <HAL_GPIO_Init+0x22a>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a52      	ldr	r2, [pc, #328]	@ (8000fd8 <HAL_GPIO_Init+0x344>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d013      	beq.n	8000eba <HAL_GPIO_Init+0x226>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a51      	ldr	r2, [pc, #324]	@ (8000fdc <HAL_GPIO_Init+0x348>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d00d      	beq.n	8000eb6 <HAL_GPIO_Init+0x222>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a50      	ldr	r2, [pc, #320]	@ (8000fe0 <HAL_GPIO_Init+0x34c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d007      	beq.n	8000eb2 <HAL_GPIO_Init+0x21e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4f      	ldr	r2, [pc, #316]	@ (8000fe4 <HAL_GPIO_Init+0x350>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d101      	bne.n	8000eae <HAL_GPIO_Init+0x21a>
 8000eaa:	2309      	movs	r3, #9
 8000eac:	e012      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000eae:	230a      	movs	r3, #10
 8000eb0:	e010      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	e00e      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	e00c      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000eba:	2306      	movs	r3, #6
 8000ebc:	e00a      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	e008      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e004      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	e002      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <HAL_GPIO_Init+0x240>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	69fa      	ldr	r2, [r7, #28]
 8000ed6:	f002 0203 	and.w	r2, r2, #3
 8000eda:	0092      	lsls	r2, r2, #2
 8000edc:	4093      	lsls	r3, r2
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ee4:	4935      	ldr	r1, [pc, #212]	@ (8000fbc <HAL_GPIO_Init+0x328>)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fe8 <HAL_GPIO_Init+0x354>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f16:	4a34      	ldr	r2, [pc, #208]	@ (8000fe8 <HAL_GPIO_Init+0x354>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f1c:	4b32      	ldr	r3, [pc, #200]	@ (8000fe8 <HAL_GPIO_Init+0x354>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f40:	4a29      	ldr	r2, [pc, #164]	@ (8000fe8 <HAL_GPIO_Init+0x354>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f46:	4b28      	ldr	r3, [pc, #160]	@ (8000fe8 <HAL_GPIO_Init+0x354>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe8 <HAL_GPIO_Init+0x354>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <HAL_GPIO_Init+0x354>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f94:	4a14      	ldr	r2, [pc, #80]	@ (8000fe8 <HAL_GPIO_Init+0x354>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	f67f ae86 	bls.w	8000cb4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3724      	adds	r7, #36	@ 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40013800 	.word	0x40013800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40021400 	.word	0x40021400
 8000fd8:	40021800 	.word	0x40021800
 8000fdc:	40021c00 	.word	0x40021c00
 8000fe0:	40022000 	.word	0x40022000
 8000fe4:	40022400 	.word	0x40022400
 8000fe8:	40013c00 	.word	0x40013c00

08000fec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e29b      	b.n	800153a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 8087 	beq.w	800111e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001010:	4b96      	ldr	r3, [pc, #600]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b04      	cmp	r3, #4
 800101a:	d00c      	beq.n	8001036 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800101c:	4b93      	ldr	r3, [pc, #588]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b08      	cmp	r3, #8
 8001026:	d112      	bne.n	800104e <HAL_RCC_OscConfig+0x62>
 8001028:	4b90      	ldr	r3, [pc, #576]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001030:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001034:	d10b      	bne.n	800104e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001036:	4b8d      	ldr	r3, [pc, #564]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d06c      	beq.n	800111c <HAL_RCC_OscConfig+0x130>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d168      	bne.n	800111c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e275      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001056:	d106      	bne.n	8001066 <HAL_RCC_OscConfig+0x7a>
 8001058:	4b84      	ldr	r3, [pc, #528]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a83      	ldr	r2, [pc, #524]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 800105e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	e02e      	b.n	80010c4 <HAL_RCC_OscConfig+0xd8>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0x9c>
 800106e:	4b7f      	ldr	r3, [pc, #508]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a7e      	ldr	r2, [pc, #504]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	4b7c      	ldr	r3, [pc, #496]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a7b      	ldr	r2, [pc, #492]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001080:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e01d      	b.n	80010c4 <HAL_RCC_OscConfig+0xd8>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001090:	d10c      	bne.n	80010ac <HAL_RCC_OscConfig+0xc0>
 8001092:	4b76      	ldr	r3, [pc, #472]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a75      	ldr	r2, [pc, #468]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b73      	ldr	r3, [pc, #460]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a72      	ldr	r2, [pc, #456]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e00b      	b.n	80010c4 <HAL_RCC_OscConfig+0xd8>
 80010ac:	4b6f      	ldr	r3, [pc, #444]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a6e      	ldr	r2, [pc, #440]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 80010b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b6c      	ldr	r3, [pc, #432]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a6b      	ldr	r2, [pc, #428]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 80010be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d013      	beq.n	80010f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010cc:	f7ff fc78 	bl	80009c0 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fc74 	bl	80009c0 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	@ 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e229      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	4b61      	ldr	r3, [pc, #388]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0xe8>
 80010f2:	e014      	b.n	800111e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f4:	f7ff fc64 	bl	80009c0 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fc60 	bl	80009c0 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	@ 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e215      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110e:	4b57      	ldr	r3, [pc, #348]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x110>
 800111a:	e000      	b.n	800111e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d069      	beq.n	80011fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800112a:	4b50      	ldr	r3, [pc, #320]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001136:	4b4d      	ldr	r3, [pc, #308]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b08      	cmp	r3, #8
 8001140:	d11c      	bne.n	800117c <HAL_RCC_OscConfig+0x190>
 8001142:	4b4a      	ldr	r3, [pc, #296]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d116      	bne.n	800117c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114e:	4b47      	ldr	r3, [pc, #284]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <HAL_RCC_OscConfig+0x17a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d001      	beq.n	8001166 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e1e9      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001166:	4b41      	ldr	r3, [pc, #260]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	493d      	ldr	r1, [pc, #244]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001176:	4313      	orrs	r3, r2
 8001178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117a:	e040      	b.n	80011fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d023      	beq.n	80011cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001184:	4b39      	ldr	r3, [pc, #228]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a38      	ldr	r2, [pc, #224]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001190:	f7ff fc16 	bl	80009c0 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001198:	f7ff fc12 	bl	80009c0 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e1c7      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011aa:	4b30      	ldr	r3, [pc, #192]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	4b2d      	ldr	r3, [pc, #180]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4929      	ldr	r1, [pc, #164]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]
 80011ca:	e018      	b.n	80011fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011cc:	4b27      	ldr	r3, [pc, #156]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a26      	ldr	r2, [pc, #152]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 80011d2:	f023 0301 	bic.w	r3, r3, #1
 80011d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d8:	f7ff fbf2 	bl	80009c0 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e0:	f7ff fbee 	bl	80009c0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e1a3      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f2:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d038      	beq.n	800127c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d019      	beq.n	8001246 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001212:	4b16      	ldr	r3, [pc, #88]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001216:	4a15      	ldr	r2, [pc, #84]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121e:	f7ff fbcf 	bl	80009c0 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001226:	f7ff fbcb 	bl	80009c0 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e180      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001238:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 800123a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x23a>
 8001244:	e01a      	b.n	800127c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001246:	4b09      	ldr	r3, [pc, #36]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 8001248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800124a:	4a08      	ldr	r2, [pc, #32]	@ (800126c <HAL_RCC_OscConfig+0x280>)
 800124c:	f023 0301 	bic.w	r3, r3, #1
 8001250:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001252:	f7ff fbb5 	bl	80009c0 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001258:	e00a      	b.n	8001270 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125a:	f7ff fbb1 	bl	80009c0 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d903      	bls.n	8001270 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e166      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
 800126c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001270:	4b92      	ldr	r3, [pc, #584]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 8001272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1ee      	bne.n	800125a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80a4 	beq.w	80013d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128a:	4b8c      	ldr	r3, [pc, #560]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10d      	bne.n	80012b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	4b89      	ldr	r3, [pc, #548]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	4a88      	ldr	r2, [pc, #544]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a2:	4b86      	ldr	r3, [pc, #536]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ae:	2301      	movs	r3, #1
 80012b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b2:	4b83      	ldr	r3, [pc, #524]	@ (80014c0 <HAL_RCC_OscConfig+0x4d4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d118      	bne.n	80012f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80012be:	4b80      	ldr	r3, [pc, #512]	@ (80014c0 <HAL_RCC_OscConfig+0x4d4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a7f      	ldr	r2, [pc, #508]	@ (80014c0 <HAL_RCC_OscConfig+0x4d4>)
 80012c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fb79 	bl	80009c0 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d2:	f7ff fb75 	bl	80009c0 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b64      	cmp	r3, #100	@ 0x64
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e12a      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e4:	4b76      	ldr	r3, [pc, #472]	@ (80014c0 <HAL_RCC_OscConfig+0x4d4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d106      	bne.n	8001306 <HAL_RCC_OscConfig+0x31a>
 80012f8:	4b70      	ldr	r3, [pc, #448]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 80012fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012fc:	4a6f      	ldr	r2, [pc, #444]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6713      	str	r3, [r2, #112]	@ 0x70
 8001304:	e02d      	b.n	8001362 <HAL_RCC_OscConfig+0x376>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0x33c>
 800130e:	4b6b      	ldr	r3, [pc, #428]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 8001310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001312:	4a6a      	ldr	r2, [pc, #424]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 8001314:	f023 0301 	bic.w	r3, r3, #1
 8001318:	6713      	str	r3, [r2, #112]	@ 0x70
 800131a:	4b68      	ldr	r3, [pc, #416]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 800131c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800131e:	4a67      	ldr	r2, [pc, #412]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 8001320:	f023 0304 	bic.w	r3, r3, #4
 8001324:	6713      	str	r3, [r2, #112]	@ 0x70
 8001326:	e01c      	b.n	8001362 <HAL_RCC_OscConfig+0x376>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b05      	cmp	r3, #5
 800132e:	d10c      	bne.n	800134a <HAL_RCC_OscConfig+0x35e>
 8001330:	4b62      	ldr	r3, [pc, #392]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 8001332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001334:	4a61      	ldr	r2, [pc, #388]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6713      	str	r3, [r2, #112]	@ 0x70
 800133c:	4b5f      	ldr	r3, [pc, #380]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 800133e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001340:	4a5e      	ldr	r2, [pc, #376]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6713      	str	r3, [r2, #112]	@ 0x70
 8001348:	e00b      	b.n	8001362 <HAL_RCC_OscConfig+0x376>
 800134a:	4b5c      	ldr	r3, [pc, #368]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 800134c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800134e:	4a5b      	ldr	r2, [pc, #364]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 8001350:	f023 0301 	bic.w	r3, r3, #1
 8001354:	6713      	str	r3, [r2, #112]	@ 0x70
 8001356:	4b59      	ldr	r3, [pc, #356]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 8001358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800135a:	4a58      	ldr	r2, [pc, #352]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 800135c:	f023 0304 	bic.w	r3, r3, #4
 8001360:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d015      	beq.n	8001396 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136a:	f7ff fb29 	bl	80009c0 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001370:	e00a      	b.n	8001388 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001372:	f7ff fb25 	bl	80009c0 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001380:	4293      	cmp	r3, r2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e0d8      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001388:	4b4c      	ldr	r3, [pc, #304]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0ee      	beq.n	8001372 <HAL_RCC_OscConfig+0x386>
 8001394:	e014      	b.n	80013c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001396:	f7ff fb13 	bl	80009c0 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800139c:	e00a      	b.n	80013b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139e:	f7ff fb0f 	bl	80009c0 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e0c2      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b4:	4b41      	ldr	r3, [pc, #260]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1ee      	bne.n	800139e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d105      	bne.n	80013d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c6:	4b3d      	ldr	r3, [pc, #244]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	4a3c      	ldr	r2, [pc, #240]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 80013cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80ae 	beq.w	8001538 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013dc:	4b37      	ldr	r3, [pc, #220]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d06d      	beq.n	80014c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d14b      	bne.n	8001488 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f0:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a31      	ldr	r2, [pc, #196]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 80013f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fae0 	bl	80009c0 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff fadc 	bl	80009c0 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e091      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001416:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69da      	ldr	r2, [r3, #28]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001430:	019b      	lsls	r3, r3, #6
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001438:	085b      	lsrs	r3, r3, #1
 800143a:	3b01      	subs	r3, #1
 800143c:	041b      	lsls	r3, r3, #16
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001444:	061b      	lsls	r3, r3, #24
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144c:	071b      	lsls	r3, r3, #28
 800144e:	491b      	ldr	r1, [pc, #108]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001454:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a18      	ldr	r2, [pc, #96]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 800145a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800145e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff faae 	bl	80009c0 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff faaa 	bl	80009c0 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e05f      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147a:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x47c>
 8001486:	e057      	b.n	8001538 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0b      	ldr	r2, [pc, #44]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 800148e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fa94 	bl	80009c0 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff fa90 	bl	80009c0 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e045      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ae:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <HAL_RCC_OscConfig+0x4d0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x4b0>
 80014ba:	e03d      	b.n	8001538 <HAL_RCC_OscConfig+0x54c>
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80014c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <HAL_RCC_OscConfig+0x558>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d030      	beq.n	8001534 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014dc:	429a      	cmp	r2, r3
 80014de:	d129      	bne.n	8001534 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d122      	bne.n	8001534 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80014f4:	4013      	ands	r3, r2
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80014fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d119      	bne.n	8001534 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150a:	085b      	lsrs	r3, r3, #1
 800150c:	3b01      	subs	r3, #1
 800150e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d10f      	bne.n	8001534 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800151e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001520:	429a      	cmp	r2, r3
 8001522:	d107      	bne.n	8001534 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d001      	beq.n	8001538 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0d0      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b6a      	ldr	r3, [pc, #424]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d910      	bls.n	8001590 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b67      	ldr	r3, [pc, #412]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 020f 	bic.w	r2, r3, #15
 8001576:	4965      	ldr	r1, [pc, #404]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b63      	ldr	r3, [pc, #396]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0b8      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a8:	4b59      	ldr	r3, [pc, #356]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a58      	ldr	r2, [pc, #352]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 80015ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c0:	4b53      	ldr	r3, [pc, #332]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a52      	ldr	r2, [pc, #328]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 80015c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015cc:	4b50      	ldr	r3, [pc, #320]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	494d      	ldr	r1, [pc, #308]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d040      	beq.n	800166c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b47      	ldr	r3, [pc, #284]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d115      	bne.n	800162a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e07f      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	4b41      	ldr	r3, [pc, #260]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e073      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161a:	4b3d      	ldr	r3, [pc, #244]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06b      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162a:	4b39      	ldr	r3, [pc, #228]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f023 0203 	bic.w	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4936      	ldr	r1, [pc, #216]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 8001638:	4313      	orrs	r3, r2
 800163a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800163c:	f7ff f9c0 	bl	80009c0 <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	e00a      	b.n	800165a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7ff f9bc 	bl	80009c0 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e053      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	4b2d      	ldr	r3, [pc, #180]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 020c 	and.w	r2, r3, #12
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d1eb      	bne.n	8001644 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800166c:	4b27      	ldr	r3, [pc, #156]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d210      	bcs.n	800169c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b24      	ldr	r3, [pc, #144]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 020f 	bic.w	r2, r3, #15
 8001682:	4922      	ldr	r1, [pc, #136]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b20      	ldr	r3, [pc, #128]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e032      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a8:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4916      	ldr	r1, [pc, #88]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016c6:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	490e      	ldr	r1, [pc, #56]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016da:	f000 f821 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 80016de:	4602      	mov	r2, r0
 80016e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	490a      	ldr	r1, [pc, #40]	@ (8001714 <HAL_RCC_ClockConfig+0x1cc>)
 80016ec:	5ccb      	ldrb	r3, [r1, r3]
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	4a09      	ldr	r2, [pc, #36]	@ (8001718 <HAL_RCC_ClockConfig+0x1d0>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <HAL_RCC_ClockConfig+0x1d4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff f91c 	bl	8000938 <HAL_InitTick>

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023c00 	.word	0x40023c00
 8001710:	40023800 	.word	0x40023800
 8001714:	08002d00 	.word	0x08002d00
 8001718:	20000000 	.word	0x20000000
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001724:	b090      	sub	sp, #64	@ 0x40
 8001726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	637b      	str	r3, [r7, #52]	@ 0x34
 800172c:	2300      	movs	r3, #0
 800172e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001730:	2300      	movs	r3, #0
 8001732:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001738:	4b59      	ldr	r3, [pc, #356]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b08      	cmp	r3, #8
 8001742:	d00d      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x40>
 8001744:	2b08      	cmp	r3, #8
 8001746:	f200 80a1 	bhi.w	800188c <HAL_RCC_GetSysClockFreq+0x16c>
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0x34>
 800174e:	2b04      	cmp	r3, #4
 8001750:	d003      	beq.n	800175a <HAL_RCC_GetSysClockFreq+0x3a>
 8001752:	e09b      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001754:	4b53      	ldr	r3, [pc, #332]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001756:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001758:	e09b      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800175a:	4b53      	ldr	r3, [pc, #332]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800175c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800175e:	e098      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001760:	4b4f      	ldr	r3, [pc, #316]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001768:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800176a:	4b4d      	ldr	r3, [pc, #308]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d028      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001776:	4b4a      	ldr	r3, [pc, #296]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	099b      	lsrs	r3, r3, #6
 800177c:	2200      	movs	r2, #0
 800177e:	623b      	str	r3, [r7, #32]
 8001780:	627a      	str	r2, [r7, #36]	@ 0x24
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001788:	2100      	movs	r1, #0
 800178a:	4b47      	ldr	r3, [pc, #284]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800178c:	fb03 f201 	mul.w	r2, r3, r1
 8001790:	2300      	movs	r3, #0
 8001792:	fb00 f303 	mul.w	r3, r0, r3
 8001796:	4413      	add	r3, r2
 8001798:	4a43      	ldr	r2, [pc, #268]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800179a:	fba0 1202 	umull	r1, r2, r0, r2
 800179e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017a0:	460a      	mov	r2, r1
 80017a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017a6:	4413      	add	r3, r2
 80017a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ac:	2200      	movs	r2, #0
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	61fa      	str	r2, [r7, #28]
 80017b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017ba:	f7fe fd3d 	bl	8000238 <__aeabi_uldivmod>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4613      	mov	r3, r2
 80017c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017c6:	e053      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c8:	4b35      	ldr	r3, [pc, #212]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	099b      	lsrs	r3, r3, #6
 80017ce:	2200      	movs	r2, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	617a      	str	r2, [r7, #20]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017da:	f04f 0b00 	mov.w	fp, #0
 80017de:	4652      	mov	r2, sl
 80017e0:	465b      	mov	r3, fp
 80017e2:	f04f 0000 	mov.w	r0, #0
 80017e6:	f04f 0100 	mov.w	r1, #0
 80017ea:	0159      	lsls	r1, r3, #5
 80017ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f0:	0150      	lsls	r0, r2, #5
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	ebb2 080a 	subs.w	r8, r2, sl
 80017fa:	eb63 090b 	sbc.w	r9, r3, fp
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800180a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800180e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001812:	ebb2 0408 	subs.w	r4, r2, r8
 8001816:	eb63 0509 	sbc.w	r5, r3, r9
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	00eb      	lsls	r3, r5, #3
 8001824:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001828:	00e2      	lsls	r2, r4, #3
 800182a:	4614      	mov	r4, r2
 800182c:	461d      	mov	r5, r3
 800182e:	eb14 030a 	adds.w	r3, r4, sl
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	eb45 030b 	adc.w	r3, r5, fp
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001846:	4629      	mov	r1, r5
 8001848:	028b      	lsls	r3, r1, #10
 800184a:	4621      	mov	r1, r4
 800184c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001850:	4621      	mov	r1, r4
 8001852:	028a      	lsls	r2, r1, #10
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800185a:	2200      	movs	r2, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	60fa      	str	r2, [r7, #12]
 8001860:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001864:	f7fe fce8 	bl	8000238 <__aeabi_uldivmod>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4613      	mov	r3, r2
 800186e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001870:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	0c1b      	lsrs	r3, r3, #16
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	3301      	adds	r3, #1
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001880:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001884:	fbb2 f3f3 	udiv	r3, r2, r3
 8001888:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800188a:	e002      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800188e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001894:	4618      	mov	r0, r3
 8001896:	3740      	adds	r7, #64	@ 0x40
 8001898:	46bd      	mov	sp, r7
 800189a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	00f42400 	.word	0x00f42400
 80018a8:	017d7840 	.word	0x017d7840

080018ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b0:	4b03      	ldr	r3, [pc, #12]	@ (80018c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018c8:	f7ff fff0 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	0a9b      	lsrs	r3, r3, #10
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	4903      	ldr	r1, [pc, #12]	@ (80018e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	08002d10 	.word	0x08002d10

080018ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018f0:	f7ff ffdc 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b05      	ldr	r3, [pc, #20]	@ (800190c <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	0b5b      	lsrs	r3, r3, #13
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	4903      	ldr	r1, [pc, #12]	@ (8001910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	08002d10 	.word	0x08002d10

08001914 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d012      	beq.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800193c:	4b69      	ldr	r3, [pc, #420]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a68      	ldr	r2, [pc, #416]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001942:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001946:	6093      	str	r3, [r2, #8]
 8001948:	4b66      	ldr	r3, [pc, #408]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001950:	4964      	ldr	r1, [pc, #400]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800195e:	2301      	movs	r3, #1
 8001960:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d017      	beq.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800196e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001974:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800197c:	4959      	ldr	r1, [pc, #356]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800197e:	4313      	orrs	r3, r2
 8001980:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001988:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800198c:	d101      	bne.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800198e:	2301      	movs	r3, #1
 8001990:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800199a:	2301      	movs	r3, #1
 800199c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d017      	beq.n	80019da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019aa:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	494a      	ldr	r1, [pc, #296]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019c8:	d101      	bne.n	80019ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80019ca:	2301      	movs	r3, #1
 80019cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 808b 	beq.w	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	4a39      	ldr	r2, [pc, #228]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a04:	4b37      	ldr	r3, [pc, #220]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a10:	4b35      	ldr	r3, [pc, #212]	@ (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a34      	ldr	r2, [pc, #208]	@ (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a1c:	f7fe ffd0 	bl	80009c0 <HAL_GetTick>
 8001a20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a24:	f7fe ffcc 	bl	80009c0 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	@ 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e38f      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a36:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a42:	4b28      	ldr	r3, [pc, #160]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d035      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d02e      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a60:	4b20      	ldr	r3, [pc, #128]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a74:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001a82:	4a18      	ldr	r2, [pc, #96]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d114      	bne.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7fe ff94 	bl	80009c0 <HAL_GetTick>
 8001a98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7fe ff90 	bl	80009c0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e351      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0ee      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001aca:	d111      	bne.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ad8:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ada:	400b      	ands	r3, r1
 8001adc:	4901      	ldr	r1, [pc, #4]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
 8001ae2:	e00b      	b.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	0ffffcff 	.word	0x0ffffcff
 8001af0:	4bac      	ldr	r3, [pc, #688]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4aab      	ldr	r2, [pc, #684]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001af6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001afa:	6093      	str	r3, [r2, #8]
 8001afc:	4ba9      	ldr	r3, [pc, #676]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001afe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b08:	49a6      	ldr	r1, [pc, #664]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d010      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b1a:	4ba2      	ldr	r3, [pc, #648]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b20:	4aa0      	ldr	r2, [pc, #640]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b2a:	4b9e      	ldr	r3, [pc, #632]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b34:	499b      	ldr	r1, [pc, #620]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00a      	beq.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b48:	4b96      	ldr	r3, [pc, #600]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b56:	4993      	ldr	r1, [pc, #588]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00a      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b6a:	4b8e      	ldr	r3, [pc, #568]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b78:	498a      	ldr	r1, [pc, #552]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00a      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b8c:	4b85      	ldr	r3, [pc, #532]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b9a:	4982      	ldr	r1, [pc, #520]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001bae:	4b7d      	ldr	r3, [pc, #500]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bb4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbc:	4979      	ldr	r1, [pc, #484]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00a      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bd0:	4b74      	ldr	r3, [pc, #464]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd6:	f023 0203 	bic.w	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4971      	ldr	r1, [pc, #452]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00a      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bf2:	4b6c      	ldr	r3, [pc, #432]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bf8:	f023 020c 	bic.w	r2, r3, #12
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c00:	4968      	ldr	r1, [pc, #416]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00a      	beq.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c14:	4b63      	ldr	r3, [pc, #396]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	4960      	ldr	r1, [pc, #384]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00a      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c36:	4b5b      	ldr	r3, [pc, #364]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c3c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c44:	4957      	ldr	r1, [pc, #348]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00a      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c58:	4b52      	ldr	r3, [pc, #328]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c66:	494f      	ldr	r1, [pc, #316]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00a      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c88:	4946      	ldr	r1, [pc, #280]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00a      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001c9c:	4b41      	ldr	r3, [pc, #260]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001caa:	493e      	ldr	r1, [pc, #248]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00a      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001cbe:	4b39      	ldr	r3, [pc, #228]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ccc:	4935      	ldr	r1, [pc, #212]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ce0:	4b30      	ldr	r3, [pc, #192]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ce6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001cee:	492d      	ldr	r1, [pc, #180]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d011      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d02:	4b28      	ldr	r3, [pc, #160]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d08:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d10:	4924      	ldr	r1, [pc, #144]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001d20:	d101      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d42:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d48:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d50:	4914      	ldr	r1, [pc, #80]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00b      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d64:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d6a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d74:	490b      	ldr	r1, [pc, #44]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00f      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d8e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d98:	4902      	ldr	r1, [pc, #8]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001da0:	e002      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00b      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001db4:	4b8a      	ldr	r3, [pc, #552]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc4:	4986      	ldr	r1, [pc, #536]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001dd8:	4b81      	ldr	r3, [pc, #516]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dde:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001de8:	497d      	ldr	r1, [pc, #500]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d006      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80d6 	beq.w	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e04:	4b76      	ldr	r3, [pc, #472]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a75      	ldr	r2, [pc, #468]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e10:	f7fe fdd6 	bl	80009c0 <HAL_GetTick>
 8001e14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e18:	f7fe fdd2 	bl	80009c0 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	@ 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e195      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d021      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d11d      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001e4a:	4b65      	ldr	r3, [pc, #404]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e50:	0c1b      	lsrs	r3, r3, #16
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e58:	4b61      	ldr	r3, [pc, #388]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e5e:	0e1b      	lsrs	r3, r3, #24
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	019a      	lsls	r2, r3, #6
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	041b      	lsls	r3, r3, #16
 8001e70:	431a      	orrs	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	071b      	lsls	r3, r3, #28
 8001e7e:	4958      	ldr	r1, [pc, #352]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d02e      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eb0:	d129      	bne.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ec0:	4b47      	ldr	r3, [pc, #284]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ec6:	0f1b      	lsrs	r3, r3, #28
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	019a      	lsls	r2, r3, #6
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	041b      	lsls	r3, r3, #16
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	061b      	lsls	r3, r3, #24
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	071b      	lsls	r3, r3, #28
 8001ee6:	493e      	ldr	r1, [pc, #248]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001eee:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ef4:	f023 021f 	bic.w	r2, r3, #31
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efc:	3b01      	subs	r3, #1
 8001efe:	4938      	ldr	r1, [pc, #224]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d01d      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f12:	4b33      	ldr	r3, [pc, #204]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f18:	0e1b      	lsrs	r3, r3, #24
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f20:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f26:	0f1b      	lsrs	r3, r3, #28
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	019a      	lsls	r2, r3, #6
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	041b      	lsls	r3, r3, #16
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	061b      	lsls	r3, r3, #24
 8001f40:	431a      	orrs	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	071b      	lsls	r3, r3, #28
 8001f46:	4926      	ldr	r1, [pc, #152]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d011      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	019a      	lsls	r2, r3, #6
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	041b      	lsls	r3, r3, #16
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	061b      	lsls	r3, r3, #24
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	071b      	lsls	r3, r3, #28
 8001f76:	491a      	ldr	r1, [pc, #104]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f7e:	4b18      	ldr	r3, [pc, #96]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a17      	ldr	r2, [pc, #92]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8a:	f7fe fd19 	bl	80009c0 <HAL_GetTick>
 8001f8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f92:	f7fe fd15 	bl	80009c0 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b64      	cmp	r3, #100	@ 0x64
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0d8      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	f040 80ce 	bne.w	8002154 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001fb8:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a08      	ldr	r2, [pc, #32]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc4:	f7fe fcfc 	bl	80009c0 <HAL_GetTick>
 8001fc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001fcc:	f7fe fcf8 	bl	80009c0 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	@ 0x64
 8001fd8:	d904      	bls.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0bb      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ff0:	d0ec      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800200e:	2b00      	cmp	r3, #0
 8002010:	d02e      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d12a      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800201a:	4b51      	ldr	r3, [pc, #324]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800201c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002020:	0c1b      	lsrs	r3, r3, #16
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002028:	4b4d      	ldr	r3, [pc, #308]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202e:	0f1b      	lsrs	r3, r3, #28
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	019a      	lsls	r2, r3, #6
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	041b      	lsls	r3, r3, #16
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	061b      	lsls	r3, r3, #24
 8002048:	431a      	orrs	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	071b      	lsls	r3, r3, #28
 800204e:	4944      	ldr	r1, [pc, #272]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002056:	4b42      	ldr	r3, [pc, #264]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800205c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	493d      	ldr	r1, [pc, #244]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d022      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002080:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002084:	d11d      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002086:	4b36      	ldr	r3, [pc, #216]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208c:	0e1b      	lsrs	r3, r3, #24
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002094:	4b32      	ldr	r3, [pc, #200]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209a:	0f1b      	lsrs	r3, r3, #28
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	019a      	lsls	r2, r3, #6
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	041b      	lsls	r3, r3, #16
 80020ae:	431a      	orrs	r2, r3
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	061b      	lsls	r3, r3, #24
 80020b4:	431a      	orrs	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	071b      	lsls	r3, r3, #28
 80020ba:	4929      	ldr	r1, [pc, #164]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d028      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020ce:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d4:	0e1b      	lsrs	r3, r3, #24
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80020dc:	4b20      	ldr	r3, [pc, #128]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	0c1b      	lsrs	r3, r3, #16
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	019a      	lsls	r2, r3, #6
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	041b      	lsls	r3, r3, #16
 80020f4:	431a      	orrs	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	061b      	lsls	r3, r3, #24
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	071b      	lsls	r3, r3, #28
 8002102:	4917      	ldr	r1, [pc, #92]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800210c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002110:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002118:	4911      	ldr	r1, [pc, #68]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002120:	4b0f      	ldr	r3, [pc, #60]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0e      	ldr	r2, [pc, #56]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800212c:	f7fe fc48 	bl	80009c0 <HAL_GetTick>
 8002130:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002134:	f7fe fc44 	bl	80009c0 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	@ 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e007      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800214e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002152:	d1ef      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800

08002164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e040      	b.n	80021f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fb40 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2224      	movs	r2, #36	@ 0x24
 8002190:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0201 	bic.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 fb54 	bl	8002858 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f8ed 	bl	8002390 <UART_SetConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e01b      	b.n	80021f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fbd3 	bl	800299c <UART_CheckIdleState>
 80021f6:	4603      	mov	r3, r0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	@ 0x28
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002216:	2b20      	cmp	r3, #32
 8002218:	f040 80b5 	bne.w	8002386 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_UART_Receive+0x28>
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0ad      	b.n	8002388 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2222      	movs	r2, #34	@ 0x22
 8002238:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002242:	f7fe fbbd 	bl	80009c0 <HAL_GetTick>
 8002246:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	88fa      	ldrh	r2, [r7, #6]
 800224c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	88fa      	ldrh	r2, [r7, #6]
 8002254:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002260:	d10e      	bne.n	8002280 <HAL_UART_Receive+0x80>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <HAL_UART_Receive+0x76>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002270:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002274:	e02d      	b.n	80022d2 <HAL_UART_Receive+0xd2>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	22ff      	movs	r2, #255	@ 0xff
 800227a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800227e:	e028      	b.n	80022d2 <HAL_UART_Receive+0xd2>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10d      	bne.n	80022a4 <HAL_UART_Receive+0xa4>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d104      	bne.n	800229a <HAL_UART_Receive+0x9a>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	22ff      	movs	r2, #255	@ 0xff
 8002294:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002298:	e01b      	b.n	80022d2 <HAL_UART_Receive+0xd2>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	227f      	movs	r2, #127	@ 0x7f
 800229e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80022a2:	e016      	b.n	80022d2 <HAL_UART_Receive+0xd2>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022ac:	d10d      	bne.n	80022ca <HAL_UART_Receive+0xca>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d104      	bne.n	80022c0 <HAL_UART_Receive+0xc0>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	227f      	movs	r2, #127	@ 0x7f
 80022ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80022be:	e008      	b.n	80022d2 <HAL_UART_Receive+0xd2>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	223f      	movs	r2, #63	@ 0x3f
 80022c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80022c8:	e003      	b.n	80022d2 <HAL_UART_Receive+0xd2>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80022d8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022e2:	d108      	bne.n	80022f6 <HAL_UART_Receive+0xf6>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d104      	bne.n	80022f6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	e003      	b.n	80022fe <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80022fe:	e036      	b.n	800236e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2200      	movs	r2, #0
 8002308:	2120      	movs	r1, #32
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fbee 	bl	8002aec <UART_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2220      	movs	r2, #32
 800231a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e032      	b.n	8002388 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10c      	bne.n	8002342 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	b29a      	uxth	r2, r3
 8002330:	8a7b      	ldrh	r3, [r7, #18]
 8002332:	4013      	ands	r3, r2
 8002334:	b29a      	uxth	r2, r3
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	3302      	adds	r3, #2
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	e00c      	b.n	800235c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	b2da      	uxtb	r2, r3
 800234a:	8a7b      	ldrh	r3, [r7, #18]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	4013      	ands	r3, r2
 8002350:	b2da      	uxtb	r2, r3
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3301      	adds	r3, #1
 800235a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1c2      	bne.n	8002300 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2220      	movs	r2, #32
 800237e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e000      	b.n	8002388 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002386:	2302      	movs	r3, #2
  }
}
 8002388:	4618      	mov	r0, r3
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4ba6      	ldr	r3, [pc, #664]	@ (8002654 <UART_SetConfig+0x2c4>)
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	6979      	ldr	r1, [r7, #20]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	430a      	orrs	r2, r1
 8002400:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a94      	ldr	r2, [pc, #592]	@ (8002658 <UART_SetConfig+0x2c8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d120      	bne.n	800244e <UART_SetConfig+0xbe>
 800240c:	4b93      	ldr	r3, [pc, #588]	@ (800265c <UART_SetConfig+0x2cc>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b03      	cmp	r3, #3
 8002418:	d816      	bhi.n	8002448 <UART_SetConfig+0xb8>
 800241a:	a201      	add	r2, pc, #4	@ (adr r2, 8002420 <UART_SetConfig+0x90>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	08002431 	.word	0x08002431
 8002424:	0800243d 	.word	0x0800243d
 8002428:	08002437 	.word	0x08002437
 800242c:	08002443 	.word	0x08002443
 8002430:	2301      	movs	r3, #1
 8002432:	77fb      	strb	r3, [r7, #31]
 8002434:	e150      	b.n	80026d8 <UART_SetConfig+0x348>
 8002436:	2302      	movs	r3, #2
 8002438:	77fb      	strb	r3, [r7, #31]
 800243a:	e14d      	b.n	80026d8 <UART_SetConfig+0x348>
 800243c:	2304      	movs	r3, #4
 800243e:	77fb      	strb	r3, [r7, #31]
 8002440:	e14a      	b.n	80026d8 <UART_SetConfig+0x348>
 8002442:	2308      	movs	r3, #8
 8002444:	77fb      	strb	r3, [r7, #31]
 8002446:	e147      	b.n	80026d8 <UART_SetConfig+0x348>
 8002448:	2310      	movs	r3, #16
 800244a:	77fb      	strb	r3, [r7, #31]
 800244c:	e144      	b.n	80026d8 <UART_SetConfig+0x348>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a83      	ldr	r2, [pc, #524]	@ (8002660 <UART_SetConfig+0x2d0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d132      	bne.n	80024be <UART_SetConfig+0x12e>
 8002458:	4b80      	ldr	r3, [pc, #512]	@ (800265c <UART_SetConfig+0x2cc>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d828      	bhi.n	80024b8 <UART_SetConfig+0x128>
 8002466:	a201      	add	r2, pc, #4	@ (adr r2, 800246c <UART_SetConfig+0xdc>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	080024a1 	.word	0x080024a1
 8002470:	080024b9 	.word	0x080024b9
 8002474:	080024b9 	.word	0x080024b9
 8002478:	080024b9 	.word	0x080024b9
 800247c:	080024ad 	.word	0x080024ad
 8002480:	080024b9 	.word	0x080024b9
 8002484:	080024b9 	.word	0x080024b9
 8002488:	080024b9 	.word	0x080024b9
 800248c:	080024a7 	.word	0x080024a7
 8002490:	080024b9 	.word	0x080024b9
 8002494:	080024b9 	.word	0x080024b9
 8002498:	080024b9 	.word	0x080024b9
 800249c:	080024b3 	.word	0x080024b3
 80024a0:	2300      	movs	r3, #0
 80024a2:	77fb      	strb	r3, [r7, #31]
 80024a4:	e118      	b.n	80026d8 <UART_SetConfig+0x348>
 80024a6:	2302      	movs	r3, #2
 80024a8:	77fb      	strb	r3, [r7, #31]
 80024aa:	e115      	b.n	80026d8 <UART_SetConfig+0x348>
 80024ac:	2304      	movs	r3, #4
 80024ae:	77fb      	strb	r3, [r7, #31]
 80024b0:	e112      	b.n	80026d8 <UART_SetConfig+0x348>
 80024b2:	2308      	movs	r3, #8
 80024b4:	77fb      	strb	r3, [r7, #31]
 80024b6:	e10f      	b.n	80026d8 <UART_SetConfig+0x348>
 80024b8:	2310      	movs	r3, #16
 80024ba:	77fb      	strb	r3, [r7, #31]
 80024bc:	e10c      	b.n	80026d8 <UART_SetConfig+0x348>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a68      	ldr	r2, [pc, #416]	@ (8002664 <UART_SetConfig+0x2d4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d120      	bne.n	800250a <UART_SetConfig+0x17a>
 80024c8:	4b64      	ldr	r3, [pc, #400]	@ (800265c <UART_SetConfig+0x2cc>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80024d2:	2b30      	cmp	r3, #48	@ 0x30
 80024d4:	d013      	beq.n	80024fe <UART_SetConfig+0x16e>
 80024d6:	2b30      	cmp	r3, #48	@ 0x30
 80024d8:	d814      	bhi.n	8002504 <UART_SetConfig+0x174>
 80024da:	2b20      	cmp	r3, #32
 80024dc:	d009      	beq.n	80024f2 <UART_SetConfig+0x162>
 80024de:	2b20      	cmp	r3, #32
 80024e0:	d810      	bhi.n	8002504 <UART_SetConfig+0x174>
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <UART_SetConfig+0x15c>
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d006      	beq.n	80024f8 <UART_SetConfig+0x168>
 80024ea:	e00b      	b.n	8002504 <UART_SetConfig+0x174>
 80024ec:	2300      	movs	r3, #0
 80024ee:	77fb      	strb	r3, [r7, #31]
 80024f0:	e0f2      	b.n	80026d8 <UART_SetConfig+0x348>
 80024f2:	2302      	movs	r3, #2
 80024f4:	77fb      	strb	r3, [r7, #31]
 80024f6:	e0ef      	b.n	80026d8 <UART_SetConfig+0x348>
 80024f8:	2304      	movs	r3, #4
 80024fa:	77fb      	strb	r3, [r7, #31]
 80024fc:	e0ec      	b.n	80026d8 <UART_SetConfig+0x348>
 80024fe:	2308      	movs	r3, #8
 8002500:	77fb      	strb	r3, [r7, #31]
 8002502:	e0e9      	b.n	80026d8 <UART_SetConfig+0x348>
 8002504:	2310      	movs	r3, #16
 8002506:	77fb      	strb	r3, [r7, #31]
 8002508:	e0e6      	b.n	80026d8 <UART_SetConfig+0x348>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a56      	ldr	r2, [pc, #344]	@ (8002668 <UART_SetConfig+0x2d8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d120      	bne.n	8002556 <UART_SetConfig+0x1c6>
 8002514:	4b51      	ldr	r3, [pc, #324]	@ (800265c <UART_SetConfig+0x2cc>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800251e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002520:	d013      	beq.n	800254a <UART_SetConfig+0x1ba>
 8002522:	2bc0      	cmp	r3, #192	@ 0xc0
 8002524:	d814      	bhi.n	8002550 <UART_SetConfig+0x1c0>
 8002526:	2b80      	cmp	r3, #128	@ 0x80
 8002528:	d009      	beq.n	800253e <UART_SetConfig+0x1ae>
 800252a:	2b80      	cmp	r3, #128	@ 0x80
 800252c:	d810      	bhi.n	8002550 <UART_SetConfig+0x1c0>
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <UART_SetConfig+0x1a8>
 8002532:	2b40      	cmp	r3, #64	@ 0x40
 8002534:	d006      	beq.n	8002544 <UART_SetConfig+0x1b4>
 8002536:	e00b      	b.n	8002550 <UART_SetConfig+0x1c0>
 8002538:	2300      	movs	r3, #0
 800253a:	77fb      	strb	r3, [r7, #31]
 800253c:	e0cc      	b.n	80026d8 <UART_SetConfig+0x348>
 800253e:	2302      	movs	r3, #2
 8002540:	77fb      	strb	r3, [r7, #31]
 8002542:	e0c9      	b.n	80026d8 <UART_SetConfig+0x348>
 8002544:	2304      	movs	r3, #4
 8002546:	77fb      	strb	r3, [r7, #31]
 8002548:	e0c6      	b.n	80026d8 <UART_SetConfig+0x348>
 800254a:	2308      	movs	r3, #8
 800254c:	77fb      	strb	r3, [r7, #31]
 800254e:	e0c3      	b.n	80026d8 <UART_SetConfig+0x348>
 8002550:	2310      	movs	r3, #16
 8002552:	77fb      	strb	r3, [r7, #31]
 8002554:	e0c0      	b.n	80026d8 <UART_SetConfig+0x348>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a44      	ldr	r2, [pc, #272]	@ (800266c <UART_SetConfig+0x2dc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d125      	bne.n	80025ac <UART_SetConfig+0x21c>
 8002560:	4b3e      	ldr	r3, [pc, #248]	@ (800265c <UART_SetConfig+0x2cc>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800256a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800256e:	d017      	beq.n	80025a0 <UART_SetConfig+0x210>
 8002570:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002574:	d817      	bhi.n	80025a6 <UART_SetConfig+0x216>
 8002576:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800257a:	d00b      	beq.n	8002594 <UART_SetConfig+0x204>
 800257c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002580:	d811      	bhi.n	80025a6 <UART_SetConfig+0x216>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <UART_SetConfig+0x1fe>
 8002586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800258a:	d006      	beq.n	800259a <UART_SetConfig+0x20a>
 800258c:	e00b      	b.n	80025a6 <UART_SetConfig+0x216>
 800258e:	2300      	movs	r3, #0
 8002590:	77fb      	strb	r3, [r7, #31]
 8002592:	e0a1      	b.n	80026d8 <UART_SetConfig+0x348>
 8002594:	2302      	movs	r3, #2
 8002596:	77fb      	strb	r3, [r7, #31]
 8002598:	e09e      	b.n	80026d8 <UART_SetConfig+0x348>
 800259a:	2304      	movs	r3, #4
 800259c:	77fb      	strb	r3, [r7, #31]
 800259e:	e09b      	b.n	80026d8 <UART_SetConfig+0x348>
 80025a0:	2308      	movs	r3, #8
 80025a2:	77fb      	strb	r3, [r7, #31]
 80025a4:	e098      	b.n	80026d8 <UART_SetConfig+0x348>
 80025a6:	2310      	movs	r3, #16
 80025a8:	77fb      	strb	r3, [r7, #31]
 80025aa:	e095      	b.n	80026d8 <UART_SetConfig+0x348>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002670 <UART_SetConfig+0x2e0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d125      	bne.n	8002602 <UART_SetConfig+0x272>
 80025b6:	4b29      	ldr	r3, [pc, #164]	@ (800265c <UART_SetConfig+0x2cc>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80025c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80025c4:	d017      	beq.n	80025f6 <UART_SetConfig+0x266>
 80025c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80025ca:	d817      	bhi.n	80025fc <UART_SetConfig+0x26c>
 80025cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025d0:	d00b      	beq.n	80025ea <UART_SetConfig+0x25a>
 80025d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025d6:	d811      	bhi.n	80025fc <UART_SetConfig+0x26c>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <UART_SetConfig+0x254>
 80025dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025e0:	d006      	beq.n	80025f0 <UART_SetConfig+0x260>
 80025e2:	e00b      	b.n	80025fc <UART_SetConfig+0x26c>
 80025e4:	2301      	movs	r3, #1
 80025e6:	77fb      	strb	r3, [r7, #31]
 80025e8:	e076      	b.n	80026d8 <UART_SetConfig+0x348>
 80025ea:	2302      	movs	r3, #2
 80025ec:	77fb      	strb	r3, [r7, #31]
 80025ee:	e073      	b.n	80026d8 <UART_SetConfig+0x348>
 80025f0:	2304      	movs	r3, #4
 80025f2:	77fb      	strb	r3, [r7, #31]
 80025f4:	e070      	b.n	80026d8 <UART_SetConfig+0x348>
 80025f6:	2308      	movs	r3, #8
 80025f8:	77fb      	strb	r3, [r7, #31]
 80025fa:	e06d      	b.n	80026d8 <UART_SetConfig+0x348>
 80025fc:	2310      	movs	r3, #16
 80025fe:	77fb      	strb	r3, [r7, #31]
 8002600:	e06a      	b.n	80026d8 <UART_SetConfig+0x348>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1b      	ldr	r2, [pc, #108]	@ (8002674 <UART_SetConfig+0x2e4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d138      	bne.n	800267e <UART_SetConfig+0x2ee>
 800260c:	4b13      	ldr	r3, [pc, #76]	@ (800265c <UART_SetConfig+0x2cc>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002612:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002616:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800261a:	d017      	beq.n	800264c <UART_SetConfig+0x2bc>
 800261c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002620:	d82a      	bhi.n	8002678 <UART_SetConfig+0x2e8>
 8002622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002626:	d00b      	beq.n	8002640 <UART_SetConfig+0x2b0>
 8002628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800262c:	d824      	bhi.n	8002678 <UART_SetConfig+0x2e8>
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <UART_SetConfig+0x2aa>
 8002632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002636:	d006      	beq.n	8002646 <UART_SetConfig+0x2b6>
 8002638:	e01e      	b.n	8002678 <UART_SetConfig+0x2e8>
 800263a:	2300      	movs	r3, #0
 800263c:	77fb      	strb	r3, [r7, #31]
 800263e:	e04b      	b.n	80026d8 <UART_SetConfig+0x348>
 8002640:	2302      	movs	r3, #2
 8002642:	77fb      	strb	r3, [r7, #31]
 8002644:	e048      	b.n	80026d8 <UART_SetConfig+0x348>
 8002646:	2304      	movs	r3, #4
 8002648:	77fb      	strb	r3, [r7, #31]
 800264a:	e045      	b.n	80026d8 <UART_SetConfig+0x348>
 800264c:	2308      	movs	r3, #8
 800264e:	77fb      	strb	r3, [r7, #31]
 8002650:	e042      	b.n	80026d8 <UART_SetConfig+0x348>
 8002652:	bf00      	nop
 8002654:	efff69f3 	.word	0xefff69f3
 8002658:	40011000 	.word	0x40011000
 800265c:	40023800 	.word	0x40023800
 8002660:	40004400 	.word	0x40004400
 8002664:	40004800 	.word	0x40004800
 8002668:	40004c00 	.word	0x40004c00
 800266c:	40005000 	.word	0x40005000
 8002670:	40011400 	.word	0x40011400
 8002674:	40007800 	.word	0x40007800
 8002678:	2310      	movs	r3, #16
 800267a:	77fb      	strb	r3, [r7, #31]
 800267c:	e02c      	b.n	80026d8 <UART_SetConfig+0x348>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a72      	ldr	r2, [pc, #456]	@ (800284c <UART_SetConfig+0x4bc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d125      	bne.n	80026d4 <UART_SetConfig+0x344>
 8002688:	4b71      	ldr	r3, [pc, #452]	@ (8002850 <UART_SetConfig+0x4c0>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002692:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002696:	d017      	beq.n	80026c8 <UART_SetConfig+0x338>
 8002698:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800269c:	d817      	bhi.n	80026ce <UART_SetConfig+0x33e>
 800269e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026a2:	d00b      	beq.n	80026bc <UART_SetConfig+0x32c>
 80026a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026a8:	d811      	bhi.n	80026ce <UART_SetConfig+0x33e>
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <UART_SetConfig+0x326>
 80026ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026b2:	d006      	beq.n	80026c2 <UART_SetConfig+0x332>
 80026b4:	e00b      	b.n	80026ce <UART_SetConfig+0x33e>
 80026b6:	2300      	movs	r3, #0
 80026b8:	77fb      	strb	r3, [r7, #31]
 80026ba:	e00d      	b.n	80026d8 <UART_SetConfig+0x348>
 80026bc:	2302      	movs	r3, #2
 80026be:	77fb      	strb	r3, [r7, #31]
 80026c0:	e00a      	b.n	80026d8 <UART_SetConfig+0x348>
 80026c2:	2304      	movs	r3, #4
 80026c4:	77fb      	strb	r3, [r7, #31]
 80026c6:	e007      	b.n	80026d8 <UART_SetConfig+0x348>
 80026c8:	2308      	movs	r3, #8
 80026ca:	77fb      	strb	r3, [r7, #31]
 80026cc:	e004      	b.n	80026d8 <UART_SetConfig+0x348>
 80026ce:	2310      	movs	r3, #16
 80026d0:	77fb      	strb	r3, [r7, #31]
 80026d2:	e001      	b.n	80026d8 <UART_SetConfig+0x348>
 80026d4:	2310      	movs	r3, #16
 80026d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026e0:	d15b      	bne.n	800279a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80026e2:	7ffb      	ldrb	r3, [r7, #31]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d828      	bhi.n	800273a <UART_SetConfig+0x3aa>
 80026e8:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <UART_SetConfig+0x360>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	08002715 	.word	0x08002715
 80026f4:	0800271d 	.word	0x0800271d
 80026f8:	08002725 	.word	0x08002725
 80026fc:	0800273b 	.word	0x0800273b
 8002700:	0800272b 	.word	0x0800272b
 8002704:	0800273b 	.word	0x0800273b
 8002708:	0800273b 	.word	0x0800273b
 800270c:	0800273b 	.word	0x0800273b
 8002710:	08002733 	.word	0x08002733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002714:	f7ff f8d6 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 8002718:	61b8      	str	r0, [r7, #24]
        break;
 800271a:	e013      	b.n	8002744 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800271c:	f7ff f8e6 	bl	80018ec <HAL_RCC_GetPCLK2Freq>
 8002720:	61b8      	str	r0, [r7, #24]
        break;
 8002722:	e00f      	b.n	8002744 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002724:	4b4b      	ldr	r3, [pc, #300]	@ (8002854 <UART_SetConfig+0x4c4>)
 8002726:	61bb      	str	r3, [r7, #24]
        break;
 8002728:	e00c      	b.n	8002744 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800272a:	f7fe fff9 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 800272e:	61b8      	str	r0, [r7, #24]
        break;
 8002730:	e008      	b.n	8002744 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002736:	61bb      	str	r3, [r7, #24]
        break;
 8002738:	e004      	b.n	8002744 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	77bb      	strb	r3, [r7, #30]
        break;
 8002742:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d074      	beq.n	8002834 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	005a      	lsls	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	441a      	add	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b0f      	cmp	r3, #15
 8002764:	d916      	bls.n	8002794 <UART_SetConfig+0x404>
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276c:	d212      	bcs.n	8002794 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	b29b      	uxth	r3, r3
 8002772:	f023 030f 	bic.w	r3, r3, #15
 8002776:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	085b      	lsrs	r3, r3, #1
 800277c:	b29b      	uxth	r3, r3
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	b29a      	uxth	r2, r3
 8002784:	89fb      	ldrh	r3, [r7, #14]
 8002786:	4313      	orrs	r3, r2
 8002788:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	89fa      	ldrh	r2, [r7, #14]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	e04f      	b.n	8002834 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	77bb      	strb	r3, [r7, #30]
 8002798:	e04c      	b.n	8002834 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800279a:	7ffb      	ldrb	r3, [r7, #31]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d828      	bhi.n	80027f2 <UART_SetConfig+0x462>
 80027a0:	a201      	add	r2, pc, #4	@ (adr r2, 80027a8 <UART_SetConfig+0x418>)
 80027a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a6:	bf00      	nop
 80027a8:	080027cd 	.word	0x080027cd
 80027ac:	080027d5 	.word	0x080027d5
 80027b0:	080027dd 	.word	0x080027dd
 80027b4:	080027f3 	.word	0x080027f3
 80027b8:	080027e3 	.word	0x080027e3
 80027bc:	080027f3 	.word	0x080027f3
 80027c0:	080027f3 	.word	0x080027f3
 80027c4:	080027f3 	.word	0x080027f3
 80027c8:	080027eb 	.word	0x080027eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027cc:	f7ff f87a 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 80027d0:	61b8      	str	r0, [r7, #24]
        break;
 80027d2:	e013      	b.n	80027fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027d4:	f7ff f88a 	bl	80018ec <HAL_RCC_GetPCLK2Freq>
 80027d8:	61b8      	str	r0, [r7, #24]
        break;
 80027da:	e00f      	b.n	80027fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002854 <UART_SetConfig+0x4c4>)
 80027de:	61bb      	str	r3, [r7, #24]
        break;
 80027e0:	e00c      	b.n	80027fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027e2:	f7fe ff9d 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 80027e6:	61b8      	str	r0, [r7, #24]
        break;
 80027e8:	e008      	b.n	80027fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027ee:	61bb      	str	r3, [r7, #24]
        break;
 80027f0:	e004      	b.n	80027fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	77bb      	strb	r3, [r7, #30]
        break;
 80027fa:	bf00      	nop
    }

    if (pclk != 0U)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d018      	beq.n	8002834 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	085a      	lsrs	r2, r3, #1
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	441a      	add	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b0f      	cmp	r3, #15
 800281a:	d909      	bls.n	8002830 <UART_SetConfig+0x4a0>
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002822:	d205      	bcs.n	8002830 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	e001      	b.n	8002834 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002840:	7fbb      	ldrb	r3, [r7, #30]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40007c00 	.word	0x40007c00
 8002850:	40023800 	.word	0x40023800
 8002854:	00f42400 	.word	0x00f42400

08002858 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01a      	beq.n	800296e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002956:	d10a      	bne.n	800296e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	605a      	str	r2, [r3, #4]
  }
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b098      	sub	sp, #96	@ 0x60
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029ac:	f7fe f808 	bl	80009c0 <HAL_GetTick>
 80029b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d12e      	bne.n	8002a1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029c8:	2200      	movs	r2, #0
 80029ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f88c 	bl	8002aec <UART_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d021      	beq.n	8002a1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e2:	e853 3f00 	ldrex	r3, [r3]
 80029e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80029e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80029fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a00:	e841 2300 	strex	r3, r2, [r1]
 8002a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e6      	bne.n	80029da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e062      	b.n	8002ae4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d149      	bne.n	8002ac0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a34:	2200      	movs	r2, #0
 8002a36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f856 	bl	8002aec <UART_WaitOnFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03c      	beq.n	8002ac0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	e853 3f00 	ldrex	r3, [r3]
 8002a52:	623b      	str	r3, [r7, #32]
   return(result);
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a6c:	e841 2300 	strex	r3, r2, [r1]
 8002a70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1e6      	bne.n	8002a46 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	e853 3f00 	ldrex	r3, [r3]
 8002a86:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3308      	adds	r3, #8
 8002a96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a98:	61fa      	str	r2, [r7, #28]
 8002a9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9c:	69b9      	ldr	r1, [r7, #24]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	e841 2300 	strex	r3, r2, [r1]
 8002aa4:	617b      	str	r3, [r7, #20]
   return(result);
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e5      	bne.n	8002a78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e011      	b.n	8002ae4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3758      	adds	r7, #88	@ 0x58
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002afc:	e04f      	b.n	8002b9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d04b      	beq.n	8002b9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7fd ff5b 	bl	80009c0 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e04e      	b.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d037      	beq.n	8002b9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b80      	cmp	r3, #128	@ 0x80
 8002b32:	d034      	beq.n	8002b9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b40      	cmp	r3, #64	@ 0x40
 8002b38:	d031      	beq.n	8002b9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d110      	bne.n	8002b6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f838 	bl	8002bc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e029      	b.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b78:	d111      	bne.n	8002b9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f81e 	bl	8002bc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e00f      	b.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69da      	ldr	r2, [r3, #28]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d0a0      	beq.n	8002afe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b095      	sub	sp, #84	@ 0x54
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd6:	e853 3f00 	ldrex	r3, [r3]
 8002bda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bec:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bf4:	e841 2300 	strex	r3, r2, [r1]
 8002bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e6      	bne.n	8002bce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3308      	adds	r3, #8
 8002c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	e853 3f00 	ldrex	r3, [r3]
 8002c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c28:	e841 2300 	strex	r3, r2, [r1]
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e5      	bne.n	8002c00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d118      	bne.n	8002c6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	e853 3f00 	ldrex	r3, [r3]
 8002c48:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f023 0310 	bic.w	r3, r3, #16
 8002c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5e:	6979      	ldr	r1, [r7, #20]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	e841 2300 	strex	r3, r2, [r1]
 8002c66:	613b      	str	r3, [r7, #16]
   return(result);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1e6      	bne.n	8002c3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002c82:	bf00      	nop
 8002c84:	3754      	adds	r7, #84	@ 0x54
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <memset>:
 8002c8e:	4402      	add	r2, r0
 8002c90:	4603      	mov	r3, r0
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d100      	bne.n	8002c98 <memset+0xa>
 8002c96:	4770      	bx	lr
 8002c98:	f803 1b01 	strb.w	r1, [r3], #1
 8002c9c:	e7f9      	b.n	8002c92 <memset+0x4>
	...

08002ca0 <__libc_init_array>:
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	4d0d      	ldr	r5, [pc, #52]	@ (8002cd8 <__libc_init_array+0x38>)
 8002ca4:	4c0d      	ldr	r4, [pc, #52]	@ (8002cdc <__libc_init_array+0x3c>)
 8002ca6:	1b64      	subs	r4, r4, r5
 8002ca8:	10a4      	asrs	r4, r4, #2
 8002caa:	2600      	movs	r6, #0
 8002cac:	42a6      	cmp	r6, r4
 8002cae:	d109      	bne.n	8002cc4 <__libc_init_array+0x24>
 8002cb0:	4d0b      	ldr	r5, [pc, #44]	@ (8002ce0 <__libc_init_array+0x40>)
 8002cb2:	4c0c      	ldr	r4, [pc, #48]	@ (8002ce4 <__libc_init_array+0x44>)
 8002cb4:	f000 f818 	bl	8002ce8 <_init>
 8002cb8:	1b64      	subs	r4, r4, r5
 8002cba:	10a4      	asrs	r4, r4, #2
 8002cbc:	2600      	movs	r6, #0
 8002cbe:	42a6      	cmp	r6, r4
 8002cc0:	d105      	bne.n	8002cce <__libc_init_array+0x2e>
 8002cc2:	bd70      	pop	{r4, r5, r6, pc}
 8002cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc8:	4798      	blx	r3
 8002cca:	3601      	adds	r6, #1
 8002ccc:	e7ee      	b.n	8002cac <__libc_init_array+0xc>
 8002cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd2:	4798      	blx	r3
 8002cd4:	3601      	adds	r6, #1
 8002cd6:	e7f2      	b.n	8002cbe <__libc_init_array+0x1e>
 8002cd8:	08002d20 	.word	0x08002d20
 8002cdc:	08002d20 	.word	0x08002d20
 8002ce0:	08002d20 	.word	0x08002d20
 8002ce4:	08002d24 	.word	0x08002d24

08002ce8 <_init>:
 8002ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cea:	bf00      	nop
 8002cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cee:	bc08      	pop	{r3}
 8002cf0:	469e      	mov	lr, r3
 8002cf2:	4770      	bx	lr

08002cf4 <_fini>:
 8002cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf6:	bf00      	nop
 8002cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfa:	bc08      	pop	{r3}
 8002cfc:	469e      	mov	lr, r3
 8002cfe:	4770      	bx	lr
