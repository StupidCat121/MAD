/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "rng.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ILI9341_Touchscreen.h"
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"

#include "snow_tiger.h"
#include "stdio.h"
#include "string.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define LIGHT_RED 0b1111110011010011
#define LIGHT_GREEN 0b1001111111110011
#define LIGHT_BLUE 0b1001110011011111

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
uint16_t coords[2];
uint16_t tx = 0;
uint16_t ty = 0;

char str[50];
char debug[50];

uint8_t cmdBuffer[3];
uint8_t dataBuffer[8];
uint16_t mixedColor = 0x0000;

float h = 30.0, t = 40.0;
uint8_t step = 0;
volatile uint8_t touchFlag = 0;


float Red_L = 0;
float Green_L = 0;
float Blue_L = 0;

uint8_t redValue = 0;
uint8_t greenValue = 0;
uint8_t blueValue = 0;

char T_Buffer[8];
char H_Buffer[8];

uint8_t screen = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MPU_Config(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
uint16_t CRC16_2(uint8_t *, uint8_t);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t CRC16_2(uint8_t *ptr, uint8_t length){

	uint16_t crc = 0xFFFF;
	uint8_t  s   = 0x00;

	while(length--){
		crc ^= *ptr++;
		for(s = 0; s < 8; s++){
			if((crc & 0x01) != 0){
				crc >>= 1;
				crc ^= 0xA001;
			} else crc >>= 1;
		}
	}
	return crc;
}

uint8_t IsCircleTouched(uint16_t tx, uint16_t ty, uint16_t cx, uint16_t cy, uint16_t r) {
    int dx = tx - cx;
    int dy = ty - cy;
    return (dx*dx + dy*dy <= r*r);  // inside circle?
}

void mixColor() {
  redValue = 0b11111;
  greenValue = 0b111111;
  blueValue = 0b11111;

  redValue = (uint8_t)(redValue * Red_L);
  greenValue = (uint8_t)(greenValue * Green_L);
  blueValue = (uint8_t)(blueValue * Blue_L);

  mixedColor = (uint16_t)(blueValue);
  mixedColor |= (greenValue << 5);
  mixedColor |= (redValue << 11);
}

void initializeScreen0() {
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
	ILI9341_Fill_Screen(WHITE);

	sprintf(T_Buffer, "%4.1f C", t);
	ILI9341_Draw_Text(T_Buffer, 60, 40, BLACK, 2, WHITE);

	sprintf(H_Buffer, "%4.1f %%RH", h);
	ILI9341_Draw_Text(H_Buffer, 170, 40, BLACK, 2, WHITE);
//		HAL_Delay(2000);
//		ILI9341_Fill_Screen(WHITE);


	ILI9341_Draw_Rectangle(70, 90, 170, 20, LIGHT_RED);
	ILI9341_Draw_Rectangle(70, 90,  (uint16_t)(170 * Red_L), 20, RED);

	ILI9341_Draw_Rectangle(70, 140, 170, 20, LIGHT_GREEN);
	ILI9341_Draw_Rectangle(70, 140, (uint16_t)(170 * Green_L), 20, GREEN);

	ILI9341_Draw_Rectangle(70, 190, 170, 20, LIGHT_BLUE);
	ILI9341_Draw_Rectangle(70, 190, (uint16_t)(170 * Blue_L), 20, BLUE);

	ILI9341_Draw_Filled_Circle(50, 100, 30/2, RED);
	ILI9341_Draw_Filled_Circle(50, 150, 30/2, GREEN);
	ILI9341_Draw_Filled_Circle(50, 200, 30/2, BLUE);

}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_RNG_Init();
  MX_SPI5_Init();
  MX_TIM1_Init();
  MX_USART3_UART_Init();
  MX_I2C1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
	
  ILI9341_Init();//initial driver setup to drive ili9341
  initializeScreen0();


  cmdBuffer[0] = 0x03;
  cmdBuffer[1] = 0x00;
  cmdBuffer[2] = 0x04;




  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(debug, "Screen = %d\n", screen);
	  HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);

	  if (screen == 0) {
		  sprintf(str, "Temperature = %4.1f\tHumidity = %4.1f\n\r", t, h);
		  	  while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET){}
		  	  HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 200);

		  	  HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);

		  	  HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);

		  	  HAL_Delay(1);

		  	  HAL_I2C_Master_Receive(&hi2c1, 0x5c<<1, dataBuffer, 8, 200);

		  	  uint8_t Rcrc = dataBuffer[7] << 8;
		  	  Rcrc += dataBuffer[6];

		  	  if (Rcrc == CRC16_2(dataBuffer, 6)) {
		  		  uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
		  		  t = temperature / 10.0;
		  		  t = (((dataBuffer[4] & 0x80) >> 7) == 1) ? (t * (-1)) : t;

		  		  uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
		  		  h = humidity / 10.0;
		  	  }

		  		sprintf(T_Buffer, "%4.1f C", t);
		  		ILI9341_Draw_Text(T_Buffer, 60, 40, BLACK, 2, WHITE);

		  		sprintf(H_Buffer, "%4.1f %%RH", h);
		  		ILI9341_Draw_Text(H_Buffer, 170, 40, BLACK, 2, WHITE);
		  //		HAL_Delay(2000);
		  //		ILI9341_Fill_Screen(WHITE);


		  		ILI9341_Draw_Rectangle(70, 90, 170, 20, LIGHT_RED);
		  		ILI9341_Draw_Rectangle(70, 90,  (uint16_t)(170 * Red_L), 20, RED);

		  		ILI9341_Draw_Rectangle(70, 140, 170, 20, LIGHT_GREEN);
		  		ILI9341_Draw_Rectangle(70, 140, (uint16_t)(170 * Green_L), 20, GREEN);

		  		ILI9341_Draw_Rectangle(70, 190, 170, 20, LIGHT_BLUE);
		  		ILI9341_Draw_Rectangle(70, 190, (uint16_t)(170 * Blue_L), 20, BLUE);

		  		ILI9341_Draw_Filled_Circle(150, 50, 30/2, mixedColor);
		  		sprintf(debug, "Mixed Color = %d\n", mixedColor);
		  		HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);


		  		if (TP_Touchpad_Pressed()) {

		  			if (TP_Read_Coordinates(coords) == TOUCHPAD_DATA_OK) {
		  				tx = coords[0];
		  				ty = coords[1];

		  				sprintf(debug, "X = %d | Y = %d", coords[0], coords[1]);
		  				HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);

		  				if ((tx >= 85 && tx <= 115) && (ty >= 265 && ty <= 295)) {
		  					Red_L += 0.1;
		  			  		if (Red_L > 1.01) {
		  			  			Red_L = 0;
		  			  		}

		  					sprintf(debug, "Red_L = %.2f\r\n", Red_L);
		  					HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);
		  				}

		  			    if ((tx >= 135 && tx <= 165) && (ty >= 265 && ty <= 295)) {
		  					Green_L += 0.1;
		  			  		if (Green_L > 1.01) {
		  			  			Green_L = 0;
		  			  		}

		  					sprintf(debug, "Green_L = %.2f\r\n", Green_L);
		  					HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);
		  				}

		  				if ((tx >= 185 && tx <= 215) && (ty >= 265 && ty <= 295)) {
		  					Blue_L += 0.1;
		  			  		if (Blue_L > 1.01) {
		  			  			Blue_L = 0;
		  			  		}

		  					sprintf(debug, "Blue_L = %.2f\r\n", Blue_L);
		  					HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);
		  				}

		  				if ((tx >= 30 && tx <= 60) && (ty >= 155 && ty <= 185)) {
		  					screen = 1;
		  					continue;
		  				}

		  				mixColor();
		  			}
		  		}
	  }
	  else if (screen == 1) {
	      ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
	  	  ILI9341_Fill_Screen(WHITE);
//	      ILI9341_Draw_Image(CHILL_GUY, SCREEN_HORIZONTAL_1);

	      char group[] = "Group #28";
	      ILI9341_Draw_Text(group, 144, 64 + (32 * 0), mixedColor, 2, WHITE);

	      char name[] = "Jiraphat";
	      ILI9341_Draw_Text(name, 144, 64 + (32 * 1), mixedColor, 2, WHITE);

	      char surname[] = "Sabutr";
	      ILI9341_Draw_Text(surname, 144, 64 + (32 * 2), mixedColor, 2, WHITE);

	      char id[] = "66010121";
	      ILI9341_Draw_Text(id, 144, 64 + (32 * 3), mixedColor, 2, WHITE);

	      HAL_TIM_Base_Start_IT(&htim2);

	      while (screen == 1) {
	              if (TP_Read_Coordinates(coords) == TOUCHPAD_DATA_OK) {
	                tx = coords[0];
	                ty = coords[1];

	                // ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
	                // char counter_buff[30];
	                // sprintf(counter_buff, "POS X: %.3d", posX);
	                // ILI9341_Draw_Text(counter_buff, 10, 0, BLACK, 2, WHITE);
	                // sprintf(counter_buff, "POS Y: %.3d", posY);
	                // ILI9341_Draw_Text(counter_buff, 10, 16, BLACK, 2, WHITE);
	                // ILI9341_Set_Rotation(SCREEN_VERTICAL_1);

	                if ((tx >= 28 && tx <= 226) && (ty >= 16 && ty <= 134)) {
	                  screen = 0;
	                  initializeScreen0();
	                  break;
	                }
	              }
	            }
	            // screen = 0;
	            // initializeScreen0();
	  	  }
	  }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
//{
//    if (GPIO_Pin == T_IRQ_Pin) {
//
//    	uint16_t coords[2];
//    	if (TP_Read_Coordinates(coords) == TOUCHPAD_DATA_OK) {
//    		uint16_t tx = coords[0];
//    		uint16_t ty = coords[1];
//
//    		if (IsCircleTouched(tx, ty, 50, 100, 15)) {
//    			if (Red_L >= 100) {
//    				Red_L = 0;
//    			} else {
//    				Red_L += 10;
//    			}
//    		}
//            else if (IsCircleTouched(tx, ty, 50, 150, 15)) {
//            	if (Green_L >= 100) {
//            	    Green_L = 0;
//            	} else {
//            	    Green_L += 10;
//            	}
//    		}
//    	    else if (IsCircleTouched(tx, ty, 50, 200, 15)) {
//    	    	if (Blue_L >= 100) {
//    	    	    Blue_L = 0;
//    	    	} else {
//    	    	    Blue_L += 10;
//    	    	}
//    	    }
//    	}
//    }
//}

/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
