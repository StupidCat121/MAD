
Lab08_sp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b14c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000754  0800b350  0800b350  0000c350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baa4  0800baa4  0000d1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800baa4  0800baa4  0000caa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baac  0800baac  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baac  0800baac  0000caac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bab0  0800bab0  0000cab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800bab4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200001e0  0800bc94  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800bc94  0000d5dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182e6  00000000  00000000  0000d20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038db  00000000  00000000  000254f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00028dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001042  00000000  00000000  0002a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aee6  00000000  00000000  0002b2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c86b  00000000  00000000  000561e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010195f  00000000  00000000  00072a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001743aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069f8  00000000  00000000  001743f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0017ade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b334 	.word	0x0800b334

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800b334 	.word	0x0800b334

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9c0 	b.w	8000a00 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	468e      	mov	lr, r1
 8000710:	4604      	mov	r4, r0
 8000712:	4688      	mov	r8, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d962      	bls.n	80007e4 <__udivmoddi4+0xdc>
 800071e:	fab2 f682 	clz	r6, r2
 8000722:	b14e      	cbz	r6, 8000738 <__udivmoddi4+0x30>
 8000724:	f1c6 0320 	rsb	r3, r6, #32
 8000728:	fa01 f806 	lsl.w	r8, r1, r6
 800072c:	fa20 f303 	lsr.w	r3, r0, r3
 8000730:	40b7      	lsls	r7, r6
 8000732:	ea43 0808 	orr.w	r8, r3, r8
 8000736:	40b4      	lsls	r4, r6
 8000738:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800073c:	fa1f fc87 	uxth.w	ip, r7
 8000740:	fbb8 f1fe 	udiv	r1, r8, lr
 8000744:	0c23      	lsrs	r3, r4, #16
 8000746:	fb0e 8811 	mls	r8, lr, r1, r8
 800074a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800074e:	fb01 f20c 	mul.w	r2, r1, ip
 8000752:	429a      	cmp	r2, r3
 8000754:	d909      	bls.n	800076a <__udivmoddi4+0x62>
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	f101 30ff 	add.w	r0, r1, #4294967295
 800075c:	f080 80ea 	bcs.w	8000934 <__udivmoddi4+0x22c>
 8000760:	429a      	cmp	r2, r3
 8000762:	f240 80e7 	bls.w	8000934 <__udivmoddi4+0x22c>
 8000766:	3902      	subs	r1, #2
 8000768:	443b      	add	r3, r7
 800076a:	1a9a      	subs	r2, r3, r2
 800076c:	b2a3      	uxth	r3, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800077a:	fb00 fc0c 	mul.w	ip, r0, ip
 800077e:	459c      	cmp	ip, r3
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x8e>
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	f100 32ff 	add.w	r2, r0, #4294967295
 8000788:	f080 80d6 	bcs.w	8000938 <__udivmoddi4+0x230>
 800078c:	459c      	cmp	ip, r3
 800078e:	f240 80d3 	bls.w	8000938 <__udivmoddi4+0x230>
 8000792:	443b      	add	r3, r7
 8000794:	3802      	subs	r0, #2
 8000796:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079a:	eba3 030c 	sub.w	r3, r3, ip
 800079e:	2100      	movs	r1, #0
 80007a0:	b11d      	cbz	r5, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40f3      	lsrs	r3, r6
 80007a4:	2200      	movs	r2, #0
 80007a6:	e9c5 3200 	strd	r3, r2, [r5]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d905      	bls.n	80007be <__udivmoddi4+0xb6>
 80007b2:	b10d      	cbz	r5, 80007b8 <__udivmoddi4+0xb0>
 80007b4:	e9c5 0100 	strd	r0, r1, [r5]
 80007b8:	2100      	movs	r1, #0
 80007ba:	4608      	mov	r0, r1
 80007bc:	e7f5      	b.n	80007aa <__udivmoddi4+0xa2>
 80007be:	fab3 f183 	clz	r1, r3
 80007c2:	2900      	cmp	r1, #0
 80007c4:	d146      	bne.n	8000854 <__udivmoddi4+0x14c>
 80007c6:	4573      	cmp	r3, lr
 80007c8:	d302      	bcc.n	80007d0 <__udivmoddi4+0xc8>
 80007ca:	4282      	cmp	r2, r0
 80007cc:	f200 8105 	bhi.w	80009da <__udivmoddi4+0x2d2>
 80007d0:	1a84      	subs	r4, r0, r2
 80007d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007d6:	2001      	movs	r0, #1
 80007d8:	4690      	mov	r8, r2
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d0e5      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007de:	e9c5 4800 	strd	r4, r8, [r5]
 80007e2:	e7e2      	b.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f000 8090 	beq.w	800090a <__udivmoddi4+0x202>
 80007ea:	fab2 f682 	clz	r6, r2
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	f040 80a4 	bne.w	800093c <__udivmoddi4+0x234>
 80007f4:	1a8a      	subs	r2, r1, r2
 80007f6:	0c03      	lsrs	r3, r0, #16
 80007f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fc:	b280      	uxth	r0, r0
 80007fe:	b2bc      	uxth	r4, r7
 8000800:	2101      	movs	r1, #1
 8000802:	fbb2 fcfe 	udiv	ip, r2, lr
 8000806:	fb0e 221c 	mls	r2, lr, ip, r2
 800080a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800080e:	fb04 f20c 	mul.w	r2, r4, ip
 8000812:	429a      	cmp	r2, r3
 8000814:	d907      	bls.n	8000826 <__udivmoddi4+0x11e>
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	f10c 38ff 	add.w	r8, ip, #4294967295
 800081c:	d202      	bcs.n	8000824 <__udivmoddi4+0x11c>
 800081e:	429a      	cmp	r2, r3
 8000820:	f200 80e0 	bhi.w	80009e4 <__udivmoddi4+0x2dc>
 8000824:	46c4      	mov	ip, r8
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	fbb3 f2fe 	udiv	r2, r3, lr
 800082c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000830:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000834:	fb02 f404 	mul.w	r4, r2, r4
 8000838:	429c      	cmp	r4, r3
 800083a:	d907      	bls.n	800084c <__udivmoddi4+0x144>
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x142>
 8000844:	429c      	cmp	r4, r3
 8000846:	f200 80ca 	bhi.w	80009de <__udivmoddi4+0x2d6>
 800084a:	4602      	mov	r2, r0
 800084c:	1b1b      	subs	r3, r3, r4
 800084e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000852:	e7a5      	b.n	80007a0 <__udivmoddi4+0x98>
 8000854:	f1c1 0620 	rsb	r6, r1, #32
 8000858:	408b      	lsls	r3, r1
 800085a:	fa22 f706 	lsr.w	r7, r2, r6
 800085e:	431f      	orrs	r7, r3
 8000860:	fa0e f401 	lsl.w	r4, lr, r1
 8000864:	fa20 f306 	lsr.w	r3, r0, r6
 8000868:	fa2e fe06 	lsr.w	lr, lr, r6
 800086c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000870:	4323      	orrs	r3, r4
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	fa1f fc87 	uxth.w	ip, r7
 800087a:	fbbe f0f9 	udiv	r0, lr, r9
 800087e:	0c1c      	lsrs	r4, r3, #16
 8000880:	fb09 ee10 	mls	lr, r9, r0, lr
 8000884:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000888:	fb00 fe0c 	mul.w	lr, r0, ip
 800088c:	45a6      	cmp	lr, r4
 800088e:	fa02 f201 	lsl.w	r2, r2, r1
 8000892:	d909      	bls.n	80008a8 <__udivmoddi4+0x1a0>
 8000894:	193c      	adds	r4, r7, r4
 8000896:	f100 3aff 	add.w	sl, r0, #4294967295
 800089a:	f080 809c 	bcs.w	80009d6 <__udivmoddi4+0x2ce>
 800089e:	45a6      	cmp	lr, r4
 80008a0:	f240 8099 	bls.w	80009d6 <__udivmoddi4+0x2ce>
 80008a4:	3802      	subs	r0, #2
 80008a6:	443c      	add	r4, r7
 80008a8:	eba4 040e 	sub.w	r4, r4, lr
 80008ac:	fa1f fe83 	uxth.w	lr, r3
 80008b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b4:	fb09 4413 	mls	r4, r9, r3, r4
 80008b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c0:	45a4      	cmp	ip, r4
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x1ce>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008ca:	f080 8082 	bcs.w	80009d2 <__udivmoddi4+0x2ca>
 80008ce:	45a4      	cmp	ip, r4
 80008d0:	d97f      	bls.n	80009d2 <__udivmoddi4+0x2ca>
 80008d2:	3b02      	subs	r3, #2
 80008d4:	443c      	add	r4, r7
 80008d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008da:	eba4 040c 	sub.w	r4, r4, ip
 80008de:	fba0 ec02 	umull	lr, ip, r0, r2
 80008e2:	4564      	cmp	r4, ip
 80008e4:	4673      	mov	r3, lr
 80008e6:	46e1      	mov	r9, ip
 80008e8:	d362      	bcc.n	80009b0 <__udivmoddi4+0x2a8>
 80008ea:	d05f      	beq.n	80009ac <__udivmoddi4+0x2a4>
 80008ec:	b15d      	cbz	r5, 8000906 <__udivmoddi4+0x1fe>
 80008ee:	ebb8 0203 	subs.w	r2, r8, r3
 80008f2:	eb64 0409 	sbc.w	r4, r4, r9
 80008f6:	fa04 f606 	lsl.w	r6, r4, r6
 80008fa:	fa22 f301 	lsr.w	r3, r2, r1
 80008fe:	431e      	orrs	r6, r3
 8000900:	40cc      	lsrs	r4, r1
 8000902:	e9c5 6400 	strd	r6, r4, [r5]
 8000906:	2100      	movs	r1, #0
 8000908:	e74f      	b.n	80007aa <__udivmoddi4+0xa2>
 800090a:	fbb1 fcf2 	udiv	ip, r1, r2
 800090e:	0c01      	lsrs	r1, r0, #16
 8000910:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000914:	b280      	uxth	r0, r0
 8000916:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800091a:	463b      	mov	r3, r7
 800091c:	4638      	mov	r0, r7
 800091e:	463c      	mov	r4, r7
 8000920:	46b8      	mov	r8, r7
 8000922:	46be      	mov	lr, r7
 8000924:	2620      	movs	r6, #32
 8000926:	fbb1 f1f7 	udiv	r1, r1, r7
 800092a:	eba2 0208 	sub.w	r2, r2, r8
 800092e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000932:	e766      	b.n	8000802 <__udivmoddi4+0xfa>
 8000934:	4601      	mov	r1, r0
 8000936:	e718      	b.n	800076a <__udivmoddi4+0x62>
 8000938:	4610      	mov	r0, r2
 800093a:	e72c      	b.n	8000796 <__udivmoddi4+0x8e>
 800093c:	f1c6 0220 	rsb	r2, r6, #32
 8000940:	fa2e f302 	lsr.w	r3, lr, r2
 8000944:	40b7      	lsls	r7, r6
 8000946:	40b1      	lsls	r1, r6
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000950:	430a      	orrs	r2, r1
 8000952:	fbb3 f8fe 	udiv	r8, r3, lr
 8000956:	b2bc      	uxth	r4, r7
 8000958:	fb0e 3318 	mls	r3, lr, r8, r3
 800095c:	0c11      	lsrs	r1, r2, #16
 800095e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000962:	fb08 f904 	mul.w	r9, r8, r4
 8000966:	40b0      	lsls	r0, r6
 8000968:	4589      	cmp	r9, r1
 800096a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800096e:	b280      	uxth	r0, r0
 8000970:	d93e      	bls.n	80009f0 <__udivmoddi4+0x2e8>
 8000972:	1879      	adds	r1, r7, r1
 8000974:	f108 3cff 	add.w	ip, r8, #4294967295
 8000978:	d201      	bcs.n	800097e <__udivmoddi4+0x276>
 800097a:	4589      	cmp	r9, r1
 800097c:	d81f      	bhi.n	80009be <__udivmoddi4+0x2b6>
 800097e:	eba1 0109 	sub.w	r1, r1, r9
 8000982:	fbb1 f9fe 	udiv	r9, r1, lr
 8000986:	fb09 f804 	mul.w	r8, r9, r4
 800098a:	fb0e 1119 	mls	r1, lr, r9, r1
 800098e:	b292      	uxth	r2, r2
 8000990:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000994:	4542      	cmp	r2, r8
 8000996:	d229      	bcs.n	80009ec <__udivmoddi4+0x2e4>
 8000998:	18ba      	adds	r2, r7, r2
 800099a:	f109 31ff 	add.w	r1, r9, #4294967295
 800099e:	d2c4      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a0:	4542      	cmp	r2, r8
 80009a2:	d2c2      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a4:	f1a9 0102 	sub.w	r1, r9, #2
 80009a8:	443a      	add	r2, r7
 80009aa:	e7be      	b.n	800092a <__udivmoddi4+0x222>
 80009ac:	45f0      	cmp	r8, lr
 80009ae:	d29d      	bcs.n	80008ec <__udivmoddi4+0x1e4>
 80009b0:	ebbe 0302 	subs.w	r3, lr, r2
 80009b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009b8:	3801      	subs	r0, #1
 80009ba:	46e1      	mov	r9, ip
 80009bc:	e796      	b.n	80008ec <__udivmoddi4+0x1e4>
 80009be:	eba7 0909 	sub.w	r9, r7, r9
 80009c2:	4449      	add	r1, r9
 80009c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009cc:	fb09 f804 	mul.w	r8, r9, r4
 80009d0:	e7db      	b.n	800098a <__udivmoddi4+0x282>
 80009d2:	4673      	mov	r3, lr
 80009d4:	e77f      	b.n	80008d6 <__udivmoddi4+0x1ce>
 80009d6:	4650      	mov	r0, sl
 80009d8:	e766      	b.n	80008a8 <__udivmoddi4+0x1a0>
 80009da:	4608      	mov	r0, r1
 80009dc:	e6fd      	b.n	80007da <__udivmoddi4+0xd2>
 80009de:	443b      	add	r3, r7
 80009e0:	3a02      	subs	r2, #2
 80009e2:	e733      	b.n	800084c <__udivmoddi4+0x144>
 80009e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e8:	443b      	add	r3, r7
 80009ea:	e71c      	b.n	8000826 <__udivmoddi4+0x11e>
 80009ec:	4649      	mov	r1, r9
 80009ee:	e79c      	b.n	800092a <__udivmoddi4+0x222>
 80009f0:	eba1 0109 	sub.w	r1, r1, r9
 80009f4:	46c4      	mov	ip, r8
 80009f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fa:	fb09 f804 	mul.w	r8, r9, r4
 80009fe:	e7c4      	b.n	800098a <__udivmoddi4+0x282>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b08b      	sub	sp, #44	@ 0x2c
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	4611      	mov	r1, r2
 8000a10:	461a      	mov	r2, r3
 8000a12:	4623      	mov	r3, r4
 8000a14:	80fb      	strh	r3, [r7, #6]
 8000a16:	4603      	mov	r3, r0
 8000a18:	80bb      	strh	r3, [r7, #4]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	807b      	strh	r3, [r7, #2]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8000a22:	887b      	ldrh	r3, [r7, #2]
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
    int y = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8000a2a:	887b      	ldrh	r3, [r7, #2]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	f1c3 0301 	rsb	r3, r3, #1
 8000a32:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8000a3c:	e061      	b.n	8000b02 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8000a3e:	88fa      	ldrh	r2, [r7, #6]
 8000a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	e018      	b.n	8000a7a <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	b298      	uxth	r0, r3
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	88bb      	ldrh	r3, [r7, #4]
 8000a52:	4413      	add	r3, r2
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	883a      	ldrh	r2, [r7, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f000 fc25 	bl	80012a8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	b298      	uxth	r0, r3
 8000a62:	6a3b      	ldr	r3, [r7, #32]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	88ba      	ldrh	r2, [r7, #4]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	883a      	ldrh	r2, [r7, #0]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f000 fc1a 	bl	80012a8 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	3301      	adds	r3, #1
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	88fa      	ldrh	r2, [r7, #6]
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7e:	4413      	add	r3, r2
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	dde0      	ble.n	8000a48 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000a86:	88fa      	ldrh	r2, [r7, #6]
 8000a88:	6a3b      	ldr	r3, [r7, #32]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	e018      	b.n	8000ac2 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	b298      	uxth	r0, r3
 8000a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	883a      	ldrh	r2, [r7, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f000 fc01 	bl	80012a8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	b298      	uxth	r0, r3
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	88ba      	ldrh	r2, [r7, #4]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	883a      	ldrh	r2, [r7, #0]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f000 fbf6 	bl	80012a8 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	88fa      	ldrh	r2, [r7, #6]
 8000ac4:	6a3b      	ldr	r3, [r7, #32]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	dde0      	ble.n	8000a90 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8000ace:	6a3b      	ldr	r3, [r7, #32]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	4413      	add	r3, r2
 8000ada:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	3302      	adds	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005a      	lsls	r2, r3, #1
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	4413      	add	r3, r2
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	dd09      	ble.n	8000b02 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8000aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af0:	3b01      	subs	r3, #1
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
            radiusError += xChange;
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	4413      	add	r3, r2
 8000afa:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	3302      	adds	r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8000b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	da99      	bge.n	8000a3e <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	372c      	adds	r7, #44	@ 0x2c
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd90      	pop	{r4, r7, pc}

08000b14 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b089      	sub	sp, #36	@ 0x24
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	4608      	mov	r0, r1
 8000b1e:	4611      	mov	r1, r2
 8000b20:	461a      	mov	r2, r3
 8000b22:	4623      	mov	r3, r4
 8000b24:	71fb      	strb	r3, [r7, #7]
 8000b26:	4603      	mov	r3, r0
 8000b28:	71bb      	strb	r3, [r7, #6]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	717b      	strb	r3, [r7, #5]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000b36:	7dfb      	ldrb	r3, [r7, #23]
 8000b38:	2b1f      	cmp	r3, #31
 8000b3a:	d802      	bhi.n	8000b42 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	e002      	b.n	8000b48 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	3b20      	subs	r3, #32
 8000b46:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	753b      	strb	r3, [r7, #20]
 8000b4c:	e012      	b.n	8000b74 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8000b4e:	7dfa      	ldrb	r2, [r7, #23]
 8000b50:	7d38      	ldrb	r0, [r7, #20]
 8000b52:	7d39      	ldrb	r1, [r7, #20]
 8000b54:	4c3b      	ldr	r4, [pc, #236]	@ (8000c44 <ILI9341_Draw_Char+0x130>)
 8000b56:	4613      	mov	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4423      	add	r3, r4
 8000b60:	4403      	add	r3, r0
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	f101 0318 	add.w	r3, r1, #24
 8000b68:	443b      	add	r3, r7
 8000b6a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000b6e:	7d3b      	ldrb	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	753b      	strb	r3, [r7, #20]
 8000b74:	7d3b      	ldrb	r3, [r7, #20]
 8000b76:	2b05      	cmp	r3, #5
 8000b78:	d9e9      	bls.n	8000b4e <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000b7a:	79bb      	ldrb	r3, [r7, #6]
 8000b7c:	b298      	uxth	r0, r3
 8000b7e:	797b      	ldrb	r3, [r7, #5]
 8000b80:	b299      	uxth	r1, r3
 8000b82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b84:	461a      	mov	r2, r3
 8000b86:	0052      	lsls	r2, r2, #1
 8000b88:	4413      	add	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	b29c      	uxth	r4, r3
 8000b94:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	4623      	mov	r3, r4
 8000b9a:	f000 fc5f 	bl	800145c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	757b      	strb	r3, [r7, #21]
 8000ba2:	e047      	b.n	8000c34 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75bb      	strb	r3, [r7, #22]
 8000ba8:	e03e      	b.n	8000c28 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8000baa:	7d7b      	ldrb	r3, [r7, #21]
 8000bac:	3318      	adds	r3, #24
 8000bae:	443b      	add	r3, r7
 8000bb0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	7dbb      	ldrb	r3, [r7, #22]
 8000bb8:	fa42 f303 	asr.w	r3, r2, r3
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d02e      	beq.n	8000c22 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8000bc4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d110      	bne.n	8000bec <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000bca:	79bb      	ldrb	r3, [r7, #6]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	7d7b      	ldrb	r3, [r7, #21]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b298      	uxth	r0, r3
 8000bd6:	797b      	ldrb	r3, [r7, #5]
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	7dbb      	ldrb	r3, [r7, #22]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	4413      	add	r3, r2
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	887a      	ldrh	r2, [r7, #2]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f000 fb5f 	bl	80012a8 <ILI9341_Draw_Pixel>
 8000bea:	e01a      	b.n	8000c22 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	7d7b      	ldrb	r3, [r7, #21]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000bf6:	fb11 f303 	smulbb	r3, r1, r3
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b298      	uxth	r0, r3
 8000c00:	797b      	ldrb	r3, [r7, #5]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	7dbb      	ldrb	r3, [r7, #22]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000c0a:	fb11 f303 	smulbb	r3, r1, r3
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	4413      	add	r3, r2
 8000c12:	b299      	uxth	r1, r3
 8000c14:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000c16:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000c18:	887b      	ldrh	r3, [r7, #2]
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	4623      	mov	r3, r4
 8000c1e:	f000 fc1d 	bl	800145c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000c22:	7dbb      	ldrb	r3, [r7, #22]
 8000c24:	3301      	adds	r3, #1
 8000c26:	75bb      	strb	r3, [r7, #22]
 8000c28:	7dbb      	ldrb	r3, [r7, #22]
 8000c2a:	2b07      	cmp	r3, #7
 8000c2c:	d9bd      	bls.n	8000baa <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000c2e:	7d7b      	ldrb	r3, [r7, #21]
 8000c30:	3301      	adds	r3, #1
 8000c32:	757b      	strb	r3, [r7, #21]
 8000c34:	7d7b      	ldrb	r3, [r7, #21]
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	d9b4      	bls.n	8000ba4 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	371c      	adds	r7, #28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	0800b420 	.word	0x0800b420

08000c48 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	4608      	mov	r0, r1
 8000c52:	4611      	mov	r1, r2
 8000c54:	461a      	mov	r2, r3
 8000c56:	4603      	mov	r3, r0
 8000c58:	70fb      	strb	r3, [r7, #3]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	70bb      	strb	r3, [r7, #2]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000c62:	e017      	b.n	8000c94 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	7818      	ldrb	r0, [r3, #0]
 8000c6c:	883c      	ldrh	r4, [r7, #0]
 8000c6e:	78ba      	ldrb	r2, [r7, #2]
 8000c70:	78f9      	ldrb	r1, [r7, #3]
 8000c72:	8bbb      	ldrh	r3, [r7, #28]
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	8b3b      	ldrh	r3, [r7, #24]
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	4623      	mov	r3, r4
 8000c7c:	f7ff ff4a 	bl	8000b14 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000c80:	8b3b      	ldrh	r3, [r7, #24]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	461a      	mov	r2, r3
 8000c86:	0052      	lsls	r2, r2, #1
 8000c88:	4413      	add	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	78fb      	ldrb	r3, [r7, #3]
 8000c90:	4413      	add	r3, r2
 8000c92:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1e3      	bne.n	8000c64 <ILI9341_Draw_Text+0x1c>
    }
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd90      	pop	{r4, r7, pc}
	...

08000ca8 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8000cac:	f001 fca0 	bl	80025f0 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8000cb0:	f000 fd64 	bl	800177c <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cba:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <ILI9341_SPI_Init+0x1c>)
 8000cbc:	f002 fbc4 	bl	8003448 <HAL_GPIO_WritePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40020800 	.word	0x40020800

08000cc8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000cd2:	1df9      	adds	r1, r7, #7
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4803      	ldr	r0, [pc, #12]	@ (8000ce8 <ILI9341_SPI_Send+0x20>)
 8000cda:	f004 fb98 	bl	800540e <HAL_SPI_Transmit>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000304 	.word	0x20000304

08000cec <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cfc:	480b      	ldr	r0, [pc, #44]	@ (8000d2c <ILI9341_Write_Command+0x40>)
 8000cfe:	f002 fba3 	bl	8003448 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d08:	4808      	ldr	r0, [pc, #32]	@ (8000d2c <ILI9341_Write_Command+0x40>)
 8000d0a:	f002 fb9d 	bl	8003448 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ffd9 	bl	8000cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <ILI9341_Write_Command+0x40>)
 8000d1e:	f002 fb93 	bl	8003448 <HAL_GPIO_WritePin>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40020800 	.word	0x40020800

08000d30 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d40:	480b      	ldr	r0, [pc, #44]	@ (8000d70 <ILI9341_Write_Data+0x40>)
 8000d42:	f002 fb81 	bl	8003448 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d4c:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <ILI9341_Write_Data+0x40>)
 8000d4e:	f002 fb7b 	bl	8003448 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ffb7 	bl	8000cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d60:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <ILI9341_Write_Data+0x40>)
 8000d62:	f002 fb71 	bl	8003448 <HAL_GPIO_WritePin>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40020800 	.word	0x40020800

08000d74 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	4611      	mov	r1, r2
 8000d80:	461a      	mov	r2, r3
 8000d82:	4623      	mov	r3, r4
 8000d84:	80fb      	strh	r3, [r7, #6]
 8000d86:	4603      	mov	r3, r0
 8000d88:	80bb      	strh	r3, [r7, #4]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	807b      	strh	r3, [r7, #2]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000d92:	202a      	movs	r0, #42	@ 0x2a
 8000d94:	f7ff ffaa 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffc5 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ffc0 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000db0:	887b      	ldrh	r3, [r7, #2]
 8000db2:	0a1b      	lsrs	r3, r3, #8
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ffb9 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ffb4 	bl	8000d30 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000dc8:	202b      	movs	r0, #43	@ 0x2b
 8000dca:	f7ff ff8f 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000dce:	88bb      	ldrh	r3, [r7, #4]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ffaa 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000ddc:	88bb      	ldrh	r3, [r7, #4]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ffa5 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000de6:	883b      	ldrh	r3, [r7, #0]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff9e 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000df4:	883b      	ldrh	r3, [r7, #0]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff99 	bl	8000d30 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000dfe:	202c      	movs	r0, #44	@ 0x2c
 8000e00:	f7ff ff74 	bl	8000cec <ILI9341_Write_Command>
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd90      	pop	{r4, r7, pc}

08000e0c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e16:	480b      	ldr	r0, [pc, #44]	@ (8000e44 <ILI9341_Reset+0x38>)
 8000e18:	f002 fb16 	bl	8003448 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000e1c:	20c8      	movs	r0, #200	@ 0xc8
 8000e1e:	f001 ffa1 	bl	8002d64 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e28:	4806      	ldr	r0, [pc, #24]	@ (8000e44 <ILI9341_Reset+0x38>)
 8000e2a:	f002 fb0d 	bl	8003448 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000e2e:	20c8      	movs	r0, #200	@ 0xc8
 8000e30:	f001 ff98 	bl	8002d64 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e3a:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <ILI9341_Reset+0x38>)
 8000e3c:	f002 fb04 	bl	8003448 <HAL_GPIO_WritePin>
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40020800 	.word	0x40020800

08000e48 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000e56:	2036      	movs	r0, #54	@ 0x36
 8000e58:	f7ff ff48 	bl	8000cec <ILI9341_Write_Command>
HAL_Delay(1);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f001 ff81 	bl	8002d64 <HAL_Delay>
	
switch(screen_rotation) 
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d837      	bhi.n	8000ed8 <ILI9341_Set_Rotation+0x90>
 8000e68:	a201      	add	r2, pc, #4	@ (adr r2, 8000e70 <ILI9341_Set_Rotation+0x28>)
 8000e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6e:	bf00      	nop
 8000e70:	08000e81 	.word	0x08000e81
 8000e74:	08000e97 	.word	0x08000e97
 8000e78:	08000ead 	.word	0x08000ead
 8000e7c:	08000ec3 	.word	0x08000ec3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000e80:	2048      	movs	r0, #72	@ 0x48
 8000e82:	f7ff ff55 	bl	8000d30 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <ILI9341_Set_Rotation+0x9c>)
 8000e88:	22f0      	movs	r2, #240	@ 0xf0
 8000e8a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <ILI9341_Set_Rotation+0xa0>)
 8000e8e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000e92:	801a      	strh	r2, [r3, #0]
			break;
 8000e94:	e021      	b.n	8000eda <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000e96:	2028      	movs	r0, #40	@ 0x28
 8000e98:	f7ff ff4a 	bl	8000d30 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <ILI9341_Set_Rotation+0x9c>)
 8000e9e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ea2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <ILI9341_Set_Rotation+0xa0>)
 8000ea6:	22f0      	movs	r2, #240	@ 0xf0
 8000ea8:	801a      	strh	r2, [r3, #0]
			break;
 8000eaa:	e016      	b.n	8000eda <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000eac:	2088      	movs	r0, #136	@ 0x88
 8000eae:	f7ff ff3f 	bl	8000d30 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <ILI9341_Set_Rotation+0x9c>)
 8000eb4:	22f0      	movs	r2, #240	@ 0xf0
 8000eb6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <ILI9341_Set_Rotation+0xa0>)
 8000eba:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ebe:	801a      	strh	r2, [r3, #0]
			break;
 8000ec0:	e00b      	b.n	8000eda <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000ec2:	20e8      	movs	r0, #232	@ 0xe8
 8000ec4:	f7ff ff34 	bl	8000d30 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <ILI9341_Set_Rotation+0x9c>)
 8000eca:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ece:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <ILI9341_Set_Rotation+0xa0>)
 8000ed2:	22f0      	movs	r2, #240	@ 0xf0
 8000ed4:	801a      	strh	r2, [r3, #0]
			break;
 8000ed6:	e000      	b.n	8000eda <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000ed8:	bf00      	nop
	}
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000002 	.word	0x20000002
 8000ee8:	20000000 	.word	0x20000000

08000eec <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ef6:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <ILI9341_Enable+0x14>)
 8000ef8:	f002 faa6 	bl	8003448 <HAL_GPIO_WritePin>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40020800 	.word	0x40020800

08000f04 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000f08:	f7ff fff0 	bl	8000eec <ILI9341_Enable>
ILI9341_SPI_Init();
 8000f0c:	f7ff fecc 	bl	8000ca8 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000f10:	f7ff ff7c 	bl	8000e0c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff fee9 	bl	8000cec <ILI9341_Write_Command>
HAL_Delay(1000);
 8000f1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f1e:	f001 ff21 	bl	8002d64 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000f22:	20cb      	movs	r0, #203	@ 0xcb
 8000f24:	f7ff fee2 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000f28:	2039      	movs	r0, #57	@ 0x39
 8000f2a:	f7ff ff01 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000f2e:	202c      	movs	r0, #44	@ 0x2c
 8000f30:	f7ff fefe 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fefb 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000f3a:	2034      	movs	r0, #52	@ 0x34
 8000f3c:	f7ff fef8 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000f40:	2002      	movs	r0, #2
 8000f42:	f7ff fef5 	bl	8000d30 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000f46:	20cf      	movs	r0, #207	@ 0xcf
 8000f48:	f7ff fed0 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff feef 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000f52:	20c1      	movs	r0, #193	@ 0xc1
 8000f54:	f7ff feec 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000f58:	2030      	movs	r0, #48	@ 0x30
 8000f5a:	f7ff fee9 	bl	8000d30 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000f5e:	20e8      	movs	r0, #232	@ 0xe8
 8000f60:	f7ff fec4 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000f64:	2085      	movs	r0, #133	@ 0x85
 8000f66:	f7ff fee3 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff fee0 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000f70:	2078      	movs	r0, #120	@ 0x78
 8000f72:	f7ff fedd 	bl	8000d30 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000f76:	20ea      	movs	r0, #234	@ 0xea
 8000f78:	f7ff feb8 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fed7 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff fed4 	bl	8000d30 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000f88:	20ed      	movs	r0, #237	@ 0xed
 8000f8a:	f7ff feaf 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000f8e:	2064      	movs	r0, #100	@ 0x64
 8000f90:	f7ff fece 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f7ff fecb 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000f9a:	2012      	movs	r0, #18
 8000f9c:	f7ff fec8 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000fa0:	2081      	movs	r0, #129	@ 0x81
 8000fa2:	f7ff fec5 	bl	8000d30 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000fa6:	20f7      	movs	r0, #247	@ 0xf7
 8000fa8:	f7ff fea0 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000fac:	2020      	movs	r0, #32
 8000fae:	f7ff febf 	bl	8000d30 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000fb2:	20c0      	movs	r0, #192	@ 0xc0
 8000fb4:	f7ff fe9a 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000fb8:	2023      	movs	r0, #35	@ 0x23
 8000fba:	f7ff feb9 	bl	8000d30 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000fbe:	20c1      	movs	r0, #193	@ 0xc1
 8000fc0:	f7ff fe94 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000fc4:	2010      	movs	r0, #16
 8000fc6:	f7ff feb3 	bl	8000d30 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000fca:	20c5      	movs	r0, #197	@ 0xc5
 8000fcc:	f7ff fe8e 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000fd0:	203e      	movs	r0, #62	@ 0x3e
 8000fd2:	f7ff fead 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000fd6:	2028      	movs	r0, #40	@ 0x28
 8000fd8:	f7ff feaa 	bl	8000d30 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000fdc:	20c7      	movs	r0, #199	@ 0xc7
 8000fde:	f7ff fe85 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000fe2:	2086      	movs	r0, #134	@ 0x86
 8000fe4:	f7ff fea4 	bl	8000d30 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000fe8:	2036      	movs	r0, #54	@ 0x36
 8000fea:	f7ff fe7f 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000fee:	2048      	movs	r0, #72	@ 0x48
 8000ff0:	f7ff fe9e 	bl	8000d30 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000ff4:	203a      	movs	r0, #58	@ 0x3a
 8000ff6:	f7ff fe79 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000ffa:	2055      	movs	r0, #85	@ 0x55
 8000ffc:	f7ff fe98 	bl	8000d30 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001000:	20b1      	movs	r0, #177	@ 0xb1
 8001002:	f7ff fe73 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff fe92 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 800100c:	2018      	movs	r0, #24
 800100e:	f7ff fe8f 	bl	8000d30 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001012:	20b6      	movs	r0, #182	@ 0xb6
 8001014:	f7ff fe6a 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001018:	2008      	movs	r0, #8
 800101a:	f7ff fe89 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800101e:	2082      	movs	r0, #130	@ 0x82
 8001020:	f7ff fe86 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001024:	2027      	movs	r0, #39	@ 0x27
 8001026:	f7ff fe83 	bl	8000d30 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800102a:	20f2      	movs	r0, #242	@ 0xf2
 800102c:	f7ff fe5e 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff fe7d 	bl	8000d30 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001036:	2026      	movs	r0, #38	@ 0x26
 8001038:	f7ff fe58 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff fe77 	bl	8000d30 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001042:	20e0      	movs	r0, #224	@ 0xe0
 8001044:	f7ff fe52 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001048:	200f      	movs	r0, #15
 800104a:	f7ff fe71 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800104e:	2031      	movs	r0, #49	@ 0x31
 8001050:	f7ff fe6e 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001054:	202b      	movs	r0, #43	@ 0x2b
 8001056:	f7ff fe6b 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800105a:	200c      	movs	r0, #12
 800105c:	f7ff fe68 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001060:	200e      	movs	r0, #14
 8001062:	f7ff fe65 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001066:	2008      	movs	r0, #8
 8001068:	f7ff fe62 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800106c:	204e      	movs	r0, #78	@ 0x4e
 800106e:	f7ff fe5f 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001072:	20f1      	movs	r0, #241	@ 0xf1
 8001074:	f7ff fe5c 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001078:	2037      	movs	r0, #55	@ 0x37
 800107a:	f7ff fe59 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff fe56 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001084:	2010      	movs	r0, #16
 8001086:	f7ff fe53 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800108a:	2003      	movs	r0, #3
 800108c:	f7ff fe50 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001090:	200e      	movs	r0, #14
 8001092:	f7ff fe4d 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001096:	2009      	movs	r0, #9
 8001098:	f7ff fe4a 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fe47 	bl	8000d30 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80010a2:	20e1      	movs	r0, #225	@ 0xe1
 80010a4:	f7ff fe22 	bl	8000cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff fe41 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80010ae:	200e      	movs	r0, #14
 80010b0:	f7ff fe3e 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80010b4:	2014      	movs	r0, #20
 80010b6:	f7ff fe3b 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f7ff fe38 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80010c0:	2011      	movs	r0, #17
 80010c2:	f7ff fe35 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80010c6:	2007      	movs	r0, #7
 80010c8:	f7ff fe32 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80010cc:	2031      	movs	r0, #49	@ 0x31
 80010ce:	f7ff fe2f 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80010d2:	20c1      	movs	r0, #193	@ 0xc1
 80010d4:	f7ff fe2c 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80010d8:	2048      	movs	r0, #72	@ 0x48
 80010da:	f7ff fe29 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80010de:	2008      	movs	r0, #8
 80010e0:	f7ff fe26 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80010e4:	200f      	movs	r0, #15
 80010e6:	f7ff fe23 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80010ea:	200c      	movs	r0, #12
 80010ec:	f7ff fe20 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80010f0:	2031      	movs	r0, #49	@ 0x31
 80010f2:	f7ff fe1d 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80010f6:	2036      	movs	r0, #54	@ 0x36
 80010f8:	f7ff fe1a 	bl	8000d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80010fc:	200f      	movs	r0, #15
 80010fe:	f7ff fe17 	bl	8000d30 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001102:	2011      	movs	r0, #17
 8001104:	f7ff fdf2 	bl	8000cec <ILI9341_Write_Command>
HAL_Delay(120);
 8001108:	2078      	movs	r0, #120	@ 0x78
 800110a:	f001 fe2b 	bl	8002d64 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800110e:	2029      	movs	r0, #41	@ 0x29
 8001110:	f7ff fdec 	bl	8000cec <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff fe97 	bl	8000e48 <ILI9341_Set_Rotation>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001124:	b08d      	sub	sp, #52	@ 0x34
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	6039      	str	r1, [r7, #0]
 800112c:	80fb      	strh	r3, [r7, #6]
 800112e:	466b      	mov	r3, sp
 8001130:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800113e:	d202      	bcs.n	8001146 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001144:	e002      	b.n	800114c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001146:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001152:	4840      	ldr	r0, [pc, #256]	@ (8001254 <ILI9341_Draw_Colour_Burst+0x134>)
 8001154:	f002 f978 	bl	8003448 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800115e:	483d      	ldr	r0, [pc, #244]	@ (8001254 <ILI9341_Draw_Colour_Burst+0x134>)
 8001160:	f002 f972 	bl	8003448 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	b29b      	uxth	r3, r3
 800116a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 800116e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001170:	460b      	mov	r3, r1
 8001172:	3b01      	subs	r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	2300      	movs	r3, #0
 8001178:	4688      	mov	r8, r1
 800117a:	4699      	mov	r9, r3
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001188:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800118c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001190:	2300      	movs	r3, #0
 8001192:	460c      	mov	r4, r1
 8001194:	461d      	mov	r5, r3
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	00eb      	lsls	r3, r5, #3
 80011a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011a4:	00e2      	lsls	r2, r4, #3
 80011a6:	1dcb      	adds	r3, r1, #7
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	ebad 0d03 	sub.w	sp, sp, r3
 80011b0:	466b      	mov	r3, sp
 80011b2:	3300      	adds	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011ba:	e00e      	b.n	80011da <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c0:	4413      	add	r3, r2
 80011c2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80011c6:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80011c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ca:	3301      	adds	r3, #1
 80011cc:	88fa      	ldrh	r2, [r7, #6]
 80011ce:	b2d1      	uxtb	r1, r2
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80011d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d6:	3302      	adds	r3, #2
 80011d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3ec      	bcc.n	80011bc <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f0:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80011fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80011fc:	fb01 f202 	mul.w	r2, r1, r2
 8001200:	1a9b      	subs	r3, r3, r2
 8001202:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d010      	beq.n	800122c <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
 800120e:	e009      	b.n	8001224 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001212:	b29a      	uxth	r2, r3
 8001214:	230a      	movs	r3, #10
 8001216:	69b9      	ldr	r1, [r7, #24]
 8001218:	480f      	ldr	r0, [pc, #60]	@ (8001258 <ILI9341_Draw_Colour_Burst+0x138>)
 800121a:	f004 f8f8 	bl	800540e <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	3301      	adds	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
 8001224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3f1      	bcc.n	8001210 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	b29a      	uxth	r2, r3
 8001230:	230a      	movs	r3, #10
 8001232:	69b9      	ldr	r1, [r7, #24]
 8001234:	4808      	ldr	r0, [pc, #32]	@ (8001258 <ILI9341_Draw_Colour_Burst+0x138>)
 8001236:	f004 f8ea 	bl	800540e <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001240:	4804      	ldr	r0, [pc, #16]	@ (8001254 <ILI9341_Draw_Colour_Burst+0x134>)
 8001242:	f002 f901 	bl	8003448 <HAL_GPIO_WritePin>
 8001246:	46b5      	mov	sp, r6
}
 8001248:	bf00      	nop
 800124a:	3734      	adds	r7, #52	@ 0x34
 800124c:	46bd      	mov	sp, r7
 800124e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001252:	bf00      	nop
 8001254:	40020800 	.word	0x40020800
 8001258:	20000304 	.word	0x20000304

0800125c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <ILI9341_Fill_Screen+0x44>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	b29a      	uxth	r2, r3
 800126c:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <ILI9341_Fill_Screen+0x48>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	2100      	movs	r1, #0
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fd7d 	bl	8000d74 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <ILI9341_Fill_Screen+0x44>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <ILI9341_Fill_Screen+0x48>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	fb02 f303 	mul.w	r3, r2, r3
 800128c:	461a      	mov	r2, r3
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff44 	bl	8001120 <ILI9341_Draw_Colour_Burst>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000002 	.word	0x20000002
 80012a4:	20000000 	.word	0x20000000

080012a8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
 80012b2:	460b      	mov	r3, r1
 80012b4:	80bb      	strh	r3, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80012ba:	4b64      	ldr	r3, [pc, #400]	@ (800144c <ILI9341_Draw_Pixel+0x1a4>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	88fa      	ldrh	r2, [r7, #6]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	f080 80be 	bcs.w	8001444 <ILI9341_Draw_Pixel+0x19c>
 80012c8:	4b61      	ldr	r3, [pc, #388]	@ (8001450 <ILI9341_Draw_Pixel+0x1a8>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	88ba      	ldrh	r2, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	f080 80b7 	bcs.w	8001444 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012dc:	485d      	ldr	r0, [pc, #372]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 80012de:	f002 f8b3 	bl	8003448 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012e8:	485a      	ldr	r0, [pc, #360]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 80012ea:	f002 f8ad 	bl	8003448 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80012ee:	202a      	movs	r0, #42	@ 0x2a
 80012f0:	f7ff fcea 	bl	8000cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012fa:	4856      	ldr	r0, [pc, #344]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 80012fc:	f002 f8a4 	bl	8003448 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001306:	4853      	ldr	r0, [pc, #332]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 8001308:	f002 f89e 	bl	8003448 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001312:	4850      	ldr	r0, [pc, #320]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 8001314:	f002 f898 	bl	8003448 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	b29b      	uxth	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	753b      	strb	r3, [r7, #20]
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	757b      	strb	r3, [r7, #21]
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	3301      	adds	r3, #1
 800132c:	121b      	asrs	r3, r3, #8
 800132e:	b2db      	uxtb	r3, r3
 8001330:	75bb      	strb	r3, [r7, #22]
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	3301      	adds	r3, #1
 8001338:	b2db      	uxtb	r3, r3
 800133a:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800133c:	f107 0114 	add.w	r1, r7, #20
 8001340:	2301      	movs	r3, #1
 8001342:	2204      	movs	r2, #4
 8001344:	4844      	ldr	r0, [pc, #272]	@ (8001458 <ILI9341_Draw_Pixel+0x1b0>)
 8001346:	f004 f862 	bl	800540e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001350:	4840      	ldr	r0, [pc, #256]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 8001352:	f002 f879 	bl	8003448 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800135c:	483d      	ldr	r0, [pc, #244]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 800135e:	f002 f873 	bl	8003448 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001368:	483a      	ldr	r0, [pc, #232]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 800136a:	f002 f86d 	bl	8003448 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800136e:	202b      	movs	r0, #43	@ 0x2b
 8001370:	f7ff fcaa 	bl	8000cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800137a:	4836      	ldr	r0, [pc, #216]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 800137c:	f002 f864 	bl	8003448 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001386:	4833      	ldr	r0, [pc, #204]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 8001388:	f002 f85e 	bl	8003448 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001392:	4830      	ldr	r0, [pc, #192]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 8001394:	f002 f858 	bl	8003448 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	b29b      	uxth	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	743b      	strb	r3, [r7, #16]
 80013a2:	88bb      	ldrh	r3, [r7, #4]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	747b      	strb	r3, [r7, #17]
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	3301      	adds	r3, #1
 80013ac:	121b      	asrs	r3, r3, #8
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	74bb      	strb	r3, [r7, #18]
 80013b2:	88bb      	ldrh	r3, [r7, #4]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	3301      	adds	r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80013bc:	f107 0110 	add.w	r1, r7, #16
 80013c0:	2301      	movs	r3, #1
 80013c2:	2204      	movs	r2, #4
 80013c4:	4824      	ldr	r0, [pc, #144]	@ (8001458 <ILI9341_Draw_Pixel+0x1b0>)
 80013c6:	f004 f822 	bl	800540e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013d0:	4820      	ldr	r0, [pc, #128]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 80013d2:	f002 f839 	bl	8003448 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013dc:	481d      	ldr	r0, [pc, #116]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 80013de:	f002 f833 	bl	8003448 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013e8:	481a      	ldr	r0, [pc, #104]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 80013ea:	f002 f82d 	bl	8003448 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80013ee:	202c      	movs	r0, #44	@ 0x2c
 80013f0:	f7ff fc6a 	bl	8000cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013fa:	4816      	ldr	r0, [pc, #88]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 80013fc:	f002 f824 	bl	8003448 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001406:	4813      	ldr	r0, [pc, #76]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 8001408:	f002 f81e 	bl	8003448 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001412:	4810      	ldr	r0, [pc, #64]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 8001414:	f002 f818 	bl	8003448 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001418:	887b      	ldrh	r3, [r7, #2]
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	b29b      	uxth	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	733b      	strb	r3, [r7, #12]
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001428:	f107 010c 	add.w	r1, r7, #12
 800142c:	2301      	movs	r3, #1
 800142e:	2202      	movs	r2, #2
 8001430:	4809      	ldr	r0, [pc, #36]	@ (8001458 <ILI9341_Draw_Pixel+0x1b0>)
 8001432:	f003 ffec 	bl	800540e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800143c:	4805      	ldr	r0, [pc, #20]	@ (8001454 <ILI9341_Draw_Pixel+0x1ac>)
 800143e:	f002 f803 	bl	8003448 <HAL_GPIO_WritePin>
 8001442:	e000      	b.n	8001446 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001444:	bf00      	nop
	
}
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000002 	.word	0x20000002
 8001450:	20000000 	.word	0x20000000
 8001454:	40020800 	.word	0x40020800
 8001458:	20000304 	.word	0x20000304

0800145c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4604      	mov	r4, r0
 8001464:	4608      	mov	r0, r1
 8001466:	4611      	mov	r1, r2
 8001468:	461a      	mov	r2, r3
 800146a:	4623      	mov	r3, r4
 800146c:	80fb      	strh	r3, [r7, #6]
 800146e:	4603      	mov	r3, r0
 8001470:	80bb      	strh	r3, [r7, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	807b      	strh	r3, [r7, #2]
 8001476:	4613      	mov	r3, r2
 8001478:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800147a:	4b24      	ldr	r3, [pc, #144]	@ (800150c <ILI9341_Draw_Rectangle+0xb0>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	88fa      	ldrh	r2, [r7, #6]
 8001482:	429a      	cmp	r2, r3
 8001484:	d23d      	bcs.n	8001502 <ILI9341_Draw_Rectangle+0xa6>
 8001486:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <ILI9341_Draw_Rectangle+0xb4>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	88ba      	ldrh	r2, [r7, #4]
 800148e:	429a      	cmp	r2, r3
 8001490:	d237      	bcs.n	8001502 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001492:	88fa      	ldrh	r2, [r7, #6]
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	4413      	add	r3, r2
 8001498:	4a1c      	ldr	r2, [pc, #112]	@ (800150c <ILI9341_Draw_Rectangle+0xb0>)
 800149a:	8812      	ldrh	r2, [r2, #0]
 800149c:	b292      	uxth	r2, r2
 800149e:	4293      	cmp	r3, r2
 80014a0:	dd05      	ble.n	80014ae <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <ILI9341_Draw_Rectangle+0xb0>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	883b      	ldrh	r3, [r7, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a16      	ldr	r2, [pc, #88]	@ (8001510 <ILI9341_Draw_Rectangle+0xb4>)
 80014b6:	8812      	ldrh	r2, [r2, #0]
 80014b8:	b292      	uxth	r2, r2
 80014ba:	4293      	cmp	r3, r2
 80014bc:	dd05      	ble.n	80014ca <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <ILI9341_Draw_Rectangle+0xb4>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	88bb      	ldrh	r3, [r7, #4]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80014ca:	88fa      	ldrh	r2, [r7, #6]
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	4413      	add	r3, r2
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	3b01      	subs	r3, #1
 80014d4:	b29c      	uxth	r4, r3
 80014d6:	88ba      	ldrh	r2, [r7, #4]
 80014d8:	883b      	ldrh	r3, [r7, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	b29b      	uxth	r3, r3
 80014de:	3b01      	subs	r3, #1
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	88b9      	ldrh	r1, [r7, #4]
 80014e4:	88f8      	ldrh	r0, [r7, #6]
 80014e6:	4622      	mov	r2, r4
 80014e8:	f7ff fc44 	bl	8000d74 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80014ec:	883b      	ldrh	r3, [r7, #0]
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	fb02 f303 	mul.w	r3, r2, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	8b3b      	ldrh	r3, [r7, #24]
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fe10 	bl	8001120 <ILI9341_Draw_Colour_Burst>
 8001500:	e000      	b.n	8001504 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001502:	bf00      	nop
}
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bd90      	pop	{r4, r7, pc}
 800150a:	bf00      	nop
 800150c:	20000002 	.word	0x20000002
 8001510:	20000000 	.word	0x20000000

08001514 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 800151a:	2310      	movs	r3, #16
 800151c:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8001522:	e019      	b.n	8001558 <TP_Read+0x44>
    {
        value <<= 1;
 8001524:	88bb      	ldrh	r3, [r7, #4]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	2108      	movs	r1, #8
 800152e:	480e      	ldr	r0, [pc, #56]	@ (8001568 <TP_Read+0x54>)
 8001530:	f001 ff8a 	bl	8003448 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	2108      	movs	r1, #8
 8001538:	480b      	ldr	r0, [pc, #44]	@ (8001568 <TP_Read+0x54>)
 800153a:	f001 ff85 	bl	8003448 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 800153e:	2110      	movs	r1, #16
 8001540:	4809      	ldr	r0, [pc, #36]	@ (8001568 <TP_Read+0x54>)
 8001542:	f001 ff69 	bl	8003418 <HAL_GPIO_ReadPin>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <TP_Read+0x3e>
        {
            value++;
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	3301      	adds	r3, #1
 8001550:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	3b01      	subs	r3, #1
 8001556:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e2      	bne.n	8001524 <TP_Read+0x10>
    };

    return value;
 800155e:	88bb      	ldrh	r3, [r7, #4]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000

0800156c <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8001576:	2308      	movs	r3, #8
 8001578:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 800157a:	2200      	movs	r2, #0
 800157c:	2108      	movs	r1, #8
 800157e:	4815      	ldr	r0, [pc, #84]	@ (80015d4 <TP_Write+0x68>)
 8001580:	f001 ff62 	bl	8003448 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8001584:	e01e      	b.n	80015c4 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	2b00      	cmp	r3, #0
 800158c:	da05      	bge.n	800159a <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	2120      	movs	r1, #32
 8001592:	4810      	ldr	r0, [pc, #64]	@ (80015d4 <TP_Write+0x68>)
 8001594:	f001 ff58 	bl	8003448 <HAL_GPIO_WritePin>
 8001598:	e004      	b.n	80015a4 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2120      	movs	r1, #32
 800159e:	480d      	ldr	r0, [pc, #52]	@ (80015d4 <TP_Write+0x68>)
 80015a0:	f001 ff52 	bl	8003448 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2108      	movs	r1, #8
 80015ae:	4809      	ldr	r0, [pc, #36]	@ (80015d4 <TP_Write+0x68>)
 80015b0:	f001 ff4a 	bl	8003448 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 80015b4:	2200      	movs	r2, #0
 80015b6:	2108      	movs	r1, #8
 80015b8:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <TP_Write+0x68>)
 80015ba:	f001 ff45 	bl	8003448 <HAL_GPIO_WritePin>
        i--;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1dd      	bne.n	8001586 <TP_Write+0x1a>
    };
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021000 	.word	0x40021000

080015d8 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 80015e0:	2201      	movs	r2, #1
 80015e2:	2108      	movs	r1, #8
 80015e4:	485a      	ldr	r0, [pc, #360]	@ (8001750 <TP_Read_Coordinates+0x178>)
 80015e6:	f001 ff2f 	bl	8003448 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 80015ea:	2201      	movs	r2, #1
 80015ec:	2120      	movs	r1, #32
 80015ee:	4858      	ldr	r0, [pc, #352]	@ (8001750 <TP_Read_Coordinates+0x178>)
 80015f0:	f001 ff2a 	bl	8003448 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 80015f4:	2201      	movs	r2, #1
 80015f6:	2140      	movs	r1, #64	@ 0x40
 80015f8:	4855      	ldr	r0, [pc, #340]	@ (8001750 <TP_Read_Coordinates+0x178>)
 80015fa:	f001 ff25 	bl	8003448 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8001602:	2300      	movs	r3, #0
 8001604:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 800160a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160e:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2140      	movs	r1, #64	@ 0x40
 8001618:	484d      	ldr	r0, [pc, #308]	@ (8001750 <TP_Read_Coordinates+0x178>)
 800161a:	f001 ff15 	bl	8003448 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 800161e:	e023      	b.n	8001668 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8001620:	2090      	movs	r0, #144	@ 0x90
 8001622:	f7ff ffa3 	bl	800156c <TP_Write>

				rawy = TP_Read();	
 8001626:	f7ff ff75 	bl	8001514 <TP_Read>
 800162a:	4603      	mov	r3, r0
 800162c:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 800162e:	89fb      	ldrh	r3, [r7, #14]
 8001630:	6a3a      	ldr	r2, [r7, #32]
 8001632:	4413      	add	r3, r2
 8001634:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8001636:	89fb      	ldrh	r3, [r7, #14]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4413      	add	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 800163e:	20d0      	movs	r0, #208	@ 0xd0
 8001640:	f7ff ff94 	bl	800156c <TP_Write>
        rawx = TP_Read();
 8001644:	f7ff ff66 	bl	8001514 <TP_Read>
 8001648:	4603      	mov	r3, r0
 800164a:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 800164c:	89bb      	ldrh	r3, [r7, #12]
 800164e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001650:	4413      	add	r3, r2
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
				calculating_x += rawx;
 8001654:	89bb      	ldrh	r3, [r7, #12]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	61fb      	str	r3, [r7, #28]
        samples--;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3b01      	subs	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	3301      	adds	r3, #1
 8001666:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <TP_Read_Coordinates+0xa4>
 800166e:	2104      	movs	r1, #4
 8001670:	4837      	ldr	r0, [pc, #220]	@ (8001750 <TP_Read_Coordinates+0x178>)
 8001672:	f001 fed1 	bl	8003418 <HAL_GPIO_ReadPin>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0d1      	beq.n	8001620 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2140      	movs	r1, #64	@ 0x40
 8001680:	4833      	ldr	r0, [pc, #204]	@ (8001750 <TP_Read_Coordinates+0x178>)
 8001682:	f001 fee1 	bl	8003448 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800168c:	d14d      	bne.n	800172a <TP_Read_Coordinates+0x152>
 800168e:	2104      	movs	r1, #4
 8001690:	482f      	ldr	r0, [pc, #188]	@ (8001750 <TP_Read_Coordinates+0x178>)
 8001692:	f001 fec1 	bl	8003418 <HAL_GPIO_ReadPin>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d146      	bne.n	800172a <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 80016b8:	89bb      	ldrh	r3, [r7, #12]
 80016ba:	425b      	negs	r3, r3
 80016bc:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 80016be:	89fb      	ldrh	r3, [r7, #14]
 80016c0:	425b      	negs	r3, r3
 80016c2:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 80016c4:	89ba      	ldrh	r2, [r7, #12]
 80016c6:	4b23      	ldr	r3, [pc, #140]	@ (8001754 <TP_Read_Coordinates+0x17c>)
 80016c8:	fba3 1302 	umull	r1, r3, r3, r2
 80016cc:	1ad2      	subs	r2, r2, r3
 80016ce:	0852      	lsrs	r2, r2, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	f1c3 03e3 	rsb	r3, r3, #227	@ 0xe3
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016e2:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8001748 <TP_Read_Coordinates+0x170>
 80016e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016ee:	ee17 3a90 	vmov	r3, s15
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 80016f8:	89fb      	ldrh	r3, [r7, #14]
 80016fa:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <TP_Read_Coordinates+0x180>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	09db      	lsrs	r3, r3, #7
 8001702:	b29b      	uxth	r3, r3
 8001704:	3b0f      	subs	r3, #15
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800170e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8001748 <TP_Read_Coordinates+0x170>
 8001712:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3302      	adds	r3, #2
 800171a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800171e:	ee17 2a90 	vmov	r2, s15
 8001722:	b292      	uxth	r2, r2
 8001724:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8001726:	2301      	movs	r3, #1
 8001728:	e007      	b.n	800173a <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3302      	adds	r3, #2
 8001734:	2200      	movs	r2, #0
 8001736:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8001738:	2300      	movs	r3, #0
		}
}
 800173a:	4618      	mov	r0, r3
 800173c:	3728      	adds	r7, #40	@ 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	f3af 8000 	nop.w
 8001748:	28f5c28f 	.word	0x28f5c28f
 800174c:	3ff28f5c 	.word	0x3ff28f5c
 8001750:	40021000 	.word	0x40021000
 8001754:	e01e01e1 	.word	0xe01e01e1
 8001758:	a0a0a0a1 	.word	0xa0a0a0a1

0800175c <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8001760:	2104      	movs	r1, #4
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <TP_Touchpad_Pressed+0x1c>)
 8001764:	f001 fe58 	bl	8003418 <HAL_GPIO_ReadPin>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8001772:	2300      	movs	r3, #0
	}
}
 8001774:	4618      	mov	r0, r3
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000

0800177c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	@ 0x30
 8001780:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001792:	4b62      	ldr	r3, [pc, #392]	@ (800191c <MX_GPIO_Init+0x1a0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a61      	ldr	r2, [pc, #388]	@ (800191c <MX_GPIO_Init+0x1a0>)
 8001798:	f043 0310 	orr.w	r3, r3, #16
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b5f      	ldr	r3, [pc, #380]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	4b5c      	ldr	r3, [pc, #368]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a5b      	ldr	r2, [pc, #364]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b59      	ldr	r3, [pc, #356]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c2:	4b56      	ldr	r3, [pc, #344]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a55      	ldr	r2, [pc, #340]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017c8:	f043 0320 	orr.w	r3, r3, #32
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b53      	ldr	r3, [pc, #332]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	4b50      	ldr	r3, [pc, #320]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a4f      	ldr	r2, [pc, #316]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b4d      	ldr	r3, [pc, #308]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f2:	4b4a      	ldr	r3, [pc, #296]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a49      	ldr	r2, [pc, #292]	@ (800191c <MX_GPIO_Init+0x1a0>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b47      	ldr	r3, [pc, #284]	@ (800191c <MX_GPIO_Init+0x1a0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800180a:	4b44      	ldr	r3, [pc, #272]	@ (800191c <MX_GPIO_Init+0x1a0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a43      	ldr	r2, [pc, #268]	@ (800191c <MX_GPIO_Init+0x1a0>)
 8001810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b41      	ldr	r3, [pc, #260]	@ (800191c <MX_GPIO_Init+0x1a0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	2168      	movs	r1, #104	@ 0x68
 8001826:	483e      	ldr	r0, [pc, #248]	@ (8001920 <MX_GPIO_Init+0x1a4>)
 8001828:	f001 fe0e 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8001832:	483c      	ldr	r0, [pc, #240]	@ (8001924 <MX_GPIO_Init+0x1a8>)
 8001834:	f001 fe08 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800183e:	483a      	ldr	r0, [pc, #232]	@ (8001928 <MX_GPIO_Init+0x1ac>)
 8001840:	f001 fe02 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	21c0      	movs	r1, #192	@ 0xc0
 8001848:	4838      	ldr	r0, [pc, #224]	@ (800192c <MX_GPIO_Init+0x1b0>)
 800184a:	f001 fdfd 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_IRQ_Pin T_MISO_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 800184e:	2314      	movs	r3, #20
 8001850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	482f      	ldr	r0, [pc, #188]	@ (8001920 <MX_GPIO_Init+0x1a4>)
 8001862:	f001 fc2d 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin;
 8001866:	2328      	movs	r3, #40	@ 0x28
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	4619      	mov	r1, r3
 800187c:	4828      	ldr	r0, [pc, #160]	@ (8001920 <MX_GPIO_Init+0x1a4>)
 800187e:	f001 fc1f 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_CS_Pin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 8001882:	2340      	movs	r3, #64	@ 0x40
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	4821      	ldr	r0, [pc, #132]	@ (8001920 <MX_GPIO_Init+0x1a4>)
 800189a:	f001 fc11 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800189e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4619      	mov	r1, r3
 80018b6:	481b      	ldr	r0, [pc, #108]	@ (8001924 <MX_GPIO_Init+0x1a8>)
 80018b8:	f001 fc02 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80018bc:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	4814      	ldr	r0, [pc, #80]	@ (8001928 <MX_GPIO_Init+0x1ac>)
 80018d6:	f001 fbf3 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018da:	23c0      	movs	r3, #192	@ 0xc0
 80018dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	480e      	ldr	r0, [pc, #56]	@ (800192c <MX_GPIO_Init+0x1b0>)
 80018f2:	f001 fbe5 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80018f6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80018fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	4805      	ldr	r0, [pc, #20]	@ (8001924 <MX_GPIO_Init+0x1a8>)
 8001910:	f001 fbd6 	bl	80030c0 <HAL_GPIO_Init>

}
 8001914:	bf00      	nop
 8001916:	3730      	adds	r7, #48	@ 0x30
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	40021000 	.word	0x40021000
 8001924:	40020800 	.word	0x40020800
 8001928:	40020400 	.word	0x40020400
 800192c:	40021800 	.word	0x40021800

08001930 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001934:	4b1b      	ldr	r3, [pc, #108]	@ (80019a4 <MX_I2C1_Init+0x74>)
 8001936:	4a1c      	ldr	r2, [pc, #112]	@ (80019a8 <MX_I2C1_Init+0x78>)
 8001938:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800193a:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <MX_I2C1_Init+0x74>)
 800193c:	4a1b      	ldr	r2, [pc, #108]	@ (80019ac <MX_I2C1_Init+0x7c>)
 800193e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001940:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <MX_I2C1_Init+0x74>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001946:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <MX_I2C1_Init+0x74>)
 8001948:	2201      	movs	r2, #1
 800194a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800194c:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <MX_I2C1_Init+0x74>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001952:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <MX_I2C1_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001958:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <MX_I2C1_Init+0x74>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800195e:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <MX_I2C1_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001964:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <MX_I2C1_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800196a:	480e      	ldr	r0, [pc, #56]	@ (80019a4 <MX_I2C1_Init+0x74>)
 800196c:	f001 fd86 	bl	800347c <HAL_I2C_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001976:	f000 fded 	bl	8002554 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800197a:	2100      	movs	r1, #0
 800197c:	4809      	ldr	r0, [pc, #36]	@ (80019a4 <MX_I2C1_Init+0x74>)
 800197e:	f002 facd 	bl	8003f1c <HAL_I2CEx_ConfigAnalogFilter>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001988:	f000 fde4 	bl	8002554 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800198c:	2100      	movs	r1, #0
 800198e:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <MX_I2C1_Init+0x74>)
 8001990:	f002 fb0f 	bl	8003fb2 <HAL_I2CEx_ConfigDigitalFilter>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800199a:	f000 fddb 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200001fc 	.word	0x200001fc
 80019a8:	40005400 	.word	0x40005400
 80019ac:	20404768 	.word	0x20404768

080019b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b0ae      	sub	sp, #184	@ 0xb8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2290      	movs	r2, #144	@ 0x90
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f006 f994 	bl	8007cfe <memset>
  if(i2cHandle->Instance==I2C1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a22      	ldr	r2, [pc, #136]	@ (8001a64 <HAL_I2C_MspInit+0xb4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d13c      	bne.n	8001a5a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019e6:	2300      	movs	r3, #0
 80019e8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 f810 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80019fa:	f000 fdab 	bl	8002554 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <HAL_I2C_MspInit+0xb8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a19      	ldr	r2, [pc, #100]	@ (8001a68 <HAL_I2C_MspInit+0xb8>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <HAL_I2C_MspInit+0xb8>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1e:	2312      	movs	r3, #18
 8001a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a30:	2304      	movs	r3, #4
 8001a32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480b      	ldr	r0, [pc, #44]	@ (8001a6c <HAL_I2C_MspInit+0xbc>)
 8001a3e:	f001 fb3f 	bl	80030c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_I2C_MspInit+0xb8>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	4a08      	ldr	r2, [pc, #32]	@ (8001a68 <HAL_I2C_MspInit+0xb8>)
 8001a48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_I2C_MspInit+0xb8>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	37b8      	adds	r7, #184	@ 0xb8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40005400 	.word	0x40005400
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020400 	.word	0x40020400

08001a70 <CRC16_2>:
uint16_t CRC16_2(uint8_t *, uint8_t);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t CRC16_2(uint8_t *ptr, uint8_t length){
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]

	uint16_t crc = 0xFFFF;
 8001a7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a80:	81fb      	strh	r3, [r7, #14]
	uint8_t  s   = 0x00;
 8001a82:	2300      	movs	r3, #0
 8001a84:	737b      	strb	r3, [r7, #13]

	while(length--){
 8001a86:	e023      	b.n	8001ad0 <CRC16_2+0x60>
		crc ^= *ptr++;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	89fb      	ldrh	r3, [r7, #14]
 8001a94:	4053      	eors	r3, r2
 8001a96:	81fb      	strh	r3, [r7, #14]
		for(s = 0; s < 8; s++){
 8001a98:	2300      	movs	r3, #0
 8001a9a:	737b      	strb	r3, [r7, #13]
 8001a9c:	e015      	b.n	8001aca <CRC16_2+0x5a>
			if((crc & 0x01) != 0){
 8001a9e:	89fb      	ldrh	r3, [r7, #14]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00a      	beq.n	8001abe <CRC16_2+0x4e>
				crc >>= 1;
 8001aa8:	89fb      	ldrh	r3, [r7, #14]
 8001aaa:	085b      	lsrs	r3, r3, #1
 8001aac:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8001ab4:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	81fb      	strh	r3, [r7, #14]
 8001abc:	e002      	b.n	8001ac4 <CRC16_2+0x54>
			} else crc >>= 1;
 8001abe:	89fb      	ldrh	r3, [r7, #14]
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	81fb      	strh	r3, [r7, #14]
		for(s = 0; s < 8; s++){
 8001ac4:	7b7b      	ldrb	r3, [r7, #13]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	737b      	strb	r3, [r7, #13]
 8001aca:	7b7b      	ldrb	r3, [r7, #13]
 8001acc:	2b07      	cmp	r3, #7
 8001ace:	d9e6      	bls.n	8001a9e <CRC16_2+0x2e>
	while(length--){
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	1e5a      	subs	r2, r3, #1
 8001ad4:	70fa      	strb	r2, [r7, #3]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1d6      	bne.n	8001a88 <CRC16_2+0x18>
		}
	}
	return crc;
 8001ada:	89fb      	ldrh	r3, [r7, #14]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <mixColor>:
    int dx = tx - cx;
    int dy = ty - cy;
    return (dx*dx + dy*dy <= r*r);  // inside circle?
}

void mixColor() {
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
  redValue = 0b11111;
 8001aee:	4b33      	ldr	r3, [pc, #204]	@ (8001bbc <mixColor+0xd4>)
 8001af0:	221f      	movs	r2, #31
 8001af2:	701a      	strb	r2, [r3, #0]
  greenValue = 0b111111;
 8001af4:	4b32      	ldr	r3, [pc, #200]	@ (8001bc0 <mixColor+0xd8>)
 8001af6:	223f      	movs	r2, #63	@ 0x3f
 8001af8:	701a      	strb	r2, [r3, #0]
  blueValue = 0b11111;
 8001afa:	4b32      	ldr	r3, [pc, #200]	@ (8001bc4 <mixColor+0xdc>)
 8001afc:	221f      	movs	r2, #31
 8001afe:	701a      	strb	r2, [r3, #0]

  redValue = (uint8_t)(redValue * Red_L);
 8001b00:	4b2e      	ldr	r3, [pc, #184]	@ (8001bbc <mixColor+0xd4>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc8 <mixColor+0xe0>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b1a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b1e:	793b      	ldrb	r3, [r7, #4]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b26      	ldr	r3, [pc, #152]	@ (8001bbc <mixColor+0xd4>)
 8001b24:	701a      	strb	r2, [r3, #0]
  greenValue = (uint8_t)(greenValue * Green_L);
 8001b26:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <mixColor+0xd8>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b32:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <mixColor+0xe4>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b40:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b44:	793b      	ldrb	r3, [r7, #4]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <mixColor+0xd8>)
 8001b4a:	701a      	strb	r2, [r3, #0]
  blueValue = (uint8_t)(blueValue * Blue_L);
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc4 <mixColor+0xdc>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b58:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd0 <mixColor+0xe8>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b66:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b6a:	793b      	ldrb	r3, [r7, #4]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <mixColor+0xdc>)
 8001b70:	701a      	strb	r2, [r3, #0]

  mixedColor = (uint16_t)(blueValue);
 8001b72:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <mixColor+0xdc>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <mixColor+0xec>)
 8001b7a:	801a      	strh	r2, [r3, #0]
  mixedColor |= (greenValue << 5);
 8001b7c:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <mixColor+0xd8>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	015b      	lsls	r3, r3, #5
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <mixColor+0xec>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <mixColor+0xec>)
 8001b94:	801a      	strh	r2, [r3, #0]
  mixedColor |= (redValue << 11);
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <mixColor+0xd4>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	02db      	lsls	r3, r3, #11
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <mixColor+0xec>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <mixColor+0xec>)
 8001bae:	801a      	strh	r2, [r3, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	200002dc 	.word	0x200002dc
 8001bc0:	200002dd 	.word	0x200002dd
 8001bc4:	200002de 	.word	0x200002de
 8001bc8:	200002d0 	.word	0x200002d0
 8001bcc:	200002d4 	.word	0x200002d4
 8001bd0:	200002d8 	.word	0x200002d8
 8001bd4:	200002cc 	.word	0x200002cc

08001bd8 <initializeScreen0>:

void initializeScreen0() {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af02      	add	r7, sp, #8
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001bde:	2003      	movs	r0, #3
 8001be0:	f7ff f932 	bl	8000e48 <ILI9341_Set_Rotation>
	ILI9341_Fill_Screen(WHITE);
 8001be4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001be8:	f7ff fb38 	bl	800125c <ILI9341_Fill_Screen>

	sprintf(T_Buffer, "%4.1f C", t);
 8001bec:	4b4c      	ldr	r3, [pc, #304]	@ (8001d20 <initializeScreen0+0x148>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bf6:	ec53 2b17 	vmov	r2, r3, d7
 8001bfa:	494a      	ldr	r1, [pc, #296]	@ (8001d24 <initializeScreen0+0x14c>)
 8001bfc:	484a      	ldr	r0, [pc, #296]	@ (8001d28 <initializeScreen0+0x150>)
 8001bfe:	f006 f819 	bl	8007c34 <siprintf>
	ILI9341_Draw_Text(T_Buffer, 60, 40, BLACK, 2, WHITE);
 8001c02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	2302      	movs	r3, #2
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	2228      	movs	r2, #40	@ 0x28
 8001c10:	213c      	movs	r1, #60	@ 0x3c
 8001c12:	4845      	ldr	r0, [pc, #276]	@ (8001d28 <initializeScreen0+0x150>)
 8001c14:	f7ff f818 	bl	8000c48 <ILI9341_Draw_Text>

	sprintf(H_Buffer, "%4.1f %%RH", h);
 8001c18:	4b44      	ldr	r3, [pc, #272]	@ (8001d2c <initializeScreen0+0x154>)
 8001c1a:	edd3 7a00 	vldr	s15, [r3]
 8001c1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c22:	ec53 2b17 	vmov	r2, r3, d7
 8001c26:	4942      	ldr	r1, [pc, #264]	@ (8001d30 <initializeScreen0+0x158>)
 8001c28:	4842      	ldr	r0, [pc, #264]	@ (8001d34 <initializeScreen0+0x15c>)
 8001c2a:	f006 f803 	bl	8007c34 <siprintf>
	ILI9341_Draw_Text(H_Buffer, 170, 40, BLACK, 2, WHITE);
 8001c2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	2302      	movs	r3, #2
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	2228      	movs	r2, #40	@ 0x28
 8001c3c:	21aa      	movs	r1, #170	@ 0xaa
 8001c3e:	483d      	ldr	r0, [pc, #244]	@ (8001d34 <initializeScreen0+0x15c>)
 8001c40:	f7ff f802 	bl	8000c48 <ILI9341_Draw_Text>
//		HAL_Delay(2000);
//		ILI9341_Fill_Screen(WHITE);


	ILI9341_Draw_Rectangle(70, 90, 170, 20, LIGHT_RED);
 8001c44:	f64f 43d3 	movw	r3, #64723	@ 0xfcd3
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2314      	movs	r3, #20
 8001c4c:	22aa      	movs	r2, #170	@ 0xaa
 8001c4e:	215a      	movs	r1, #90	@ 0x5a
 8001c50:	2046      	movs	r0, #70	@ 0x46
 8001c52:	f7ff fc03 	bl	800145c <ILI9341_Draw_Rectangle>
	ILI9341_Draw_Rectangle(70, 90,  (uint16_t)(170 * Red_L), 20, RED);
 8001c56:	4b38      	ldr	r3, [pc, #224]	@ (8001d38 <initializeScreen0+0x160>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001d3c <initializeScreen0+0x164>
 8001c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c68:	ee17 3a90 	vmov	r3, s15
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2314      	movs	r3, #20
 8001c76:	215a      	movs	r1, #90	@ 0x5a
 8001c78:	2046      	movs	r0, #70	@ 0x46
 8001c7a:	f7ff fbef 	bl	800145c <ILI9341_Draw_Rectangle>

	ILI9341_Draw_Rectangle(70, 140, 170, 20, LIGHT_GREEN);
 8001c7e:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2314      	movs	r3, #20
 8001c86:	22aa      	movs	r2, #170	@ 0xaa
 8001c88:	218c      	movs	r1, #140	@ 0x8c
 8001c8a:	2046      	movs	r0, #70	@ 0x46
 8001c8c:	f7ff fbe6 	bl	800145c <ILI9341_Draw_Rectangle>
	ILI9341_Draw_Rectangle(70, 140, (uint16_t)(170 * Green_L), 20, GREEN);
 8001c90:	4b2b      	ldr	r3, [pc, #172]	@ (8001d40 <initializeScreen0+0x168>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001d3c <initializeScreen0+0x164>
 8001c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca2:	ee17 3a90 	vmov	r3, s15
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2314      	movs	r3, #20
 8001cb0:	218c      	movs	r1, #140	@ 0x8c
 8001cb2:	2046      	movs	r0, #70	@ 0x46
 8001cb4:	f7ff fbd2 	bl	800145c <ILI9341_Draw_Rectangle>

	ILI9341_Draw_Rectangle(70, 190, 170, 20, LIGHT_BLUE);
 8001cb8:	f649 43df 	movw	r3, #40159	@ 0x9cdf
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2314      	movs	r3, #20
 8001cc0:	22aa      	movs	r2, #170	@ 0xaa
 8001cc2:	21be      	movs	r1, #190	@ 0xbe
 8001cc4:	2046      	movs	r0, #70	@ 0x46
 8001cc6:	f7ff fbc9 	bl	800145c <ILI9341_Draw_Rectangle>
	ILI9341_Draw_Rectangle(70, 190, (uint16_t)(170 * Blue_L), 20, BLUE);
 8001cca:	4b1e      	ldr	r3, [pc, #120]	@ (8001d44 <initializeScreen0+0x16c>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001d3c <initializeScreen0+0x164>
 8001cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cdc:	ee17 3a90 	vmov	r3, s15
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	231f      	movs	r3, #31
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2314      	movs	r3, #20
 8001ce8:	21be      	movs	r1, #190	@ 0xbe
 8001cea:	2046      	movs	r0, #70	@ 0x46
 8001cec:	f7ff fbb6 	bl	800145c <ILI9341_Draw_Rectangle>

	ILI9341_Draw_Filled_Circle(50, 100, 30/2, RED);
 8001cf0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	2164      	movs	r1, #100	@ 0x64
 8001cf8:	2032      	movs	r0, #50	@ 0x32
 8001cfa:	f7fe fe83 	bl	8000a04 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Filled_Circle(50, 150, 30/2, GREEN);
 8001cfe:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d02:	220f      	movs	r2, #15
 8001d04:	2196      	movs	r1, #150	@ 0x96
 8001d06:	2032      	movs	r0, #50	@ 0x32
 8001d08:	f7fe fe7c 	bl	8000a04 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Filled_Circle(50, 200, 30/2, BLUE);
 8001d0c:	231f      	movs	r3, #31
 8001d0e:	220f      	movs	r2, #15
 8001d10:	21c8      	movs	r1, #200	@ 0xc8
 8001d12:	2032      	movs	r0, #50	@ 0x32
 8001d14:	f7fe fe76 	bl	8000a04 <ILI9341_Draw_Filled_Circle>

}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000008 	.word	0x20000008
 8001d24:	0800b350 	.word	0x0800b350
 8001d28:	200002e0 	.word	0x200002e0
 8001d2c:	20000004 	.word	0x20000004
 8001d30:	0800b358 	.word	0x0800b358
 8001d34:	200002e8 	.word	0x200002e8
 8001d38:	200002d0 	.word	0x200002d0
 8001d3c:	432a0000 	.word	0x432a0000
 8001d40:	200002d4 	.word	0x200002d4
 8001d44:	200002d8 	.word	0x200002d8

08001d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b08f      	sub	sp, #60	@ 0x3c
 8001d4c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001d4e:	f000 fbd5 	bl	80024fc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d52:	f000 ffaa 	bl	8002caa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d56:	f000 fb63 	bl	8002420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d5a:	f7ff fd0f 	bl	800177c <MX_GPIO_Init>
  MX_RNG_Init();
 8001d5e:	f000 fbff 	bl	8002560 <MX_RNG_Init>
  MX_SPI5_Init();
 8001d62:	f000 fc45 	bl	80025f0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001d66:	f000 fe05 	bl	8002974 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001d6a:	f000 fee5 	bl	8002b38 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001d6e:	f7ff fddf 	bl	8001930 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001d72:	f000 fe53 	bl	8002a1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	
  ILI9341_Init();//initial driver setup to drive ili9341
 8001d76:	f7ff f8c5 	bl	8000f04 <ILI9341_Init>
  initializeScreen0();
 8001d7a:	f7ff ff2d 	bl	8001bd8 <initializeScreen0>


  cmdBuffer[0] = 0x03;
 8001d7e:	4b4b      	ldr	r3, [pc, #300]	@ (8001eac <main+0x164>)
 8001d80:	2203      	movs	r2, #3
 8001d82:	701a      	strb	r2, [r3, #0]
  cmdBuffer[1] = 0x00;
 8001d84:	4b49      	ldr	r3, [pc, #292]	@ (8001eac <main+0x164>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	705a      	strb	r2, [r3, #1]
  cmdBuffer[2] = 0x04;
 8001d8a:	4b48      	ldr	r3, [pc, #288]	@ (8001eac <main+0x164>)
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	709a      	strb	r2, [r3, #2]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(debug, "Screen = %d\n", screen);
 8001d90:	4b47      	ldr	r3, [pc, #284]	@ (8001eb0 <main+0x168>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4947      	ldr	r1, [pc, #284]	@ (8001eb4 <main+0x16c>)
 8001d98:	4847      	ldr	r0, [pc, #284]	@ (8001eb8 <main+0x170>)
 8001d9a:	f005 ff4b 	bl	8007c34 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);
 8001d9e:	4846      	ldr	r0, [pc, #280]	@ (8001eb8 <main+0x170>)
 8001da0:	f7fe fa9e 	bl	80002e0 <strlen>
 8001da4:	4603      	mov	r3, r0
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	23c8      	movs	r3, #200	@ 0xc8
 8001daa:	4943      	ldr	r1, [pc, #268]	@ (8001eb8 <main+0x170>)
 8001dac:	4843      	ldr	r0, [pc, #268]	@ (8001ebc <main+0x174>)
 8001dae:	f004 fb3b 	bl	8006428 <HAL_UART_Transmit>

	  if (screen == 0) {
 8001db2:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb0 <main+0x168>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 8285 	bne.w	80022c6 <main+0x57e>
		  sprintf(str, "Temperature = %4.1f\tHumidity = %4.1f\n\r", t, h);
 8001dbc:	4b40      	ldr	r3, [pc, #256]	@ (8001ec0 <main+0x178>)
 8001dbe:	edd3 7a00 	vldr	s15, [r3]
 8001dc2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001dc6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec4 <main+0x17c>)
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dd0:	ed8d 7b00 	vstr	d7, [sp]
 8001dd4:	ec53 2b16 	vmov	r2, r3, d6
 8001dd8:	493b      	ldr	r1, [pc, #236]	@ (8001ec8 <main+0x180>)
 8001dda:	483c      	ldr	r0, [pc, #240]	@ (8001ecc <main+0x184>)
 8001ddc:	f005 ff2a 	bl	8007c34 <siprintf>
		  	  while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET){}
 8001de0:	bf00      	nop
 8001de2:	4b36      	ldr	r3, [pc, #216]	@ (8001ebc <main+0x174>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dec:	2b40      	cmp	r3, #64	@ 0x40
 8001dee:	d1f8      	bne.n	8001de2 <main+0x9a>
		  	  HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 200);
 8001df0:	4836      	ldr	r0, [pc, #216]	@ (8001ecc <main+0x184>)
 8001df2:	f7fe fa75 	bl	80002e0 <strlen>
 8001df6:	4603      	mov	r3, r0
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	23c8      	movs	r3, #200	@ 0xc8
 8001dfc:	4933      	ldr	r1, [pc, #204]	@ (8001ecc <main+0x184>)
 8001dfe:	482f      	ldr	r0, [pc, #188]	@ (8001ebc <main+0x174>)
 8001e00:	f004 fb12 	bl	8006428 <HAL_UART_Transmit>

		  	  HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8001e04:	23c8      	movs	r3, #200	@ 0xc8
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2303      	movs	r3, #3
 8001e0a:	4a28      	ldr	r2, [pc, #160]	@ (8001eac <main+0x164>)
 8001e0c:	21b8      	movs	r1, #184	@ 0xb8
 8001e0e:	4830      	ldr	r0, [pc, #192]	@ (8001ed0 <main+0x188>)
 8001e10:	f001 fbd0 	bl	80035b4 <HAL_I2C_Master_Transmit>

		  	  HAL_I2C_Master_Transmit(&hi2c1, 0x5c<<1, cmdBuffer, 3, 200);
 8001e14:	23c8      	movs	r3, #200	@ 0xc8
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2303      	movs	r3, #3
 8001e1a:	4a24      	ldr	r2, [pc, #144]	@ (8001eac <main+0x164>)
 8001e1c:	21b8      	movs	r1, #184	@ 0xb8
 8001e1e:	482c      	ldr	r0, [pc, #176]	@ (8001ed0 <main+0x188>)
 8001e20:	f001 fbc8 	bl	80035b4 <HAL_I2C_Master_Transmit>

		  	  HAL_Delay(5);
 8001e24:	2005      	movs	r0, #5
 8001e26:	f000 ff9d 	bl	8002d64 <HAL_Delay>

		  	  HAL_I2C_Master_Receive(&hi2c1, 0x5c<<1, dataBuffer, 8, 200);
 8001e2a:	23c8      	movs	r3, #200	@ 0xc8
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2308      	movs	r3, #8
 8001e30:	4a28      	ldr	r2, [pc, #160]	@ (8001ed4 <main+0x18c>)
 8001e32:	21b8      	movs	r1, #184	@ 0xb8
 8001e34:	4826      	ldr	r0, [pc, #152]	@ (8001ed0 <main+0x188>)
 8001e36:	f001 fcd5 	bl	80037e4 <HAL_I2C_Master_Receive>

		  	  uint8_t Rcrc = dataBuffer[7] << 8;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  	  Rcrc += dataBuffer[6];
 8001e40:	4b24      	ldr	r3, [pc, #144]	@ (8001ed4 <main+0x18c>)
 8001e42:	799a      	ldrb	r2, [r3, #6]
 8001e44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e48:	4413      	add	r3, r2
 8001e4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		  	  if (Rcrc == CRC16_2(dataBuffer, 6)) {
 8001e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e52:	b29c      	uxth	r4, r3
 8001e54:	2106      	movs	r1, #6
 8001e56:	481f      	ldr	r0, [pc, #124]	@ (8001ed4 <main+0x18c>)
 8001e58:	f7ff fe0a 	bl	8001a70 <CRC16_2>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	429c      	cmp	r4, r3
 8001e60:	d156      	bne.n	8001f10 <main+0x1c8>
		  		  uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8001e62:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <main+0x18c>)
 8001e64:	791b      	ldrb	r3, [r3, #4]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4a18      	ldr	r2, [pc, #96]	@ (8001ed4 <main+0x18c>)
 8001e72:	7952      	ldrb	r2, [r2, #5]
 8001e74:	4413      	add	r3, r2
 8001e76:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		  		  t = temperature / 10.0;
 8001e78:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e82:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8001e86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <main+0x178>)
 8001e90:	edc3 7a00 	vstr	s15, [r3]
		  		  t = (((dataBuffer[4] & 0x80) >> 7) == 1) ? (t * (-1)) : t;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <main+0x18c>)
 8001e96:	791b      	ldrb	r3, [r3, #4]
 8001e98:	09db      	lsrs	r3, r3, #7
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d11b      	bne.n	8001ed8 <main+0x190>
 8001ea0:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <main+0x178>)
 8001ea2:	edd3 7a00 	vldr	s15, [r3]
 8001ea6:	eef1 7a67 	vneg.f32	s15, s15
 8001eaa:	e018      	b.n	8001ede <main+0x196>
 8001eac:	200002c0 	.word	0x200002c0
 8001eb0:	200002f0 	.word	0x200002f0
 8001eb4:	0800b364 	.word	0x0800b364
 8001eb8:	2000028c 	.word	0x2000028c
 8001ebc:	20000404 	.word	0x20000404
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	20000004 	.word	0x20000004
 8001ec8:	0800b374 	.word	0x0800b374
 8001ecc:	20000258 	.word	0x20000258
 8001ed0:	200001fc 	.word	0x200001fc
 8001ed4:	200002c4 	.word	0x200002c4
 8001ed8:	4bbb      	ldr	r3, [pc, #748]	@ (80021c8 <main+0x480>)
 8001eda:	edd3 7a00 	vldr	s15, [r3]
 8001ede:	4bba      	ldr	r3, [pc, #744]	@ (80021c8 <main+0x480>)
 8001ee0:	edc3 7a00 	vstr	s15, [r3]

		  		  uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
 8001ee4:	4bb9      	ldr	r3, [pc, #740]	@ (80021cc <main+0x484>)
 8001ee6:	789b      	ldrb	r3, [r3, #2]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	4ab7      	ldr	r2, [pc, #732]	@ (80021cc <main+0x484>)
 8001eee:	78d2      	ldrb	r2, [r2, #3]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	857b      	strh	r3, [r7, #42]	@ 0x2a
		  		  h = humidity / 10.0;
 8001ef4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001efe:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8001f02:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f0a:	4bb1      	ldr	r3, [pc, #708]	@ (80021d0 <main+0x488>)
 8001f0c:	edc3 7a00 	vstr	s15, [r3]
		  	  }

		  		sprintf(T_Buffer, "%4.1f C", t);
 8001f10:	4bad      	ldr	r3, [pc, #692]	@ (80021c8 <main+0x480>)
 8001f12:	edd3 7a00 	vldr	s15, [r3]
 8001f16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f1a:	ec53 2b17 	vmov	r2, r3, d7
 8001f1e:	49ad      	ldr	r1, [pc, #692]	@ (80021d4 <main+0x48c>)
 8001f20:	48ad      	ldr	r0, [pc, #692]	@ (80021d8 <main+0x490>)
 8001f22:	f005 fe87 	bl	8007c34 <siprintf>
		  		ILI9341_Draw_Text(T_Buffer, 60, 40, BLACK, 2, WHITE);
 8001f26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2300      	movs	r3, #0
 8001f32:	2228      	movs	r2, #40	@ 0x28
 8001f34:	213c      	movs	r1, #60	@ 0x3c
 8001f36:	48a8      	ldr	r0, [pc, #672]	@ (80021d8 <main+0x490>)
 8001f38:	f7fe fe86 	bl	8000c48 <ILI9341_Draw_Text>

		  		sprintf(H_Buffer, "%4.1f %%RH", h);
 8001f3c:	4ba4      	ldr	r3, [pc, #656]	@ (80021d0 <main+0x488>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f46:	ec53 2b17 	vmov	r2, r3, d7
 8001f4a:	49a4      	ldr	r1, [pc, #656]	@ (80021dc <main+0x494>)
 8001f4c:	48a4      	ldr	r0, [pc, #656]	@ (80021e0 <main+0x498>)
 8001f4e:	f005 fe71 	bl	8007c34 <siprintf>
		  		ILI9341_Draw_Text(H_Buffer, 170, 40, BLACK, 2, WHITE);
 8001f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	2302      	movs	r3, #2
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2228      	movs	r2, #40	@ 0x28
 8001f60:	21aa      	movs	r1, #170	@ 0xaa
 8001f62:	489f      	ldr	r0, [pc, #636]	@ (80021e0 <main+0x498>)
 8001f64:	f7fe fe70 	bl	8000c48 <ILI9341_Draw_Text>
		  //		HAL_Delay(2000);
		  //		ILI9341_Fill_Screen(WHITE);


		  		ILI9341_Draw_Rectangle(70, 90, 170, 20, LIGHT_RED);
 8001f68:	f64f 43d3 	movw	r3, #64723	@ 0xfcd3
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2314      	movs	r3, #20
 8001f70:	22aa      	movs	r2, #170	@ 0xaa
 8001f72:	215a      	movs	r1, #90	@ 0x5a
 8001f74:	2046      	movs	r0, #70	@ 0x46
 8001f76:	f7ff fa71 	bl	800145c <ILI9341_Draw_Rectangle>
		  		ILI9341_Draw_Rectangle(70, 90,  (uint16_t)(170 * Red_L), 20, RED);
 8001f7a:	4b9a      	ldr	r3, [pc, #616]	@ (80021e4 <main+0x49c>)
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80021e8 <main+0x4a0>
 8001f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f8c:	ee17 3a90 	vmov	r3, s15
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2314      	movs	r3, #20
 8001f9a:	215a      	movs	r1, #90	@ 0x5a
 8001f9c:	2046      	movs	r0, #70	@ 0x46
 8001f9e:	f7ff fa5d 	bl	800145c <ILI9341_Draw_Rectangle>

		  		ILI9341_Draw_Rectangle(70, 140, 170, 20, LIGHT_GREEN);
 8001fa2:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2314      	movs	r3, #20
 8001faa:	22aa      	movs	r2, #170	@ 0xaa
 8001fac:	218c      	movs	r1, #140	@ 0x8c
 8001fae:	2046      	movs	r0, #70	@ 0x46
 8001fb0:	f7ff fa54 	bl	800145c <ILI9341_Draw_Rectangle>
		  		ILI9341_Draw_Rectangle(70, 140, (uint16_t)(170 * Green_L), 20, GREEN);
 8001fb4:	4b8d      	ldr	r3, [pc, #564]	@ (80021ec <main+0x4a4>)
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80021e8 <main+0x4a0>
 8001fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc6:	ee17 3a90 	vmov	r3, s15
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2314      	movs	r3, #20
 8001fd4:	218c      	movs	r1, #140	@ 0x8c
 8001fd6:	2046      	movs	r0, #70	@ 0x46
 8001fd8:	f7ff fa40 	bl	800145c <ILI9341_Draw_Rectangle>

		  		ILI9341_Draw_Rectangle(70, 190, 170, 20, LIGHT_BLUE);
 8001fdc:	f649 43df 	movw	r3, #40159	@ 0x9cdf
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2314      	movs	r3, #20
 8001fe4:	22aa      	movs	r2, #170	@ 0xaa
 8001fe6:	21be      	movs	r1, #190	@ 0xbe
 8001fe8:	2046      	movs	r0, #70	@ 0x46
 8001fea:	f7ff fa37 	bl	800145c <ILI9341_Draw_Rectangle>
		  		ILI9341_Draw_Rectangle(70, 190, (uint16_t)(170 * Blue_L), 20, BLUE);
 8001fee:	4b80      	ldr	r3, [pc, #512]	@ (80021f0 <main+0x4a8>)
 8001ff0:	edd3 7a00 	vldr	s15, [r3]
 8001ff4:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 80021e8 <main+0x4a0>
 8001ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002000:	ee17 3a90 	vmov	r3, s15
 8002004:	b29a      	uxth	r2, r3
 8002006:	231f      	movs	r3, #31
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2314      	movs	r3, #20
 800200c:	21be      	movs	r1, #190	@ 0xbe
 800200e:	2046      	movs	r0, #70	@ 0x46
 8002010:	f7ff fa24 	bl	800145c <ILI9341_Draw_Rectangle>

		  		ILI9341_Draw_Filled_Circle(150, 50, 30/2, mixedColor);
 8002014:	4b77      	ldr	r3, [pc, #476]	@ (80021f4 <main+0x4ac>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	220f      	movs	r2, #15
 800201a:	2132      	movs	r1, #50	@ 0x32
 800201c:	2096      	movs	r0, #150	@ 0x96
 800201e:	f7fe fcf1 	bl	8000a04 <ILI9341_Draw_Filled_Circle>
		  		sprintf(debug, "Mixed Color = %d\n", mixedColor);
 8002022:	4b74      	ldr	r3, [pc, #464]	@ (80021f4 <main+0x4ac>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	4973      	ldr	r1, [pc, #460]	@ (80021f8 <main+0x4b0>)
 800202a:	4874      	ldr	r0, [pc, #464]	@ (80021fc <main+0x4b4>)
 800202c:	f005 fe02 	bl	8007c34 <siprintf>
		  		HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);
 8002030:	4872      	ldr	r0, [pc, #456]	@ (80021fc <main+0x4b4>)
 8002032:	f7fe f955 	bl	80002e0 <strlen>
 8002036:	4603      	mov	r3, r0
 8002038:	b29a      	uxth	r2, r3
 800203a:	23c8      	movs	r3, #200	@ 0xc8
 800203c:	496f      	ldr	r1, [pc, #444]	@ (80021fc <main+0x4b4>)
 800203e:	4870      	ldr	r0, [pc, #448]	@ (8002200 <main+0x4b8>)
 8002040:	f004 f9f2 	bl	8006428 <HAL_UART_Transmit>


		  		if (TP_Touchpad_Pressed()) {
 8002044:	f7ff fb8a 	bl	800175c <TP_Touchpad_Pressed>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	f43f aea0 	beq.w	8001d90 <main+0x48>

		  			if (TP_Read_Coordinates(coords) == TOUCHPAD_DATA_OK) {
 8002050:	486c      	ldr	r0, [pc, #432]	@ (8002204 <main+0x4bc>)
 8002052:	f7ff fac1 	bl	80015d8 <TP_Read_Coordinates>
 8002056:	4603      	mov	r3, r0
 8002058:	2b01      	cmp	r3, #1
 800205a:	f47f ae99 	bne.w	8001d90 <main+0x48>
		  				tx = coords[0];
 800205e:	4b69      	ldr	r3, [pc, #420]	@ (8002204 <main+0x4bc>)
 8002060:	881a      	ldrh	r2, [r3, #0]
 8002062:	4b69      	ldr	r3, [pc, #420]	@ (8002208 <main+0x4c0>)
 8002064:	801a      	strh	r2, [r3, #0]
		  				ty = coords[1];
 8002066:	4b67      	ldr	r3, [pc, #412]	@ (8002204 <main+0x4bc>)
 8002068:	885a      	ldrh	r2, [r3, #2]
 800206a:	4b68      	ldr	r3, [pc, #416]	@ (800220c <main+0x4c4>)
 800206c:	801a      	strh	r2, [r3, #0]

		  				sprintf(debug, "X = %d | Y = %d", coords[0], coords[1]);
 800206e:	4b65      	ldr	r3, [pc, #404]	@ (8002204 <main+0x4bc>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	4b63      	ldr	r3, [pc, #396]	@ (8002204 <main+0x4bc>)
 8002076:	885b      	ldrh	r3, [r3, #2]
 8002078:	4965      	ldr	r1, [pc, #404]	@ (8002210 <main+0x4c8>)
 800207a:	4860      	ldr	r0, [pc, #384]	@ (80021fc <main+0x4b4>)
 800207c:	f005 fdda 	bl	8007c34 <siprintf>
		  				HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);
 8002080:	485e      	ldr	r0, [pc, #376]	@ (80021fc <main+0x4b4>)
 8002082:	f7fe f92d 	bl	80002e0 <strlen>
 8002086:	4603      	mov	r3, r0
 8002088:	b29a      	uxth	r2, r3
 800208a:	23c8      	movs	r3, #200	@ 0xc8
 800208c:	495b      	ldr	r1, [pc, #364]	@ (80021fc <main+0x4b4>)
 800208e:	485c      	ldr	r0, [pc, #368]	@ (8002200 <main+0x4b8>)
 8002090:	f004 f9ca 	bl	8006428 <HAL_UART_Transmit>

		  				if ((tx >= 85 && tx <= 115) && (ty >= 265 && ty <= 295)) {
 8002094:	4b5c      	ldr	r3, [pc, #368]	@ (8002208 <main+0x4c0>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	2b54      	cmp	r3, #84	@ 0x54
 800209a:	d940      	bls.n	800211e <main+0x3d6>
 800209c:	4b5a      	ldr	r3, [pc, #360]	@ (8002208 <main+0x4c0>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	2b73      	cmp	r3, #115	@ 0x73
 80020a2:	d83c      	bhi.n	800211e <main+0x3d6>
 80020a4:	4b59      	ldr	r3, [pc, #356]	@ (800220c <main+0x4c4>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80020ac:	d937      	bls.n	800211e <main+0x3d6>
 80020ae:	4b57      	ldr	r3, [pc, #348]	@ (800220c <main+0x4c4>)
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 80020b6:	d232      	bcs.n	800211e <main+0x3d6>
		  					Red_L += 0.1;
 80020b8:	4b4a      	ldr	r3, [pc, #296]	@ (80021e4 <main+0x49c>)
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020c2:	ed9f 6b3d 	vldr	d6, [pc, #244]	@ 80021b8 <main+0x470>
 80020c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020ce:	4b45      	ldr	r3, [pc, #276]	@ (80021e4 <main+0x49c>)
 80020d0:	edc3 7a00 	vstr	s15, [r3]
		  			  		if (Red_L > 1.01) {
 80020d4:	4b43      	ldr	r3, [pc, #268]	@ (80021e4 <main+0x49c>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020de:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 80021c0 <main+0x478>
 80020e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80020e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ea:	dd03      	ble.n	80020f4 <main+0x3ac>
		  			  			Red_L = 0;
 80020ec:	4b3d      	ldr	r3, [pc, #244]	@ (80021e4 <main+0x49c>)
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
		  			  		}

		  					sprintf(debug, "Red_L = %.2f\r\n", Red_L);
 80020f4:	4b3b      	ldr	r3, [pc, #236]	@ (80021e4 <main+0x49c>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020fe:	ec53 2b17 	vmov	r2, r3, d7
 8002102:	4944      	ldr	r1, [pc, #272]	@ (8002214 <main+0x4cc>)
 8002104:	483d      	ldr	r0, [pc, #244]	@ (80021fc <main+0x4b4>)
 8002106:	f005 fd95 	bl	8007c34 <siprintf>
		  					HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);
 800210a:	483c      	ldr	r0, [pc, #240]	@ (80021fc <main+0x4b4>)
 800210c:	f7fe f8e8 	bl	80002e0 <strlen>
 8002110:	4603      	mov	r3, r0
 8002112:	b29a      	uxth	r2, r3
 8002114:	23c8      	movs	r3, #200	@ 0xc8
 8002116:	4939      	ldr	r1, [pc, #228]	@ (80021fc <main+0x4b4>)
 8002118:	4839      	ldr	r0, [pc, #228]	@ (8002200 <main+0x4b8>)
 800211a:	f004 f985 	bl	8006428 <HAL_UART_Transmit>
		  				}

		  			    if ((tx >= 135 && tx <= 165) && (ty >= 265 && ty <= 295)) {
 800211e:	4b3a      	ldr	r3, [pc, #232]	@ (8002208 <main+0x4c0>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	2b86      	cmp	r3, #134	@ 0x86
 8002124:	d940      	bls.n	80021a8 <main+0x460>
 8002126:	4b38      	ldr	r3, [pc, #224]	@ (8002208 <main+0x4c0>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	2ba5      	cmp	r3, #165	@ 0xa5
 800212c:	d83c      	bhi.n	80021a8 <main+0x460>
 800212e:	4b37      	ldr	r3, [pc, #220]	@ (800220c <main+0x4c4>)
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8002136:	d937      	bls.n	80021a8 <main+0x460>
 8002138:	4b34      	ldr	r3, [pc, #208]	@ (800220c <main+0x4c4>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8002140:	d232      	bcs.n	80021a8 <main+0x460>
		  					Green_L += 0.1;
 8002142:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <main+0x4a4>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800214c:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 80021b8 <main+0x470>
 8002150:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002154:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002158:	4b24      	ldr	r3, [pc, #144]	@ (80021ec <main+0x4a4>)
 800215a:	edc3 7a00 	vstr	s15, [r3]
		  			  		if (Green_L > 1.01) {
 800215e:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <main+0x4a4>)
 8002160:	edd3 7a00 	vldr	s15, [r3]
 8002164:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002168:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 80021c0 <main+0x478>
 800216c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002174:	dd03      	ble.n	800217e <main+0x436>
		  			  			Green_L = 0;
 8002176:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <main+0x4a4>)
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
		  			  		}

		  					sprintf(debug, "Green_L = %.2f\r\n", Green_L);
 800217e:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <main+0x4a4>)
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002188:	ec53 2b17 	vmov	r2, r3, d7
 800218c:	4922      	ldr	r1, [pc, #136]	@ (8002218 <main+0x4d0>)
 800218e:	481b      	ldr	r0, [pc, #108]	@ (80021fc <main+0x4b4>)
 8002190:	f005 fd50 	bl	8007c34 <siprintf>
		  					HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);
 8002194:	4819      	ldr	r0, [pc, #100]	@ (80021fc <main+0x4b4>)
 8002196:	f7fe f8a3 	bl	80002e0 <strlen>
 800219a:	4603      	mov	r3, r0
 800219c:	b29a      	uxth	r2, r3
 800219e:	23c8      	movs	r3, #200	@ 0xc8
 80021a0:	4916      	ldr	r1, [pc, #88]	@ (80021fc <main+0x4b4>)
 80021a2:	4817      	ldr	r0, [pc, #92]	@ (8002200 <main+0x4b8>)
 80021a4:	f004 f940 	bl	8006428 <HAL_UART_Transmit>
		  				}

		  				if ((tx >= 185 && tx <= 215) && (ty >= 265 && ty <= 295)) {
 80021a8:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <main+0x4c0>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	2bb8      	cmp	r3, #184	@ 0xb8
 80021ae:	d973      	bls.n	8002298 <main+0x550>
 80021b0:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <main+0x4c0>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	2bd7      	cmp	r3, #215	@ 0xd7
 80021b6:	e031      	b.n	800221c <main+0x4d4>
 80021b8:	9999999a 	.word	0x9999999a
 80021bc:	3fb99999 	.word	0x3fb99999
 80021c0:	c28f5c29 	.word	0xc28f5c29
 80021c4:	3ff028f5 	.word	0x3ff028f5
 80021c8:	20000008 	.word	0x20000008
 80021cc:	200002c4 	.word	0x200002c4
 80021d0:	20000004 	.word	0x20000004
 80021d4:	0800b350 	.word	0x0800b350
 80021d8:	200002e0 	.word	0x200002e0
 80021dc:	0800b358 	.word	0x0800b358
 80021e0:	200002e8 	.word	0x200002e8
 80021e4:	200002d0 	.word	0x200002d0
 80021e8:	432a0000 	.word	0x432a0000
 80021ec:	200002d4 	.word	0x200002d4
 80021f0:	200002d8 	.word	0x200002d8
 80021f4:	200002cc 	.word	0x200002cc
 80021f8:	0800b39c 	.word	0x0800b39c
 80021fc:	2000028c 	.word	0x2000028c
 8002200:	20000404 	.word	0x20000404
 8002204:	20000250 	.word	0x20000250
 8002208:	20000254 	.word	0x20000254
 800220c:	20000256 	.word	0x20000256
 8002210:	0800b3b0 	.word	0x0800b3b0
 8002214:	0800b3c0 	.word	0x0800b3c0
 8002218:	0800b3d0 	.word	0x0800b3d0
 800221c:	d83c      	bhi.n	8002298 <main+0x550>
 800221e:	4b72      	ldr	r3, [pc, #456]	@ (80023e8 <main+0x6a0>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8002226:	d937      	bls.n	8002298 <main+0x550>
 8002228:	4b6f      	ldr	r3, [pc, #444]	@ (80023e8 <main+0x6a0>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8002230:	d232      	bcs.n	8002298 <main+0x550>
		  					Blue_L += 0.1;
 8002232:	4b6e      	ldr	r3, [pc, #440]	@ (80023ec <main+0x6a4>)
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800223c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80023d8 <main+0x690>
 8002240:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002244:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002248:	4b68      	ldr	r3, [pc, #416]	@ (80023ec <main+0x6a4>)
 800224a:	edc3 7a00 	vstr	s15, [r3]
		  			  		if (Blue_L > 1.01) {
 800224e:	4b67      	ldr	r3, [pc, #412]	@ (80023ec <main+0x6a4>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002258:	ed9f 6b61 	vldr	d6, [pc, #388]	@ 80023e0 <main+0x698>
 800225c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002264:	dd03      	ble.n	800226e <main+0x526>
		  			  			Blue_L = 0;
 8002266:	4b61      	ldr	r3, [pc, #388]	@ (80023ec <main+0x6a4>)
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
		  			  		}

		  					sprintf(debug, "Blue_L = %.2f\r\n", Blue_L);
 800226e:	4b5f      	ldr	r3, [pc, #380]	@ (80023ec <main+0x6a4>)
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002278:	ec53 2b17 	vmov	r2, r3, d7
 800227c:	495c      	ldr	r1, [pc, #368]	@ (80023f0 <main+0x6a8>)
 800227e:	485d      	ldr	r0, [pc, #372]	@ (80023f4 <main+0x6ac>)
 8002280:	f005 fcd8 	bl	8007c34 <siprintf>
		  					HAL_UART_Transmit(&huart3, (uint8_t*)debug, strlen(debug), 200);
 8002284:	485b      	ldr	r0, [pc, #364]	@ (80023f4 <main+0x6ac>)
 8002286:	f7fe f82b 	bl	80002e0 <strlen>
 800228a:	4603      	mov	r3, r0
 800228c:	b29a      	uxth	r2, r3
 800228e:	23c8      	movs	r3, #200	@ 0xc8
 8002290:	4958      	ldr	r1, [pc, #352]	@ (80023f4 <main+0x6ac>)
 8002292:	4859      	ldr	r0, [pc, #356]	@ (80023f8 <main+0x6b0>)
 8002294:	f004 f8c8 	bl	8006428 <HAL_UART_Transmit>
		  				}

		  				if ((tx >= 30 && tx <= 60) && (ty >= 155 && ty <= 185)) {
 8002298:	4b58      	ldr	r3, [pc, #352]	@ (80023fc <main+0x6b4>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	2b1d      	cmp	r3, #29
 800229e:	d90f      	bls.n	80022c0 <main+0x578>
 80022a0:	4b56      	ldr	r3, [pc, #344]	@ (80023fc <main+0x6b4>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	2b3c      	cmp	r3, #60	@ 0x3c
 80022a6:	d80b      	bhi.n	80022c0 <main+0x578>
 80022a8:	4b4f      	ldr	r3, [pc, #316]	@ (80023e8 <main+0x6a0>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	2b9a      	cmp	r3, #154	@ 0x9a
 80022ae:	d907      	bls.n	80022c0 <main+0x578>
 80022b0:	4b4d      	ldr	r3, [pc, #308]	@ (80023e8 <main+0x6a0>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	2bb9      	cmp	r3, #185	@ 0xb9
 80022b6:	d803      	bhi.n	80022c0 <main+0x578>
		  					screen = 1;
 80022b8:	4b51      	ldr	r3, [pc, #324]	@ (8002400 <main+0x6b8>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
		  					continue;
 80022be:	e089      	b.n	80023d4 <main+0x68c>
		  				}

		  				mixColor();
 80022c0:	f7ff fc12 	bl	8001ae8 <mixColor>
 80022c4:	e564      	b.n	8001d90 <main+0x48>
		  			}
		  		}
	  }
	  else if (screen == 1) {
 80022c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002400 <main+0x6b8>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	f47f ad60 	bne.w	8001d90 <main+0x48>
	      ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f7fe fdb9 	bl	8000e48 <ILI9341_Set_Rotation>
	  	  ILI9341_Fill_Screen(WHITE);
 80022d6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80022da:	f7fe ffbf 	bl	800125c <ILI9341_Fill_Screen>
//	      ILI9341_Draw_Image(CHILL_GUY, SCREEN_HORIZONTAL_1);

	      char group[] = "Group #28";
 80022de:	4a49      	ldr	r2, [pc, #292]	@ (8002404 <main+0x6bc>)
 80022e0:	f107 0320 	add.w	r3, r7, #32
 80022e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80022e6:	c303      	stmia	r3!, {r0, r1}
 80022e8:	801a      	strh	r2, [r3, #0]
	      ILI9341_Draw_Text(group, 144, 64 + (32 * 0), mixedColor, 2, WHITE);
 80022ea:	4b47      	ldr	r3, [pc, #284]	@ (8002408 <main+0x6c0>)
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	f107 0020 	add.w	r0, r7, #32
 80022f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022f6:	9201      	str	r2, [sp, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	9200      	str	r2, [sp, #0]
 80022fc:	2240      	movs	r2, #64	@ 0x40
 80022fe:	2190      	movs	r1, #144	@ 0x90
 8002300:	f7fe fca2 	bl	8000c48 <ILI9341_Draw_Text>

	      char name[] = "Jiraphat";
 8002304:	4a41      	ldr	r2, [pc, #260]	@ (800240c <main+0x6c4>)
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	ca07      	ldmia	r2, {r0, r1, r2}
 800230c:	c303      	stmia	r3!, {r0, r1}
 800230e:	701a      	strb	r2, [r3, #0]
	      ILI9341_Draw_Text(name, 144, 64 + (32 * 1), mixedColor, 2, WHITE);
 8002310:	4b3d      	ldr	r3, [pc, #244]	@ (8002408 <main+0x6c0>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	f107 0014 	add.w	r0, r7, #20
 8002318:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800231c:	9201      	str	r2, [sp, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	9200      	str	r2, [sp, #0]
 8002322:	2260      	movs	r2, #96	@ 0x60
 8002324:	2190      	movs	r1, #144	@ 0x90
 8002326:	f7fe fc8f 	bl	8000c48 <ILI9341_Draw_Text>

	      char surname[] = "Sabutr";
 800232a:	4a39      	ldr	r2, [pc, #228]	@ (8002410 <main+0x6c8>)
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002334:	6018      	str	r0, [r3, #0]
 8002336:	3304      	adds	r3, #4
 8002338:	8019      	strh	r1, [r3, #0]
 800233a:	3302      	adds	r3, #2
 800233c:	0c0a      	lsrs	r2, r1, #16
 800233e:	701a      	strb	r2, [r3, #0]
	      ILI9341_Draw_Text(surname, 144, 64 + (32 * 2), mixedColor, 2, WHITE);
 8002340:	4b31      	ldr	r3, [pc, #196]	@ (8002408 <main+0x6c0>)
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	f107 000c 	add.w	r0, r7, #12
 8002348:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800234c:	9201      	str	r2, [sp, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	9200      	str	r2, [sp, #0]
 8002352:	2280      	movs	r2, #128	@ 0x80
 8002354:	2190      	movs	r1, #144	@ 0x90
 8002356:	f7fe fc77 	bl	8000c48 <ILI9341_Draw_Text>

	      char id[] = "66010121";
 800235a:	4a2e      	ldr	r2, [pc, #184]	@ (8002414 <main+0x6cc>)
 800235c:	463b      	mov	r3, r7
 800235e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002360:	c303      	stmia	r3!, {r0, r1}
 8002362:	701a      	strb	r2, [r3, #0]
	      ILI9341_Draw_Text(id, 144, 64 + (32 * 3), mixedColor, 2, WHITE);
 8002364:	4b28      	ldr	r3, [pc, #160]	@ (8002408 <main+0x6c0>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	4638      	mov	r0, r7
 800236a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800236e:	9201      	str	r2, [sp, #4]
 8002370:	2202      	movs	r2, #2
 8002372:	9200      	str	r2, [sp, #0]
 8002374:	22a0      	movs	r2, #160	@ 0xa0
 8002376:	2190      	movs	r1, #144	@ 0x90
 8002378:	f7fe fc66 	bl	8000c48 <ILI9341_Draw_Text>

	      HAL_TIM_Base_Start_IT(&htim2);
 800237c:	4826      	ldr	r0, [pc, #152]	@ (8002418 <main+0x6d0>)
 800237e:	f003 fb9d 	bl	8005abc <HAL_TIM_Base_Start_IT>

	      while (screen == 1) {
 8002382:	e023      	b.n	80023cc <main+0x684>
	              if (TP_Read_Coordinates(coords) == TOUCHPAD_DATA_OK) {
 8002384:	4825      	ldr	r0, [pc, #148]	@ (800241c <main+0x6d4>)
 8002386:	f7ff f927 	bl	80015d8 <TP_Read_Coordinates>
 800238a:	4603      	mov	r3, r0
 800238c:	2b01      	cmp	r3, #1
 800238e:	d11d      	bne.n	80023cc <main+0x684>
	                tx = coords[0];
 8002390:	4b22      	ldr	r3, [pc, #136]	@ (800241c <main+0x6d4>)
 8002392:	881a      	ldrh	r2, [r3, #0]
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <main+0x6b4>)
 8002396:	801a      	strh	r2, [r3, #0]
	                ty = coords[1];
 8002398:	4b20      	ldr	r3, [pc, #128]	@ (800241c <main+0x6d4>)
 800239a:	885a      	ldrh	r2, [r3, #2]
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <main+0x6a0>)
 800239e:	801a      	strh	r2, [r3, #0]
	                // ILI9341_Draw_Text(counter_buff, 10, 0, BLACK, 2, WHITE);
	                // sprintf(counter_buff, "POS Y: %.3d", posY);
	                // ILI9341_Draw_Text(counter_buff, 10, 16, BLACK, 2, WHITE);
	                // ILI9341_Set_Rotation(SCREEN_VERTICAL_1);

	                if ((tx >= 28 && tx <= 226) && (ty >= 16 && ty <= 134)) {
 80023a0:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <main+0x6b4>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	2b1b      	cmp	r3, #27
 80023a6:	d911      	bls.n	80023cc <main+0x684>
 80023a8:	4b14      	ldr	r3, [pc, #80]	@ (80023fc <main+0x6b4>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	2be2      	cmp	r3, #226	@ 0xe2
 80023ae:	d80d      	bhi.n	80023cc <main+0x684>
 80023b0:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <main+0x6a0>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	2b0f      	cmp	r3, #15
 80023b6:	d909      	bls.n	80023cc <main+0x684>
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <main+0x6a0>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	2b86      	cmp	r3, #134	@ 0x86
 80023be:	d805      	bhi.n	80023cc <main+0x684>
	                  screen = 0;
 80023c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002400 <main+0x6b8>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
	                  initializeScreen0();
 80023c6:	f7ff fc07 	bl	8001bd8 <initializeScreen0>
	                  break;
 80023ca:	e003      	b.n	80023d4 <main+0x68c>
	      while (screen == 1) {
 80023cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002400 <main+0x6b8>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d0d7      	beq.n	8002384 <main+0x63c>
	  sprintf(debug, "Screen = %d\n", screen);
 80023d4:	e4dc      	b.n	8001d90 <main+0x48>
 80023d6:	bf00      	nop
 80023d8:	9999999a 	.word	0x9999999a
 80023dc:	3fb99999 	.word	0x3fb99999
 80023e0:	c28f5c29 	.word	0xc28f5c29
 80023e4:	3ff028f5 	.word	0x3ff028f5
 80023e8:	20000256 	.word	0x20000256
 80023ec:	200002d8 	.word	0x200002d8
 80023f0:	0800b3e4 	.word	0x0800b3e4
 80023f4:	2000028c 	.word	0x2000028c
 80023f8:	20000404 	.word	0x20000404
 80023fc:	20000254 	.word	0x20000254
 8002400:	200002f0 	.word	0x200002f0
 8002404:	0800b3f4 	.word	0x0800b3f4
 8002408:	200002cc 	.word	0x200002cc
 800240c:	0800b400 	.word	0x0800b400
 8002410:	0800b40c 	.word	0x0800b40c
 8002414:	0800b414 	.word	0x0800b414
 8002418:	200003b8 	.word	0x200003b8
 800241c:	20000250 	.word	0x20000250

08002420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b094      	sub	sp, #80	@ 0x50
 8002424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	2234      	movs	r2, #52	@ 0x34
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f005 fc65 	bl	8007cfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002434:	f107 0308 	add.w	r3, r7, #8
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4b2b      	ldr	r3, [pc, #172]	@ (80024f4 <SystemClock_Config+0xd4>)
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	4a2a      	ldr	r2, [pc, #168]	@ (80024f4 <SystemClock_Config+0xd4>)
 800244a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800244e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002450:	4b28      	ldr	r3, [pc, #160]	@ (80024f4 <SystemClock_Config+0xd4>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800245c:	4b26      	ldr	r3, [pc, #152]	@ (80024f8 <SystemClock_Config+0xd8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a25      	ldr	r2, [pc, #148]	@ (80024f8 <SystemClock_Config+0xd8>)
 8002462:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b23      	ldr	r3, [pc, #140]	@ (80024f8 <SystemClock_Config+0xd8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002474:	2302      	movs	r3, #2
 8002476:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002478:	2301      	movs	r3, #1
 800247a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800247c:	2310      	movs	r3, #16
 800247e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002480:	2302      	movs	r3, #2
 8002482:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002484:	2300      	movs	r3, #0
 8002486:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002488:	2308      	movs	r3, #8
 800248a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800248c:	23d8      	movs	r3, #216	@ 0xd8
 800248e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002490:	2302      	movs	r3, #2
 8002492:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002494:	2309      	movs	r3, #9
 8002496:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002498:	2302      	movs	r3, #2
 800249a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 fe23 	bl	80040ec <HAL_RCC_OscConfig>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80024ac:	f000 f852 	bl	8002554 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80024b0:	f001 fdcc 	bl	800404c <HAL_PWREx_EnableOverDrive>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80024ba:	f000 f84b 	bl	8002554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024be:	230f      	movs	r3, #15
 80024c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c2:	2302      	movs	r3, #2
 80024c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80024d6:	f107 0308 	add.w	r3, r7, #8
 80024da:	2107      	movs	r1, #7
 80024dc:	4618      	mov	r0, r3
 80024de:	f002 f8b3 	bl	8004648 <HAL_RCC_ClockConfig>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80024e8:	f000 f834 	bl	8002554 <Error_Handler>
  }
}
 80024ec:	bf00      	nop
 80024ee:	3750      	adds	r7, #80	@ 0x50
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40007000 	.word	0x40007000

080024fc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002502:	463b      	mov	r3, r7
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800250e:	f000 fd5f 	bl	8002fd0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002512:	2301      	movs	r3, #1
 8002514:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002516:	2300      	movs	r3, #0
 8002518:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800251a:	2300      	movs	r3, #0
 800251c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800251e:	231f      	movs	r3, #31
 8002520:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002522:	2387      	movs	r3, #135	@ 0x87
 8002524:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002526:	2300      	movs	r3, #0
 8002528:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800252a:	2300      	movs	r3, #0
 800252c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800252e:	2301      	movs	r3, #1
 8002530:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002532:	2301      	movs	r3, #1
 8002534:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800253e:	463b      	mov	r3, r7
 8002540:	4618      	mov	r0, r3
 8002542:	f000 fd7d 	bl	8003040 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002546:	2004      	movs	r0, #4
 8002548:	f000 fd5a 	bl	8003000 <HAL_MPU_Enable>

}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002558:	b672      	cpsid	i
}
 800255a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <Error_Handler+0x8>

08002560 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002564:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <MX_RNG_Init+0x20>)
 8002566:	4a07      	ldr	r2, [pc, #28]	@ (8002584 <MX_RNG_Init+0x24>)
 8002568:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800256a:	4805      	ldr	r0, [pc, #20]	@ (8002580 <MX_RNG_Init+0x20>)
 800256c:	f002 fe7a 	bl	8005264 <HAL_RNG_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002576:	f7ff ffed 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200002f4 	.word	0x200002f4
 8002584:	50060800 	.word	0x50060800

08002588 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b0a8      	sub	sp, #160	@ 0xa0
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	2290      	movs	r2, #144	@ 0x90
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f005 fbb0 	bl	8007cfe <memset>
  if(rngHandle->Instance==RNG)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a11      	ldr	r2, [pc, #68]	@ (80025e8 <HAL_RNG_MspInit+0x60>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d11b      	bne.n	80025e0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80025a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	4618      	mov	r0, r3
 80025ba:	f002 fa2b 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80025c4:	f7ff ffc6 	bl	8002554 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80025c8:	4b08      	ldr	r3, [pc, #32]	@ (80025ec <HAL_RNG_MspInit+0x64>)
 80025ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025cc:	4a07      	ldr	r2, [pc, #28]	@ (80025ec <HAL_RNG_MspInit+0x64>)
 80025ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_RNG_MspInit+0x64>)
 80025d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80025e0:	bf00      	nop
 80025e2:	37a0      	adds	r7, #160	@ 0xa0
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	50060800 	.word	0x50060800
 80025ec:	40023800 	.word	0x40023800

080025f0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <MX_SPI5_Init+0x74>)
 80025f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002668 <MX_SPI5_Init+0x78>)
 80025f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <MX_SPI5_Init+0x74>)
 80025fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002600:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002602:	4b18      	ldr	r3, [pc, #96]	@ (8002664 <MX_SPI5_Init+0x74>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002608:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <MX_SPI5_Init+0x74>)
 800260a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800260e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002610:	4b14      	ldr	r3, [pc, #80]	@ (8002664 <MX_SPI5_Init+0x74>)
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002616:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <MX_SPI5_Init+0x74>)
 8002618:	2200      	movs	r2, #0
 800261a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800261c:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <MX_SPI5_Init+0x74>)
 800261e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002622:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002624:	4b0f      	ldr	r3, [pc, #60]	@ (8002664 <MX_SPI5_Init+0x74>)
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800262a:	4b0e      	ldr	r3, [pc, #56]	@ (8002664 <MX_SPI5_Init+0x74>)
 800262c:	2200      	movs	r2, #0
 800262e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002630:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <MX_SPI5_Init+0x74>)
 8002632:	2200      	movs	r2, #0
 8002634:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002636:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <MX_SPI5_Init+0x74>)
 8002638:	2200      	movs	r2, #0
 800263a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 800263c:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <MX_SPI5_Init+0x74>)
 800263e:	2207      	movs	r2, #7
 8002640:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002642:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <MX_SPI5_Init+0x74>)
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002648:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <MX_SPI5_Init+0x74>)
 800264a:	2200      	movs	r2, #0
 800264c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800264e:	4805      	ldr	r0, [pc, #20]	@ (8002664 <MX_SPI5_Init+0x74>)
 8002650:	f002 fe32 	bl	80052b8 <HAL_SPI_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800265a:	f7ff ff7b 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000304 	.word	0x20000304
 8002668:	40015000 	.word	0x40015000

0800266c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	@ 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a17      	ldr	r2, [pc, #92]	@ (80026e8 <HAL_SPI_MspInit+0x7c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d128      	bne.n	80026e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800268e:	4b17      	ldr	r3, [pc, #92]	@ (80026ec <HAL_SPI_MspInit+0x80>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	4a16      	ldr	r2, [pc, #88]	@ (80026ec <HAL_SPI_MspInit+0x80>)
 8002694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002698:	6453      	str	r3, [r2, #68]	@ 0x44
 800269a:	4b14      	ldr	r3, [pc, #80]	@ (80026ec <HAL_SPI_MspInit+0x80>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026a6:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <HAL_SPI_MspInit+0x80>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	4a10      	ldr	r2, [pc, #64]	@ (80026ec <HAL_SPI_MspInit+0x80>)
 80026ac:	f043 0320 	orr.w	r3, r3, #32
 80026b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b2:	4b0e      	ldr	r3, [pc, #56]	@ (80026ec <HAL_SPI_MspInit+0x80>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80026be:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80026c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026cc:	2303      	movs	r3, #3
 80026ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80026d0:	2305      	movs	r3, #5
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	4619      	mov	r1, r3
 80026da:	4805      	ldr	r0, [pc, #20]	@ (80026f0 <HAL_SPI_MspInit+0x84>)
 80026dc:	f000 fcf0 	bl	80030c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80026e0:	bf00      	nop
 80026e2:	3728      	adds	r7, #40	@ 0x28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40015000 	.word	0x40015000
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40021400 	.word	0x40021400

080026f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002738 <HAL_MspInit+0x44>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002738 <HAL_MspInit+0x44>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	@ 0x40
 8002706:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <HAL_MspInit+0x44>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <HAL_MspInit+0x44>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	4a08      	ldr	r2, [pc, #32]	@ (8002738 <HAL_MspInit+0x44>)
 8002718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800271c:	6453      	str	r3, [r2, #68]	@ 0x44
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_MspInit+0x44>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800

0800273c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <NMI_Handler+0x4>

08002744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <HardFault_Handler+0x4>

0800274c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <MemManage_Handler+0x4>

08002754 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <BusFault_Handler+0x4>

0800275c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <UsageFault_Handler+0x4>

08002764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002792:	f000 fac7 	bl	8002d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027a0:	4802      	ldr	r0, [pc, #8]	@ (80027ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80027a2:	f003 fa03 	bl	8005bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	2000036c 	.word	0x2000036c

080027b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027b4:	4802      	ldr	r0, [pc, #8]	@ (80027c0 <TIM2_IRQHandler+0x10>)
 80027b6:	f003 f9f9 	bl	8005bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200003b8 	.word	0x200003b8

080027c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return 1;
 80027c8:	2301      	movs	r3, #1
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <_kill>:

int _kill(int pid, int sig)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027de:	f005 fae1 	bl	8007da4 <__errno>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2216      	movs	r2, #22
 80027e6:	601a      	str	r2, [r3, #0]
  return -1;
 80027e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <_exit>:

void _exit (int status)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ffe7 	bl	80027d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002806:	bf00      	nop
 8002808:	e7fd      	b.n	8002806 <_exit+0x12>

0800280a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b086      	sub	sp, #24
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e00a      	b.n	8002832 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800281c:	f3af 8000 	nop.w
 8002820:	4601      	mov	r1, r0
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	60ba      	str	r2, [r7, #8]
 8002828:	b2ca      	uxtb	r2, r1
 800282a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	3301      	adds	r3, #1
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	429a      	cmp	r2, r3
 8002838:	dbf0      	blt.n	800281c <_read+0x12>
  }

  return len;
 800283a:	687b      	ldr	r3, [r7, #4]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	e009      	b.n	800286a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	60ba      	str	r2, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	3301      	adds	r3, #1
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	429a      	cmp	r2, r3
 8002870:	dbf1      	blt.n	8002856 <_write+0x12>
  }
  return len;
 8002872:	687b      	ldr	r3, [r7, #4]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <_close>:

int _close(int file)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028a4:	605a      	str	r2, [r3, #4]
  return 0;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_isatty>:

int _isatty(int file)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028bc:	2301      	movs	r3, #1
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028ec:	4a14      	ldr	r2, [pc, #80]	@ (8002940 <_sbrk+0x5c>)
 80028ee:	4b15      	ldr	r3, [pc, #84]	@ (8002944 <_sbrk+0x60>)
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f8:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <_sbrk+0x64>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <_sbrk+0x64>)
 8002902:	4a12      	ldr	r2, [pc, #72]	@ (800294c <_sbrk+0x68>)
 8002904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002906:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <_sbrk+0x64>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	429a      	cmp	r2, r3
 8002912:	d207      	bcs.n	8002924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002914:	f005 fa46 	bl	8007da4 <__errno>
 8002918:	4603      	mov	r3, r0
 800291a:	220c      	movs	r2, #12
 800291c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800291e:	f04f 33ff 	mov.w	r3, #4294967295
 8002922:	e009      	b.n	8002938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002924:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <_sbrk+0x64>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800292a:	4b07      	ldr	r3, [pc, #28]	@ (8002948 <_sbrk+0x64>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	4a05      	ldr	r2, [pc, #20]	@ (8002948 <_sbrk+0x64>)
 8002934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002936:	68fb      	ldr	r3, [r7, #12]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20080000 	.word	0x20080000
 8002944:	00000400 	.word	0x00000400
 8002948:	20000368 	.word	0x20000368
 800294c:	200005e0 	.word	0x200005e0

08002950 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <SystemInit+0x20>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295a:	4a05      	ldr	r2, [pc, #20]	@ (8002970 <SystemInit+0x20>)
 800295c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002960:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800297a:	f107 0310 	add.w	r3, r7, #16
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002992:	4b20      	ldr	r3, [pc, #128]	@ (8002a14 <MX_TIM1_Init+0xa0>)
 8002994:	4a20      	ldr	r2, [pc, #128]	@ (8002a18 <MX_TIM1_Init+0xa4>)
 8002996:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8002998:	4b1e      	ldr	r3, [pc, #120]	@ (8002a14 <MX_TIM1_Init+0xa0>)
 800299a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800299e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a14 <MX_TIM1_Init+0xa0>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80029a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <MX_TIM1_Init+0xa0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80029ac:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <MX_TIM1_Init+0xa0>)
 80029ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029b4:	4b17      	ldr	r3, [pc, #92]	@ (8002a14 <MX_TIM1_Init+0xa0>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ba:	4b16      	ldr	r3, [pc, #88]	@ (8002a14 <MX_TIM1_Init+0xa0>)
 80029bc:	2200      	movs	r2, #0
 80029be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029c0:	4814      	ldr	r0, [pc, #80]	@ (8002a14 <MX_TIM1_Init+0xa0>)
 80029c2:	f003 f823 	bl	8005a0c <HAL_TIM_Base_Init>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80029cc:	f7ff fdc2 	bl	8002554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029d6:	f107 0310 	add.w	r3, r7, #16
 80029da:	4619      	mov	r1, r3
 80029dc:	480d      	ldr	r0, [pc, #52]	@ (8002a14 <MX_TIM1_Init+0xa0>)
 80029de:	f003 f9ed 	bl	8005dbc <HAL_TIM_ConfigClockSource>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80029e8:	f7ff fdb4 	bl	8002554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ec:	2300      	movs	r3, #0
 80029ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4805      	ldr	r0, [pc, #20]	@ (8002a14 <MX_TIM1_Init+0xa0>)
 80029fe:	f003 fc19 	bl	8006234 <HAL_TIMEx_MasterConfigSynchronization>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002a08:	f7ff fda4 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a0c:	bf00      	nop
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	2000036c 	.word	0x2000036c
 8002a18:	40010000 	.word	0x40010000

08002a1c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a22:	f107 0310 	add.w	r3, r7, #16
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a30:	1d3b      	adds	r3, r7, #4
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab0 <MX_TIM2_Init+0x94>)
 8002a3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8002a42:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab0 <MX_TIM2_Init+0x94>)
 8002a44:	226b      	movs	r2, #107	@ 0x6b
 8002a46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a48:	4b19      	ldr	r3, [pc, #100]	@ (8002ab0 <MX_TIM2_Init+0x94>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000000-1;
 8002a4e:	4b18      	ldr	r3, [pc, #96]	@ (8002ab0 <MX_TIM2_Init+0x94>)
 8002a50:	4a18      	ldr	r2, [pc, #96]	@ (8002ab4 <MX_TIM2_Init+0x98>)
 8002a52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a54:	4b16      	ldr	r3, [pc, #88]	@ (8002ab0 <MX_TIM2_Init+0x94>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a5a:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <MX_TIM2_Init+0x94>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a60:	4813      	ldr	r0, [pc, #76]	@ (8002ab0 <MX_TIM2_Init+0x94>)
 8002a62:	f002 ffd3 	bl	8005a0c <HAL_TIM_Base_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a6c:	f7ff fd72 	bl	8002554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a76:	f107 0310 	add.w	r3, r7, #16
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	480c      	ldr	r0, [pc, #48]	@ (8002ab0 <MX_TIM2_Init+0x94>)
 8002a7e:	f003 f99d 	bl	8005dbc <HAL_TIM_ConfigClockSource>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a88:	f7ff fd64 	bl	8002554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	4619      	mov	r1, r3
 8002a98:	4805      	ldr	r0, [pc, #20]	@ (8002ab0 <MX_TIM2_Init+0x94>)
 8002a9a:	f003 fbcb 	bl	8006234 <HAL_TIMEx_MasterConfigSynchronization>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002aa4:	f7ff fd56 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002aa8:	bf00      	nop
 8002aaa:	3720      	adds	r7, #32
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	200003b8 	.word	0x200003b8
 8002ab4:	004c4b3f 	.word	0x004c4b3f

08002ab8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b30 <HAL_TIM_Base_MspInit+0x78>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d114      	bne.n	8002af4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aca:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <HAL_TIM_Base_MspInit+0x7c>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	4a19      	ldr	r2, [pc, #100]	@ (8002b34 <HAL_TIM_Base_MspInit+0x7c>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ad6:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <HAL_TIM_Base_MspInit+0x7c>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	2019      	movs	r0, #25
 8002ae8:	f000 fa3b 	bl	8002f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002aec:	2019      	movs	r0, #25
 8002aee:	f000 fa54 	bl	8002f9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002af2:	e018      	b.n	8002b26 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002afc:	d113      	bne.n	8002b26 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002afe:	4b0d      	ldr	r3, [pc, #52]	@ (8002b34 <HAL_TIM_Base_MspInit+0x7c>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	4a0c      	ldr	r2, [pc, #48]	@ (8002b34 <HAL_TIM_Base_MspInit+0x7c>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <HAL_TIM_Base_MspInit+0x7c>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2102      	movs	r1, #2
 8002b1a:	201c      	movs	r0, #28
 8002b1c:	f000 fa21 	bl	8002f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b20:	201c      	movs	r0, #28
 8002b22:	f000 fa3a 	bl	8002f9a <HAL_NVIC_EnableIRQ>
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40010000 	.word	0x40010000
 8002b34:	40023800 	.word	0x40023800

08002b38 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b3c:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <MX_USART3_UART_Init+0x58>)
 8002b3e:	4a15      	ldr	r2, [pc, #84]	@ (8002b94 <MX_USART3_UART_Init+0x5c>)
 8002b40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b42:	4b13      	ldr	r3, [pc, #76]	@ (8002b90 <MX_USART3_UART_Init+0x58>)
 8002b44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b4a:	4b11      	ldr	r3, [pc, #68]	@ (8002b90 <MX_USART3_UART_Init+0x58>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b50:	4b0f      	ldr	r3, [pc, #60]	@ (8002b90 <MX_USART3_UART_Init+0x58>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <MX_USART3_UART_Init+0x58>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b90 <MX_USART3_UART_Init+0x58>)
 8002b5e:	220c      	movs	r2, #12
 8002b60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b62:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <MX_USART3_UART_Init+0x58>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b68:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <MX_USART3_UART_Init+0x58>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b6e:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <MX_USART3_UART_Init+0x58>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b74:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <MX_USART3_UART_Init+0x58>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b7a:	4805      	ldr	r0, [pc, #20]	@ (8002b90 <MX_USART3_UART_Init+0x58>)
 8002b7c:	f003 fc06 	bl	800638c <HAL_UART_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002b86:	f7ff fce5 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000404 	.word	0x20000404
 8002b94:	40004800 	.word	0x40004800

08002b98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b0ae      	sub	sp, #184	@ 0xb8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	2290      	movs	r2, #144	@ 0x90
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f005 f8a0 	bl	8007cfe <memset>
  if(uartHandle->Instance==USART3)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a22      	ldr	r2, [pc, #136]	@ (8002c4c <HAL_UART_MspInit+0xb4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d13c      	bne.n	8002c42 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002bc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bcc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f001 ff1c 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002be2:	f7ff fcb7 	bl	8002554 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002be6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <HAL_UART_MspInit+0xb8>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	4a19      	ldr	r2, [pc, #100]	@ (8002c50 <HAL_UART_MspInit+0xb8>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf2:	4b17      	ldr	r3, [pc, #92]	@ (8002c50 <HAL_UART_MspInit+0xb8>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bfe:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <HAL_UART_MspInit+0xb8>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	4a13      	ldr	r2, [pc, #76]	@ (8002c50 <HAL_UART_MspInit+0xb8>)
 8002c04:	f043 0308 	orr.w	r3, r3, #8
 8002c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0a:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <HAL_UART_MspInit+0xb8>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c30:	2307      	movs	r3, #7
 8002c32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4805      	ldr	r0, [pc, #20]	@ (8002c54 <HAL_UART_MspInit+0xbc>)
 8002c3e:	f000 fa3f 	bl	80030c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c42:	bf00      	nop
 8002c44:	37b8      	adds	r7, #184	@ 0xb8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40004800 	.word	0x40004800
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40020c00 	.word	0x40020c00

08002c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c5c:	f7ff fe78 	bl	8002950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c60:	480c      	ldr	r0, [pc, #48]	@ (8002c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c62:	490d      	ldr	r1, [pc, #52]	@ (8002c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c64:	4a0d      	ldr	r2, [pc, #52]	@ (8002c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c68:	e002      	b.n	8002c70 <LoopCopyDataInit>

08002c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c6e:	3304      	adds	r3, #4

08002c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c74:	d3f9      	bcc.n	8002c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c78:	4c0a      	ldr	r4, [pc, #40]	@ (8002ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c7c:	e001      	b.n	8002c82 <LoopFillZerobss>

08002c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c80:	3204      	adds	r2, #4

08002c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c84:	d3fb      	bcc.n	8002c7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c86:	f005 f893 	bl	8007db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c8a:	f7ff f85d 	bl	8001d48 <main>
  bx  lr    
 8002c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c90:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c98:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002c9c:	0800bab4 	.word	0x0800bab4
  ldr r2, =_sbss
 8002ca0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002ca4:	200005dc 	.word	0x200005dc

08002ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ca8:	e7fe      	b.n	8002ca8 <ADC_IRQHandler>

08002caa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cae:	2003      	movs	r0, #3
 8002cb0:	f000 f94c 	bl	8002f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb4:	200f      	movs	r0, #15
 8002cb6:	f000 f805 	bl	8002cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cba:	f7ff fd1b 	bl	80026f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ccc:	4b12      	ldr	r3, [pc, #72]	@ (8002d18 <HAL_InitTick+0x54>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b12      	ldr	r3, [pc, #72]	@ (8002d1c <HAL_InitTick+0x58>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f967 	bl	8002fb6 <HAL_SYSTICK_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00e      	b.n	8002d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b0f      	cmp	r3, #15
 8002cf6:	d80a      	bhi.n	8002d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f000 f92f 	bl	8002f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d04:	4a06      	ldr	r2, [pc, #24]	@ (8002d20 <HAL_InitTick+0x5c>)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	2000000c 	.word	0x2000000c
 8002d1c:	20000014 	.word	0x20000014
 8002d20:	20000010 	.word	0x20000010

08002d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d28:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <HAL_IncTick+0x20>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <HAL_IncTick+0x24>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4413      	add	r3, r2
 8002d34:	4a04      	ldr	r2, [pc, #16]	@ (8002d48 <HAL_IncTick+0x24>)
 8002d36:	6013      	str	r3, [r2, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000014 	.word	0x20000014
 8002d48:	2000048c 	.word	0x2000048c

08002d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d50:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <HAL_GetTick+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	2000048c 	.word	0x2000048c

08002d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff ffee 	bl	8002d4c <HAL_GetTick>
 8002d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d005      	beq.n	8002d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <HAL_Delay+0x44>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d8a:	bf00      	nop
 8002d8c:	f7ff ffde 	bl	8002d4c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d8f7      	bhi.n	8002d8c <HAL_Delay+0x28>
  {
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000014 	.word	0x20000014

08002dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <__NVIC_SetPriorityGrouping+0x40>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dd4:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dda:	4a04      	ldr	r2, [pc, #16]	@ (8002dec <__NVIC_SetPriorityGrouping+0x40>)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	60d3      	str	r3, [r2, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00
 8002df0:	05fa0000 	.word	0x05fa0000

08002df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df8:	4b04      	ldr	r3, [pc, #16]	@ (8002e0c <__NVIC_GetPriorityGrouping+0x18>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	f003 0307 	and.w	r3, r3, #7
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	db0b      	blt.n	8002e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	f003 021f 	and.w	r2, r3, #31
 8002e28:	4907      	ldr	r1, [pc, #28]	@ (8002e48 <__NVIC_EnableIRQ+0x38>)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	2001      	movs	r0, #1
 8002e32:	fa00 f202 	lsl.w	r2, r0, r2
 8002e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e000e100 	.word	0xe000e100

08002e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	6039      	str	r1, [r7, #0]
 8002e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	db0a      	blt.n	8002e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	490c      	ldr	r1, [pc, #48]	@ (8002e98 <__NVIC_SetPriority+0x4c>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	440b      	add	r3, r1
 8002e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e74:	e00a      	b.n	8002e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4908      	ldr	r1, [pc, #32]	@ (8002e9c <__NVIC_SetPriority+0x50>)
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	3b04      	subs	r3, #4
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	440b      	add	r3, r1
 8002e8a:	761a      	strb	r2, [r3, #24]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000e100 	.word	0xe000e100
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	@ 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f1c3 0307 	rsb	r3, r3, #7
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	bf28      	it	cs
 8002ebe:	2304      	movcs	r3, #4
 8002ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d902      	bls.n	8002ed0 <NVIC_EncodePriority+0x30>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3b03      	subs	r3, #3
 8002ece:	e000      	b.n	8002ed2 <NVIC_EncodePriority+0x32>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43d9      	mvns	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	4313      	orrs	r3, r2
         );
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3724      	adds	r7, #36	@ 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f18:	d301      	bcc.n	8002f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e00f      	b.n	8002f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f48 <SysTick_Config+0x40>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f26:	210f      	movs	r1, #15
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	f7ff ff8e 	bl	8002e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f30:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <SysTick_Config+0x40>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f36:	4b04      	ldr	r3, [pc, #16]	@ (8002f48 <SysTick_Config+0x40>)
 8002f38:	2207      	movs	r2, #7
 8002f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	e000e010 	.word	0xe000e010

08002f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ff29 	bl	8002dac <__NVIC_SetPriorityGrouping>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	4603      	mov	r3, r0
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f74:	f7ff ff3e 	bl	8002df4 <__NVIC_GetPriorityGrouping>
 8002f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	6978      	ldr	r0, [r7, #20]
 8002f80:	f7ff ff8e 	bl	8002ea0 <NVIC_EncodePriority>
 8002f84:	4602      	mov	r2, r0
 8002f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff5d 	bl	8002e4c <__NVIC_SetPriority>
}
 8002f92:	bf00      	nop
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff31 	bl	8002e10 <__NVIC_EnableIRQ>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff ffa2 	bl	8002f08 <SysTick_Config>
 8002fc4:	4603      	mov	r3, r0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002fd4:	f3bf 8f5f 	dmb	sy
}
 8002fd8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002fda:	4b07      	ldr	r3, [pc, #28]	@ (8002ff8 <HAL_MPU_Disable+0x28>)
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fde:	4a06      	ldr	r2, [pc, #24]	@ (8002ff8 <HAL_MPU_Disable+0x28>)
 8002fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002fe6:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <HAL_MPU_Disable+0x2c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	605a      	str	r2, [r3, #4]
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000ed00 	.word	0xe000ed00
 8002ffc:	e000ed90 	.word	0xe000ed90

08003000 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003008:	4a0b      	ldr	r2, [pc, #44]	@ (8003038 <HAL_MPU_Enable+0x38>)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003012:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <HAL_MPU_Enable+0x3c>)
 8003014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003016:	4a09      	ldr	r2, [pc, #36]	@ (800303c <HAL_MPU_Enable+0x3c>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800301c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800301e:	f3bf 8f4f 	dsb	sy
}
 8003022:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003024:	f3bf 8f6f 	isb	sy
}
 8003028:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed90 	.word	0xe000ed90
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	785a      	ldrb	r2, [r3, #1]
 800304c:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HAL_MPU_ConfigRegion+0x7c>)
 800304e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003050:	4b1a      	ldr	r3, [pc, #104]	@ (80030bc <HAL_MPU_ConfigRegion+0x7c>)
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	4a19      	ldr	r2, [pc, #100]	@ (80030bc <HAL_MPU_ConfigRegion+0x7c>)
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800305c:	4a17      	ldr	r2, [pc, #92]	@ (80030bc <HAL_MPU_ConfigRegion+0x7c>)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	7b1b      	ldrb	r3, [r3, #12]
 8003068:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7adb      	ldrb	r3, [r3, #11]
 800306e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003070:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7a9b      	ldrb	r3, [r3, #10]
 8003076:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003078:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7b5b      	ldrb	r3, [r3, #13]
 800307e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003080:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7b9b      	ldrb	r3, [r3, #14]
 8003086:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003088:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7bdb      	ldrb	r3, [r3, #15]
 800308e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003090:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	7a5b      	ldrb	r3, [r3, #9]
 8003096:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003098:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7a1b      	ldrb	r3, [r3, #8]
 800309e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030a0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	7812      	ldrb	r2, [r2, #0]
 80030a6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030a8:	4a04      	ldr	r2, [pc, #16]	@ (80030bc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030aa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030ac:	6113      	str	r3, [r2, #16]
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000ed90 	.word	0xe000ed90

080030c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b089      	sub	sp, #36	@ 0x24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	e175      	b.n	80033cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030e0:	2201      	movs	r2, #1
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	f040 8164 	bne.w	80033c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d005      	beq.n	8003116 <HAL_GPIO_Init+0x56>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d130      	bne.n	8003178 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	2203      	movs	r2, #3
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800314c:	2201      	movs	r2, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 0201 	and.w	r2, r3, #1
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b03      	cmp	r3, #3
 8003182:	d017      	beq.n	80031b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d123      	bne.n	8003208 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	08da      	lsrs	r2, r3, #3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3208      	adds	r2, #8
 80031c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	220f      	movs	r2, #15
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	08da      	lsrs	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3208      	adds	r2, #8
 8003202:	69b9      	ldr	r1, [r7, #24]
 8003204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2203      	movs	r2, #3
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0203 	and.w	r2, r3, #3
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80be 	beq.w	80033c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324a:	4b66      	ldr	r3, [pc, #408]	@ (80033e4 <HAL_GPIO_Init+0x324>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	4a65      	ldr	r2, [pc, #404]	@ (80033e4 <HAL_GPIO_Init+0x324>)
 8003250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003254:	6453      	str	r3, [r2, #68]	@ 0x44
 8003256:	4b63      	ldr	r3, [pc, #396]	@ (80033e4 <HAL_GPIO_Init+0x324>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003262:	4a61      	ldr	r2, [pc, #388]	@ (80033e8 <HAL_GPIO_Init+0x328>)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	3302      	adds	r3, #2
 800326a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	220f      	movs	r2, #15
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a58      	ldr	r2, [pc, #352]	@ (80033ec <HAL_GPIO_Init+0x32c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d037      	beq.n	80032fe <HAL_GPIO_Init+0x23e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a57      	ldr	r2, [pc, #348]	@ (80033f0 <HAL_GPIO_Init+0x330>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d031      	beq.n	80032fa <HAL_GPIO_Init+0x23a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a56      	ldr	r2, [pc, #344]	@ (80033f4 <HAL_GPIO_Init+0x334>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d02b      	beq.n	80032f6 <HAL_GPIO_Init+0x236>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a55      	ldr	r2, [pc, #340]	@ (80033f8 <HAL_GPIO_Init+0x338>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d025      	beq.n	80032f2 <HAL_GPIO_Init+0x232>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a54      	ldr	r2, [pc, #336]	@ (80033fc <HAL_GPIO_Init+0x33c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01f      	beq.n	80032ee <HAL_GPIO_Init+0x22e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a53      	ldr	r2, [pc, #332]	@ (8003400 <HAL_GPIO_Init+0x340>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d019      	beq.n	80032ea <HAL_GPIO_Init+0x22a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a52      	ldr	r2, [pc, #328]	@ (8003404 <HAL_GPIO_Init+0x344>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <HAL_GPIO_Init+0x226>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a51      	ldr	r2, [pc, #324]	@ (8003408 <HAL_GPIO_Init+0x348>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00d      	beq.n	80032e2 <HAL_GPIO_Init+0x222>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a50      	ldr	r2, [pc, #320]	@ (800340c <HAL_GPIO_Init+0x34c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d007      	beq.n	80032de <HAL_GPIO_Init+0x21e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003410 <HAL_GPIO_Init+0x350>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d101      	bne.n	80032da <HAL_GPIO_Init+0x21a>
 80032d6:	2309      	movs	r3, #9
 80032d8:	e012      	b.n	8003300 <HAL_GPIO_Init+0x240>
 80032da:	230a      	movs	r3, #10
 80032dc:	e010      	b.n	8003300 <HAL_GPIO_Init+0x240>
 80032de:	2308      	movs	r3, #8
 80032e0:	e00e      	b.n	8003300 <HAL_GPIO_Init+0x240>
 80032e2:	2307      	movs	r3, #7
 80032e4:	e00c      	b.n	8003300 <HAL_GPIO_Init+0x240>
 80032e6:	2306      	movs	r3, #6
 80032e8:	e00a      	b.n	8003300 <HAL_GPIO_Init+0x240>
 80032ea:	2305      	movs	r3, #5
 80032ec:	e008      	b.n	8003300 <HAL_GPIO_Init+0x240>
 80032ee:	2304      	movs	r3, #4
 80032f0:	e006      	b.n	8003300 <HAL_GPIO_Init+0x240>
 80032f2:	2303      	movs	r3, #3
 80032f4:	e004      	b.n	8003300 <HAL_GPIO_Init+0x240>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e002      	b.n	8003300 <HAL_GPIO_Init+0x240>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_GPIO_Init+0x240>
 80032fe:	2300      	movs	r3, #0
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	f002 0203 	and.w	r2, r2, #3
 8003306:	0092      	lsls	r2, r2, #2
 8003308:	4093      	lsls	r3, r2
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003310:	4935      	ldr	r1, [pc, #212]	@ (80033e8 <HAL_GPIO_Init+0x328>)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	089b      	lsrs	r3, r3, #2
 8003316:	3302      	adds	r3, #2
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800331e:	4b3d      	ldr	r3, [pc, #244]	@ (8003414 <HAL_GPIO_Init+0x354>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003342:	4a34      	ldr	r2, [pc, #208]	@ (8003414 <HAL_GPIO_Init+0x354>)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003348:	4b32      	ldr	r3, [pc, #200]	@ (8003414 <HAL_GPIO_Init+0x354>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800336c:	4a29      	ldr	r2, [pc, #164]	@ (8003414 <HAL_GPIO_Init+0x354>)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003372:	4b28      	ldr	r3, [pc, #160]	@ (8003414 <HAL_GPIO_Init+0x354>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003396:	4a1f      	ldr	r2, [pc, #124]	@ (8003414 <HAL_GPIO_Init+0x354>)
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800339c:	4b1d      	ldr	r3, [pc, #116]	@ (8003414 <HAL_GPIO_Init+0x354>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033c0:	4a14      	ldr	r2, [pc, #80]	@ (8003414 <HAL_GPIO_Init+0x354>)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3301      	adds	r3, #1
 80033ca:	61fb      	str	r3, [r7, #28]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b0f      	cmp	r3, #15
 80033d0:	f67f ae86 	bls.w	80030e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	3724      	adds	r7, #36	@ 0x24
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40013800 	.word	0x40013800
 80033ec:	40020000 	.word	0x40020000
 80033f0:	40020400 	.word	0x40020400
 80033f4:	40020800 	.word	0x40020800
 80033f8:	40020c00 	.word	0x40020c00
 80033fc:	40021000 	.word	0x40021000
 8003400:	40021400 	.word	0x40021400
 8003404:	40021800 	.word	0x40021800
 8003408:	40021c00 	.word	0x40021c00
 800340c:	40022000 	.word	0x40022000
 8003410:	40022400 	.word	0x40022400
 8003414:	40013c00 	.word	0x40013c00

08003418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
 8003434:	e001      	b.n	800343a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800343a:	7bfb      	ldrb	r3, [r7, #15]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
 8003454:	4613      	mov	r3, r2
 8003456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003458:	787b      	ldrb	r3, [r7, #1]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003464:	e003      	b.n	800346e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003466:	887b      	ldrh	r3, [r7, #2]
 8003468:	041a      	lsls	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	619a      	str	r2, [r3, #24]
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e08b      	b.n	80035a6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe fa84 	bl	80019b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	@ 0x24
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d107      	bne.n	80034f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	e006      	b.n	8003504 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003502:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d108      	bne.n	800351e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	e007      	b.n	800352e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800352c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b1d      	ldr	r3, [pc, #116]	@ (80035b0 <HAL_I2C_Init+0x134>)
 800353a:	430b      	orrs	r3, r1
 800353c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800354c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69d9      	ldr	r1, [r3, #28]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1a      	ldr	r2, [r3, #32]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	02008000 	.word	0x02008000

080035b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	461a      	mov	r2, r3
 80035c0:	460b      	mov	r3, r1
 80035c2:	817b      	strh	r3, [r7, #10]
 80035c4:	4613      	mov	r3, r2
 80035c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	f040 80fd 	bne.w	80037d0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_I2C_Master_Transmit+0x30>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e0f6      	b.n	80037d2 <HAL_I2C_Master_Transmit+0x21e>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035ec:	f7ff fbae 	bl	8002d4c <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	2319      	movs	r3, #25
 80035f8:	2201      	movs	r2, #1
 80035fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fa0a 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0e1      	b.n	80037d2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2221      	movs	r2, #33	@ 0x21
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2210      	movs	r2, #16
 800361a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	893a      	ldrh	r2, [r7, #8]
 800362e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	2bff      	cmp	r3, #255	@ 0xff
 800363e:	d906      	bls.n	800364e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	22ff      	movs	r2, #255	@ 0xff
 8003644:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003646:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e007      	b.n	800365e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003658:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800365c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003662:	2b00      	cmp	r3, #0
 8003664:	d024      	beq.n	80036b0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	781a      	ldrb	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369a:	b2db      	uxtb	r3, r3
 800369c:	3301      	adds	r3, #1
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	8979      	ldrh	r1, [r7, #10]
 80036a2:	4b4e      	ldr	r3, [pc, #312]	@ (80037dc <HAL_I2C_Master_Transmit+0x228>)
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fc05 	bl	8003eb8 <I2C_TransferConfig>
 80036ae:	e066      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	8979      	ldrh	r1, [r7, #10]
 80036b8:	4b48      	ldr	r3, [pc, #288]	@ (80037dc <HAL_I2C_Master_Transmit+0x228>)
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fbfa 	bl	8003eb8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80036c4:	e05b      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	6a39      	ldr	r1, [r7, #32]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f9fd 	bl	8003aca <I2C_WaitOnTXISFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e07b      	b.n	80037d2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	781a      	ldrb	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d034      	beq.n	800377e <HAL_I2C_Master_Transmit+0x1ca>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	d130      	bne.n	800377e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	2200      	movs	r2, #0
 8003724:	2180      	movs	r1, #128	@ 0x80
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f976 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e04d      	b.n	80037d2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	2bff      	cmp	r3, #255	@ 0xff
 800373e:	d90e      	bls.n	800375e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	22ff      	movs	r2, #255	@ 0xff
 8003744:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374a:	b2da      	uxtb	r2, r3
 800374c:	8979      	ldrh	r1, [r7, #10]
 800374e:	2300      	movs	r3, #0
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fbae 	bl	8003eb8 <I2C_TransferConfig>
 800375c:	e00f      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376c:	b2da      	uxtb	r2, r3
 800376e:	8979      	ldrh	r1, [r7, #10]
 8003770:	2300      	movs	r3, #0
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fb9d 	bl	8003eb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d19e      	bne.n	80036c6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	6a39      	ldr	r1, [r7, #32]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f9e3 	bl	8003b58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e01a      	b.n	80037d2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2220      	movs	r2, #32
 80037a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <HAL_I2C_Master_Transmit+0x22c>)
 80037b0:	400b      	ands	r3, r1
 80037b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e000      	b.n	80037d2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
  }
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	80002000 	.word	0x80002000
 80037e0:	fe00e800 	.word	0xfe00e800

080037e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	461a      	mov	r2, r3
 80037f0:	460b      	mov	r3, r1
 80037f2:	817b      	strh	r3, [r7, #10]
 80037f4:	4613      	mov	r3, r2
 80037f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b20      	cmp	r3, #32
 8003802:	f040 80db 	bne.w	80039bc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_I2C_Master_Receive+0x30>
 8003810:	2302      	movs	r3, #2
 8003812:	e0d4      	b.n	80039be <HAL_I2C_Master_Receive+0x1da>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800381c:	f7ff fa96 	bl	8002d4c <HAL_GetTick>
 8003820:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	2319      	movs	r3, #25
 8003828:	2201      	movs	r2, #1
 800382a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f8f2 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0bf      	b.n	80039be <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2222      	movs	r2, #34	@ 0x22
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2210      	movs	r2, #16
 800384a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	893a      	ldrh	r2, [r7, #8]
 800385e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	2bff      	cmp	r3, #255	@ 0xff
 800386e:	d90e      	bls.n	800388e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387a:	b2da      	uxtb	r2, r3
 800387c:	8979      	ldrh	r1, [r7, #10]
 800387e:	4b52      	ldr	r3, [pc, #328]	@ (80039c8 <HAL_I2C_Master_Receive+0x1e4>)
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 fb16 	bl	8003eb8 <I2C_TransferConfig>
 800388c:	e06d      	b.n	800396a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389c:	b2da      	uxtb	r2, r3
 800389e:	8979      	ldrh	r1, [r7, #10]
 80038a0:	4b49      	ldr	r3, [pc, #292]	@ (80039c8 <HAL_I2C_Master_Receive+0x1e4>)
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 fb05 	bl	8003eb8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80038ae:	e05c      	b.n	800396a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	6a39      	ldr	r1, [r7, #32]
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f993 	bl	8003be0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e07c      	b.n	80039be <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d034      	beq.n	800396a <HAL_I2C_Master_Receive+0x186>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003904:	2b00      	cmp	r3, #0
 8003906:	d130      	bne.n	800396a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	2200      	movs	r2, #0
 8003910:	2180      	movs	r1, #128	@ 0x80
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f880 	bl	8003a18 <I2C_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e04d      	b.n	80039be <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	2bff      	cmp	r3, #255	@ 0xff
 800392a:	d90e      	bls.n	800394a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	22ff      	movs	r2, #255	@ 0xff
 8003930:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003936:	b2da      	uxtb	r2, r3
 8003938:	8979      	ldrh	r1, [r7, #10]
 800393a:	2300      	movs	r3, #0
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fab8 	bl	8003eb8 <I2C_TransferConfig>
 8003948:	e00f      	b.n	800396a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003958:	b2da      	uxtb	r2, r3
 800395a:	8979      	ldrh	r1, [r7, #10]
 800395c:	2300      	movs	r3, #0
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 faa7 	bl	8003eb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d19d      	bne.n	80038b0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	6a39      	ldr	r1, [r7, #32]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f8ed 	bl	8003b58 <I2C_WaitOnSTOPFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e01a      	b.n	80039be <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2220      	movs	r2, #32
 800398e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4b0c      	ldr	r3, [pc, #48]	@ (80039cc <HAL_I2C_Master_Receive+0x1e8>)
 800399c:	400b      	ands	r3, r1
 800399e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e000      	b.n	80039be <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
  }
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	80002400 	.word	0x80002400
 80039cc:	fe00e800 	.word	0xfe00e800

080039d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d103      	bne.n	80039ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d007      	beq.n	8003a0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	619a      	str	r2, [r3, #24]
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a28:	e03b      	b.n	8003aa2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	6839      	ldr	r1, [r7, #0]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f962 	bl	8003cf8 <I2C_IsErrorOccurred>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e041      	b.n	8003ac2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d02d      	beq.n	8003aa2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a46:	f7ff f981 	bl	8002d4c <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d302      	bcc.n	8003a5c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d122      	bne.n	8003aa2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	4013      	ands	r3, r2
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2301      	moveq	r3, #1
 8003a6e:	2300      	movne	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d113      	bne.n	8003aa2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7e:	f043 0220 	orr.w	r2, r3, #32
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e00f      	b.n	8003ac2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699a      	ldr	r2, [r3, #24]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d0b4      	beq.n	8003a2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ad6:	e033      	b.n	8003b40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f90b 	bl	8003cf8 <I2C_IsErrorOccurred>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e031      	b.n	8003b50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d025      	beq.n	8003b40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af4:	f7ff f92a 	bl	8002d4c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d302      	bcc.n	8003b0a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d11a      	bne.n	8003b40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d013      	beq.n	8003b40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e007      	b.n	8003b50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d1c4      	bne.n	8003ad8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b64:	e02f      	b.n	8003bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f8c4 	bl	8003cf8 <I2C_IsErrorOccurred>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e02d      	b.n	8003bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7a:	f7ff f8e7 	bl	8002d4c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d302      	bcc.n	8003b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d11a      	bne.n	8003bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d013      	beq.n	8003bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	f043 0220 	orr.w	r2, r3, #32
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e007      	b.n	8003bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	d1c8      	bne.n	8003b66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003bf0:	e071      	b.n	8003cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f87e 	bl	8003cf8 <I2C_IsErrorOccurred>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d13b      	bne.n	8003c8c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d138      	bne.n	8003c8c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d105      	bne.n	8003c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b10      	cmp	r3, #16
 8003c40:	d121      	bne.n	8003c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2210      	movs	r2, #16
 8003c48:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2220      	movs	r2, #32
 8003c56:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6859      	ldr	r1, [r3, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b24      	ldr	r3, [pc, #144]	@ (8003cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003c64:	400b      	ands	r3, r1
 8003c66:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	75fb      	strb	r3, [r7, #23]
 8003c84:	e002      	b.n	8003c8c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003c8c:	f7ff f85e 	bl	8002d4c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d119      	bne.n	8003cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003ca2:	7dfb      	ldrb	r3, [r7, #23]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d116      	bne.n	8003cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d00f      	beq.n	8003cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cba:	f043 0220 	orr.w	r2, r3, #32
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d002      	beq.n	8003cea <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d083      	beq.n	8003bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	fe00e800 	.word	0xfe00e800

08003cf8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	@ 0x28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f003 0310 	and.w	r3, r3, #16
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d068      	beq.n	8003df6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2210      	movs	r2, #16
 8003d2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d2c:	e049      	b.n	8003dc2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d045      	beq.n	8003dc2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d36:	f7ff f809 	bl	8002d4c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d302      	bcc.n	8003d4c <I2C_IsErrorOccurred+0x54>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d13a      	bne.n	8003dc2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d6e:	d121      	bne.n	8003db4 <I2C_IsErrorOccurred+0xbc>
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d76:	d01d      	beq.n	8003db4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d01a      	beq.n	8003db4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d8c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d8e:	f7fe ffdd 	bl	8002d4c <HAL_GetTick>
 8003d92:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d94:	e00e      	b.n	8003db4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d96:	f7fe ffd9 	bl	8002d4c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b19      	cmp	r3, #25
 8003da2:	d907      	bls.n	8003db4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	f043 0320 	orr.w	r3, r3, #32
 8003daa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003db2:	e006      	b.n	8003dc2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d1e9      	bne.n	8003d96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d003      	beq.n	8003dd8 <I2C_IsErrorOccurred+0xe0>
 8003dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0aa      	beq.n	8003d2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d103      	bne.n	8003de8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2220      	movs	r2, #32
 8003de6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	f043 0304 	orr.w	r3, r3, #4
 8003dee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00b      	beq.n	8003e20 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	f043 0308 	orr.w	r3, r3, #8
 8003e30:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00b      	beq.n	8003e64 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	f043 0302 	orr.w	r3, r3, #2
 8003e52:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003e64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01c      	beq.n	8003ea6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7ff fdaf 	bl	80039d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6859      	ldr	r1, [r3, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb4 <I2C_IsErrorOccurred+0x1bc>)
 8003e7e:	400b      	ands	r3, r1
 8003e80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3728      	adds	r7, #40	@ 0x28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	fe00e800 	.word	0xfe00e800

08003eb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	607b      	str	r3, [r7, #4]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	817b      	strh	r3, [r7, #10]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eca:	897b      	ldrh	r3, [r7, #10]
 8003ecc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ed0:	7a7b      	ldrb	r3, [r7, #9]
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ed8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ee6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	0d5b      	lsrs	r3, r3, #21
 8003ef2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003ef6:	4b08      	ldr	r3, [pc, #32]	@ (8003f18 <I2C_TransferConfig+0x60>)
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	43db      	mvns	r3, r3
 8003efc:	ea02 0103 	and.w	r1, r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	03ff63ff 	.word	0x03ff63ff

08003f1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	d138      	bne.n	8003fa4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e032      	b.n	8003fa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2224      	movs	r2, #36	@ 0x24
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0201 	bic.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6819      	ldr	r1, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2302      	movs	r3, #2
  }
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d139      	bne.n	800403c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e033      	b.n	800403e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2224      	movs	r2, #36	@ 0x24
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004004:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	e000      	b.n	800403e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800403c:	2302      	movs	r3, #2
  }
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	4b23      	ldr	r3, [pc, #140]	@ (80040e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	4a22      	ldr	r2, [pc, #136]	@ (80040e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800405c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004060:	6413      	str	r3, [r2, #64]	@ 0x40
 8004062:	4b20      	ldr	r3, [pc, #128]	@ (80040e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800406e:	4b1e      	ldr	r3, [pc, #120]	@ (80040e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1d      	ldr	r2, [pc, #116]	@ (80040e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004078:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800407a:	f7fe fe67 	bl	8002d4c <HAL_GetTick>
 800407e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004080:	e009      	b.n	8004096 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004082:	f7fe fe63 	bl	8002d4c <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004090:	d901      	bls.n	8004096 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e022      	b.n	80040dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004096:	4b14      	ldr	r3, [pc, #80]	@ (80040e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800409e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a2:	d1ee      	bne.n	8004082 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040a4:	4b10      	ldr	r3, [pc, #64]	@ (80040e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a0f      	ldr	r2, [pc, #60]	@ (80040e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040b0:	f7fe fe4c 	bl	8002d4c <HAL_GetTick>
 80040b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040b6:	e009      	b.n	80040cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040b8:	f7fe fe48 	bl	8002d4c <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040c6:	d901      	bls.n	80040cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e007      	b.n	80040dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040cc:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040d8:	d1ee      	bne.n	80040b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40007000 	.word	0x40007000

080040ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040f4:	2300      	movs	r3, #0
 80040f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e29b      	b.n	800463a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 8087 	beq.w	800421e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004110:	4b96      	ldr	r3, [pc, #600]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 030c 	and.w	r3, r3, #12
 8004118:	2b04      	cmp	r3, #4
 800411a:	d00c      	beq.n	8004136 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800411c:	4b93      	ldr	r3, [pc, #588]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 030c 	and.w	r3, r3, #12
 8004124:	2b08      	cmp	r3, #8
 8004126:	d112      	bne.n	800414e <HAL_RCC_OscConfig+0x62>
 8004128:	4b90      	ldr	r3, [pc, #576]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004130:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004134:	d10b      	bne.n	800414e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004136:	4b8d      	ldr	r3, [pc, #564]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d06c      	beq.n	800421c <HAL_RCC_OscConfig+0x130>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d168      	bne.n	800421c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e275      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004156:	d106      	bne.n	8004166 <HAL_RCC_OscConfig+0x7a>
 8004158:	4b84      	ldr	r3, [pc, #528]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a83      	ldr	r2, [pc, #524]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 800415e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	e02e      	b.n	80041c4 <HAL_RCC_OscConfig+0xd8>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10c      	bne.n	8004188 <HAL_RCC_OscConfig+0x9c>
 800416e:	4b7f      	ldr	r3, [pc, #508]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a7e      	ldr	r2, [pc, #504]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	4b7c      	ldr	r3, [pc, #496]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a7b      	ldr	r2, [pc, #492]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004180:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	e01d      	b.n	80041c4 <HAL_RCC_OscConfig+0xd8>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004190:	d10c      	bne.n	80041ac <HAL_RCC_OscConfig+0xc0>
 8004192:	4b76      	ldr	r3, [pc, #472]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a75      	ldr	r2, [pc, #468]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	4b73      	ldr	r3, [pc, #460]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a72      	ldr	r2, [pc, #456]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	e00b      	b.n	80041c4 <HAL_RCC_OscConfig+0xd8>
 80041ac:	4b6f      	ldr	r3, [pc, #444]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a6e      	ldr	r2, [pc, #440]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 80041b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	4b6c      	ldr	r3, [pc, #432]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a6b      	ldr	r2, [pc, #428]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 80041be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d013      	beq.n	80041f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fe fdbe 	bl	8002d4c <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d4:	f7fe fdba 	bl	8002d4c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	@ 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e229      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e6:	4b61      	ldr	r3, [pc, #388]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0xe8>
 80041f2:	e014      	b.n	800421e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fe fdaa 	bl	8002d4c <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041fc:	f7fe fda6 	bl	8002d4c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	@ 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e215      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420e:	4b57      	ldr	r3, [pc, #348]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x110>
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d069      	beq.n	80042fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800422a:	4b50      	ldr	r3, [pc, #320]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004236:	4b4d      	ldr	r3, [pc, #308]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b08      	cmp	r3, #8
 8004240:	d11c      	bne.n	800427c <HAL_RCC_OscConfig+0x190>
 8004242:	4b4a      	ldr	r3, [pc, #296]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d116      	bne.n	800427c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424e:	4b47      	ldr	r3, [pc, #284]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <HAL_RCC_OscConfig+0x17a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d001      	beq.n	8004266 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e1e9      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004266:	4b41      	ldr	r3, [pc, #260]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	493d      	ldr	r1, [pc, #244]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427a:	e040      	b.n	80042fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d023      	beq.n	80042cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004284:	4b39      	ldr	r3, [pc, #228]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a38      	ldr	r2, [pc, #224]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fe fd5c 	bl	8002d4c <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004298:	f7fe fd58 	bl	8002d4c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e1c7      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042aa:	4b30      	ldr	r3, [pc, #192]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b6:	4b2d      	ldr	r3, [pc, #180]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4929      	ldr	r1, [pc, #164]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]
 80042ca:	e018      	b.n	80042fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042cc:	4b27      	ldr	r3, [pc, #156]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a26      	ldr	r2, [pc, #152]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 80042d2:	f023 0301 	bic.w	r3, r3, #1
 80042d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d8:	f7fe fd38 	bl	8002d4c <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e0:	f7fe fd34 	bl	8002d4c <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e1a3      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f2:	4b1e      	ldr	r3, [pc, #120]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d038      	beq.n	800437c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d019      	beq.n	8004346 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004312:	4b16      	ldr	r3, [pc, #88]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004316:	4a15      	ldr	r2, [pc, #84]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431e:	f7fe fd15 	bl	8002d4c <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004326:	f7fe fd11 	bl	8002d4c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e180      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004338:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 800433a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x23a>
 8004344:	e01a      	b.n	800437c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004346:	4b09      	ldr	r3, [pc, #36]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 8004348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800434a:	4a08      	ldr	r2, [pc, #32]	@ (800436c <HAL_RCC_OscConfig+0x280>)
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004352:	f7fe fcfb 	bl	8002d4c <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800435a:	f7fe fcf7 	bl	8002d4c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d903      	bls.n	8004370 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e166      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
 800436c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004370:	4b92      	ldr	r3, [pc, #584]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 8004372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1ee      	bne.n	800435a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80a4 	beq.w	80044d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438a:	4b8c      	ldr	r3, [pc, #560]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10d      	bne.n	80043b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004396:	4b89      	ldr	r3, [pc, #548]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	4a88      	ldr	r2, [pc, #544]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 800439c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043a2:	4b86      	ldr	r3, [pc, #536]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ae:	2301      	movs	r3, #1
 80043b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b2:	4b83      	ldr	r3, [pc, #524]	@ (80045c0 <HAL_RCC_OscConfig+0x4d4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d118      	bne.n	80043f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80043be:	4b80      	ldr	r3, [pc, #512]	@ (80045c0 <HAL_RCC_OscConfig+0x4d4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a7f      	ldr	r2, [pc, #508]	@ (80045c0 <HAL_RCC_OscConfig+0x4d4>)
 80043c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ca:	f7fe fcbf 	bl	8002d4c <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d2:	f7fe fcbb 	bl	8002d4c <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b64      	cmp	r3, #100	@ 0x64
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e12a      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e4:	4b76      	ldr	r3, [pc, #472]	@ (80045c0 <HAL_RCC_OscConfig+0x4d4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x31a>
 80043f8:	4b70      	ldr	r3, [pc, #448]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fc:	4a6f      	ldr	r2, [pc, #444]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	6713      	str	r3, [r2, #112]	@ 0x70
 8004404:	e02d      	b.n	8004462 <HAL_RCC_OscConfig+0x376>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10c      	bne.n	8004428 <HAL_RCC_OscConfig+0x33c>
 800440e:	4b6b      	ldr	r3, [pc, #428]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004412:	4a6a      	ldr	r2, [pc, #424]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 8004414:	f023 0301 	bic.w	r3, r3, #1
 8004418:	6713      	str	r3, [r2, #112]	@ 0x70
 800441a:	4b68      	ldr	r3, [pc, #416]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441e:	4a67      	ldr	r2, [pc, #412]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 8004420:	f023 0304 	bic.w	r3, r3, #4
 8004424:	6713      	str	r3, [r2, #112]	@ 0x70
 8004426:	e01c      	b.n	8004462 <HAL_RCC_OscConfig+0x376>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b05      	cmp	r3, #5
 800442e:	d10c      	bne.n	800444a <HAL_RCC_OscConfig+0x35e>
 8004430:	4b62      	ldr	r3, [pc, #392]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004434:	4a61      	ldr	r2, [pc, #388]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 8004436:	f043 0304 	orr.w	r3, r3, #4
 800443a:	6713      	str	r3, [r2, #112]	@ 0x70
 800443c:	4b5f      	ldr	r3, [pc, #380]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004440:	4a5e      	ldr	r2, [pc, #376]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	6713      	str	r3, [r2, #112]	@ 0x70
 8004448:	e00b      	b.n	8004462 <HAL_RCC_OscConfig+0x376>
 800444a:	4b5c      	ldr	r3, [pc, #368]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444e:	4a5b      	ldr	r2, [pc, #364]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	6713      	str	r3, [r2, #112]	@ 0x70
 8004456:	4b59      	ldr	r3, [pc, #356]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445a:	4a58      	ldr	r2, [pc, #352]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 800445c:	f023 0304 	bic.w	r3, r3, #4
 8004460:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d015      	beq.n	8004496 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446a:	f7fe fc6f 	bl	8002d4c <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004470:	e00a      	b.n	8004488 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004472:	f7fe fc6b 	bl	8002d4c <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004480:	4293      	cmp	r3, r2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e0d8      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004488:	4b4c      	ldr	r3, [pc, #304]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0ee      	beq.n	8004472 <HAL_RCC_OscConfig+0x386>
 8004494:	e014      	b.n	80044c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004496:	f7fe fc59 	bl	8002d4c <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449c:	e00a      	b.n	80044b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449e:	f7fe fc55 	bl	8002d4c <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e0c2      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b4:	4b41      	ldr	r3, [pc, #260]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1ee      	bne.n	800449e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d105      	bne.n	80044d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c6:	4b3d      	ldr	r3, [pc, #244]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	4a3c      	ldr	r2, [pc, #240]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 80044cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044d0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80ae 	beq.w	8004638 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044dc:	4b37      	ldr	r3, [pc, #220]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d06d      	beq.n	80045c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d14b      	bne.n	8004588 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f0:	4b32      	ldr	r3, [pc, #200]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a31      	ldr	r2, [pc, #196]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 80044f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fe fc26 	bl	8002d4c <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004504:	f7fe fc22 	bl	8002d4c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e091      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004516:	4b29      	ldr	r3, [pc, #164]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69da      	ldr	r2, [r3, #28]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	019b      	lsls	r3, r3, #6
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	3b01      	subs	r3, #1
 800453c:	041b      	lsls	r3, r3, #16
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004544:	061b      	lsls	r3, r3, #24
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	071b      	lsls	r3, r3, #28
 800454e:	491b      	ldr	r1, [pc, #108]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 8004550:	4313      	orrs	r3, r2
 8004552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004554:	4b19      	ldr	r3, [pc, #100]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a18      	ldr	r2, [pc, #96]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 800455a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800455e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fe fbf4 	bl	8002d4c <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004568:	f7fe fbf0 	bl	8002d4c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e05f      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800457a:	4b10      	ldr	r3, [pc, #64]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0x47c>
 8004586:	e057      	b.n	8004638 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004588:	4b0c      	ldr	r3, [pc, #48]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a0b      	ldr	r2, [pc, #44]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 800458e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fe fbda 	bl	8002d4c <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459c:	f7fe fbd6 	bl	8002d4c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e045      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	4b03      	ldr	r3, [pc, #12]	@ (80045bc <HAL_RCC_OscConfig+0x4d0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x4b0>
 80045ba:	e03d      	b.n	8004638 <HAL_RCC_OscConfig+0x54c>
 80045bc:	40023800 	.word	0x40023800
 80045c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80045c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004644 <HAL_RCC_OscConfig+0x558>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d030      	beq.n	8004634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d129      	bne.n	8004634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d122      	bne.n	8004634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045f4:	4013      	ands	r3, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d119      	bne.n	8004634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	3b01      	subs	r3, #1
 800460e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004610:	429a      	cmp	r2, r3
 8004612:	d10f      	bne.n	8004634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d107      	bne.n	8004634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800

08004648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0d0      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004660:	4b6a      	ldr	r3, [pc, #424]	@ (800480c <HAL_RCC_ClockConfig+0x1c4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d910      	bls.n	8004690 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b67      	ldr	r3, [pc, #412]	@ (800480c <HAL_RCC_ClockConfig+0x1c4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 020f 	bic.w	r2, r3, #15
 8004676:	4965      	ldr	r1, [pc, #404]	@ (800480c <HAL_RCC_ClockConfig+0x1c4>)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b63      	ldr	r3, [pc, #396]	@ (800480c <HAL_RCC_ClockConfig+0x1c4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0b8      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d020      	beq.n	80046de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a8:	4b59      	ldr	r3, [pc, #356]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4a58      	ldr	r2, [pc, #352]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80046ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046c0:	4b53      	ldr	r3, [pc, #332]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	4a52      	ldr	r2, [pc, #328]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80046c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046cc:	4b50      	ldr	r3, [pc, #320]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	494d      	ldr	r1, [pc, #308]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d040      	beq.n	800476c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d107      	bne.n	8004702 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	4b47      	ldr	r3, [pc, #284]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d115      	bne.n	800472a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e07f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d107      	bne.n	800471a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470a:	4b41      	ldr	r3, [pc, #260]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e073      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471a:	4b3d      	ldr	r3, [pc, #244]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e06b      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800472a:	4b39      	ldr	r3, [pc, #228]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f023 0203 	bic.w	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4936      	ldr	r1, [pc, #216]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 8004738:	4313      	orrs	r3, r2
 800473a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473c:	f7fe fb06 	bl	8002d4c <HAL_GetTick>
 8004740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004742:	e00a      	b.n	800475a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004744:	f7fe fb02 	bl	8002d4c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e053      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475a:	4b2d      	ldr	r3, [pc, #180]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 020c 	and.w	r2, r3, #12
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	429a      	cmp	r2, r3
 800476a:	d1eb      	bne.n	8004744 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800476c:	4b27      	ldr	r3, [pc, #156]	@ (800480c <HAL_RCC_ClockConfig+0x1c4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d210      	bcs.n	800479c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477a:	4b24      	ldr	r3, [pc, #144]	@ (800480c <HAL_RCC_ClockConfig+0x1c4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 020f 	bic.w	r2, r3, #15
 8004782:	4922      	ldr	r1, [pc, #136]	@ (800480c <HAL_RCC_ClockConfig+0x1c4>)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b20      	ldr	r3, [pc, #128]	@ (800480c <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e032      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a8:	4b19      	ldr	r3, [pc, #100]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4916      	ldr	r1, [pc, #88]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047c6:	4b12      	ldr	r3, [pc, #72]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	490e      	ldr	r1, [pc, #56]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047da:	f000 f821 	bl	8004820 <HAL_RCC_GetSysClockFreq>
 80047de:	4602      	mov	r2, r0
 80047e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	490a      	ldr	r1, [pc, #40]	@ (8004814 <HAL_RCC_ClockConfig+0x1cc>)
 80047ec:	5ccb      	ldrb	r3, [r1, r3]
 80047ee:	fa22 f303 	lsr.w	r3, r2, r3
 80047f2:	4a09      	ldr	r2, [pc, #36]	@ (8004818 <HAL_RCC_ClockConfig+0x1d0>)
 80047f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047f6:	4b09      	ldr	r3, [pc, #36]	@ (800481c <HAL_RCC_ClockConfig+0x1d4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe fa62 	bl	8002cc4 <HAL_InitTick>

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40023c00 	.word	0x40023c00
 8004810:	40023800 	.word	0x40023800
 8004814:	0800b660 	.word	0x0800b660
 8004818:	2000000c 	.word	0x2000000c
 800481c:	20000010 	.word	0x20000010

08004820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004824:	b090      	sub	sp, #64	@ 0x40
 8004826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	637b      	str	r3, [r7, #52]	@ 0x34
 800482c:	2300      	movs	r3, #0
 800482e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004830:	2300      	movs	r3, #0
 8004832:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004838:	4b59      	ldr	r3, [pc, #356]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 030c 	and.w	r3, r3, #12
 8004840:	2b08      	cmp	r3, #8
 8004842:	d00d      	beq.n	8004860 <HAL_RCC_GetSysClockFreq+0x40>
 8004844:	2b08      	cmp	r3, #8
 8004846:	f200 80a1 	bhi.w	800498c <HAL_RCC_GetSysClockFreq+0x16c>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_RCC_GetSysClockFreq+0x34>
 800484e:	2b04      	cmp	r3, #4
 8004850:	d003      	beq.n	800485a <HAL_RCC_GetSysClockFreq+0x3a>
 8004852:	e09b      	b.n	800498c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004854:	4b53      	ldr	r3, [pc, #332]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004856:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004858:	e09b      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800485a:	4b53      	ldr	r3, [pc, #332]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800485c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800485e:	e098      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004860:	4b4f      	ldr	r3, [pc, #316]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004868:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800486a:	4b4d      	ldr	r3, [pc, #308]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d028      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004876:	4b4a      	ldr	r3, [pc, #296]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	2200      	movs	r2, #0
 800487e:	623b      	str	r3, [r7, #32]
 8004880:	627a      	str	r2, [r7, #36]	@ 0x24
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004888:	2100      	movs	r1, #0
 800488a:	4b47      	ldr	r3, [pc, #284]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800488c:	fb03 f201 	mul.w	r2, r3, r1
 8004890:	2300      	movs	r3, #0
 8004892:	fb00 f303 	mul.w	r3, r0, r3
 8004896:	4413      	add	r3, r2
 8004898:	4a43      	ldr	r2, [pc, #268]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800489a:	fba0 1202 	umull	r1, r2, r0, r2
 800489e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048a0:	460a      	mov	r2, r1
 80048a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80048a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048a6:	4413      	add	r3, r2
 80048a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ac:	2200      	movs	r2, #0
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	61fa      	str	r2, [r7, #28]
 80048b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80048ba:	f7fb fed5 	bl	8000668 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4613      	mov	r3, r2
 80048c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048c6:	e053      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c8:	4b35      	ldr	r3, [pc, #212]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	099b      	lsrs	r3, r3, #6
 80048ce:	2200      	movs	r2, #0
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	617a      	str	r2, [r7, #20]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048da:	f04f 0b00 	mov.w	fp, #0
 80048de:	4652      	mov	r2, sl
 80048e0:	465b      	mov	r3, fp
 80048e2:	f04f 0000 	mov.w	r0, #0
 80048e6:	f04f 0100 	mov.w	r1, #0
 80048ea:	0159      	lsls	r1, r3, #5
 80048ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048f0:	0150      	lsls	r0, r2, #5
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	ebb2 080a 	subs.w	r8, r2, sl
 80048fa:	eb63 090b 	sbc.w	r9, r3, fp
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800490a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800490e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004912:	ebb2 0408 	subs.w	r4, r2, r8
 8004916:	eb63 0509 	sbc.w	r5, r3, r9
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	00eb      	lsls	r3, r5, #3
 8004924:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004928:	00e2      	lsls	r2, r4, #3
 800492a:	4614      	mov	r4, r2
 800492c:	461d      	mov	r5, r3
 800492e:	eb14 030a 	adds.w	r3, r4, sl
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	eb45 030b 	adc.w	r3, r5, fp
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004946:	4629      	mov	r1, r5
 8004948:	028b      	lsls	r3, r1, #10
 800494a:	4621      	mov	r1, r4
 800494c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004950:	4621      	mov	r1, r4
 8004952:	028a      	lsls	r2, r1, #10
 8004954:	4610      	mov	r0, r2
 8004956:	4619      	mov	r1, r3
 8004958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800495a:	2200      	movs	r2, #0
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	60fa      	str	r2, [r7, #12]
 8004960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004964:	f7fb fe80 	bl	8000668 <__aeabi_uldivmod>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4613      	mov	r3, r2
 800496e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004970:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	3301      	adds	r3, #1
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004980:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800498a:	e002      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800498c:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800498e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004994:	4618      	mov	r0, r3
 8004996:	3740      	adds	r7, #64	@ 0x40
 8004998:	46bd      	mov	sp, r7
 800499a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800
 80049a4:	00f42400 	.word	0x00f42400
 80049a8:	017d7840 	.word	0x017d7840

080049ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b0:	4b03      	ldr	r3, [pc, #12]	@ (80049c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049b2:	681b      	ldr	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	2000000c 	.word	0x2000000c

080049c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049c8:	f7ff fff0 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	0a9b      	lsrs	r3, r3, #10
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4903      	ldr	r1, [pc, #12]	@ (80049e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40023800 	.word	0x40023800
 80049e8:	0800b670 	.word	0x0800b670

080049ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049f0:	f7ff ffdc 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	0b5b      	lsrs	r3, r3, #13
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	4903      	ldr	r1, [pc, #12]	@ (8004a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	0800b670 	.word	0x0800b670

08004a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d012      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a3c:	4b69      	ldr	r3, [pc, #420]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4a68      	ldr	r2, [pc, #416]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a42:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a46:	6093      	str	r3, [r2, #8]
 8004a48:	4b66      	ldr	r3, [pc, #408]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a50:	4964      	ldr	r1, [pc, #400]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d017      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a74:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7c:	4959      	ldr	r1, [pc, #356]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d017      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ab0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	494a      	ldr	r1, [pc, #296]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ac8:	d101      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004aca:	2301      	movs	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 808b 	beq.w	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004af8:	4b3a      	ldr	r3, [pc, #232]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afc:	4a39      	ldr	r2, [pc, #228]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b02:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b04:	4b37      	ldr	r3, [pc, #220]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b10:	4b35      	ldr	r3, [pc, #212]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a34      	ldr	r2, [pc, #208]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b1c:	f7fe f916 	bl	8002d4c <HAL_GetTick>
 8004b20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b24:	f7fe f912 	bl	8002d4c <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b64      	cmp	r3, #100	@ 0x64
 8004b30:	d901      	bls.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e38f      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b36:	4b2c      	ldr	r3, [pc, #176]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b42:	4b28      	ldr	r3, [pc, #160]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d035      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d02e      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b60:	4b20      	ldr	r3, [pc, #128]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b74:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b76:	4b1b      	ldr	r3, [pc, #108]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b82:	4a18      	ldr	r2, [pc, #96]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b88:	4b16      	ldr	r3, [pc, #88]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d114      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fe f8da 	bl	8002d4c <HAL_GetTick>
 8004b98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b9c:	f7fe f8d6 	bl	8002d4c <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e351      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0ee      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bca:	d111      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004bcc:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bd8:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bda:	400b      	ands	r3, r1
 8004bdc:	4901      	ldr	r1, [pc, #4]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	608b      	str	r3, [r1, #8]
 8004be2:	e00b      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004be4:	40023800 	.word	0x40023800
 8004be8:	40007000 	.word	0x40007000
 8004bec:	0ffffcff 	.word	0x0ffffcff
 8004bf0:	4bac      	ldr	r3, [pc, #688]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4aab      	ldr	r2, [pc, #684]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004bfa:	6093      	str	r3, [r2, #8]
 8004bfc:	4ba9      	ldr	r3, [pc, #676]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c08:	49a6      	ldr	r1, [pc, #664]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d010      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c1a:	4ba2      	ldr	r3, [pc, #648]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c20:	4aa0      	ldr	r2, [pc, #640]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c2a:	4b9e      	ldr	r3, [pc, #632]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	499b      	ldr	r1, [pc, #620]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c48:	4b96      	ldr	r3, [pc, #600]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c56:	4993      	ldr	r1, [pc, #588]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c6a:	4b8e      	ldr	r3, [pc, #568]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c78:	498a      	ldr	r1, [pc, #552]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c8c:	4b85      	ldr	r3, [pc, #532]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c9a:	4982      	ldr	r1, [pc, #520]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cae:	4b7d      	ldr	r3, [pc, #500]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbc:	4979      	ldr	r1, [pc, #484]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cd0:	4b74      	ldr	r3, [pc, #464]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd6:	f023 0203 	bic.w	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cde:	4971      	ldr	r1, [pc, #452]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf8:	f023 020c 	bic.w	r2, r3, #12
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d00:	4968      	ldr	r1, [pc, #416]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d14:	4b63      	ldr	r3, [pc, #396]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d22:	4960      	ldr	r1, [pc, #384]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d36:	4b5b      	ldr	r3, [pc, #364]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d44:	4957      	ldr	r1, [pc, #348]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d58:	4b52      	ldr	r3, [pc, #328]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d66:	494f      	ldr	r1, [pc, #316]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d88:	4946      	ldr	r1, [pc, #280]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d9c:	4b41      	ldr	r3, [pc, #260]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004daa:	493e      	ldr	r1, [pc, #248]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004dbe:	4b39      	ldr	r3, [pc, #228]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dcc:	4935      	ldr	r1, [pc, #212]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004de0:	4b30      	ldr	r3, [pc, #192]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dee:	492d      	ldr	r1, [pc, #180]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d011      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e02:	4b28      	ldr	r3, [pc, #160]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e08:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e10:	4924      	ldr	r1, [pc, #144]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e20:	d101      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e22:	2301      	movs	r3, #1
 8004e24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e32:	2301      	movs	r3, #1
 8004e34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e42:	4b18      	ldr	r3, [pc, #96]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e48:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e50:	4914      	ldr	r1, [pc, #80]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00b      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e74:	490b      	ldr	r1, [pc, #44]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00f      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e88:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e98:	4902      	ldr	r1, [pc, #8]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ea0:	e002      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004ea2:	bf00      	nop
 8004ea4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00b      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004eb4:	4b8a      	ldr	r3, [pc, #552]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec4:	4986      	ldr	r1, [pc, #536]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00b      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ed8:	4b81      	ldr	r3, [pc, #516]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ede:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ee8:	497d      	ldr	r1, [pc, #500]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d006      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 80d6 	beq.w	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f04:	4b76      	ldr	r3, [pc, #472]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a75      	ldr	r2, [pc, #468]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f10:	f7fd ff1c 	bl	8002d4c <HAL_GetTick>
 8004f14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f18:	f7fd ff18 	bl	8002d4c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	@ 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e195      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d021      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d11d      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f4a:	4b65      	ldr	r3, [pc, #404]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f50:	0c1b      	lsrs	r3, r3, #16
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f58:	4b61      	ldr	r3, [pc, #388]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f5e:	0e1b      	lsrs	r3, r3, #24
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	019a      	lsls	r2, r3, #6
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	041b      	lsls	r3, r3, #16
 8004f70:	431a      	orrs	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	061b      	lsls	r3, r3, #24
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	071b      	lsls	r3, r3, #28
 8004f7e:	4958      	ldr	r1, [pc, #352]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d004      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d02e      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fb0:	d129      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fb8:	0c1b      	lsrs	r3, r3, #16
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fc0:	4b47      	ldr	r3, [pc, #284]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fc6:	0f1b      	lsrs	r3, r3, #28
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	019a      	lsls	r2, r3, #6
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	061b      	lsls	r3, r3, #24
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	071b      	lsls	r3, r3, #28
 8004fe6:	493e      	ldr	r1, [pc, #248]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fee:	4b3c      	ldr	r3, [pc, #240]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ff4:	f023 021f 	bic.w	r2, r3, #31
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	4938      	ldr	r1, [pc, #224]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01d      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005012:	4b33      	ldr	r3, [pc, #204]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005018:	0e1b      	lsrs	r3, r3, #24
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005020:	4b2f      	ldr	r3, [pc, #188]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005026:	0f1b      	lsrs	r3, r3, #28
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	019a      	lsls	r2, r3, #6
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	041b      	lsls	r3, r3, #16
 800503a:	431a      	orrs	r2, r3
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	061b      	lsls	r3, r3, #24
 8005040:	431a      	orrs	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	071b      	lsls	r3, r3, #28
 8005046:	4926      	ldr	r1, [pc, #152]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d011      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	019a      	lsls	r2, r3, #6
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	061b      	lsls	r3, r3, #24
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	071b      	lsls	r3, r3, #28
 8005076:	491a      	ldr	r1, [pc, #104]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800507e:	4b18      	ldr	r3, [pc, #96]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a17      	ldr	r2, [pc, #92]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005084:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508a:	f7fd fe5f 	bl	8002d4c <HAL_GetTick>
 800508e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005090:	e008      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005092:	f7fd fe5b 	bl	8002d4c <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b64      	cmp	r3, #100	@ 0x64
 800509e:	d901      	bls.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e0d8      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050a4:	4b0e      	ldr	r3, [pc, #56]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	f040 80ce 	bne.w	8005254 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050b8:	4b09      	ldr	r3, [pc, #36]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a08      	ldr	r2, [pc, #32]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c4:	f7fd fe42 	bl	8002d4c <HAL_GetTick>
 80050c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050ca:	e00b      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050cc:	f7fd fe3e 	bl	8002d4c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b64      	cmp	r3, #100	@ 0x64
 80050d8:	d904      	bls.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e0bb      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80050de:	bf00      	nop
 80050e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050e4:	4b5e      	ldr	r3, [pc, #376]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050f0:	d0ec      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800510e:	2b00      	cmp	r3, #0
 8005110:	d02e      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d12a      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800511a:	4b51      	ldr	r3, [pc, #324]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005120:	0c1b      	lsrs	r3, r3, #16
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005128:	4b4d      	ldr	r3, [pc, #308]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512e:	0f1b      	lsrs	r3, r3, #28
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	019a      	lsls	r2, r3, #6
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	041b      	lsls	r3, r3, #16
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	061b      	lsls	r3, r3, #24
 8005148:	431a      	orrs	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	071b      	lsls	r3, r3, #28
 800514e:	4944      	ldr	r1, [pc, #272]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005156:	4b42      	ldr	r3, [pc, #264]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800515c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	3b01      	subs	r3, #1
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	493d      	ldr	r1, [pc, #244]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d022      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005184:	d11d      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005186:	4b36      	ldr	r3, [pc, #216]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518c:	0e1b      	lsrs	r3, r3, #24
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005194:	4b32      	ldr	r3, [pc, #200]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519a:	0f1b      	lsrs	r3, r3, #28
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	019a      	lsls	r2, r3, #6
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	431a      	orrs	r2, r3
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	061b      	lsls	r3, r3, #24
 80051b4:	431a      	orrs	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	071b      	lsls	r3, r3, #28
 80051ba:	4929      	ldr	r1, [pc, #164]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d028      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051ce:	4b24      	ldr	r3, [pc, #144]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d4:	0e1b      	lsrs	r3, r3, #24
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051dc:	4b20      	ldr	r3, [pc, #128]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e2:	0c1b      	lsrs	r3, r3, #16
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	019a      	lsls	r2, r3, #6
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	431a      	orrs	r2, r3
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	061b      	lsls	r3, r3, #24
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	071b      	lsls	r3, r3, #28
 8005202:	4917      	ldr	r1, [pc, #92]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800520a:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800520c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005210:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005218:	4911      	ldr	r1, [pc, #68]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005220:	4b0f      	ldr	r3, [pc, #60]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a0e      	ldr	r2, [pc, #56]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800522a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800522c:	f7fd fd8e 	bl	8002d4c <HAL_GetTick>
 8005230:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005234:	f7fd fd8a 	bl	8002d4c <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b64      	cmp	r3, #100	@ 0x64
 8005240:	d901      	bls.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e007      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005246:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800524e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005252:	d1ef      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40023800 	.word	0x40023800

08005264 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e01c      	b.n	80052b0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	795b      	ldrb	r3, [r3, #5]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d105      	bne.n	800528c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fd f97e 	bl	8002588 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0204 	orr.w	r2, r2, #4
 80052a0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e09d      	b.n	8005406 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d108      	bne.n	80052e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052da:	d009      	beq.n	80052f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	61da      	str	r2, [r3, #28]
 80052e2:	e005      	b.n	80052f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fd f9ae 	bl	800266c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005326:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005330:	d902      	bls.n	8005338 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	e002      	b.n	800533e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800533c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005346:	d007      	beq.n	8005358 <HAL_SPI_Init+0xa0>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005350:	d002      	beq.n	8005358 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539a:	ea42 0103 	orr.w	r1, r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	0c1b      	lsrs	r3, r3, #16
 80053b4:	f003 0204 	and.w	r2, r3, #4
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80053d4:	ea42 0103 	orr.w	r1, r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b088      	sub	sp, #32
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	603b      	str	r3, [r7, #0]
 800541a:	4613      	mov	r3, r2
 800541c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800541e:	f7fd fc95 	bl	8002d4c <HAL_GetTick>
 8005422:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d001      	beq.n	8005438 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
 8005436:	e15c      	b.n	80056f2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_SPI_Transmit+0x36>
 800543e:	88fb      	ldrh	r3, [r7, #6]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e154      	b.n	80056f2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_SPI_Transmit+0x48>
 8005452:	2302      	movs	r3, #2
 8005454:	e14d      	b.n	80056f2 <HAL_SPI_Transmit+0x2e4>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2203      	movs	r2, #3
 8005462:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	88fa      	ldrh	r2, [r7, #6]
 8005476:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	88fa      	ldrh	r2, [r7, #6]
 800547c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054a8:	d10f      	bne.n	80054ca <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d4:	2b40      	cmp	r3, #64	@ 0x40
 80054d6:	d007      	beq.n	80054e8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054f0:	d952      	bls.n	8005598 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_SPI_Transmit+0xf2>
 80054fa:	8b7b      	ldrh	r3, [r7, #26]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d145      	bne.n	800558c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005504:	881a      	ldrh	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	1c9a      	adds	r2, r3, #2
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005524:	e032      	b.n	800558c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b02      	cmp	r3, #2
 8005532:	d112      	bne.n	800555a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005538:	881a      	ldrh	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005544:	1c9a      	adds	r2, r3, #2
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005558:	e018      	b.n	800558c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800555a:	f7fd fbf7 	bl	8002d4c <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d803      	bhi.n	8005572 <HAL_SPI_Transmit+0x164>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005570:	d102      	bne.n	8005578 <HAL_SPI_Transmit+0x16a>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d109      	bne.n	800558c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e0b2      	b.n	80056f2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1c7      	bne.n	8005526 <HAL_SPI_Transmit+0x118>
 8005596:	e083      	b.n	80056a0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <HAL_SPI_Transmit+0x198>
 80055a0:	8b7b      	ldrh	r3, [r7, #26]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d177      	bne.n	8005696 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d912      	bls.n	80055d6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b4:	881a      	ldrh	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c0:	1c9a      	adds	r2, r3, #2
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b02      	subs	r3, #2
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055d4:	e05f      	b.n	8005696 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	7812      	ldrb	r2, [r2, #0]
 80055e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80055fc:	e04b      	b.n	8005696 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b02      	cmp	r3, #2
 800560a:	d12b      	bne.n	8005664 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b01      	cmp	r3, #1
 8005614:	d912      	bls.n	800563c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561a:	881a      	ldrh	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005626:	1c9a      	adds	r2, r3, #2
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b02      	subs	r3, #2
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800563a:	e02c      	b.n	8005696 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	330c      	adds	r3, #12
 8005646:	7812      	ldrb	r2, [r2, #0]
 8005648:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005662:	e018      	b.n	8005696 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005664:	f7fd fb72 	bl	8002d4c <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d803      	bhi.n	800567c <HAL_SPI_Transmit+0x26e>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567a:	d102      	bne.n	8005682 <HAL_SPI_Transmit+0x274>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e02d      	b.n	80056f2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1ae      	bne.n	80055fe <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f947 	bl	8005938 <SPI_EndRxTxTransaction>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80056f0:	2300      	movs	r3, #0
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800570c:	f7fd fb1e 	bl	8002d4c <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	4413      	add	r3, r2
 800571a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800571c:	f7fd fb16 	bl	8002d4c <HAL_GetTick>
 8005720:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005722:	4b39      	ldr	r3, [pc, #228]	@ (8005808 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	015b      	lsls	r3, r3, #5
 8005728:	0d1b      	lsrs	r3, r3, #20
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	fb02 f303 	mul.w	r3, r2, r3
 8005730:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005732:	e055      	b.n	80057e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573a:	d051      	beq.n	80057e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800573c:	f7fd fb06 	bl	8002d4c <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	429a      	cmp	r2, r3
 800574a:	d902      	bls.n	8005752 <SPI_WaitFlagStateUntilTimeout+0x56>
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d13d      	bne.n	80057ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005760:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800576a:	d111      	bne.n	8005790 <SPI_WaitFlagStateUntilTimeout+0x94>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005774:	d004      	beq.n	8005780 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577e:	d107      	bne.n	8005790 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800578e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005798:	d10f      	bne.n	80057ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e018      	b.n	8005800 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	61fb      	str	r3, [r7, #28]
 80057d8:	e002      	b.n	80057e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	3b01      	subs	r3, #1
 80057de:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4013      	ands	r3, r2
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d19a      	bne.n	8005734 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3720      	adds	r7, #32
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	2000000c 	.word	0x2000000c

0800580c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	@ 0x28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800581e:	f7fd fa95 	bl	8002d4c <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	1a9b      	subs	r3, r3, r2
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	4413      	add	r3, r2
 800582c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800582e:	f7fd fa8d 	bl	8002d4c <HAL_GetTick>
 8005832:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800583c:	4b3d      	ldr	r3, [pc, #244]	@ (8005934 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	00da      	lsls	r2, r3, #3
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	0d1b      	lsrs	r3, r3, #20
 800584c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005854:	e061      	b.n	800591a <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800585c:	d107      	bne.n	800586e <SPI_WaitFifoStateUntilTimeout+0x62>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d104      	bne.n	800586e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800586c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005874:	d051      	beq.n	800591a <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005876:	f7fd fa69 	bl	8002d4c <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005882:	429a      	cmp	r2, r3
 8005884:	d902      	bls.n	800588c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005888:	2b00      	cmp	r3, #0
 800588a:	d13d      	bne.n	8005908 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800589a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058a4:	d111      	bne.n	80058ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058ae:	d004      	beq.n	80058ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b8:	d107      	bne.n	80058ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058d2:	d10f      	bne.n	80058f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e011      	b.n	800592c <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
 8005912:	e002      	b.n	800591a <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	3b01      	subs	r3, #1
 8005918:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4013      	ands	r3, r2
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	429a      	cmp	r2, r3
 8005928:	d195      	bne.n	8005856 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3728      	adds	r7, #40	@ 0x28
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	2000000c 	.word	0x2000000c

08005938 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2200      	movs	r2, #0
 800594c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f7ff ff5b 	bl	800580c <SPI_WaitFifoStateUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d007      	beq.n	800596c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005960:	f043 0220 	orr.w	r2, r3, #32
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e046      	b.n	80059fa <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800596c:	4b25      	ldr	r3, [pc, #148]	@ (8005a04 <SPI_EndRxTxTransaction+0xcc>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a25      	ldr	r2, [pc, #148]	@ (8005a08 <SPI_EndRxTxTransaction+0xd0>)
 8005972:	fba2 2303 	umull	r2, r3, r2, r3
 8005976:	0d5b      	lsrs	r3, r3, #21
 8005978:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800597c:	fb02 f303 	mul.w	r3, r2, r3
 8005980:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800598a:	d112      	bne.n	80059b2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2200      	movs	r2, #0
 8005994:	2180      	movs	r1, #128	@ 0x80
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff feb0 	bl	80056fc <SPI_WaitFlagStateUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d016      	beq.n	80059d0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e023      	b.n	80059fa <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c8:	2b80      	cmp	r3, #128	@ 0x80
 80059ca:	d0f2      	beq.n	80059b2 <SPI_EndRxTxTransaction+0x7a>
 80059cc:	e000      	b.n	80059d0 <SPI_EndRxTxTransaction+0x98>
        break;
 80059ce:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f7ff ff15 	bl	800580c <SPI_WaitFifoStateUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ec:	f043 0220 	orr.w	r2, r3, #32
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e000      	b.n	80059fa <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	2000000c 	.word	0x2000000c
 8005a08:	165e9f81 	.word	0x165e9f81

08005a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e049      	b.n	8005ab2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fd f840 	bl	8002ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3304      	adds	r3, #4
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	f000 fab2 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d001      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e054      	b.n	8005b7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a26      	ldr	r2, [pc, #152]	@ (8005b8c <HAL_TIM_Base_Start_IT+0xd0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d022      	beq.n	8005b3c <HAL_TIM_Base_Start_IT+0x80>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005afe:	d01d      	beq.n	8005b3c <HAL_TIM_Base_Start_IT+0x80>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a22      	ldr	r2, [pc, #136]	@ (8005b90 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d018      	beq.n	8005b3c <HAL_TIM_Base_Start_IT+0x80>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a21      	ldr	r2, [pc, #132]	@ (8005b94 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d013      	beq.n	8005b3c <HAL_TIM_Base_Start_IT+0x80>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a1f      	ldr	r2, [pc, #124]	@ (8005b98 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00e      	beq.n	8005b3c <HAL_TIM_Base_Start_IT+0x80>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a1e      	ldr	r2, [pc, #120]	@ (8005b9c <HAL_TIM_Base_Start_IT+0xe0>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d009      	beq.n	8005b3c <HAL_TIM_Base_Start_IT+0x80>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d004      	beq.n	8005b3c <HAL_TIM_Base_Start_IT+0x80>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d115      	bne.n	8005b68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	4b19      	ldr	r3, [pc, #100]	@ (8005ba8 <HAL_TIM_Base_Start_IT+0xec>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b06      	cmp	r3, #6
 8005b4c:	d015      	beq.n	8005b7a <HAL_TIM_Base_Start_IT+0xbe>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b54:	d011      	beq.n	8005b7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f042 0201 	orr.w	r2, r2, #1
 8005b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b66:	e008      	b.n	8005b7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0201 	orr.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	e000      	b.n	8005b7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40010000 	.word	0x40010000
 8005b90:	40000400 	.word	0x40000400
 8005b94:	40000800 	.word	0x40000800
 8005b98:	40000c00 	.word	0x40000c00
 8005b9c:	40010400 	.word	0x40010400
 8005ba0:	40014000 	.word	0x40014000
 8005ba4:	40001800 	.word	0x40001800
 8005ba8:	00010007 	.word	0x00010007

08005bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d020      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01b      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0202 	mvn.w	r2, #2
 8005be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f9be 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005bfc:	e005      	b.n	8005c0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f9b0 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f9c1 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d020      	beq.n	8005c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01b      	beq.n	8005c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f06f 0204 	mvn.w	r2, #4
 8005c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f998 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005c48:	e005      	b.n	8005c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f98a 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f99b 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d020      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01b      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0208 	mvn.w	r2, #8
 8005c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f972 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005c94:	e005      	b.n	8005ca2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f964 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f975 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d020      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f003 0310 	and.w	r3, r3, #16
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01b      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0210 	mvn.w	r2, #16
 8005cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f94c 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005ce0:	e005      	b.n	8005cee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f93e 	bl	8005f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f94f 	bl	8005f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00c      	beq.n	8005d18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d007      	beq.n	8005d18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0201 	mvn.w	r2, #1
 8005d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f91c 	bl	8005f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d104      	bne.n	8005d2c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00c      	beq.n	8005d46 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d007      	beq.n	8005d46 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fb0f 	bl	8006364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00c      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fb07 	bl	8006378 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00c      	beq.n	8005d8e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d007      	beq.n	8005d8e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f909 	bl	8005fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00c      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f06f 0220 	mvn.w	r2, #32
 8005daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 facf 	bl	8006350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005db2:	bf00      	nop
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_TIM_ConfigClockSource+0x1c>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e0b4      	b.n	8005f42 <HAL_TIM_ConfigClockSource+0x186>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	4b56      	ldr	r3, [pc, #344]	@ (8005f4c <HAL_TIM_ConfigClockSource+0x190>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e10:	d03e      	beq.n	8005e90 <HAL_TIM_ConfigClockSource+0xd4>
 8005e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e16:	f200 8087 	bhi.w	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e1e:	f000 8086 	beq.w	8005f2e <HAL_TIM_ConfigClockSource+0x172>
 8005e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e26:	d87f      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e28:	2b70      	cmp	r3, #112	@ 0x70
 8005e2a:	d01a      	beq.n	8005e62 <HAL_TIM_ConfigClockSource+0xa6>
 8005e2c:	2b70      	cmp	r3, #112	@ 0x70
 8005e2e:	d87b      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e30:	2b60      	cmp	r3, #96	@ 0x60
 8005e32:	d050      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x11a>
 8005e34:	2b60      	cmp	r3, #96	@ 0x60
 8005e36:	d877      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e38:	2b50      	cmp	r3, #80	@ 0x50
 8005e3a:	d03c      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0xfa>
 8005e3c:	2b50      	cmp	r3, #80	@ 0x50
 8005e3e:	d873      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e40:	2b40      	cmp	r3, #64	@ 0x40
 8005e42:	d058      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0x13a>
 8005e44:	2b40      	cmp	r3, #64	@ 0x40
 8005e46:	d86f      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e48:	2b30      	cmp	r3, #48	@ 0x30
 8005e4a:	d064      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x15a>
 8005e4c:	2b30      	cmp	r3, #48	@ 0x30
 8005e4e:	d86b      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d060      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x15a>
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d867      	bhi.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d05c      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x15a>
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d05a      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0x15a>
 8005e60:	e062      	b.n	8005f28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e72:	f000 f9bf 	bl	80061f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	609a      	str	r2, [r3, #8]
      break;
 8005e8e:	e04f      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ea0:	f000 f9a8 	bl	80061f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eb2:	609a      	str	r2, [r3, #8]
      break;
 8005eb4:	e03c      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f000 f91c 	bl	8006100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2150      	movs	r1, #80	@ 0x50
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 f975 	bl	80061be <TIM_ITRx_SetConfig>
      break;
 8005ed4:	e02c      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f000 f93b 	bl	800615e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2160      	movs	r1, #96	@ 0x60
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f965 	bl	80061be <TIM_ITRx_SetConfig>
      break;
 8005ef4:	e01c      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f02:	461a      	mov	r2, r3
 8005f04:	f000 f8fc 	bl	8006100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2140      	movs	r1, #64	@ 0x40
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 f955 	bl	80061be <TIM_ITRx_SetConfig>
      break;
 8005f14:	e00c      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4610      	mov	r0, r2
 8005f22:	f000 f94c 	bl	80061be <TIM_ITRx_SetConfig>
      break;
 8005f26:	e003      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f2c:	e000      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	fffeff88 	.word	0xfffeff88

08005f50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a43      	ldr	r2, [pc, #268]	@ (80060d4 <TIM_Base_SetConfig+0x120>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d013      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd2:	d00f      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a40      	ldr	r2, [pc, #256]	@ (80060d8 <TIM_Base_SetConfig+0x124>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00b      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a3f      	ldr	r2, [pc, #252]	@ (80060dc <TIM_Base_SetConfig+0x128>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d007      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a3e      	ldr	r2, [pc, #248]	@ (80060e0 <TIM_Base_SetConfig+0x12c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_Base_SetConfig+0x40>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a3d      	ldr	r2, [pc, #244]	@ (80060e4 <TIM_Base_SetConfig+0x130>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d108      	bne.n	8006006 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a32      	ldr	r2, [pc, #200]	@ (80060d4 <TIM_Base_SetConfig+0x120>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d02b      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006014:	d027      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2f      	ldr	r2, [pc, #188]	@ (80060d8 <TIM_Base_SetConfig+0x124>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d023      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a2e      	ldr	r2, [pc, #184]	@ (80060dc <TIM_Base_SetConfig+0x128>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d01f      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2d      	ldr	r2, [pc, #180]	@ (80060e0 <TIM_Base_SetConfig+0x12c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d01b      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2c      	ldr	r2, [pc, #176]	@ (80060e4 <TIM_Base_SetConfig+0x130>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d017      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2b      	ldr	r2, [pc, #172]	@ (80060e8 <TIM_Base_SetConfig+0x134>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d013      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2a      	ldr	r2, [pc, #168]	@ (80060ec <TIM_Base_SetConfig+0x138>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00f      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a29      	ldr	r2, [pc, #164]	@ (80060f0 <TIM_Base_SetConfig+0x13c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00b      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a28      	ldr	r2, [pc, #160]	@ (80060f4 <TIM_Base_SetConfig+0x140>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d007      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a27      	ldr	r2, [pc, #156]	@ (80060f8 <TIM_Base_SetConfig+0x144>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d003      	beq.n	8006066 <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a26      	ldr	r2, [pc, #152]	@ (80060fc <TIM_Base_SetConfig+0x148>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d108      	bne.n	8006078 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800606c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4313      	orrs	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a0e      	ldr	r2, [pc, #56]	@ (80060d4 <TIM_Base_SetConfig+0x120>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d003      	beq.n	80060a6 <TIM_Base_SetConfig+0xf2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a10      	ldr	r2, [pc, #64]	@ (80060e4 <TIM_Base_SetConfig+0x130>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d103      	bne.n	80060ae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f043 0204 	orr.w	r2, r3, #4
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	601a      	str	r2, [r3, #0]
}
 80060c6:	bf00      	nop
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40010000 	.word	0x40010000
 80060d8:	40000400 	.word	0x40000400
 80060dc:	40000800 	.word	0x40000800
 80060e0:	40000c00 	.word	0x40000c00
 80060e4:	40010400 	.word	0x40010400
 80060e8:	40014000 	.word	0x40014000
 80060ec:	40014400 	.word	0x40014400
 80060f0:	40014800 	.word	0x40014800
 80060f4:	40001800 	.word	0x40001800
 80060f8:	40001c00 	.word	0x40001c00
 80060fc:	40002000 	.word	0x40002000

08006100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f023 0201 	bic.w	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800612a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f023 030a 	bic.w	r3, r3, #10
 800613c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615e:	b480      	push	{r7}
 8006160:	b087      	sub	sp, #28
 8006162:	af00      	add	r7, sp, #0
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	f023 0210 	bic.w	r2, r3, #16
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006188:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	031b      	lsls	r3, r3, #12
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800619a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061be:	b480      	push	{r7}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4313      	orrs	r3, r2
 80061dc:	f043 0307 	orr.w	r3, r3, #7
 80061e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	609a      	str	r2, [r3, #8]
}
 80061e8:	bf00      	nop
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800620e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	021a      	lsls	r2, r3, #8
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	431a      	orrs	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4313      	orrs	r3, r2
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	609a      	str	r2, [r3, #8]
}
 8006228:	bf00      	nop
 800622a:	371c      	adds	r7, #28
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006248:	2302      	movs	r3, #2
 800624a:	e06d      	b.n	8006328 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a30      	ldr	r2, [pc, #192]	@ (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a2f      	ldr	r2, [pc, #188]	@ (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d108      	bne.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006286:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006298:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a20      	ldr	r2, [pc, #128]	@ (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d022      	beq.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062be:	d01d      	beq.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a1d      	ldr	r2, [pc, #116]	@ (800633c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d018      	beq.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006340 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d013      	beq.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006344 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00e      	beq.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a15      	ldr	r2, [pc, #84]	@ (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d009      	beq.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a16      	ldr	r2, [pc, #88]	@ (8006348 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d004      	beq.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a15      	ldr	r2, [pc, #84]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d10c      	bne.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006302:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	4313      	orrs	r3, r2
 800630c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	40010000 	.word	0x40010000
 8006338:	40010400 	.word	0x40010400
 800633c:	40000400 	.word	0x40000400
 8006340:	40000800 	.word	0x40000800
 8006344:	40000c00 	.word	0x40000c00
 8006348:	40014000 	.word	0x40014000
 800634c:	40001800 	.word	0x40001800

08006350 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e040      	b.n	8006420 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d106      	bne.n	80063b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7fc fbf2 	bl	8002b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2224      	movs	r2, #36	@ 0x24
 80063b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0201 	bic.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fb16 	bl	8006a04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f8af 	bl	800653c <UART_SetConfig>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e01b      	b.n	8006420 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fb95 	bl	8006b48 <UART_CheckIdleState>
 800641e:	4603      	mov	r3, r0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08a      	sub	sp, #40	@ 0x28
 800642c:	af02      	add	r7, sp, #8
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	4613      	mov	r3, r2
 8006436:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800643c:	2b20      	cmp	r3, #32
 800643e:	d177      	bne.n	8006530 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_UART_Transmit+0x24>
 8006446:	88fb      	ldrh	r3, [r7, #6]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e070      	b.n	8006532 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2221      	movs	r2, #33	@ 0x21
 800645c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800645e:	f7fc fc75 	bl	8002d4c <HAL_GetTick>
 8006462:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	88fa      	ldrh	r2, [r7, #6]
 8006468:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	88fa      	ldrh	r2, [r7, #6]
 8006470:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800647c:	d108      	bne.n	8006490 <HAL_UART_Transmit+0x68>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d104      	bne.n	8006490 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006486:	2300      	movs	r3, #0
 8006488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	61bb      	str	r3, [r7, #24]
 800648e:	e003      	b.n	8006498 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006494:	2300      	movs	r3, #0
 8006496:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006498:	e02f      	b.n	80064fa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2200      	movs	r2, #0
 80064a2:	2180      	movs	r1, #128	@ 0x80
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 fbf7 	bl	8006c98 <UART_WaitOnFlagUntilTimeout>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d004      	beq.n	80064ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2220      	movs	r2, #32
 80064b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e03b      	b.n	8006532 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10b      	bne.n	80064d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	3302      	adds	r3, #2
 80064d4:	61bb      	str	r3, [r7, #24]
 80064d6:	e007      	b.n	80064e8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	781a      	ldrb	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	3301      	adds	r3, #1
 80064e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1c9      	bne.n	800649a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2200      	movs	r2, #0
 800650e:	2140      	movs	r1, #64	@ 0x40
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 fbc1 	bl	8006c98 <UART_WaitOnFlagUntilTimeout>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2220      	movs	r2, #32
 8006520:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e005      	b.n	8006532 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2220      	movs	r2, #32
 800652a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	e000      	b.n	8006532 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	3720      	adds	r7, #32
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	431a      	orrs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4ba6      	ldr	r3, [pc, #664]	@ (8006800 <UART_SetConfig+0x2c4>)
 8006568:	4013      	ands	r3, r2
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	6979      	ldr	r1, [r7, #20]
 8006570:	430b      	orrs	r3, r1
 8006572:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a94      	ldr	r2, [pc, #592]	@ (8006804 <UART_SetConfig+0x2c8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d120      	bne.n	80065fa <UART_SetConfig+0xbe>
 80065b8:	4b93      	ldr	r3, [pc, #588]	@ (8006808 <UART_SetConfig+0x2cc>)
 80065ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d816      	bhi.n	80065f4 <UART_SetConfig+0xb8>
 80065c6:	a201      	add	r2, pc, #4	@ (adr r2, 80065cc <UART_SetConfig+0x90>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	080065dd 	.word	0x080065dd
 80065d0:	080065e9 	.word	0x080065e9
 80065d4:	080065e3 	.word	0x080065e3
 80065d8:	080065ef 	.word	0x080065ef
 80065dc:	2301      	movs	r3, #1
 80065de:	77fb      	strb	r3, [r7, #31]
 80065e0:	e150      	b.n	8006884 <UART_SetConfig+0x348>
 80065e2:	2302      	movs	r3, #2
 80065e4:	77fb      	strb	r3, [r7, #31]
 80065e6:	e14d      	b.n	8006884 <UART_SetConfig+0x348>
 80065e8:	2304      	movs	r3, #4
 80065ea:	77fb      	strb	r3, [r7, #31]
 80065ec:	e14a      	b.n	8006884 <UART_SetConfig+0x348>
 80065ee:	2308      	movs	r3, #8
 80065f0:	77fb      	strb	r3, [r7, #31]
 80065f2:	e147      	b.n	8006884 <UART_SetConfig+0x348>
 80065f4:	2310      	movs	r3, #16
 80065f6:	77fb      	strb	r3, [r7, #31]
 80065f8:	e144      	b.n	8006884 <UART_SetConfig+0x348>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a83      	ldr	r2, [pc, #524]	@ (800680c <UART_SetConfig+0x2d0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d132      	bne.n	800666a <UART_SetConfig+0x12e>
 8006604:	4b80      	ldr	r3, [pc, #512]	@ (8006808 <UART_SetConfig+0x2cc>)
 8006606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800660a:	f003 030c 	and.w	r3, r3, #12
 800660e:	2b0c      	cmp	r3, #12
 8006610:	d828      	bhi.n	8006664 <UART_SetConfig+0x128>
 8006612:	a201      	add	r2, pc, #4	@ (adr r2, 8006618 <UART_SetConfig+0xdc>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	0800664d 	.word	0x0800664d
 800661c:	08006665 	.word	0x08006665
 8006620:	08006665 	.word	0x08006665
 8006624:	08006665 	.word	0x08006665
 8006628:	08006659 	.word	0x08006659
 800662c:	08006665 	.word	0x08006665
 8006630:	08006665 	.word	0x08006665
 8006634:	08006665 	.word	0x08006665
 8006638:	08006653 	.word	0x08006653
 800663c:	08006665 	.word	0x08006665
 8006640:	08006665 	.word	0x08006665
 8006644:	08006665 	.word	0x08006665
 8006648:	0800665f 	.word	0x0800665f
 800664c:	2300      	movs	r3, #0
 800664e:	77fb      	strb	r3, [r7, #31]
 8006650:	e118      	b.n	8006884 <UART_SetConfig+0x348>
 8006652:	2302      	movs	r3, #2
 8006654:	77fb      	strb	r3, [r7, #31]
 8006656:	e115      	b.n	8006884 <UART_SetConfig+0x348>
 8006658:	2304      	movs	r3, #4
 800665a:	77fb      	strb	r3, [r7, #31]
 800665c:	e112      	b.n	8006884 <UART_SetConfig+0x348>
 800665e:	2308      	movs	r3, #8
 8006660:	77fb      	strb	r3, [r7, #31]
 8006662:	e10f      	b.n	8006884 <UART_SetConfig+0x348>
 8006664:	2310      	movs	r3, #16
 8006666:	77fb      	strb	r3, [r7, #31]
 8006668:	e10c      	b.n	8006884 <UART_SetConfig+0x348>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a68      	ldr	r2, [pc, #416]	@ (8006810 <UART_SetConfig+0x2d4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d120      	bne.n	80066b6 <UART_SetConfig+0x17a>
 8006674:	4b64      	ldr	r3, [pc, #400]	@ (8006808 <UART_SetConfig+0x2cc>)
 8006676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800667e:	2b30      	cmp	r3, #48	@ 0x30
 8006680:	d013      	beq.n	80066aa <UART_SetConfig+0x16e>
 8006682:	2b30      	cmp	r3, #48	@ 0x30
 8006684:	d814      	bhi.n	80066b0 <UART_SetConfig+0x174>
 8006686:	2b20      	cmp	r3, #32
 8006688:	d009      	beq.n	800669e <UART_SetConfig+0x162>
 800668a:	2b20      	cmp	r3, #32
 800668c:	d810      	bhi.n	80066b0 <UART_SetConfig+0x174>
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <UART_SetConfig+0x15c>
 8006692:	2b10      	cmp	r3, #16
 8006694:	d006      	beq.n	80066a4 <UART_SetConfig+0x168>
 8006696:	e00b      	b.n	80066b0 <UART_SetConfig+0x174>
 8006698:	2300      	movs	r3, #0
 800669a:	77fb      	strb	r3, [r7, #31]
 800669c:	e0f2      	b.n	8006884 <UART_SetConfig+0x348>
 800669e:	2302      	movs	r3, #2
 80066a0:	77fb      	strb	r3, [r7, #31]
 80066a2:	e0ef      	b.n	8006884 <UART_SetConfig+0x348>
 80066a4:	2304      	movs	r3, #4
 80066a6:	77fb      	strb	r3, [r7, #31]
 80066a8:	e0ec      	b.n	8006884 <UART_SetConfig+0x348>
 80066aa:	2308      	movs	r3, #8
 80066ac:	77fb      	strb	r3, [r7, #31]
 80066ae:	e0e9      	b.n	8006884 <UART_SetConfig+0x348>
 80066b0:	2310      	movs	r3, #16
 80066b2:	77fb      	strb	r3, [r7, #31]
 80066b4:	e0e6      	b.n	8006884 <UART_SetConfig+0x348>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a56      	ldr	r2, [pc, #344]	@ (8006814 <UART_SetConfig+0x2d8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d120      	bne.n	8006702 <UART_SetConfig+0x1c6>
 80066c0:	4b51      	ldr	r3, [pc, #324]	@ (8006808 <UART_SetConfig+0x2cc>)
 80066c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80066cc:	d013      	beq.n	80066f6 <UART_SetConfig+0x1ba>
 80066ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80066d0:	d814      	bhi.n	80066fc <UART_SetConfig+0x1c0>
 80066d2:	2b80      	cmp	r3, #128	@ 0x80
 80066d4:	d009      	beq.n	80066ea <UART_SetConfig+0x1ae>
 80066d6:	2b80      	cmp	r3, #128	@ 0x80
 80066d8:	d810      	bhi.n	80066fc <UART_SetConfig+0x1c0>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <UART_SetConfig+0x1a8>
 80066de:	2b40      	cmp	r3, #64	@ 0x40
 80066e0:	d006      	beq.n	80066f0 <UART_SetConfig+0x1b4>
 80066e2:	e00b      	b.n	80066fc <UART_SetConfig+0x1c0>
 80066e4:	2300      	movs	r3, #0
 80066e6:	77fb      	strb	r3, [r7, #31]
 80066e8:	e0cc      	b.n	8006884 <UART_SetConfig+0x348>
 80066ea:	2302      	movs	r3, #2
 80066ec:	77fb      	strb	r3, [r7, #31]
 80066ee:	e0c9      	b.n	8006884 <UART_SetConfig+0x348>
 80066f0:	2304      	movs	r3, #4
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e0c6      	b.n	8006884 <UART_SetConfig+0x348>
 80066f6:	2308      	movs	r3, #8
 80066f8:	77fb      	strb	r3, [r7, #31]
 80066fa:	e0c3      	b.n	8006884 <UART_SetConfig+0x348>
 80066fc:	2310      	movs	r3, #16
 80066fe:	77fb      	strb	r3, [r7, #31]
 8006700:	e0c0      	b.n	8006884 <UART_SetConfig+0x348>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a44      	ldr	r2, [pc, #272]	@ (8006818 <UART_SetConfig+0x2dc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d125      	bne.n	8006758 <UART_SetConfig+0x21c>
 800670c:	4b3e      	ldr	r3, [pc, #248]	@ (8006808 <UART_SetConfig+0x2cc>)
 800670e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006716:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800671a:	d017      	beq.n	800674c <UART_SetConfig+0x210>
 800671c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006720:	d817      	bhi.n	8006752 <UART_SetConfig+0x216>
 8006722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006726:	d00b      	beq.n	8006740 <UART_SetConfig+0x204>
 8006728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800672c:	d811      	bhi.n	8006752 <UART_SetConfig+0x216>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <UART_SetConfig+0x1fe>
 8006732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006736:	d006      	beq.n	8006746 <UART_SetConfig+0x20a>
 8006738:	e00b      	b.n	8006752 <UART_SetConfig+0x216>
 800673a:	2300      	movs	r3, #0
 800673c:	77fb      	strb	r3, [r7, #31]
 800673e:	e0a1      	b.n	8006884 <UART_SetConfig+0x348>
 8006740:	2302      	movs	r3, #2
 8006742:	77fb      	strb	r3, [r7, #31]
 8006744:	e09e      	b.n	8006884 <UART_SetConfig+0x348>
 8006746:	2304      	movs	r3, #4
 8006748:	77fb      	strb	r3, [r7, #31]
 800674a:	e09b      	b.n	8006884 <UART_SetConfig+0x348>
 800674c:	2308      	movs	r3, #8
 800674e:	77fb      	strb	r3, [r7, #31]
 8006750:	e098      	b.n	8006884 <UART_SetConfig+0x348>
 8006752:	2310      	movs	r3, #16
 8006754:	77fb      	strb	r3, [r7, #31]
 8006756:	e095      	b.n	8006884 <UART_SetConfig+0x348>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a2f      	ldr	r2, [pc, #188]	@ (800681c <UART_SetConfig+0x2e0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d125      	bne.n	80067ae <UART_SetConfig+0x272>
 8006762:	4b29      	ldr	r3, [pc, #164]	@ (8006808 <UART_SetConfig+0x2cc>)
 8006764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006768:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800676c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006770:	d017      	beq.n	80067a2 <UART_SetConfig+0x266>
 8006772:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006776:	d817      	bhi.n	80067a8 <UART_SetConfig+0x26c>
 8006778:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800677c:	d00b      	beq.n	8006796 <UART_SetConfig+0x25a>
 800677e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006782:	d811      	bhi.n	80067a8 <UART_SetConfig+0x26c>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <UART_SetConfig+0x254>
 8006788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800678c:	d006      	beq.n	800679c <UART_SetConfig+0x260>
 800678e:	e00b      	b.n	80067a8 <UART_SetConfig+0x26c>
 8006790:	2301      	movs	r3, #1
 8006792:	77fb      	strb	r3, [r7, #31]
 8006794:	e076      	b.n	8006884 <UART_SetConfig+0x348>
 8006796:	2302      	movs	r3, #2
 8006798:	77fb      	strb	r3, [r7, #31]
 800679a:	e073      	b.n	8006884 <UART_SetConfig+0x348>
 800679c:	2304      	movs	r3, #4
 800679e:	77fb      	strb	r3, [r7, #31]
 80067a0:	e070      	b.n	8006884 <UART_SetConfig+0x348>
 80067a2:	2308      	movs	r3, #8
 80067a4:	77fb      	strb	r3, [r7, #31]
 80067a6:	e06d      	b.n	8006884 <UART_SetConfig+0x348>
 80067a8:	2310      	movs	r3, #16
 80067aa:	77fb      	strb	r3, [r7, #31]
 80067ac:	e06a      	b.n	8006884 <UART_SetConfig+0x348>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006820 <UART_SetConfig+0x2e4>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d138      	bne.n	800682a <UART_SetConfig+0x2ee>
 80067b8:	4b13      	ldr	r3, [pc, #76]	@ (8006808 <UART_SetConfig+0x2cc>)
 80067ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067be:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80067c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80067c6:	d017      	beq.n	80067f8 <UART_SetConfig+0x2bc>
 80067c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80067cc:	d82a      	bhi.n	8006824 <UART_SetConfig+0x2e8>
 80067ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067d2:	d00b      	beq.n	80067ec <UART_SetConfig+0x2b0>
 80067d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067d8:	d824      	bhi.n	8006824 <UART_SetConfig+0x2e8>
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <UART_SetConfig+0x2aa>
 80067de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067e2:	d006      	beq.n	80067f2 <UART_SetConfig+0x2b6>
 80067e4:	e01e      	b.n	8006824 <UART_SetConfig+0x2e8>
 80067e6:	2300      	movs	r3, #0
 80067e8:	77fb      	strb	r3, [r7, #31]
 80067ea:	e04b      	b.n	8006884 <UART_SetConfig+0x348>
 80067ec:	2302      	movs	r3, #2
 80067ee:	77fb      	strb	r3, [r7, #31]
 80067f0:	e048      	b.n	8006884 <UART_SetConfig+0x348>
 80067f2:	2304      	movs	r3, #4
 80067f4:	77fb      	strb	r3, [r7, #31]
 80067f6:	e045      	b.n	8006884 <UART_SetConfig+0x348>
 80067f8:	2308      	movs	r3, #8
 80067fa:	77fb      	strb	r3, [r7, #31]
 80067fc:	e042      	b.n	8006884 <UART_SetConfig+0x348>
 80067fe:	bf00      	nop
 8006800:	efff69f3 	.word	0xefff69f3
 8006804:	40011000 	.word	0x40011000
 8006808:	40023800 	.word	0x40023800
 800680c:	40004400 	.word	0x40004400
 8006810:	40004800 	.word	0x40004800
 8006814:	40004c00 	.word	0x40004c00
 8006818:	40005000 	.word	0x40005000
 800681c:	40011400 	.word	0x40011400
 8006820:	40007800 	.word	0x40007800
 8006824:	2310      	movs	r3, #16
 8006826:	77fb      	strb	r3, [r7, #31]
 8006828:	e02c      	b.n	8006884 <UART_SetConfig+0x348>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a72      	ldr	r2, [pc, #456]	@ (80069f8 <UART_SetConfig+0x4bc>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d125      	bne.n	8006880 <UART_SetConfig+0x344>
 8006834:	4b71      	ldr	r3, [pc, #452]	@ (80069fc <UART_SetConfig+0x4c0>)
 8006836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800683a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800683e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006842:	d017      	beq.n	8006874 <UART_SetConfig+0x338>
 8006844:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006848:	d817      	bhi.n	800687a <UART_SetConfig+0x33e>
 800684a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800684e:	d00b      	beq.n	8006868 <UART_SetConfig+0x32c>
 8006850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006854:	d811      	bhi.n	800687a <UART_SetConfig+0x33e>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <UART_SetConfig+0x326>
 800685a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800685e:	d006      	beq.n	800686e <UART_SetConfig+0x332>
 8006860:	e00b      	b.n	800687a <UART_SetConfig+0x33e>
 8006862:	2300      	movs	r3, #0
 8006864:	77fb      	strb	r3, [r7, #31]
 8006866:	e00d      	b.n	8006884 <UART_SetConfig+0x348>
 8006868:	2302      	movs	r3, #2
 800686a:	77fb      	strb	r3, [r7, #31]
 800686c:	e00a      	b.n	8006884 <UART_SetConfig+0x348>
 800686e:	2304      	movs	r3, #4
 8006870:	77fb      	strb	r3, [r7, #31]
 8006872:	e007      	b.n	8006884 <UART_SetConfig+0x348>
 8006874:	2308      	movs	r3, #8
 8006876:	77fb      	strb	r3, [r7, #31]
 8006878:	e004      	b.n	8006884 <UART_SetConfig+0x348>
 800687a:	2310      	movs	r3, #16
 800687c:	77fb      	strb	r3, [r7, #31]
 800687e:	e001      	b.n	8006884 <UART_SetConfig+0x348>
 8006880:	2310      	movs	r3, #16
 8006882:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800688c:	d15b      	bne.n	8006946 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800688e:	7ffb      	ldrb	r3, [r7, #31]
 8006890:	2b08      	cmp	r3, #8
 8006892:	d828      	bhi.n	80068e6 <UART_SetConfig+0x3aa>
 8006894:	a201      	add	r2, pc, #4	@ (adr r2, 800689c <UART_SetConfig+0x360>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	080068c1 	.word	0x080068c1
 80068a0:	080068c9 	.word	0x080068c9
 80068a4:	080068d1 	.word	0x080068d1
 80068a8:	080068e7 	.word	0x080068e7
 80068ac:	080068d7 	.word	0x080068d7
 80068b0:	080068e7 	.word	0x080068e7
 80068b4:	080068e7 	.word	0x080068e7
 80068b8:	080068e7 	.word	0x080068e7
 80068bc:	080068df 	.word	0x080068df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c0:	f7fe f880 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 80068c4:	61b8      	str	r0, [r7, #24]
        break;
 80068c6:	e013      	b.n	80068f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068c8:	f7fe f890 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 80068cc:	61b8      	str	r0, [r7, #24]
        break;
 80068ce:	e00f      	b.n	80068f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d0:	4b4b      	ldr	r3, [pc, #300]	@ (8006a00 <UART_SetConfig+0x4c4>)
 80068d2:	61bb      	str	r3, [r7, #24]
        break;
 80068d4:	e00c      	b.n	80068f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068d6:	f7fd ffa3 	bl	8004820 <HAL_RCC_GetSysClockFreq>
 80068da:	61b8      	str	r0, [r7, #24]
        break;
 80068dc:	e008      	b.n	80068f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068e2:	61bb      	str	r3, [r7, #24]
        break;
 80068e4:	e004      	b.n	80068f0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	77bb      	strb	r3, [r7, #30]
        break;
 80068ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d074      	beq.n	80069e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	005a      	lsls	r2, r3, #1
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	085b      	lsrs	r3, r3, #1
 8006900:	441a      	add	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	fbb2 f3f3 	udiv	r3, r2, r3
 800690a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	2b0f      	cmp	r3, #15
 8006910:	d916      	bls.n	8006940 <UART_SetConfig+0x404>
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006918:	d212      	bcs.n	8006940 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f023 030f 	bic.w	r3, r3, #15
 8006922:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	085b      	lsrs	r3, r3, #1
 8006928:	b29b      	uxth	r3, r3
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	b29a      	uxth	r2, r3
 8006930:	89fb      	ldrh	r3, [r7, #14]
 8006932:	4313      	orrs	r3, r2
 8006934:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	89fa      	ldrh	r2, [r7, #14]
 800693c:	60da      	str	r2, [r3, #12]
 800693e:	e04f      	b.n	80069e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	77bb      	strb	r3, [r7, #30]
 8006944:	e04c      	b.n	80069e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006946:	7ffb      	ldrb	r3, [r7, #31]
 8006948:	2b08      	cmp	r3, #8
 800694a:	d828      	bhi.n	800699e <UART_SetConfig+0x462>
 800694c:	a201      	add	r2, pc, #4	@ (adr r2, 8006954 <UART_SetConfig+0x418>)
 800694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	08006979 	.word	0x08006979
 8006958:	08006981 	.word	0x08006981
 800695c:	08006989 	.word	0x08006989
 8006960:	0800699f 	.word	0x0800699f
 8006964:	0800698f 	.word	0x0800698f
 8006968:	0800699f 	.word	0x0800699f
 800696c:	0800699f 	.word	0x0800699f
 8006970:	0800699f 	.word	0x0800699f
 8006974:	08006997 	.word	0x08006997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006978:	f7fe f824 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 800697c:	61b8      	str	r0, [r7, #24]
        break;
 800697e:	e013      	b.n	80069a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006980:	f7fe f834 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 8006984:	61b8      	str	r0, [r7, #24]
        break;
 8006986:	e00f      	b.n	80069a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006988:	4b1d      	ldr	r3, [pc, #116]	@ (8006a00 <UART_SetConfig+0x4c4>)
 800698a:	61bb      	str	r3, [r7, #24]
        break;
 800698c:	e00c      	b.n	80069a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800698e:	f7fd ff47 	bl	8004820 <HAL_RCC_GetSysClockFreq>
 8006992:	61b8      	str	r0, [r7, #24]
        break;
 8006994:	e008      	b.n	80069a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800699a:	61bb      	str	r3, [r7, #24]
        break;
 800699c:	e004      	b.n	80069a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	77bb      	strb	r3, [r7, #30]
        break;
 80069a6:	bf00      	nop
    }

    if (pclk != 0U)
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d018      	beq.n	80069e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	085a      	lsrs	r2, r3, #1
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	441a      	add	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b0f      	cmp	r3, #15
 80069c6:	d909      	bls.n	80069dc <UART_SetConfig+0x4a0>
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069ce:	d205      	bcs.n	80069dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	60da      	str	r2, [r3, #12]
 80069da:	e001      	b.n	80069e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80069ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3720      	adds	r7, #32
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	40007c00 	.word	0x40007c00
 80069fc:	40023800 	.word	0x40023800
 8006a00:	00f42400 	.word	0x00f42400

08006a04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	f003 0308 	and.w	r3, r3, #8
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00a      	beq.n	8006a2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00a      	beq.n	8006a72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a76:	f003 0304 	and.w	r3, r3, #4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a98:	f003 0310 	and.w	r3, r3, #16
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00a      	beq.n	8006ab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01a      	beq.n	8006b1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b02:	d10a      	bne.n	8006b1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	605a      	str	r2, [r3, #4]
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b098      	sub	sp, #96	@ 0x60
 8006b4c:	af02      	add	r7, sp, #8
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b58:	f7fc f8f8 	bl	8002d4c <HAL_GetTick>
 8006b5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0308 	and.w	r3, r3, #8
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d12e      	bne.n	8006bca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b74:	2200      	movs	r2, #0
 8006b76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f88c 	bl	8006c98 <UART_WaitOnFlagUntilTimeout>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d021      	beq.n	8006bca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ba6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006baa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e6      	bne.n	8006b86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e062      	b.n	8006c90 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d149      	bne.n	8006c6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006be0:	2200      	movs	r2, #0
 8006be2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f856 	bl	8006c98 <UART_WaitOnFlagUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d03c      	beq.n	8006c6c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	e853 3f00 	ldrex	r3, [r3]
 8006bfe:	623b      	str	r3, [r7, #32]
   return(result);
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c18:	e841 2300 	strex	r3, r2, [r1]
 8006c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1e6      	bne.n	8006bf2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3308      	adds	r3, #8
 8006c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	e853 3f00 	ldrex	r3, [r3]
 8006c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0301 	bic.w	r3, r3, #1
 8006c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3308      	adds	r3, #8
 8006c42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c44:	61fa      	str	r2, [r7, #28]
 8006c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	69b9      	ldr	r1, [r7, #24]
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	617b      	str	r3, [r7, #20]
   return(result);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e5      	bne.n	8006c24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e011      	b.n	8006c90 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3758      	adds	r7, #88	@ 0x58
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca8:	e04f      	b.n	8006d4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb0:	d04b      	beq.n	8006d4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb2:	f7fc f84b 	bl	8002d4c <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d302      	bcc.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e04e      	b.n	8006d6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d037      	beq.n	8006d4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b80      	cmp	r3, #128	@ 0x80
 8006cde:	d034      	beq.n	8006d4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2b40      	cmp	r3, #64	@ 0x40
 8006ce4:	d031      	beq.n	8006d4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d110      	bne.n	8006d16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2208      	movs	r2, #8
 8006cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 f838 	bl	8006d72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2208      	movs	r2, #8
 8006d06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e029      	b.n	8006d6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d24:	d111      	bne.n	8006d4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 f81e 	bl	8006d72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e00f      	b.n	8006d6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69da      	ldr	r2, [r3, #28]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4013      	ands	r3, r2
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	bf0c      	ite	eq
 8006d5a:	2301      	moveq	r3, #1
 8006d5c:	2300      	movne	r3, #0
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d0a0      	beq.n	8006caa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b095      	sub	sp, #84	@ 0x54
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d98:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e6      	bne.n	8006d7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3308      	adds	r3, #8
 8006db2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f023 0301 	bic.w	r3, r3, #1
 8006dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3308      	adds	r3, #8
 8006dca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006dcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e5      	bne.n	8006dac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d118      	bne.n	8006e1a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f023 0310 	bic.w	r3, r3, #16
 8006dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e06:	61bb      	str	r3, [r7, #24]
 8006e08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	6979      	ldr	r1, [r7, #20]
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	613b      	str	r3, [r7, #16]
   return(result);
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e6      	bne.n	8006de8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006e2e:	bf00      	nop
 8006e30:	3754      	adds	r7, #84	@ 0x54
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <__cvt>:
 8006e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e3c:	ed2d 8b02 	vpush	{d8}
 8006e40:	eeb0 8b40 	vmov.f64	d8, d0
 8006e44:	b085      	sub	sp, #20
 8006e46:	4617      	mov	r7, r2
 8006e48:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006e4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e4c:	ee18 2a90 	vmov	r2, s17
 8006e50:	f025 0520 	bic.w	r5, r5, #32
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	bfb6      	itet	lt
 8006e58:	222d      	movlt	r2, #45	@ 0x2d
 8006e5a:	2200      	movge	r2, #0
 8006e5c:	eeb1 8b40 	vneglt.f64	d8, d0
 8006e60:	2d46      	cmp	r5, #70	@ 0x46
 8006e62:	460c      	mov	r4, r1
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	d004      	beq.n	8006e72 <__cvt+0x38>
 8006e68:	2d45      	cmp	r5, #69	@ 0x45
 8006e6a:	d100      	bne.n	8006e6e <__cvt+0x34>
 8006e6c:	3401      	adds	r4, #1
 8006e6e:	2102      	movs	r1, #2
 8006e70:	e000      	b.n	8006e74 <__cvt+0x3a>
 8006e72:	2103      	movs	r1, #3
 8006e74:	ab03      	add	r3, sp, #12
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	ab02      	add	r3, sp, #8
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	4633      	mov	r3, r6
 8006e80:	eeb0 0b48 	vmov.f64	d0, d8
 8006e84:	f001 f84c 	bl	8007f20 <_dtoa_r>
 8006e88:	2d47      	cmp	r5, #71	@ 0x47
 8006e8a:	d114      	bne.n	8006eb6 <__cvt+0x7c>
 8006e8c:	07fb      	lsls	r3, r7, #31
 8006e8e:	d50a      	bpl.n	8006ea6 <__cvt+0x6c>
 8006e90:	1902      	adds	r2, r0, r4
 8006e92:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e9a:	bf08      	it	eq
 8006e9c:	9203      	streq	r2, [sp, #12]
 8006e9e:	2130      	movs	r1, #48	@ 0x30
 8006ea0:	9b03      	ldr	r3, [sp, #12]
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d319      	bcc.n	8006eda <__cvt+0xa0>
 8006ea6:	9b03      	ldr	r3, [sp, #12]
 8006ea8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006eaa:	1a1b      	subs	r3, r3, r0
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	b005      	add	sp, #20
 8006eb0:	ecbd 8b02 	vpop	{d8}
 8006eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb6:	2d46      	cmp	r5, #70	@ 0x46
 8006eb8:	eb00 0204 	add.w	r2, r0, r4
 8006ebc:	d1e9      	bne.n	8006e92 <__cvt+0x58>
 8006ebe:	7803      	ldrb	r3, [r0, #0]
 8006ec0:	2b30      	cmp	r3, #48	@ 0x30
 8006ec2:	d107      	bne.n	8006ed4 <__cvt+0x9a>
 8006ec4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ecc:	bf1c      	itt	ne
 8006ece:	f1c4 0401 	rsbne	r4, r4, #1
 8006ed2:	6034      	strne	r4, [r6, #0]
 8006ed4:	6833      	ldr	r3, [r6, #0]
 8006ed6:	441a      	add	r2, r3
 8006ed8:	e7db      	b.n	8006e92 <__cvt+0x58>
 8006eda:	1c5c      	adds	r4, r3, #1
 8006edc:	9403      	str	r4, [sp, #12]
 8006ede:	7019      	strb	r1, [r3, #0]
 8006ee0:	e7de      	b.n	8006ea0 <__cvt+0x66>

08006ee2 <__exponent>:
 8006ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	bfba      	itte	lt
 8006ee8:	4249      	neglt	r1, r1
 8006eea:	232d      	movlt	r3, #45	@ 0x2d
 8006eec:	232b      	movge	r3, #43	@ 0x2b
 8006eee:	2909      	cmp	r1, #9
 8006ef0:	7002      	strb	r2, [r0, #0]
 8006ef2:	7043      	strb	r3, [r0, #1]
 8006ef4:	dd29      	ble.n	8006f4a <__exponent+0x68>
 8006ef6:	f10d 0307 	add.w	r3, sp, #7
 8006efa:	461d      	mov	r5, r3
 8006efc:	270a      	movs	r7, #10
 8006efe:	461a      	mov	r2, r3
 8006f00:	fbb1 f6f7 	udiv	r6, r1, r7
 8006f04:	fb07 1416 	mls	r4, r7, r6, r1
 8006f08:	3430      	adds	r4, #48	@ 0x30
 8006f0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006f0e:	460c      	mov	r4, r1
 8006f10:	2c63      	cmp	r4, #99	@ 0x63
 8006f12:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f16:	4631      	mov	r1, r6
 8006f18:	dcf1      	bgt.n	8006efe <__exponent+0x1c>
 8006f1a:	3130      	adds	r1, #48	@ 0x30
 8006f1c:	1e94      	subs	r4, r2, #2
 8006f1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006f22:	1c41      	adds	r1, r0, #1
 8006f24:	4623      	mov	r3, r4
 8006f26:	42ab      	cmp	r3, r5
 8006f28:	d30a      	bcc.n	8006f40 <__exponent+0x5e>
 8006f2a:	f10d 0309 	add.w	r3, sp, #9
 8006f2e:	1a9b      	subs	r3, r3, r2
 8006f30:	42ac      	cmp	r4, r5
 8006f32:	bf88      	it	hi
 8006f34:	2300      	movhi	r3, #0
 8006f36:	3302      	adds	r3, #2
 8006f38:	4403      	add	r3, r0
 8006f3a:	1a18      	subs	r0, r3, r0
 8006f3c:	b003      	add	sp, #12
 8006f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f48:	e7ed      	b.n	8006f26 <__exponent+0x44>
 8006f4a:	2330      	movs	r3, #48	@ 0x30
 8006f4c:	3130      	adds	r1, #48	@ 0x30
 8006f4e:	7083      	strb	r3, [r0, #2]
 8006f50:	70c1      	strb	r1, [r0, #3]
 8006f52:	1d03      	adds	r3, r0, #4
 8006f54:	e7f1      	b.n	8006f3a <__exponent+0x58>
	...

08006f58 <_printf_float>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	b08d      	sub	sp, #52	@ 0x34
 8006f5e:	460c      	mov	r4, r1
 8006f60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006f64:	4616      	mov	r6, r2
 8006f66:	461f      	mov	r7, r3
 8006f68:	4605      	mov	r5, r0
 8006f6a:	f000 fed1 	bl	8007d10 <_localeconv_r>
 8006f6e:	f8d0 b000 	ldr.w	fp, [r0]
 8006f72:	4658      	mov	r0, fp
 8006f74:	f7f9 f9b4 	bl	80002e0 <strlen>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f80:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006f84:	6822      	ldr	r2, [r4, #0]
 8006f86:	9005      	str	r0, [sp, #20]
 8006f88:	3307      	adds	r3, #7
 8006f8a:	f023 0307 	bic.w	r3, r3, #7
 8006f8e:	f103 0108 	add.w	r1, r3, #8
 8006f92:	f8c8 1000 	str.w	r1, [r8]
 8006f96:	ed93 0b00 	vldr	d0, [r3]
 8006f9a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80071f8 <_printf_float+0x2a0>
 8006f9e:	eeb0 7bc0 	vabs.f64	d7, d0
 8006fa2:	eeb4 7b46 	vcmp.f64	d7, d6
 8006fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006faa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006fae:	dd24      	ble.n	8006ffa <_printf_float+0xa2>
 8006fb0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb8:	d502      	bpl.n	8006fc0 <_printf_float+0x68>
 8006fba:	232d      	movs	r3, #45	@ 0x2d
 8006fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fc0:	498f      	ldr	r1, [pc, #572]	@ (8007200 <_printf_float+0x2a8>)
 8006fc2:	4b90      	ldr	r3, [pc, #576]	@ (8007204 <_printf_float+0x2ac>)
 8006fc4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006fc8:	bf8c      	ite	hi
 8006fca:	4688      	movhi	r8, r1
 8006fcc:	4698      	movls	r8, r3
 8006fce:	f022 0204 	bic.w	r2, r2, #4
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	6022      	str	r2, [r4, #0]
 8006fd8:	f04f 0a00 	mov.w	sl, #0
 8006fdc:	9700      	str	r7, [sp, #0]
 8006fde:	4633      	mov	r3, r6
 8006fe0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f000 f9d1 	bl	800738c <_printf_common>
 8006fea:	3001      	adds	r0, #1
 8006fec:	f040 8089 	bne.w	8007102 <_printf_float+0x1aa>
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	b00d      	add	sp, #52	@ 0x34
 8006ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffa:	eeb4 0b40 	vcmp.f64	d0, d0
 8006ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007002:	d709      	bvc.n	8007018 <_printf_float+0xc0>
 8007004:	ee10 3a90 	vmov	r3, s1
 8007008:	2b00      	cmp	r3, #0
 800700a:	bfbc      	itt	lt
 800700c:	232d      	movlt	r3, #45	@ 0x2d
 800700e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007012:	497d      	ldr	r1, [pc, #500]	@ (8007208 <_printf_float+0x2b0>)
 8007014:	4b7d      	ldr	r3, [pc, #500]	@ (800720c <_printf_float+0x2b4>)
 8007016:	e7d5      	b.n	8006fc4 <_printf_float+0x6c>
 8007018:	6863      	ldr	r3, [r4, #4]
 800701a:	1c59      	adds	r1, r3, #1
 800701c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007020:	d139      	bne.n	8007096 <_printf_float+0x13e>
 8007022:	2306      	movs	r3, #6
 8007024:	6063      	str	r3, [r4, #4]
 8007026:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800702a:	2300      	movs	r3, #0
 800702c:	6022      	str	r2, [r4, #0]
 800702e:	9303      	str	r3, [sp, #12]
 8007030:	ab0a      	add	r3, sp, #40	@ 0x28
 8007032:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007036:	ab09      	add	r3, sp, #36	@ 0x24
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	6861      	ldr	r1, [r4, #4]
 800703c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007040:	4628      	mov	r0, r5
 8007042:	f7ff fefa 	bl	8006e3a <__cvt>
 8007046:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800704a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800704c:	4680      	mov	r8, r0
 800704e:	d129      	bne.n	80070a4 <_printf_float+0x14c>
 8007050:	1cc8      	adds	r0, r1, #3
 8007052:	db02      	blt.n	800705a <_printf_float+0x102>
 8007054:	6863      	ldr	r3, [r4, #4]
 8007056:	4299      	cmp	r1, r3
 8007058:	dd41      	ble.n	80070de <_printf_float+0x186>
 800705a:	f1a9 0902 	sub.w	r9, r9, #2
 800705e:	fa5f f989 	uxtb.w	r9, r9
 8007062:	3901      	subs	r1, #1
 8007064:	464a      	mov	r2, r9
 8007066:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800706a:	9109      	str	r1, [sp, #36]	@ 0x24
 800706c:	f7ff ff39 	bl	8006ee2 <__exponent>
 8007070:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007072:	1813      	adds	r3, r2, r0
 8007074:	2a01      	cmp	r2, #1
 8007076:	4682      	mov	sl, r0
 8007078:	6123      	str	r3, [r4, #16]
 800707a:	dc02      	bgt.n	8007082 <_printf_float+0x12a>
 800707c:	6822      	ldr	r2, [r4, #0]
 800707e:	07d2      	lsls	r2, r2, #31
 8007080:	d501      	bpl.n	8007086 <_printf_float+0x12e>
 8007082:	3301      	adds	r3, #1
 8007084:	6123      	str	r3, [r4, #16]
 8007086:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0a6      	beq.n	8006fdc <_printf_float+0x84>
 800708e:	232d      	movs	r3, #45	@ 0x2d
 8007090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007094:	e7a2      	b.n	8006fdc <_printf_float+0x84>
 8007096:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800709a:	d1c4      	bne.n	8007026 <_printf_float+0xce>
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1c2      	bne.n	8007026 <_printf_float+0xce>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e7bf      	b.n	8007024 <_printf_float+0xcc>
 80070a4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80070a8:	d9db      	bls.n	8007062 <_printf_float+0x10a>
 80070aa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80070ae:	d118      	bne.n	80070e2 <_printf_float+0x18a>
 80070b0:	2900      	cmp	r1, #0
 80070b2:	6863      	ldr	r3, [r4, #4]
 80070b4:	dd0b      	ble.n	80070ce <_printf_float+0x176>
 80070b6:	6121      	str	r1, [r4, #16]
 80070b8:	b913      	cbnz	r3, 80070c0 <_printf_float+0x168>
 80070ba:	6822      	ldr	r2, [r4, #0]
 80070bc:	07d0      	lsls	r0, r2, #31
 80070be:	d502      	bpl.n	80070c6 <_printf_float+0x16e>
 80070c0:	3301      	adds	r3, #1
 80070c2:	440b      	add	r3, r1
 80070c4:	6123      	str	r3, [r4, #16]
 80070c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070c8:	f04f 0a00 	mov.w	sl, #0
 80070cc:	e7db      	b.n	8007086 <_printf_float+0x12e>
 80070ce:	b913      	cbnz	r3, 80070d6 <_printf_float+0x17e>
 80070d0:	6822      	ldr	r2, [r4, #0]
 80070d2:	07d2      	lsls	r2, r2, #31
 80070d4:	d501      	bpl.n	80070da <_printf_float+0x182>
 80070d6:	3302      	adds	r3, #2
 80070d8:	e7f4      	b.n	80070c4 <_printf_float+0x16c>
 80070da:	2301      	movs	r3, #1
 80070dc:	e7f2      	b.n	80070c4 <_printf_float+0x16c>
 80070de:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80070e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070e4:	4299      	cmp	r1, r3
 80070e6:	db05      	blt.n	80070f4 <_printf_float+0x19c>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	6121      	str	r1, [r4, #16]
 80070ec:	07d8      	lsls	r0, r3, #31
 80070ee:	d5ea      	bpl.n	80070c6 <_printf_float+0x16e>
 80070f0:	1c4b      	adds	r3, r1, #1
 80070f2:	e7e7      	b.n	80070c4 <_printf_float+0x16c>
 80070f4:	2900      	cmp	r1, #0
 80070f6:	bfd4      	ite	le
 80070f8:	f1c1 0202 	rsble	r2, r1, #2
 80070fc:	2201      	movgt	r2, #1
 80070fe:	4413      	add	r3, r2
 8007100:	e7e0      	b.n	80070c4 <_printf_float+0x16c>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	055a      	lsls	r2, r3, #21
 8007106:	d407      	bmi.n	8007118 <_printf_float+0x1c0>
 8007108:	6923      	ldr	r3, [r4, #16]
 800710a:	4642      	mov	r2, r8
 800710c:	4631      	mov	r1, r6
 800710e:	4628      	mov	r0, r5
 8007110:	47b8      	blx	r7
 8007112:	3001      	adds	r0, #1
 8007114:	d12a      	bne.n	800716c <_printf_float+0x214>
 8007116:	e76b      	b.n	8006ff0 <_printf_float+0x98>
 8007118:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800711c:	f240 80e0 	bls.w	80072e0 <_printf_float+0x388>
 8007120:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007124:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712c:	d133      	bne.n	8007196 <_printf_float+0x23e>
 800712e:	4a38      	ldr	r2, [pc, #224]	@ (8007210 <_printf_float+0x2b8>)
 8007130:	2301      	movs	r3, #1
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	f43f af59 	beq.w	8006ff0 <_printf_float+0x98>
 800713e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007142:	4543      	cmp	r3, r8
 8007144:	db02      	blt.n	800714c <_printf_float+0x1f4>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	07d8      	lsls	r0, r3, #31
 800714a:	d50f      	bpl.n	800716c <_printf_float+0x214>
 800714c:	9b05      	ldr	r3, [sp, #20]
 800714e:	465a      	mov	r2, fp
 8007150:	4631      	mov	r1, r6
 8007152:	4628      	mov	r0, r5
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	f43f af4a 	beq.w	8006ff0 <_printf_float+0x98>
 800715c:	f04f 0900 	mov.w	r9, #0
 8007160:	f108 38ff 	add.w	r8, r8, #4294967295
 8007164:	f104 0a1a 	add.w	sl, r4, #26
 8007168:	45c8      	cmp	r8, r9
 800716a:	dc09      	bgt.n	8007180 <_printf_float+0x228>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	079b      	lsls	r3, r3, #30
 8007170:	f100 8107 	bmi.w	8007382 <_printf_float+0x42a>
 8007174:	68e0      	ldr	r0, [r4, #12]
 8007176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007178:	4298      	cmp	r0, r3
 800717a:	bfb8      	it	lt
 800717c:	4618      	movlt	r0, r3
 800717e:	e739      	b.n	8006ff4 <_printf_float+0x9c>
 8007180:	2301      	movs	r3, #1
 8007182:	4652      	mov	r2, sl
 8007184:	4631      	mov	r1, r6
 8007186:	4628      	mov	r0, r5
 8007188:	47b8      	blx	r7
 800718a:	3001      	adds	r0, #1
 800718c:	f43f af30 	beq.w	8006ff0 <_printf_float+0x98>
 8007190:	f109 0901 	add.w	r9, r9, #1
 8007194:	e7e8      	b.n	8007168 <_printf_float+0x210>
 8007196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007198:	2b00      	cmp	r3, #0
 800719a:	dc3b      	bgt.n	8007214 <_printf_float+0x2bc>
 800719c:	4a1c      	ldr	r2, [pc, #112]	@ (8007210 <_printf_float+0x2b8>)
 800719e:	2301      	movs	r3, #1
 80071a0:	4631      	mov	r1, r6
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b8      	blx	r7
 80071a6:	3001      	adds	r0, #1
 80071a8:	f43f af22 	beq.w	8006ff0 <_printf_float+0x98>
 80071ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80071b0:	ea59 0303 	orrs.w	r3, r9, r3
 80071b4:	d102      	bne.n	80071bc <_printf_float+0x264>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	07d9      	lsls	r1, r3, #31
 80071ba:	d5d7      	bpl.n	800716c <_printf_float+0x214>
 80071bc:	9b05      	ldr	r3, [sp, #20]
 80071be:	465a      	mov	r2, fp
 80071c0:	4631      	mov	r1, r6
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b8      	blx	r7
 80071c6:	3001      	adds	r0, #1
 80071c8:	f43f af12 	beq.w	8006ff0 <_printf_float+0x98>
 80071cc:	f04f 0a00 	mov.w	sl, #0
 80071d0:	f104 0b1a 	add.w	fp, r4, #26
 80071d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d6:	425b      	negs	r3, r3
 80071d8:	4553      	cmp	r3, sl
 80071da:	dc01      	bgt.n	80071e0 <_printf_float+0x288>
 80071dc:	464b      	mov	r3, r9
 80071de:	e794      	b.n	800710a <_printf_float+0x1b2>
 80071e0:	2301      	movs	r3, #1
 80071e2:	465a      	mov	r2, fp
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	f43f af00 	beq.w	8006ff0 <_printf_float+0x98>
 80071f0:	f10a 0a01 	add.w	sl, sl, #1
 80071f4:	e7ee      	b.n	80071d4 <_printf_float+0x27c>
 80071f6:	bf00      	nop
 80071f8:	ffffffff 	.word	0xffffffff
 80071fc:	7fefffff 	.word	0x7fefffff
 8007200:	0800b67c 	.word	0x0800b67c
 8007204:	0800b678 	.word	0x0800b678
 8007208:	0800b684 	.word	0x0800b684
 800720c:	0800b680 	.word	0x0800b680
 8007210:	0800b688 	.word	0x0800b688
 8007214:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007216:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800721a:	4553      	cmp	r3, sl
 800721c:	bfa8      	it	ge
 800721e:	4653      	movge	r3, sl
 8007220:	2b00      	cmp	r3, #0
 8007222:	4699      	mov	r9, r3
 8007224:	dc37      	bgt.n	8007296 <_printf_float+0x33e>
 8007226:	2300      	movs	r3, #0
 8007228:	9307      	str	r3, [sp, #28]
 800722a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800722e:	f104 021a 	add.w	r2, r4, #26
 8007232:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007234:	9907      	ldr	r1, [sp, #28]
 8007236:	9306      	str	r3, [sp, #24]
 8007238:	eba3 0309 	sub.w	r3, r3, r9
 800723c:	428b      	cmp	r3, r1
 800723e:	dc31      	bgt.n	80072a4 <_printf_float+0x34c>
 8007240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007242:	459a      	cmp	sl, r3
 8007244:	dc3b      	bgt.n	80072be <_printf_float+0x366>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	07da      	lsls	r2, r3, #31
 800724a:	d438      	bmi.n	80072be <_printf_float+0x366>
 800724c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800724e:	ebaa 0903 	sub.w	r9, sl, r3
 8007252:	9b06      	ldr	r3, [sp, #24]
 8007254:	ebaa 0303 	sub.w	r3, sl, r3
 8007258:	4599      	cmp	r9, r3
 800725a:	bfa8      	it	ge
 800725c:	4699      	movge	r9, r3
 800725e:	f1b9 0f00 	cmp.w	r9, #0
 8007262:	dc34      	bgt.n	80072ce <_printf_float+0x376>
 8007264:	f04f 0800 	mov.w	r8, #0
 8007268:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800726c:	f104 0b1a 	add.w	fp, r4, #26
 8007270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007272:	ebaa 0303 	sub.w	r3, sl, r3
 8007276:	eba3 0309 	sub.w	r3, r3, r9
 800727a:	4543      	cmp	r3, r8
 800727c:	f77f af76 	ble.w	800716c <_printf_float+0x214>
 8007280:	2301      	movs	r3, #1
 8007282:	465a      	mov	r2, fp
 8007284:	4631      	mov	r1, r6
 8007286:	4628      	mov	r0, r5
 8007288:	47b8      	blx	r7
 800728a:	3001      	adds	r0, #1
 800728c:	f43f aeb0 	beq.w	8006ff0 <_printf_float+0x98>
 8007290:	f108 0801 	add.w	r8, r8, #1
 8007294:	e7ec      	b.n	8007270 <_printf_float+0x318>
 8007296:	4642      	mov	r2, r8
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	47b8      	blx	r7
 800729e:	3001      	adds	r0, #1
 80072a0:	d1c1      	bne.n	8007226 <_printf_float+0x2ce>
 80072a2:	e6a5      	b.n	8006ff0 <_printf_float+0x98>
 80072a4:	2301      	movs	r3, #1
 80072a6:	4631      	mov	r1, r6
 80072a8:	4628      	mov	r0, r5
 80072aa:	9206      	str	r2, [sp, #24]
 80072ac:	47b8      	blx	r7
 80072ae:	3001      	adds	r0, #1
 80072b0:	f43f ae9e 	beq.w	8006ff0 <_printf_float+0x98>
 80072b4:	9b07      	ldr	r3, [sp, #28]
 80072b6:	9a06      	ldr	r2, [sp, #24]
 80072b8:	3301      	adds	r3, #1
 80072ba:	9307      	str	r3, [sp, #28]
 80072bc:	e7b9      	b.n	8007232 <_printf_float+0x2da>
 80072be:	9b05      	ldr	r3, [sp, #20]
 80072c0:	465a      	mov	r2, fp
 80072c2:	4631      	mov	r1, r6
 80072c4:	4628      	mov	r0, r5
 80072c6:	47b8      	blx	r7
 80072c8:	3001      	adds	r0, #1
 80072ca:	d1bf      	bne.n	800724c <_printf_float+0x2f4>
 80072cc:	e690      	b.n	8006ff0 <_printf_float+0x98>
 80072ce:	9a06      	ldr	r2, [sp, #24]
 80072d0:	464b      	mov	r3, r9
 80072d2:	4442      	add	r2, r8
 80072d4:	4631      	mov	r1, r6
 80072d6:	4628      	mov	r0, r5
 80072d8:	47b8      	blx	r7
 80072da:	3001      	adds	r0, #1
 80072dc:	d1c2      	bne.n	8007264 <_printf_float+0x30c>
 80072de:	e687      	b.n	8006ff0 <_printf_float+0x98>
 80072e0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80072e4:	f1b9 0f01 	cmp.w	r9, #1
 80072e8:	dc01      	bgt.n	80072ee <_printf_float+0x396>
 80072ea:	07db      	lsls	r3, r3, #31
 80072ec:	d536      	bpl.n	800735c <_printf_float+0x404>
 80072ee:	2301      	movs	r3, #1
 80072f0:	4642      	mov	r2, r8
 80072f2:	4631      	mov	r1, r6
 80072f4:	4628      	mov	r0, r5
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	f43f ae79 	beq.w	8006ff0 <_printf_float+0x98>
 80072fe:	9b05      	ldr	r3, [sp, #20]
 8007300:	465a      	mov	r2, fp
 8007302:	4631      	mov	r1, r6
 8007304:	4628      	mov	r0, r5
 8007306:	47b8      	blx	r7
 8007308:	3001      	adds	r0, #1
 800730a:	f43f ae71 	beq.w	8006ff0 <_printf_float+0x98>
 800730e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007312:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800731a:	f109 39ff 	add.w	r9, r9, #4294967295
 800731e:	d018      	beq.n	8007352 <_printf_float+0x3fa>
 8007320:	464b      	mov	r3, r9
 8007322:	f108 0201 	add.w	r2, r8, #1
 8007326:	4631      	mov	r1, r6
 8007328:	4628      	mov	r0, r5
 800732a:	47b8      	blx	r7
 800732c:	3001      	adds	r0, #1
 800732e:	d10c      	bne.n	800734a <_printf_float+0x3f2>
 8007330:	e65e      	b.n	8006ff0 <_printf_float+0x98>
 8007332:	2301      	movs	r3, #1
 8007334:	465a      	mov	r2, fp
 8007336:	4631      	mov	r1, r6
 8007338:	4628      	mov	r0, r5
 800733a:	47b8      	blx	r7
 800733c:	3001      	adds	r0, #1
 800733e:	f43f ae57 	beq.w	8006ff0 <_printf_float+0x98>
 8007342:	f108 0801 	add.w	r8, r8, #1
 8007346:	45c8      	cmp	r8, r9
 8007348:	dbf3      	blt.n	8007332 <_printf_float+0x3da>
 800734a:	4653      	mov	r3, sl
 800734c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007350:	e6dc      	b.n	800710c <_printf_float+0x1b4>
 8007352:	f04f 0800 	mov.w	r8, #0
 8007356:	f104 0b1a 	add.w	fp, r4, #26
 800735a:	e7f4      	b.n	8007346 <_printf_float+0x3ee>
 800735c:	2301      	movs	r3, #1
 800735e:	4642      	mov	r2, r8
 8007360:	e7e1      	b.n	8007326 <_printf_float+0x3ce>
 8007362:	2301      	movs	r3, #1
 8007364:	464a      	mov	r2, r9
 8007366:	4631      	mov	r1, r6
 8007368:	4628      	mov	r0, r5
 800736a:	47b8      	blx	r7
 800736c:	3001      	adds	r0, #1
 800736e:	f43f ae3f 	beq.w	8006ff0 <_printf_float+0x98>
 8007372:	f108 0801 	add.w	r8, r8, #1
 8007376:	68e3      	ldr	r3, [r4, #12]
 8007378:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800737a:	1a5b      	subs	r3, r3, r1
 800737c:	4543      	cmp	r3, r8
 800737e:	dcf0      	bgt.n	8007362 <_printf_float+0x40a>
 8007380:	e6f8      	b.n	8007174 <_printf_float+0x21c>
 8007382:	f04f 0800 	mov.w	r8, #0
 8007386:	f104 0919 	add.w	r9, r4, #25
 800738a:	e7f4      	b.n	8007376 <_printf_float+0x41e>

0800738c <_printf_common>:
 800738c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007390:	4616      	mov	r6, r2
 8007392:	4698      	mov	r8, r3
 8007394:	688a      	ldr	r2, [r1, #8]
 8007396:	690b      	ldr	r3, [r1, #16]
 8007398:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800739c:	4293      	cmp	r3, r2
 800739e:	bfb8      	it	lt
 80073a0:	4613      	movlt	r3, r2
 80073a2:	6033      	str	r3, [r6, #0]
 80073a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073a8:	4607      	mov	r7, r0
 80073aa:	460c      	mov	r4, r1
 80073ac:	b10a      	cbz	r2, 80073b2 <_printf_common+0x26>
 80073ae:	3301      	adds	r3, #1
 80073b0:	6033      	str	r3, [r6, #0]
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	0699      	lsls	r1, r3, #26
 80073b6:	bf42      	ittt	mi
 80073b8:	6833      	ldrmi	r3, [r6, #0]
 80073ba:	3302      	addmi	r3, #2
 80073bc:	6033      	strmi	r3, [r6, #0]
 80073be:	6825      	ldr	r5, [r4, #0]
 80073c0:	f015 0506 	ands.w	r5, r5, #6
 80073c4:	d106      	bne.n	80073d4 <_printf_common+0x48>
 80073c6:	f104 0a19 	add.w	sl, r4, #25
 80073ca:	68e3      	ldr	r3, [r4, #12]
 80073cc:	6832      	ldr	r2, [r6, #0]
 80073ce:	1a9b      	subs	r3, r3, r2
 80073d0:	42ab      	cmp	r3, r5
 80073d2:	dc26      	bgt.n	8007422 <_printf_common+0x96>
 80073d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073d8:	6822      	ldr	r2, [r4, #0]
 80073da:	3b00      	subs	r3, #0
 80073dc:	bf18      	it	ne
 80073de:	2301      	movne	r3, #1
 80073e0:	0692      	lsls	r2, r2, #26
 80073e2:	d42b      	bmi.n	800743c <_printf_common+0xb0>
 80073e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073e8:	4641      	mov	r1, r8
 80073ea:	4638      	mov	r0, r7
 80073ec:	47c8      	blx	r9
 80073ee:	3001      	adds	r0, #1
 80073f0:	d01e      	beq.n	8007430 <_printf_common+0xa4>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	6922      	ldr	r2, [r4, #16]
 80073f6:	f003 0306 	and.w	r3, r3, #6
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	bf02      	ittt	eq
 80073fe:	68e5      	ldreq	r5, [r4, #12]
 8007400:	6833      	ldreq	r3, [r6, #0]
 8007402:	1aed      	subeq	r5, r5, r3
 8007404:	68a3      	ldr	r3, [r4, #8]
 8007406:	bf0c      	ite	eq
 8007408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800740c:	2500      	movne	r5, #0
 800740e:	4293      	cmp	r3, r2
 8007410:	bfc4      	itt	gt
 8007412:	1a9b      	subgt	r3, r3, r2
 8007414:	18ed      	addgt	r5, r5, r3
 8007416:	2600      	movs	r6, #0
 8007418:	341a      	adds	r4, #26
 800741a:	42b5      	cmp	r5, r6
 800741c:	d11a      	bne.n	8007454 <_printf_common+0xc8>
 800741e:	2000      	movs	r0, #0
 8007420:	e008      	b.n	8007434 <_printf_common+0xa8>
 8007422:	2301      	movs	r3, #1
 8007424:	4652      	mov	r2, sl
 8007426:	4641      	mov	r1, r8
 8007428:	4638      	mov	r0, r7
 800742a:	47c8      	blx	r9
 800742c:	3001      	adds	r0, #1
 800742e:	d103      	bne.n	8007438 <_printf_common+0xac>
 8007430:	f04f 30ff 	mov.w	r0, #4294967295
 8007434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007438:	3501      	adds	r5, #1
 800743a:	e7c6      	b.n	80073ca <_printf_common+0x3e>
 800743c:	18e1      	adds	r1, r4, r3
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	2030      	movs	r0, #48	@ 0x30
 8007442:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007446:	4422      	add	r2, r4
 8007448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800744c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007450:	3302      	adds	r3, #2
 8007452:	e7c7      	b.n	80073e4 <_printf_common+0x58>
 8007454:	2301      	movs	r3, #1
 8007456:	4622      	mov	r2, r4
 8007458:	4641      	mov	r1, r8
 800745a:	4638      	mov	r0, r7
 800745c:	47c8      	blx	r9
 800745e:	3001      	adds	r0, #1
 8007460:	d0e6      	beq.n	8007430 <_printf_common+0xa4>
 8007462:	3601      	adds	r6, #1
 8007464:	e7d9      	b.n	800741a <_printf_common+0x8e>
	...

08007468 <_printf_i>:
 8007468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800746c:	7e0f      	ldrb	r7, [r1, #24]
 800746e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007470:	2f78      	cmp	r7, #120	@ 0x78
 8007472:	4691      	mov	r9, r2
 8007474:	4680      	mov	r8, r0
 8007476:	460c      	mov	r4, r1
 8007478:	469a      	mov	sl, r3
 800747a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800747e:	d807      	bhi.n	8007490 <_printf_i+0x28>
 8007480:	2f62      	cmp	r7, #98	@ 0x62
 8007482:	d80a      	bhi.n	800749a <_printf_i+0x32>
 8007484:	2f00      	cmp	r7, #0
 8007486:	f000 80d1 	beq.w	800762c <_printf_i+0x1c4>
 800748a:	2f58      	cmp	r7, #88	@ 0x58
 800748c:	f000 80b8 	beq.w	8007600 <_printf_i+0x198>
 8007490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007494:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007498:	e03a      	b.n	8007510 <_printf_i+0xa8>
 800749a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800749e:	2b15      	cmp	r3, #21
 80074a0:	d8f6      	bhi.n	8007490 <_printf_i+0x28>
 80074a2:	a101      	add	r1, pc, #4	@ (adr r1, 80074a8 <_printf_i+0x40>)
 80074a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074a8:	08007501 	.word	0x08007501
 80074ac:	08007515 	.word	0x08007515
 80074b0:	08007491 	.word	0x08007491
 80074b4:	08007491 	.word	0x08007491
 80074b8:	08007491 	.word	0x08007491
 80074bc:	08007491 	.word	0x08007491
 80074c0:	08007515 	.word	0x08007515
 80074c4:	08007491 	.word	0x08007491
 80074c8:	08007491 	.word	0x08007491
 80074cc:	08007491 	.word	0x08007491
 80074d0:	08007491 	.word	0x08007491
 80074d4:	08007613 	.word	0x08007613
 80074d8:	0800753f 	.word	0x0800753f
 80074dc:	080075cd 	.word	0x080075cd
 80074e0:	08007491 	.word	0x08007491
 80074e4:	08007491 	.word	0x08007491
 80074e8:	08007635 	.word	0x08007635
 80074ec:	08007491 	.word	0x08007491
 80074f0:	0800753f 	.word	0x0800753f
 80074f4:	08007491 	.word	0x08007491
 80074f8:	08007491 	.word	0x08007491
 80074fc:	080075d5 	.word	0x080075d5
 8007500:	6833      	ldr	r3, [r6, #0]
 8007502:	1d1a      	adds	r2, r3, #4
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6032      	str	r2, [r6, #0]
 8007508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800750c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007510:	2301      	movs	r3, #1
 8007512:	e09c      	b.n	800764e <_printf_i+0x1e6>
 8007514:	6833      	ldr	r3, [r6, #0]
 8007516:	6820      	ldr	r0, [r4, #0]
 8007518:	1d19      	adds	r1, r3, #4
 800751a:	6031      	str	r1, [r6, #0]
 800751c:	0606      	lsls	r6, r0, #24
 800751e:	d501      	bpl.n	8007524 <_printf_i+0xbc>
 8007520:	681d      	ldr	r5, [r3, #0]
 8007522:	e003      	b.n	800752c <_printf_i+0xc4>
 8007524:	0645      	lsls	r5, r0, #25
 8007526:	d5fb      	bpl.n	8007520 <_printf_i+0xb8>
 8007528:	f9b3 5000 	ldrsh.w	r5, [r3]
 800752c:	2d00      	cmp	r5, #0
 800752e:	da03      	bge.n	8007538 <_printf_i+0xd0>
 8007530:	232d      	movs	r3, #45	@ 0x2d
 8007532:	426d      	negs	r5, r5
 8007534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007538:	4858      	ldr	r0, [pc, #352]	@ (800769c <_printf_i+0x234>)
 800753a:	230a      	movs	r3, #10
 800753c:	e011      	b.n	8007562 <_printf_i+0xfa>
 800753e:	6821      	ldr	r1, [r4, #0]
 8007540:	6833      	ldr	r3, [r6, #0]
 8007542:	0608      	lsls	r0, r1, #24
 8007544:	f853 5b04 	ldr.w	r5, [r3], #4
 8007548:	d402      	bmi.n	8007550 <_printf_i+0xe8>
 800754a:	0649      	lsls	r1, r1, #25
 800754c:	bf48      	it	mi
 800754e:	b2ad      	uxthmi	r5, r5
 8007550:	2f6f      	cmp	r7, #111	@ 0x6f
 8007552:	4852      	ldr	r0, [pc, #328]	@ (800769c <_printf_i+0x234>)
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	bf14      	ite	ne
 8007558:	230a      	movne	r3, #10
 800755a:	2308      	moveq	r3, #8
 800755c:	2100      	movs	r1, #0
 800755e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007562:	6866      	ldr	r6, [r4, #4]
 8007564:	60a6      	str	r6, [r4, #8]
 8007566:	2e00      	cmp	r6, #0
 8007568:	db05      	blt.n	8007576 <_printf_i+0x10e>
 800756a:	6821      	ldr	r1, [r4, #0]
 800756c:	432e      	orrs	r6, r5
 800756e:	f021 0104 	bic.w	r1, r1, #4
 8007572:	6021      	str	r1, [r4, #0]
 8007574:	d04b      	beq.n	800760e <_printf_i+0x1a6>
 8007576:	4616      	mov	r6, r2
 8007578:	fbb5 f1f3 	udiv	r1, r5, r3
 800757c:	fb03 5711 	mls	r7, r3, r1, r5
 8007580:	5dc7      	ldrb	r7, [r0, r7]
 8007582:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007586:	462f      	mov	r7, r5
 8007588:	42bb      	cmp	r3, r7
 800758a:	460d      	mov	r5, r1
 800758c:	d9f4      	bls.n	8007578 <_printf_i+0x110>
 800758e:	2b08      	cmp	r3, #8
 8007590:	d10b      	bne.n	80075aa <_printf_i+0x142>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	07df      	lsls	r7, r3, #31
 8007596:	d508      	bpl.n	80075aa <_printf_i+0x142>
 8007598:	6923      	ldr	r3, [r4, #16]
 800759a:	6861      	ldr	r1, [r4, #4]
 800759c:	4299      	cmp	r1, r3
 800759e:	bfde      	ittt	le
 80075a0:	2330      	movle	r3, #48	@ 0x30
 80075a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075aa:	1b92      	subs	r2, r2, r6
 80075ac:	6122      	str	r2, [r4, #16]
 80075ae:	f8cd a000 	str.w	sl, [sp]
 80075b2:	464b      	mov	r3, r9
 80075b4:	aa03      	add	r2, sp, #12
 80075b6:	4621      	mov	r1, r4
 80075b8:	4640      	mov	r0, r8
 80075ba:	f7ff fee7 	bl	800738c <_printf_common>
 80075be:	3001      	adds	r0, #1
 80075c0:	d14a      	bne.n	8007658 <_printf_i+0x1f0>
 80075c2:	f04f 30ff 	mov.w	r0, #4294967295
 80075c6:	b004      	add	sp, #16
 80075c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	f043 0320 	orr.w	r3, r3, #32
 80075d2:	6023      	str	r3, [r4, #0]
 80075d4:	4832      	ldr	r0, [pc, #200]	@ (80076a0 <_printf_i+0x238>)
 80075d6:	2778      	movs	r7, #120	@ 0x78
 80075d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	6831      	ldr	r1, [r6, #0]
 80075e0:	061f      	lsls	r7, r3, #24
 80075e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80075e6:	d402      	bmi.n	80075ee <_printf_i+0x186>
 80075e8:	065f      	lsls	r7, r3, #25
 80075ea:	bf48      	it	mi
 80075ec:	b2ad      	uxthmi	r5, r5
 80075ee:	6031      	str	r1, [r6, #0]
 80075f0:	07d9      	lsls	r1, r3, #31
 80075f2:	bf44      	itt	mi
 80075f4:	f043 0320 	orrmi.w	r3, r3, #32
 80075f8:	6023      	strmi	r3, [r4, #0]
 80075fa:	b11d      	cbz	r5, 8007604 <_printf_i+0x19c>
 80075fc:	2310      	movs	r3, #16
 80075fe:	e7ad      	b.n	800755c <_printf_i+0xf4>
 8007600:	4826      	ldr	r0, [pc, #152]	@ (800769c <_printf_i+0x234>)
 8007602:	e7e9      	b.n	80075d8 <_printf_i+0x170>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	f023 0320 	bic.w	r3, r3, #32
 800760a:	6023      	str	r3, [r4, #0]
 800760c:	e7f6      	b.n	80075fc <_printf_i+0x194>
 800760e:	4616      	mov	r6, r2
 8007610:	e7bd      	b.n	800758e <_printf_i+0x126>
 8007612:	6833      	ldr	r3, [r6, #0]
 8007614:	6825      	ldr	r5, [r4, #0]
 8007616:	6961      	ldr	r1, [r4, #20]
 8007618:	1d18      	adds	r0, r3, #4
 800761a:	6030      	str	r0, [r6, #0]
 800761c:	062e      	lsls	r6, r5, #24
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	d501      	bpl.n	8007626 <_printf_i+0x1be>
 8007622:	6019      	str	r1, [r3, #0]
 8007624:	e002      	b.n	800762c <_printf_i+0x1c4>
 8007626:	0668      	lsls	r0, r5, #25
 8007628:	d5fb      	bpl.n	8007622 <_printf_i+0x1ba>
 800762a:	8019      	strh	r1, [r3, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	6123      	str	r3, [r4, #16]
 8007630:	4616      	mov	r6, r2
 8007632:	e7bc      	b.n	80075ae <_printf_i+0x146>
 8007634:	6833      	ldr	r3, [r6, #0]
 8007636:	1d1a      	adds	r2, r3, #4
 8007638:	6032      	str	r2, [r6, #0]
 800763a:	681e      	ldr	r6, [r3, #0]
 800763c:	6862      	ldr	r2, [r4, #4]
 800763e:	2100      	movs	r1, #0
 8007640:	4630      	mov	r0, r6
 8007642:	f7f8 fdfd 	bl	8000240 <memchr>
 8007646:	b108      	cbz	r0, 800764c <_printf_i+0x1e4>
 8007648:	1b80      	subs	r0, r0, r6
 800764a:	6060      	str	r0, [r4, #4]
 800764c:	6863      	ldr	r3, [r4, #4]
 800764e:	6123      	str	r3, [r4, #16]
 8007650:	2300      	movs	r3, #0
 8007652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007656:	e7aa      	b.n	80075ae <_printf_i+0x146>
 8007658:	6923      	ldr	r3, [r4, #16]
 800765a:	4632      	mov	r2, r6
 800765c:	4649      	mov	r1, r9
 800765e:	4640      	mov	r0, r8
 8007660:	47d0      	blx	sl
 8007662:	3001      	adds	r0, #1
 8007664:	d0ad      	beq.n	80075c2 <_printf_i+0x15a>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	079b      	lsls	r3, r3, #30
 800766a:	d413      	bmi.n	8007694 <_printf_i+0x22c>
 800766c:	68e0      	ldr	r0, [r4, #12]
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	4298      	cmp	r0, r3
 8007672:	bfb8      	it	lt
 8007674:	4618      	movlt	r0, r3
 8007676:	e7a6      	b.n	80075c6 <_printf_i+0x15e>
 8007678:	2301      	movs	r3, #1
 800767a:	4632      	mov	r2, r6
 800767c:	4649      	mov	r1, r9
 800767e:	4640      	mov	r0, r8
 8007680:	47d0      	blx	sl
 8007682:	3001      	adds	r0, #1
 8007684:	d09d      	beq.n	80075c2 <_printf_i+0x15a>
 8007686:	3501      	adds	r5, #1
 8007688:	68e3      	ldr	r3, [r4, #12]
 800768a:	9903      	ldr	r1, [sp, #12]
 800768c:	1a5b      	subs	r3, r3, r1
 800768e:	42ab      	cmp	r3, r5
 8007690:	dcf2      	bgt.n	8007678 <_printf_i+0x210>
 8007692:	e7eb      	b.n	800766c <_printf_i+0x204>
 8007694:	2500      	movs	r5, #0
 8007696:	f104 0619 	add.w	r6, r4, #25
 800769a:	e7f5      	b.n	8007688 <_printf_i+0x220>
 800769c:	0800b68a 	.word	0x0800b68a
 80076a0:	0800b69b 	.word	0x0800b69b

080076a4 <_scanf_float>:
 80076a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	b087      	sub	sp, #28
 80076aa:	4691      	mov	r9, r2
 80076ac:	9303      	str	r3, [sp, #12]
 80076ae:	688b      	ldr	r3, [r1, #8]
 80076b0:	1e5a      	subs	r2, r3, #1
 80076b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80076b6:	bf81      	itttt	hi
 80076b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80076bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80076c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80076c4:	608b      	strhi	r3, [r1, #8]
 80076c6:	680b      	ldr	r3, [r1, #0]
 80076c8:	460a      	mov	r2, r1
 80076ca:	f04f 0500 	mov.w	r5, #0
 80076ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80076d2:	f842 3b1c 	str.w	r3, [r2], #28
 80076d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80076da:	4680      	mov	r8, r0
 80076dc:	460c      	mov	r4, r1
 80076de:	bf98      	it	ls
 80076e0:	f04f 0b00 	movls.w	fp, #0
 80076e4:	9201      	str	r2, [sp, #4]
 80076e6:	4616      	mov	r6, r2
 80076e8:	46aa      	mov	sl, r5
 80076ea:	462f      	mov	r7, r5
 80076ec:	9502      	str	r5, [sp, #8]
 80076ee:	68a2      	ldr	r2, [r4, #8]
 80076f0:	b15a      	cbz	r2, 800770a <_scanf_float+0x66>
 80076f2:	f8d9 3000 	ldr.w	r3, [r9]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b4e      	cmp	r3, #78	@ 0x4e
 80076fa:	d863      	bhi.n	80077c4 <_scanf_float+0x120>
 80076fc:	2b40      	cmp	r3, #64	@ 0x40
 80076fe:	d83b      	bhi.n	8007778 <_scanf_float+0xd4>
 8007700:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007704:	b2c8      	uxtb	r0, r1
 8007706:	280e      	cmp	r0, #14
 8007708:	d939      	bls.n	800777e <_scanf_float+0xda>
 800770a:	b11f      	cbz	r7, 8007714 <_scanf_float+0x70>
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007712:	6023      	str	r3, [r4, #0]
 8007714:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007718:	f1ba 0f01 	cmp.w	sl, #1
 800771c:	f200 8114 	bhi.w	8007948 <_scanf_float+0x2a4>
 8007720:	9b01      	ldr	r3, [sp, #4]
 8007722:	429e      	cmp	r6, r3
 8007724:	f200 8105 	bhi.w	8007932 <_scanf_float+0x28e>
 8007728:	2001      	movs	r0, #1
 800772a:	b007      	add	sp, #28
 800772c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007730:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007734:	2a0d      	cmp	r2, #13
 8007736:	d8e8      	bhi.n	800770a <_scanf_float+0x66>
 8007738:	a101      	add	r1, pc, #4	@ (adr r1, 8007740 <_scanf_float+0x9c>)
 800773a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007889 	.word	0x08007889
 8007744:	0800770b 	.word	0x0800770b
 8007748:	0800770b 	.word	0x0800770b
 800774c:	0800770b 	.word	0x0800770b
 8007750:	080078e5 	.word	0x080078e5
 8007754:	080078bf 	.word	0x080078bf
 8007758:	0800770b 	.word	0x0800770b
 800775c:	0800770b 	.word	0x0800770b
 8007760:	08007897 	.word	0x08007897
 8007764:	0800770b 	.word	0x0800770b
 8007768:	0800770b 	.word	0x0800770b
 800776c:	0800770b 	.word	0x0800770b
 8007770:	0800770b 	.word	0x0800770b
 8007774:	08007853 	.word	0x08007853
 8007778:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800777c:	e7da      	b.n	8007734 <_scanf_float+0x90>
 800777e:	290e      	cmp	r1, #14
 8007780:	d8c3      	bhi.n	800770a <_scanf_float+0x66>
 8007782:	a001      	add	r0, pc, #4	@ (adr r0, 8007788 <_scanf_float+0xe4>)
 8007784:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007788:	08007843 	.word	0x08007843
 800778c:	0800770b 	.word	0x0800770b
 8007790:	08007843 	.word	0x08007843
 8007794:	080078d3 	.word	0x080078d3
 8007798:	0800770b 	.word	0x0800770b
 800779c:	080077e5 	.word	0x080077e5
 80077a0:	08007829 	.word	0x08007829
 80077a4:	08007829 	.word	0x08007829
 80077a8:	08007829 	.word	0x08007829
 80077ac:	08007829 	.word	0x08007829
 80077b0:	08007829 	.word	0x08007829
 80077b4:	08007829 	.word	0x08007829
 80077b8:	08007829 	.word	0x08007829
 80077bc:	08007829 	.word	0x08007829
 80077c0:	08007829 	.word	0x08007829
 80077c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80077c6:	d809      	bhi.n	80077dc <_scanf_float+0x138>
 80077c8:	2b60      	cmp	r3, #96	@ 0x60
 80077ca:	d8b1      	bhi.n	8007730 <_scanf_float+0x8c>
 80077cc:	2b54      	cmp	r3, #84	@ 0x54
 80077ce:	d07b      	beq.n	80078c8 <_scanf_float+0x224>
 80077d0:	2b59      	cmp	r3, #89	@ 0x59
 80077d2:	d19a      	bne.n	800770a <_scanf_float+0x66>
 80077d4:	2d07      	cmp	r5, #7
 80077d6:	d198      	bne.n	800770a <_scanf_float+0x66>
 80077d8:	2508      	movs	r5, #8
 80077da:	e02f      	b.n	800783c <_scanf_float+0x198>
 80077dc:	2b74      	cmp	r3, #116	@ 0x74
 80077de:	d073      	beq.n	80078c8 <_scanf_float+0x224>
 80077e0:	2b79      	cmp	r3, #121	@ 0x79
 80077e2:	e7f6      	b.n	80077d2 <_scanf_float+0x12e>
 80077e4:	6821      	ldr	r1, [r4, #0]
 80077e6:	05c8      	lsls	r0, r1, #23
 80077e8:	d51e      	bpl.n	8007828 <_scanf_float+0x184>
 80077ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80077ee:	6021      	str	r1, [r4, #0]
 80077f0:	3701      	adds	r7, #1
 80077f2:	f1bb 0f00 	cmp.w	fp, #0
 80077f6:	d003      	beq.n	8007800 <_scanf_float+0x15c>
 80077f8:	3201      	adds	r2, #1
 80077fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077fe:	60a2      	str	r2, [r4, #8]
 8007800:	68a3      	ldr	r3, [r4, #8]
 8007802:	3b01      	subs	r3, #1
 8007804:	60a3      	str	r3, [r4, #8]
 8007806:	6923      	ldr	r3, [r4, #16]
 8007808:	3301      	adds	r3, #1
 800780a:	6123      	str	r3, [r4, #16]
 800780c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007810:	3b01      	subs	r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	f8c9 3004 	str.w	r3, [r9, #4]
 8007818:	f340 8082 	ble.w	8007920 <_scanf_float+0x27c>
 800781c:	f8d9 3000 	ldr.w	r3, [r9]
 8007820:	3301      	adds	r3, #1
 8007822:	f8c9 3000 	str.w	r3, [r9]
 8007826:	e762      	b.n	80076ee <_scanf_float+0x4a>
 8007828:	eb1a 0105 	adds.w	r1, sl, r5
 800782c:	f47f af6d 	bne.w	800770a <_scanf_float+0x66>
 8007830:	6822      	ldr	r2, [r4, #0]
 8007832:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007836:	6022      	str	r2, [r4, #0]
 8007838:	460d      	mov	r5, r1
 800783a:	468a      	mov	sl, r1
 800783c:	f806 3b01 	strb.w	r3, [r6], #1
 8007840:	e7de      	b.n	8007800 <_scanf_float+0x15c>
 8007842:	6822      	ldr	r2, [r4, #0]
 8007844:	0610      	lsls	r0, r2, #24
 8007846:	f57f af60 	bpl.w	800770a <_scanf_float+0x66>
 800784a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800784e:	6022      	str	r2, [r4, #0]
 8007850:	e7f4      	b.n	800783c <_scanf_float+0x198>
 8007852:	f1ba 0f00 	cmp.w	sl, #0
 8007856:	d10c      	bne.n	8007872 <_scanf_float+0x1ce>
 8007858:	b977      	cbnz	r7, 8007878 <_scanf_float+0x1d4>
 800785a:	6822      	ldr	r2, [r4, #0]
 800785c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007860:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007864:	d108      	bne.n	8007878 <_scanf_float+0x1d4>
 8007866:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800786a:	6022      	str	r2, [r4, #0]
 800786c:	f04f 0a01 	mov.w	sl, #1
 8007870:	e7e4      	b.n	800783c <_scanf_float+0x198>
 8007872:	f1ba 0f02 	cmp.w	sl, #2
 8007876:	d050      	beq.n	800791a <_scanf_float+0x276>
 8007878:	2d01      	cmp	r5, #1
 800787a:	d002      	beq.n	8007882 <_scanf_float+0x1de>
 800787c:	2d04      	cmp	r5, #4
 800787e:	f47f af44 	bne.w	800770a <_scanf_float+0x66>
 8007882:	3501      	adds	r5, #1
 8007884:	b2ed      	uxtb	r5, r5
 8007886:	e7d9      	b.n	800783c <_scanf_float+0x198>
 8007888:	f1ba 0f01 	cmp.w	sl, #1
 800788c:	f47f af3d 	bne.w	800770a <_scanf_float+0x66>
 8007890:	f04f 0a02 	mov.w	sl, #2
 8007894:	e7d2      	b.n	800783c <_scanf_float+0x198>
 8007896:	b975      	cbnz	r5, 80078b6 <_scanf_float+0x212>
 8007898:	2f00      	cmp	r7, #0
 800789a:	f47f af37 	bne.w	800770c <_scanf_float+0x68>
 800789e:	6822      	ldr	r2, [r4, #0]
 80078a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80078a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80078a8:	f040 80fc 	bne.w	8007aa4 <_scanf_float+0x400>
 80078ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80078b0:	6022      	str	r2, [r4, #0]
 80078b2:	2501      	movs	r5, #1
 80078b4:	e7c2      	b.n	800783c <_scanf_float+0x198>
 80078b6:	2d03      	cmp	r5, #3
 80078b8:	d0e3      	beq.n	8007882 <_scanf_float+0x1de>
 80078ba:	2d05      	cmp	r5, #5
 80078bc:	e7df      	b.n	800787e <_scanf_float+0x1da>
 80078be:	2d02      	cmp	r5, #2
 80078c0:	f47f af23 	bne.w	800770a <_scanf_float+0x66>
 80078c4:	2503      	movs	r5, #3
 80078c6:	e7b9      	b.n	800783c <_scanf_float+0x198>
 80078c8:	2d06      	cmp	r5, #6
 80078ca:	f47f af1e 	bne.w	800770a <_scanf_float+0x66>
 80078ce:	2507      	movs	r5, #7
 80078d0:	e7b4      	b.n	800783c <_scanf_float+0x198>
 80078d2:	6822      	ldr	r2, [r4, #0]
 80078d4:	0591      	lsls	r1, r2, #22
 80078d6:	f57f af18 	bpl.w	800770a <_scanf_float+0x66>
 80078da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80078de:	6022      	str	r2, [r4, #0]
 80078e0:	9702      	str	r7, [sp, #8]
 80078e2:	e7ab      	b.n	800783c <_scanf_float+0x198>
 80078e4:	6822      	ldr	r2, [r4, #0]
 80078e6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80078ea:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80078ee:	d005      	beq.n	80078fc <_scanf_float+0x258>
 80078f0:	0550      	lsls	r0, r2, #21
 80078f2:	f57f af0a 	bpl.w	800770a <_scanf_float+0x66>
 80078f6:	2f00      	cmp	r7, #0
 80078f8:	f000 80d4 	beq.w	8007aa4 <_scanf_float+0x400>
 80078fc:	0591      	lsls	r1, r2, #22
 80078fe:	bf58      	it	pl
 8007900:	9902      	ldrpl	r1, [sp, #8]
 8007902:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007906:	bf58      	it	pl
 8007908:	1a79      	subpl	r1, r7, r1
 800790a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800790e:	bf58      	it	pl
 8007910:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007914:	6022      	str	r2, [r4, #0]
 8007916:	2700      	movs	r7, #0
 8007918:	e790      	b.n	800783c <_scanf_float+0x198>
 800791a:	f04f 0a03 	mov.w	sl, #3
 800791e:	e78d      	b.n	800783c <_scanf_float+0x198>
 8007920:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007924:	4649      	mov	r1, r9
 8007926:	4640      	mov	r0, r8
 8007928:	4798      	blx	r3
 800792a:	2800      	cmp	r0, #0
 800792c:	f43f aedf 	beq.w	80076ee <_scanf_float+0x4a>
 8007930:	e6eb      	b.n	800770a <_scanf_float+0x66>
 8007932:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007936:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800793a:	464a      	mov	r2, r9
 800793c:	4640      	mov	r0, r8
 800793e:	4798      	blx	r3
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	3b01      	subs	r3, #1
 8007944:	6123      	str	r3, [r4, #16]
 8007946:	e6eb      	b.n	8007720 <_scanf_float+0x7c>
 8007948:	1e6b      	subs	r3, r5, #1
 800794a:	2b06      	cmp	r3, #6
 800794c:	d824      	bhi.n	8007998 <_scanf_float+0x2f4>
 800794e:	2d02      	cmp	r5, #2
 8007950:	d836      	bhi.n	80079c0 <_scanf_float+0x31c>
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	429e      	cmp	r6, r3
 8007956:	f67f aee7 	bls.w	8007728 <_scanf_float+0x84>
 800795a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800795e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007962:	464a      	mov	r2, r9
 8007964:	4640      	mov	r0, r8
 8007966:	4798      	blx	r3
 8007968:	6923      	ldr	r3, [r4, #16]
 800796a:	3b01      	subs	r3, #1
 800796c:	6123      	str	r3, [r4, #16]
 800796e:	e7f0      	b.n	8007952 <_scanf_float+0x2ae>
 8007970:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007974:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007978:	464a      	mov	r2, r9
 800797a:	4640      	mov	r0, r8
 800797c:	4798      	blx	r3
 800797e:	6923      	ldr	r3, [r4, #16]
 8007980:	3b01      	subs	r3, #1
 8007982:	6123      	str	r3, [r4, #16]
 8007984:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007988:	fa5f fa8a 	uxtb.w	sl, sl
 800798c:	f1ba 0f02 	cmp.w	sl, #2
 8007990:	d1ee      	bne.n	8007970 <_scanf_float+0x2cc>
 8007992:	3d03      	subs	r5, #3
 8007994:	b2ed      	uxtb	r5, r5
 8007996:	1b76      	subs	r6, r6, r5
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	05da      	lsls	r2, r3, #23
 800799c:	d530      	bpl.n	8007a00 <_scanf_float+0x35c>
 800799e:	055b      	lsls	r3, r3, #21
 80079a0:	d511      	bpl.n	80079c6 <_scanf_float+0x322>
 80079a2:	9b01      	ldr	r3, [sp, #4]
 80079a4:	429e      	cmp	r6, r3
 80079a6:	f67f aebf 	bls.w	8007728 <_scanf_float+0x84>
 80079aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079b2:	464a      	mov	r2, r9
 80079b4:	4640      	mov	r0, r8
 80079b6:	4798      	blx	r3
 80079b8:	6923      	ldr	r3, [r4, #16]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	6123      	str	r3, [r4, #16]
 80079be:	e7f0      	b.n	80079a2 <_scanf_float+0x2fe>
 80079c0:	46aa      	mov	sl, r5
 80079c2:	46b3      	mov	fp, r6
 80079c4:	e7de      	b.n	8007984 <_scanf_float+0x2e0>
 80079c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80079ca:	6923      	ldr	r3, [r4, #16]
 80079cc:	2965      	cmp	r1, #101	@ 0x65
 80079ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80079d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80079d6:	6123      	str	r3, [r4, #16]
 80079d8:	d00c      	beq.n	80079f4 <_scanf_float+0x350>
 80079da:	2945      	cmp	r1, #69	@ 0x45
 80079dc:	d00a      	beq.n	80079f4 <_scanf_float+0x350>
 80079de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079e2:	464a      	mov	r2, r9
 80079e4:	4640      	mov	r0, r8
 80079e6:	4798      	blx	r3
 80079e8:	6923      	ldr	r3, [r4, #16]
 80079ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	1eb5      	subs	r5, r6, #2
 80079f2:	6123      	str	r3, [r4, #16]
 80079f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079f8:	464a      	mov	r2, r9
 80079fa:	4640      	mov	r0, r8
 80079fc:	4798      	blx	r3
 80079fe:	462e      	mov	r6, r5
 8007a00:	6822      	ldr	r2, [r4, #0]
 8007a02:	f012 0210 	ands.w	r2, r2, #16
 8007a06:	d001      	beq.n	8007a0c <_scanf_float+0x368>
 8007a08:	2000      	movs	r0, #0
 8007a0a:	e68e      	b.n	800772a <_scanf_float+0x86>
 8007a0c:	7032      	strb	r2, [r6, #0]
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a18:	d123      	bne.n	8007a62 <_scanf_float+0x3be>
 8007a1a:	9b02      	ldr	r3, [sp, #8]
 8007a1c:	429f      	cmp	r7, r3
 8007a1e:	d00a      	beq.n	8007a36 <_scanf_float+0x392>
 8007a20:	1bda      	subs	r2, r3, r7
 8007a22:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007a26:	429e      	cmp	r6, r3
 8007a28:	bf28      	it	cs
 8007a2a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007a2e:	491e      	ldr	r1, [pc, #120]	@ (8007aa8 <_scanf_float+0x404>)
 8007a30:	4630      	mov	r0, r6
 8007a32:	f000 f8ff 	bl	8007c34 <siprintf>
 8007a36:	9901      	ldr	r1, [sp, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4640      	mov	r0, r8
 8007a3c:	f002 fb2a 	bl	800a094 <_strtod_r>
 8007a40:	9b03      	ldr	r3, [sp, #12]
 8007a42:	6821      	ldr	r1, [r4, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f011 0f02 	tst.w	r1, #2
 8007a4a:	f103 0204 	add.w	r2, r3, #4
 8007a4e:	d015      	beq.n	8007a7c <_scanf_float+0x3d8>
 8007a50:	9903      	ldr	r1, [sp, #12]
 8007a52:	600a      	str	r2, [r1, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	ed83 0b00 	vstr	d0, [r3]
 8007a5a:	68e3      	ldr	r3, [r4, #12]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	60e3      	str	r3, [r4, #12]
 8007a60:	e7d2      	b.n	8007a08 <_scanf_float+0x364>
 8007a62:	9b04      	ldr	r3, [sp, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0e6      	beq.n	8007a36 <_scanf_float+0x392>
 8007a68:	9905      	ldr	r1, [sp, #20]
 8007a6a:	230a      	movs	r3, #10
 8007a6c:	3101      	adds	r1, #1
 8007a6e:	4640      	mov	r0, r8
 8007a70:	f002 fb90 	bl	800a194 <_strtol_r>
 8007a74:	9b04      	ldr	r3, [sp, #16]
 8007a76:	9e05      	ldr	r6, [sp, #20]
 8007a78:	1ac2      	subs	r2, r0, r3
 8007a7a:	e7d2      	b.n	8007a22 <_scanf_float+0x37e>
 8007a7c:	f011 0f04 	tst.w	r1, #4
 8007a80:	9903      	ldr	r1, [sp, #12]
 8007a82:	600a      	str	r2, [r1, #0]
 8007a84:	d1e6      	bne.n	8007a54 <_scanf_float+0x3b0>
 8007a86:	eeb4 0b40 	vcmp.f64	d0, d0
 8007a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a8e:	681d      	ldr	r5, [r3, #0]
 8007a90:	d705      	bvc.n	8007a9e <_scanf_float+0x3fa>
 8007a92:	4806      	ldr	r0, [pc, #24]	@ (8007aac <_scanf_float+0x408>)
 8007a94:	f000 f9b4 	bl	8007e00 <nanf>
 8007a98:	ed85 0a00 	vstr	s0, [r5]
 8007a9c:	e7dd      	b.n	8007a5a <_scanf_float+0x3b6>
 8007a9e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007aa2:	e7f9      	b.n	8007a98 <_scanf_float+0x3f4>
 8007aa4:	2700      	movs	r7, #0
 8007aa6:	e635      	b.n	8007714 <_scanf_float+0x70>
 8007aa8:	0800b6ac 	.word	0x0800b6ac
 8007aac:	0800b7ed 	.word	0x0800b7ed

08007ab0 <std>:
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	b510      	push	{r4, lr}
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	e9c0 3300 	strd	r3, r3, [r0]
 8007aba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007abe:	6083      	str	r3, [r0, #8]
 8007ac0:	8181      	strh	r1, [r0, #12]
 8007ac2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ac4:	81c2      	strh	r2, [r0, #14]
 8007ac6:	6183      	str	r3, [r0, #24]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	2208      	movs	r2, #8
 8007acc:	305c      	adds	r0, #92	@ 0x5c
 8007ace:	f000 f916 	bl	8007cfe <memset>
 8007ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b08 <std+0x58>)
 8007ad4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8007b0c <std+0x5c>)
 8007ad8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ada:	4b0d      	ldr	r3, [pc, #52]	@ (8007b10 <std+0x60>)
 8007adc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ade:	4b0d      	ldr	r3, [pc, #52]	@ (8007b14 <std+0x64>)
 8007ae0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b18 <std+0x68>)
 8007ae4:	6224      	str	r4, [r4, #32]
 8007ae6:	429c      	cmp	r4, r3
 8007ae8:	d006      	beq.n	8007af8 <std+0x48>
 8007aea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007aee:	4294      	cmp	r4, r2
 8007af0:	d002      	beq.n	8007af8 <std+0x48>
 8007af2:	33d0      	adds	r3, #208	@ 0xd0
 8007af4:	429c      	cmp	r4, r3
 8007af6:	d105      	bne.n	8007b04 <std+0x54>
 8007af8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b00:	f000 b97a 	b.w	8007df8 <__retarget_lock_init_recursive>
 8007b04:	bd10      	pop	{r4, pc}
 8007b06:	bf00      	nop
 8007b08:	08007c79 	.word	0x08007c79
 8007b0c:	08007c9b 	.word	0x08007c9b
 8007b10:	08007cd3 	.word	0x08007cd3
 8007b14:	08007cf7 	.word	0x08007cf7
 8007b18:	20000490 	.word	0x20000490

08007b1c <stdio_exit_handler>:
 8007b1c:	4a02      	ldr	r2, [pc, #8]	@ (8007b28 <stdio_exit_handler+0xc>)
 8007b1e:	4903      	ldr	r1, [pc, #12]	@ (8007b2c <stdio_exit_handler+0x10>)
 8007b20:	4803      	ldr	r0, [pc, #12]	@ (8007b30 <stdio_exit_handler+0x14>)
 8007b22:	f000 b869 	b.w	8007bf8 <_fwalk_sglue>
 8007b26:	bf00      	nop
 8007b28:	20000018 	.word	0x20000018
 8007b2c:	0800a551 	.word	0x0800a551
 8007b30:	20000028 	.word	0x20000028

08007b34 <cleanup_stdio>:
 8007b34:	6841      	ldr	r1, [r0, #4]
 8007b36:	4b0c      	ldr	r3, [pc, #48]	@ (8007b68 <cleanup_stdio+0x34>)
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	b510      	push	{r4, lr}
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	d001      	beq.n	8007b44 <cleanup_stdio+0x10>
 8007b40:	f002 fd06 	bl	800a550 <_fflush_r>
 8007b44:	68a1      	ldr	r1, [r4, #8]
 8007b46:	4b09      	ldr	r3, [pc, #36]	@ (8007b6c <cleanup_stdio+0x38>)
 8007b48:	4299      	cmp	r1, r3
 8007b4a:	d002      	beq.n	8007b52 <cleanup_stdio+0x1e>
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f002 fcff 	bl	800a550 <_fflush_r>
 8007b52:	68e1      	ldr	r1, [r4, #12]
 8007b54:	4b06      	ldr	r3, [pc, #24]	@ (8007b70 <cleanup_stdio+0x3c>)
 8007b56:	4299      	cmp	r1, r3
 8007b58:	d004      	beq.n	8007b64 <cleanup_stdio+0x30>
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b60:	f002 bcf6 	b.w	800a550 <_fflush_r>
 8007b64:	bd10      	pop	{r4, pc}
 8007b66:	bf00      	nop
 8007b68:	20000490 	.word	0x20000490
 8007b6c:	200004f8 	.word	0x200004f8
 8007b70:	20000560 	.word	0x20000560

08007b74 <global_stdio_init.part.0>:
 8007b74:	b510      	push	{r4, lr}
 8007b76:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba4 <global_stdio_init.part.0+0x30>)
 8007b78:	4c0b      	ldr	r4, [pc, #44]	@ (8007ba8 <global_stdio_init.part.0+0x34>)
 8007b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8007bac <global_stdio_init.part.0+0x38>)
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	4620      	mov	r0, r4
 8007b80:	2200      	movs	r2, #0
 8007b82:	2104      	movs	r1, #4
 8007b84:	f7ff ff94 	bl	8007ab0 <std>
 8007b88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	2109      	movs	r1, #9
 8007b90:	f7ff ff8e 	bl	8007ab0 <std>
 8007b94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b98:	2202      	movs	r2, #2
 8007b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b9e:	2112      	movs	r1, #18
 8007ba0:	f7ff bf86 	b.w	8007ab0 <std>
 8007ba4:	200005c8 	.word	0x200005c8
 8007ba8:	20000490 	.word	0x20000490
 8007bac:	08007b1d 	.word	0x08007b1d

08007bb0 <__sfp_lock_acquire>:
 8007bb0:	4801      	ldr	r0, [pc, #4]	@ (8007bb8 <__sfp_lock_acquire+0x8>)
 8007bb2:	f000 b922 	b.w	8007dfa <__retarget_lock_acquire_recursive>
 8007bb6:	bf00      	nop
 8007bb8:	200005d1 	.word	0x200005d1

08007bbc <__sfp_lock_release>:
 8007bbc:	4801      	ldr	r0, [pc, #4]	@ (8007bc4 <__sfp_lock_release+0x8>)
 8007bbe:	f000 b91d 	b.w	8007dfc <__retarget_lock_release_recursive>
 8007bc2:	bf00      	nop
 8007bc4:	200005d1 	.word	0x200005d1

08007bc8 <__sinit>:
 8007bc8:	b510      	push	{r4, lr}
 8007bca:	4604      	mov	r4, r0
 8007bcc:	f7ff fff0 	bl	8007bb0 <__sfp_lock_acquire>
 8007bd0:	6a23      	ldr	r3, [r4, #32]
 8007bd2:	b11b      	cbz	r3, 8007bdc <__sinit+0x14>
 8007bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bd8:	f7ff bff0 	b.w	8007bbc <__sfp_lock_release>
 8007bdc:	4b04      	ldr	r3, [pc, #16]	@ (8007bf0 <__sinit+0x28>)
 8007bde:	6223      	str	r3, [r4, #32]
 8007be0:	4b04      	ldr	r3, [pc, #16]	@ (8007bf4 <__sinit+0x2c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1f5      	bne.n	8007bd4 <__sinit+0xc>
 8007be8:	f7ff ffc4 	bl	8007b74 <global_stdio_init.part.0>
 8007bec:	e7f2      	b.n	8007bd4 <__sinit+0xc>
 8007bee:	bf00      	nop
 8007bf0:	08007b35 	.word	0x08007b35
 8007bf4:	200005c8 	.word	0x200005c8

08007bf8 <_fwalk_sglue>:
 8007bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bfc:	4607      	mov	r7, r0
 8007bfe:	4688      	mov	r8, r1
 8007c00:	4614      	mov	r4, r2
 8007c02:	2600      	movs	r6, #0
 8007c04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c08:	f1b9 0901 	subs.w	r9, r9, #1
 8007c0c:	d505      	bpl.n	8007c1a <_fwalk_sglue+0x22>
 8007c0e:	6824      	ldr	r4, [r4, #0]
 8007c10:	2c00      	cmp	r4, #0
 8007c12:	d1f7      	bne.n	8007c04 <_fwalk_sglue+0xc>
 8007c14:	4630      	mov	r0, r6
 8007c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c1a:	89ab      	ldrh	r3, [r5, #12]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d907      	bls.n	8007c30 <_fwalk_sglue+0x38>
 8007c20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c24:	3301      	adds	r3, #1
 8007c26:	d003      	beq.n	8007c30 <_fwalk_sglue+0x38>
 8007c28:	4629      	mov	r1, r5
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	47c0      	blx	r8
 8007c2e:	4306      	orrs	r6, r0
 8007c30:	3568      	adds	r5, #104	@ 0x68
 8007c32:	e7e9      	b.n	8007c08 <_fwalk_sglue+0x10>

08007c34 <siprintf>:
 8007c34:	b40e      	push	{r1, r2, r3}
 8007c36:	b510      	push	{r4, lr}
 8007c38:	b09d      	sub	sp, #116	@ 0x74
 8007c3a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007c3c:	9002      	str	r0, [sp, #8]
 8007c3e:	9006      	str	r0, [sp, #24]
 8007c40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c44:	480a      	ldr	r0, [pc, #40]	@ (8007c70 <siprintf+0x3c>)
 8007c46:	9107      	str	r1, [sp, #28]
 8007c48:	9104      	str	r1, [sp, #16]
 8007c4a:	490a      	ldr	r1, [pc, #40]	@ (8007c74 <siprintf+0x40>)
 8007c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c50:	9105      	str	r1, [sp, #20]
 8007c52:	2400      	movs	r4, #0
 8007c54:	a902      	add	r1, sp, #8
 8007c56:	6800      	ldr	r0, [r0, #0]
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007c5c:	f002 faf8 	bl	800a250 <_svfiprintf_r>
 8007c60:	9b02      	ldr	r3, [sp, #8]
 8007c62:	701c      	strb	r4, [r3, #0]
 8007c64:	b01d      	add	sp, #116	@ 0x74
 8007c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c6a:	b003      	add	sp, #12
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	20000024 	.word	0x20000024
 8007c74:	ffff0208 	.word	0xffff0208

08007c78 <__sread>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c80:	f000 f86c 	bl	8007d5c <_read_r>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	bfab      	itete	ge
 8007c88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c8a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c8c:	181b      	addge	r3, r3, r0
 8007c8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c92:	bfac      	ite	ge
 8007c94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c96:	81a3      	strhlt	r3, [r4, #12]
 8007c98:	bd10      	pop	{r4, pc}

08007c9a <__swrite>:
 8007c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9e:	461f      	mov	r7, r3
 8007ca0:	898b      	ldrh	r3, [r1, #12]
 8007ca2:	05db      	lsls	r3, r3, #23
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	4616      	mov	r6, r2
 8007caa:	d505      	bpl.n	8007cb8 <__swrite+0x1e>
 8007cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f000 f840 	bl	8007d38 <_lseek_r>
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cc2:	81a3      	strh	r3, [r4, #12]
 8007cc4:	4632      	mov	r2, r6
 8007cc6:	463b      	mov	r3, r7
 8007cc8:	4628      	mov	r0, r5
 8007cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cce:	f000 b857 	b.w	8007d80 <_write_r>

08007cd2 <__sseek>:
 8007cd2:	b510      	push	{r4, lr}
 8007cd4:	460c      	mov	r4, r1
 8007cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cda:	f000 f82d 	bl	8007d38 <_lseek_r>
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	bf15      	itete	ne
 8007ce4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ce6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007cea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007cee:	81a3      	strheq	r3, [r4, #12]
 8007cf0:	bf18      	it	ne
 8007cf2:	81a3      	strhne	r3, [r4, #12]
 8007cf4:	bd10      	pop	{r4, pc}

08007cf6 <__sclose>:
 8007cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cfa:	f000 b80d 	b.w	8007d18 <_close_r>

08007cfe <memset>:
 8007cfe:	4402      	add	r2, r0
 8007d00:	4603      	mov	r3, r0
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d100      	bne.n	8007d08 <memset+0xa>
 8007d06:	4770      	bx	lr
 8007d08:	f803 1b01 	strb.w	r1, [r3], #1
 8007d0c:	e7f9      	b.n	8007d02 <memset+0x4>
	...

08007d10 <_localeconv_r>:
 8007d10:	4800      	ldr	r0, [pc, #0]	@ (8007d14 <_localeconv_r+0x4>)
 8007d12:	4770      	bx	lr
 8007d14:	20000164 	.word	0x20000164

08007d18 <_close_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4d06      	ldr	r5, [pc, #24]	@ (8007d34 <_close_r+0x1c>)
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	f7fa fdaa 	bl	800287c <_close>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_close_r+0x1a>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_close_r+0x1a>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	200005cc 	.word	0x200005cc

08007d38 <_lseek_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d07      	ldr	r5, [pc, #28]	@ (8007d58 <_lseek_r+0x20>)
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	4608      	mov	r0, r1
 8007d40:	4611      	mov	r1, r2
 8007d42:	2200      	movs	r2, #0
 8007d44:	602a      	str	r2, [r5, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	f7fa fdbf 	bl	80028ca <_lseek>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_lseek_r+0x1e>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_lseek_r+0x1e>
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	200005cc 	.word	0x200005cc

08007d5c <_read_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d07      	ldr	r5, [pc, #28]	@ (8007d7c <_read_r+0x20>)
 8007d60:	4604      	mov	r4, r0
 8007d62:	4608      	mov	r0, r1
 8007d64:	4611      	mov	r1, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f7fa fd4d 	bl	800280a <_read>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_read_r+0x1e>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_read_r+0x1e>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	200005cc 	.word	0x200005cc

08007d80 <_write_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d07      	ldr	r5, [pc, #28]	@ (8007da0 <_write_r+0x20>)
 8007d84:	4604      	mov	r4, r0
 8007d86:	4608      	mov	r0, r1
 8007d88:	4611      	mov	r1, r2
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	602a      	str	r2, [r5, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f7fa fd58 	bl	8002844 <_write>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_write_r+0x1e>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_write_r+0x1e>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	200005cc 	.word	0x200005cc

08007da4 <__errno>:
 8007da4:	4b01      	ldr	r3, [pc, #4]	@ (8007dac <__errno+0x8>)
 8007da6:	6818      	ldr	r0, [r3, #0]
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	20000024 	.word	0x20000024

08007db0 <__libc_init_array>:
 8007db0:	b570      	push	{r4, r5, r6, lr}
 8007db2:	4d0d      	ldr	r5, [pc, #52]	@ (8007de8 <__libc_init_array+0x38>)
 8007db4:	4c0d      	ldr	r4, [pc, #52]	@ (8007dec <__libc_init_array+0x3c>)
 8007db6:	1b64      	subs	r4, r4, r5
 8007db8:	10a4      	asrs	r4, r4, #2
 8007dba:	2600      	movs	r6, #0
 8007dbc:	42a6      	cmp	r6, r4
 8007dbe:	d109      	bne.n	8007dd4 <__libc_init_array+0x24>
 8007dc0:	4d0b      	ldr	r5, [pc, #44]	@ (8007df0 <__libc_init_array+0x40>)
 8007dc2:	4c0c      	ldr	r4, [pc, #48]	@ (8007df4 <__libc_init_array+0x44>)
 8007dc4:	f003 fab6 	bl	800b334 <_init>
 8007dc8:	1b64      	subs	r4, r4, r5
 8007dca:	10a4      	asrs	r4, r4, #2
 8007dcc:	2600      	movs	r6, #0
 8007dce:	42a6      	cmp	r6, r4
 8007dd0:	d105      	bne.n	8007dde <__libc_init_array+0x2e>
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}
 8007dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd8:	4798      	blx	r3
 8007dda:	3601      	adds	r6, #1
 8007ddc:	e7ee      	b.n	8007dbc <__libc_init_array+0xc>
 8007dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007de2:	4798      	blx	r3
 8007de4:	3601      	adds	r6, #1
 8007de6:	e7f2      	b.n	8007dce <__libc_init_array+0x1e>
 8007de8:	0800baac 	.word	0x0800baac
 8007dec:	0800baac 	.word	0x0800baac
 8007df0:	0800baac 	.word	0x0800baac
 8007df4:	0800bab0 	.word	0x0800bab0

08007df8 <__retarget_lock_init_recursive>:
 8007df8:	4770      	bx	lr

08007dfa <__retarget_lock_acquire_recursive>:
 8007dfa:	4770      	bx	lr

08007dfc <__retarget_lock_release_recursive>:
 8007dfc:	4770      	bx	lr
	...

08007e00 <nanf>:
 8007e00:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007e08 <nanf+0x8>
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	7fc00000 	.word	0x7fc00000

08007e0c <quorem>:
 8007e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e10:	6903      	ldr	r3, [r0, #16]
 8007e12:	690c      	ldr	r4, [r1, #16]
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	4607      	mov	r7, r0
 8007e18:	db7e      	blt.n	8007f18 <quorem+0x10c>
 8007e1a:	3c01      	subs	r4, #1
 8007e1c:	f101 0814 	add.w	r8, r1, #20
 8007e20:	00a3      	lsls	r3, r4, #2
 8007e22:	f100 0514 	add.w	r5, r0, #20
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e2c:	9301      	str	r3, [sp, #4]
 8007e2e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e36:	3301      	adds	r3, #1
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e3e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e42:	d32e      	bcc.n	8007ea2 <quorem+0x96>
 8007e44:	f04f 0a00 	mov.w	sl, #0
 8007e48:	46c4      	mov	ip, r8
 8007e4a:	46ae      	mov	lr, r5
 8007e4c:	46d3      	mov	fp, sl
 8007e4e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e52:	b298      	uxth	r0, r3
 8007e54:	fb06 a000 	mla	r0, r6, r0, sl
 8007e58:	0c02      	lsrs	r2, r0, #16
 8007e5a:	0c1b      	lsrs	r3, r3, #16
 8007e5c:	fb06 2303 	mla	r3, r6, r3, r2
 8007e60:	f8de 2000 	ldr.w	r2, [lr]
 8007e64:	b280      	uxth	r0, r0
 8007e66:	b292      	uxth	r2, r2
 8007e68:	1a12      	subs	r2, r2, r0
 8007e6a:	445a      	add	r2, fp
 8007e6c:	f8de 0000 	ldr.w	r0, [lr]
 8007e70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007e7a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007e7e:	b292      	uxth	r2, r2
 8007e80:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e84:	45e1      	cmp	r9, ip
 8007e86:	f84e 2b04 	str.w	r2, [lr], #4
 8007e8a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e8e:	d2de      	bcs.n	8007e4e <quorem+0x42>
 8007e90:	9b00      	ldr	r3, [sp, #0]
 8007e92:	58eb      	ldr	r3, [r5, r3]
 8007e94:	b92b      	cbnz	r3, 8007ea2 <quorem+0x96>
 8007e96:	9b01      	ldr	r3, [sp, #4]
 8007e98:	3b04      	subs	r3, #4
 8007e9a:	429d      	cmp	r5, r3
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	d32f      	bcc.n	8007f00 <quorem+0xf4>
 8007ea0:	613c      	str	r4, [r7, #16]
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	f001 f956 	bl	8009154 <__mcmp>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	db25      	blt.n	8007ef8 <quorem+0xec>
 8007eac:	4629      	mov	r1, r5
 8007eae:	2000      	movs	r0, #0
 8007eb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007eb4:	f8d1 c000 	ldr.w	ip, [r1]
 8007eb8:	fa1f fe82 	uxth.w	lr, r2
 8007ebc:	fa1f f38c 	uxth.w	r3, ip
 8007ec0:	eba3 030e 	sub.w	r3, r3, lr
 8007ec4:	4403      	add	r3, r0
 8007ec6:	0c12      	lsrs	r2, r2, #16
 8007ec8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007ecc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ed6:	45c1      	cmp	r9, r8
 8007ed8:	f841 3b04 	str.w	r3, [r1], #4
 8007edc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ee0:	d2e6      	bcs.n	8007eb0 <quorem+0xa4>
 8007ee2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007eea:	b922      	cbnz	r2, 8007ef6 <quorem+0xea>
 8007eec:	3b04      	subs	r3, #4
 8007eee:	429d      	cmp	r5, r3
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	d30b      	bcc.n	8007f0c <quorem+0x100>
 8007ef4:	613c      	str	r4, [r7, #16]
 8007ef6:	3601      	adds	r6, #1
 8007ef8:	4630      	mov	r0, r6
 8007efa:	b003      	add	sp, #12
 8007efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f00:	6812      	ldr	r2, [r2, #0]
 8007f02:	3b04      	subs	r3, #4
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	d1cb      	bne.n	8007ea0 <quorem+0x94>
 8007f08:	3c01      	subs	r4, #1
 8007f0a:	e7c6      	b.n	8007e9a <quorem+0x8e>
 8007f0c:	6812      	ldr	r2, [r2, #0]
 8007f0e:	3b04      	subs	r3, #4
 8007f10:	2a00      	cmp	r2, #0
 8007f12:	d1ef      	bne.n	8007ef4 <quorem+0xe8>
 8007f14:	3c01      	subs	r4, #1
 8007f16:	e7ea      	b.n	8007eee <quorem+0xe2>
 8007f18:	2000      	movs	r0, #0
 8007f1a:	e7ee      	b.n	8007efa <quorem+0xee>
 8007f1c:	0000      	movs	r0, r0
	...

08007f20 <_dtoa_r>:
 8007f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f24:	ed2d 8b02 	vpush	{d8}
 8007f28:	69c7      	ldr	r7, [r0, #28]
 8007f2a:	b091      	sub	sp, #68	@ 0x44
 8007f2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007f30:	ec55 4b10 	vmov	r4, r5, d0
 8007f34:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007f36:	9107      	str	r1, [sp, #28]
 8007f38:	4681      	mov	r9, r0
 8007f3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f3c:	930d      	str	r3, [sp, #52]	@ 0x34
 8007f3e:	b97f      	cbnz	r7, 8007f60 <_dtoa_r+0x40>
 8007f40:	2010      	movs	r0, #16
 8007f42:	f000 fd95 	bl	8008a70 <malloc>
 8007f46:	4602      	mov	r2, r0
 8007f48:	f8c9 001c 	str.w	r0, [r9, #28]
 8007f4c:	b920      	cbnz	r0, 8007f58 <_dtoa_r+0x38>
 8007f4e:	4ba0      	ldr	r3, [pc, #640]	@ (80081d0 <_dtoa_r+0x2b0>)
 8007f50:	21ef      	movs	r1, #239	@ 0xef
 8007f52:	48a0      	ldr	r0, [pc, #640]	@ (80081d4 <_dtoa_r+0x2b4>)
 8007f54:	f002 fb78 	bl	800a648 <__assert_func>
 8007f58:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007f5c:	6007      	str	r7, [r0, #0]
 8007f5e:	60c7      	str	r7, [r0, #12]
 8007f60:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f64:	6819      	ldr	r1, [r3, #0]
 8007f66:	b159      	cbz	r1, 8007f80 <_dtoa_r+0x60>
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	604a      	str	r2, [r1, #4]
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	4093      	lsls	r3, r2
 8007f70:	608b      	str	r3, [r1, #8]
 8007f72:	4648      	mov	r0, r9
 8007f74:	f000 fe72 	bl	8008c5c <_Bfree>
 8007f78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	1e2b      	subs	r3, r5, #0
 8007f82:	bfbb      	ittet	lt
 8007f84:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007f88:	9303      	strlt	r3, [sp, #12]
 8007f8a:	2300      	movge	r3, #0
 8007f8c:	2201      	movlt	r2, #1
 8007f8e:	bfac      	ite	ge
 8007f90:	6033      	strge	r3, [r6, #0]
 8007f92:	6032      	strlt	r2, [r6, #0]
 8007f94:	4b90      	ldr	r3, [pc, #576]	@ (80081d8 <_dtoa_r+0x2b8>)
 8007f96:	9e03      	ldr	r6, [sp, #12]
 8007f98:	43b3      	bics	r3, r6
 8007f9a:	d110      	bne.n	8007fbe <_dtoa_r+0x9e>
 8007f9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f9e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007fa8:	4323      	orrs	r3, r4
 8007faa:	f000 84e6 	beq.w	800897a <_dtoa_r+0xa5a>
 8007fae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007fb0:	4f8a      	ldr	r7, [pc, #552]	@ (80081dc <_dtoa_r+0x2bc>)
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 84e8 	beq.w	8008988 <_dtoa_r+0xa68>
 8007fb8:	1cfb      	adds	r3, r7, #3
 8007fba:	f000 bce3 	b.w	8008984 <_dtoa_r+0xa64>
 8007fbe:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007fc2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fca:	d10a      	bne.n	8007fe2 <_dtoa_r+0xc2>
 8007fcc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007fce:	2301      	movs	r3, #1
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007fd4:	b113      	cbz	r3, 8007fdc <_dtoa_r+0xbc>
 8007fd6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007fd8:	4b81      	ldr	r3, [pc, #516]	@ (80081e0 <_dtoa_r+0x2c0>)
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	4f81      	ldr	r7, [pc, #516]	@ (80081e4 <_dtoa_r+0x2c4>)
 8007fde:	f000 bcd3 	b.w	8008988 <_dtoa_r+0xa68>
 8007fe2:	aa0e      	add	r2, sp, #56	@ 0x38
 8007fe4:	a90f      	add	r1, sp, #60	@ 0x3c
 8007fe6:	4648      	mov	r0, r9
 8007fe8:	eeb0 0b48 	vmov.f64	d0, d8
 8007fec:	f001 f9d2 	bl	8009394 <__d2b>
 8007ff0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007ff4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ff6:	9001      	str	r0, [sp, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d045      	beq.n	8008088 <_dtoa_r+0x168>
 8007ffc:	eeb0 7b48 	vmov.f64	d7, d8
 8008000:	ee18 1a90 	vmov	r1, s17
 8008004:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008008:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800800c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008010:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008014:	2500      	movs	r5, #0
 8008016:	ee07 1a90 	vmov	s15, r1
 800801a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800801e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80081b8 <_dtoa_r+0x298>
 8008022:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008026:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80081c0 <_dtoa_r+0x2a0>
 800802a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800802e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80081c8 <_dtoa_r+0x2a8>
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800803a:	eeb0 7b46 	vmov.f64	d7, d6
 800803e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008042:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008046:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800804a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800804e:	ee16 8a90 	vmov	r8, s13
 8008052:	d508      	bpl.n	8008066 <_dtoa_r+0x146>
 8008054:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008058:	eeb4 6b47 	vcmp.f64	d6, d7
 800805c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008060:	bf18      	it	ne
 8008062:	f108 38ff 	addne.w	r8, r8, #4294967295
 8008066:	f1b8 0f16 	cmp.w	r8, #22
 800806a:	d82b      	bhi.n	80080c4 <_dtoa_r+0x1a4>
 800806c:	495e      	ldr	r1, [pc, #376]	@ (80081e8 <_dtoa_r+0x2c8>)
 800806e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8008072:	ed91 7b00 	vldr	d7, [r1]
 8008076:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800807a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800807e:	d501      	bpl.n	8008084 <_dtoa_r+0x164>
 8008080:	f108 38ff 	add.w	r8, r8, #4294967295
 8008084:	2100      	movs	r1, #0
 8008086:	e01e      	b.n	80080c6 <_dtoa_r+0x1a6>
 8008088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800808a:	4413      	add	r3, r2
 800808c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8008090:	2920      	cmp	r1, #32
 8008092:	bfc1      	itttt	gt
 8008094:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8008098:	408e      	lslgt	r6, r1
 800809a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800809e:	fa24 f101 	lsrgt.w	r1, r4, r1
 80080a2:	bfd6      	itet	le
 80080a4:	f1c1 0120 	rsble	r1, r1, #32
 80080a8:	4331      	orrgt	r1, r6
 80080aa:	fa04 f101 	lslle.w	r1, r4, r1
 80080ae:	ee07 1a90 	vmov	s15, r1
 80080b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80080b6:	3b01      	subs	r3, #1
 80080b8:	ee17 1a90 	vmov	r1, s15
 80080bc:	2501      	movs	r5, #1
 80080be:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80080c2:	e7a8      	b.n	8008016 <_dtoa_r+0xf6>
 80080c4:	2101      	movs	r1, #1
 80080c6:	1ad2      	subs	r2, r2, r3
 80080c8:	1e53      	subs	r3, r2, #1
 80080ca:	9306      	str	r3, [sp, #24]
 80080cc:	bf45      	ittet	mi
 80080ce:	f1c2 0301 	rsbmi	r3, r2, #1
 80080d2:	9304      	strmi	r3, [sp, #16]
 80080d4:	2300      	movpl	r3, #0
 80080d6:	2300      	movmi	r3, #0
 80080d8:	bf4c      	ite	mi
 80080da:	9306      	strmi	r3, [sp, #24]
 80080dc:	9304      	strpl	r3, [sp, #16]
 80080de:	f1b8 0f00 	cmp.w	r8, #0
 80080e2:	910c      	str	r1, [sp, #48]	@ 0x30
 80080e4:	db18      	blt.n	8008118 <_dtoa_r+0x1f8>
 80080e6:	9b06      	ldr	r3, [sp, #24]
 80080e8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80080ec:	4443      	add	r3, r8
 80080ee:	9306      	str	r3, [sp, #24]
 80080f0:	2300      	movs	r3, #0
 80080f2:	9a07      	ldr	r2, [sp, #28]
 80080f4:	2a09      	cmp	r2, #9
 80080f6:	d845      	bhi.n	8008184 <_dtoa_r+0x264>
 80080f8:	2a05      	cmp	r2, #5
 80080fa:	bfc4      	itt	gt
 80080fc:	3a04      	subgt	r2, #4
 80080fe:	9207      	strgt	r2, [sp, #28]
 8008100:	9a07      	ldr	r2, [sp, #28]
 8008102:	f1a2 0202 	sub.w	r2, r2, #2
 8008106:	bfcc      	ite	gt
 8008108:	2400      	movgt	r4, #0
 800810a:	2401      	movle	r4, #1
 800810c:	2a03      	cmp	r2, #3
 800810e:	d844      	bhi.n	800819a <_dtoa_r+0x27a>
 8008110:	e8df f002 	tbb	[pc, r2]
 8008114:	0b173634 	.word	0x0b173634
 8008118:	9b04      	ldr	r3, [sp, #16]
 800811a:	2200      	movs	r2, #0
 800811c:	eba3 0308 	sub.w	r3, r3, r8
 8008120:	9304      	str	r3, [sp, #16]
 8008122:	920a      	str	r2, [sp, #40]	@ 0x28
 8008124:	f1c8 0300 	rsb	r3, r8, #0
 8008128:	e7e3      	b.n	80080f2 <_dtoa_r+0x1d2>
 800812a:	2201      	movs	r2, #1
 800812c:	9208      	str	r2, [sp, #32]
 800812e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008130:	eb08 0b02 	add.w	fp, r8, r2
 8008134:	f10b 0a01 	add.w	sl, fp, #1
 8008138:	4652      	mov	r2, sl
 800813a:	2a01      	cmp	r2, #1
 800813c:	bfb8      	it	lt
 800813e:	2201      	movlt	r2, #1
 8008140:	e006      	b.n	8008150 <_dtoa_r+0x230>
 8008142:	2201      	movs	r2, #1
 8008144:	9208      	str	r2, [sp, #32]
 8008146:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008148:	2a00      	cmp	r2, #0
 800814a:	dd29      	ble.n	80081a0 <_dtoa_r+0x280>
 800814c:	4693      	mov	fp, r2
 800814e:	4692      	mov	sl, r2
 8008150:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8008154:	2100      	movs	r1, #0
 8008156:	2004      	movs	r0, #4
 8008158:	f100 0614 	add.w	r6, r0, #20
 800815c:	4296      	cmp	r6, r2
 800815e:	d926      	bls.n	80081ae <_dtoa_r+0x28e>
 8008160:	6079      	str	r1, [r7, #4]
 8008162:	4648      	mov	r0, r9
 8008164:	9305      	str	r3, [sp, #20]
 8008166:	f000 fd39 	bl	8008bdc <_Balloc>
 800816a:	9b05      	ldr	r3, [sp, #20]
 800816c:	4607      	mov	r7, r0
 800816e:	2800      	cmp	r0, #0
 8008170:	d13e      	bne.n	80081f0 <_dtoa_r+0x2d0>
 8008172:	4b1e      	ldr	r3, [pc, #120]	@ (80081ec <_dtoa_r+0x2cc>)
 8008174:	4602      	mov	r2, r0
 8008176:	f240 11af 	movw	r1, #431	@ 0x1af
 800817a:	e6ea      	b.n	8007f52 <_dtoa_r+0x32>
 800817c:	2200      	movs	r2, #0
 800817e:	e7e1      	b.n	8008144 <_dtoa_r+0x224>
 8008180:	2200      	movs	r2, #0
 8008182:	e7d3      	b.n	800812c <_dtoa_r+0x20c>
 8008184:	2401      	movs	r4, #1
 8008186:	2200      	movs	r2, #0
 8008188:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800818c:	f04f 3bff 	mov.w	fp, #4294967295
 8008190:	2100      	movs	r1, #0
 8008192:	46da      	mov	sl, fp
 8008194:	2212      	movs	r2, #18
 8008196:	9109      	str	r1, [sp, #36]	@ 0x24
 8008198:	e7da      	b.n	8008150 <_dtoa_r+0x230>
 800819a:	2201      	movs	r2, #1
 800819c:	9208      	str	r2, [sp, #32]
 800819e:	e7f5      	b.n	800818c <_dtoa_r+0x26c>
 80081a0:	f04f 0b01 	mov.w	fp, #1
 80081a4:	46da      	mov	sl, fp
 80081a6:	465a      	mov	r2, fp
 80081a8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80081ac:	e7d0      	b.n	8008150 <_dtoa_r+0x230>
 80081ae:	3101      	adds	r1, #1
 80081b0:	0040      	lsls	r0, r0, #1
 80081b2:	e7d1      	b.n	8008158 <_dtoa_r+0x238>
 80081b4:	f3af 8000 	nop.w
 80081b8:	636f4361 	.word	0x636f4361
 80081bc:	3fd287a7 	.word	0x3fd287a7
 80081c0:	8b60c8b3 	.word	0x8b60c8b3
 80081c4:	3fc68a28 	.word	0x3fc68a28
 80081c8:	509f79fb 	.word	0x509f79fb
 80081cc:	3fd34413 	.word	0x3fd34413
 80081d0:	0800b6be 	.word	0x0800b6be
 80081d4:	0800b6d5 	.word	0x0800b6d5
 80081d8:	7ff00000 	.word	0x7ff00000
 80081dc:	0800b6ba 	.word	0x0800b6ba
 80081e0:	0800b689 	.word	0x0800b689
 80081e4:	0800b688 	.word	0x0800b688
 80081e8:	0800b888 	.word	0x0800b888
 80081ec:	0800b72d 	.word	0x0800b72d
 80081f0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80081f4:	f1ba 0f0e 	cmp.w	sl, #14
 80081f8:	6010      	str	r0, [r2, #0]
 80081fa:	d86e      	bhi.n	80082da <_dtoa_r+0x3ba>
 80081fc:	2c00      	cmp	r4, #0
 80081fe:	d06c      	beq.n	80082da <_dtoa_r+0x3ba>
 8008200:	f1b8 0f00 	cmp.w	r8, #0
 8008204:	f340 80b4 	ble.w	8008370 <_dtoa_r+0x450>
 8008208:	4ac8      	ldr	r2, [pc, #800]	@ (800852c <_dtoa_r+0x60c>)
 800820a:	f008 010f 	and.w	r1, r8, #15
 800820e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008212:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8008216:	ed92 7b00 	vldr	d7, [r2]
 800821a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800821e:	f000 809b 	beq.w	8008358 <_dtoa_r+0x438>
 8008222:	4ac3      	ldr	r2, [pc, #780]	@ (8008530 <_dtoa_r+0x610>)
 8008224:	ed92 6b08 	vldr	d6, [r2, #32]
 8008228:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800822c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008230:	f001 010f 	and.w	r1, r1, #15
 8008234:	2203      	movs	r2, #3
 8008236:	48be      	ldr	r0, [pc, #760]	@ (8008530 <_dtoa_r+0x610>)
 8008238:	2900      	cmp	r1, #0
 800823a:	f040 808f 	bne.w	800835c <_dtoa_r+0x43c>
 800823e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008242:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008246:	ed8d 7b02 	vstr	d7, [sp, #8]
 800824a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800824c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008250:	2900      	cmp	r1, #0
 8008252:	f000 80b3 	beq.w	80083bc <_dtoa_r+0x49c>
 8008256:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800825a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800825e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008262:	f140 80ab 	bpl.w	80083bc <_dtoa_r+0x49c>
 8008266:	f1ba 0f00 	cmp.w	sl, #0
 800826a:	f000 80a7 	beq.w	80083bc <_dtoa_r+0x49c>
 800826e:	f1bb 0f00 	cmp.w	fp, #0
 8008272:	dd30      	ble.n	80082d6 <_dtoa_r+0x3b6>
 8008274:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008278:	ee27 7b06 	vmul.f64	d7, d7, d6
 800827c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008280:	f108 31ff 	add.w	r1, r8, #4294967295
 8008284:	9105      	str	r1, [sp, #20]
 8008286:	3201      	adds	r2, #1
 8008288:	465c      	mov	r4, fp
 800828a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800828e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8008292:	ee07 2a90 	vmov	s15, r2
 8008296:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800829a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800829e:	ee15 2a90 	vmov	r2, s11
 80082a2:	ec51 0b15 	vmov	r0, r1, d5
 80082a6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80082aa:	2c00      	cmp	r4, #0
 80082ac:	f040 808a 	bne.w	80083c4 <_dtoa_r+0x4a4>
 80082b0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80082b4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80082b8:	ec41 0b17 	vmov	d7, r0, r1
 80082bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80082c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c4:	f300 826a 	bgt.w	800879c <_dtoa_r+0x87c>
 80082c8:	eeb1 7b47 	vneg.f64	d7, d7
 80082cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80082d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d4:	d423      	bmi.n	800831e <_dtoa_r+0x3fe>
 80082d6:	ed8d 8b02 	vstr	d8, [sp, #8]
 80082da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80082dc:	2a00      	cmp	r2, #0
 80082de:	f2c0 8129 	blt.w	8008534 <_dtoa_r+0x614>
 80082e2:	f1b8 0f0e 	cmp.w	r8, #14
 80082e6:	f300 8125 	bgt.w	8008534 <_dtoa_r+0x614>
 80082ea:	4b90      	ldr	r3, [pc, #576]	@ (800852c <_dtoa_r+0x60c>)
 80082ec:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80082f0:	ed93 6b00 	vldr	d6, [r3]
 80082f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f280 80c8 	bge.w	800848c <_dtoa_r+0x56c>
 80082fc:	f1ba 0f00 	cmp.w	sl, #0
 8008300:	f300 80c4 	bgt.w	800848c <_dtoa_r+0x56c>
 8008304:	d10b      	bne.n	800831e <_dtoa_r+0x3fe>
 8008306:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800830a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800830e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008312:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831a:	f2c0 823c 	blt.w	8008796 <_dtoa_r+0x876>
 800831e:	2400      	movs	r4, #0
 8008320:	4625      	mov	r5, r4
 8008322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008324:	43db      	mvns	r3, r3
 8008326:	9305      	str	r3, [sp, #20]
 8008328:	463e      	mov	r6, r7
 800832a:	f04f 0800 	mov.w	r8, #0
 800832e:	4621      	mov	r1, r4
 8008330:	4648      	mov	r0, r9
 8008332:	f000 fc93 	bl	8008c5c <_Bfree>
 8008336:	2d00      	cmp	r5, #0
 8008338:	f000 80a2 	beq.w	8008480 <_dtoa_r+0x560>
 800833c:	f1b8 0f00 	cmp.w	r8, #0
 8008340:	d005      	beq.n	800834e <_dtoa_r+0x42e>
 8008342:	45a8      	cmp	r8, r5
 8008344:	d003      	beq.n	800834e <_dtoa_r+0x42e>
 8008346:	4641      	mov	r1, r8
 8008348:	4648      	mov	r0, r9
 800834a:	f000 fc87 	bl	8008c5c <_Bfree>
 800834e:	4629      	mov	r1, r5
 8008350:	4648      	mov	r0, r9
 8008352:	f000 fc83 	bl	8008c5c <_Bfree>
 8008356:	e093      	b.n	8008480 <_dtoa_r+0x560>
 8008358:	2202      	movs	r2, #2
 800835a:	e76c      	b.n	8008236 <_dtoa_r+0x316>
 800835c:	07cc      	lsls	r4, r1, #31
 800835e:	d504      	bpl.n	800836a <_dtoa_r+0x44a>
 8008360:	ed90 6b00 	vldr	d6, [r0]
 8008364:	3201      	adds	r2, #1
 8008366:	ee27 7b06 	vmul.f64	d7, d7, d6
 800836a:	1049      	asrs	r1, r1, #1
 800836c:	3008      	adds	r0, #8
 800836e:	e763      	b.n	8008238 <_dtoa_r+0x318>
 8008370:	d022      	beq.n	80083b8 <_dtoa_r+0x498>
 8008372:	f1c8 0100 	rsb	r1, r8, #0
 8008376:	4a6d      	ldr	r2, [pc, #436]	@ (800852c <_dtoa_r+0x60c>)
 8008378:	f001 000f 	and.w	r0, r1, #15
 800837c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008380:	ed92 7b00 	vldr	d7, [r2]
 8008384:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008388:	ed8d 7b02 	vstr	d7, [sp, #8]
 800838c:	4868      	ldr	r0, [pc, #416]	@ (8008530 <_dtoa_r+0x610>)
 800838e:	1109      	asrs	r1, r1, #4
 8008390:	2400      	movs	r4, #0
 8008392:	2202      	movs	r2, #2
 8008394:	b929      	cbnz	r1, 80083a2 <_dtoa_r+0x482>
 8008396:	2c00      	cmp	r4, #0
 8008398:	f43f af57 	beq.w	800824a <_dtoa_r+0x32a>
 800839c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083a0:	e753      	b.n	800824a <_dtoa_r+0x32a>
 80083a2:	07ce      	lsls	r6, r1, #31
 80083a4:	d505      	bpl.n	80083b2 <_dtoa_r+0x492>
 80083a6:	ed90 6b00 	vldr	d6, [r0]
 80083aa:	3201      	adds	r2, #1
 80083ac:	2401      	movs	r4, #1
 80083ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80083b2:	1049      	asrs	r1, r1, #1
 80083b4:	3008      	adds	r0, #8
 80083b6:	e7ed      	b.n	8008394 <_dtoa_r+0x474>
 80083b8:	2202      	movs	r2, #2
 80083ba:	e746      	b.n	800824a <_dtoa_r+0x32a>
 80083bc:	f8cd 8014 	str.w	r8, [sp, #20]
 80083c0:	4654      	mov	r4, sl
 80083c2:	e762      	b.n	800828a <_dtoa_r+0x36a>
 80083c4:	4a59      	ldr	r2, [pc, #356]	@ (800852c <_dtoa_r+0x60c>)
 80083c6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80083ca:	ed12 4b02 	vldr	d4, [r2, #-8]
 80083ce:	9a08      	ldr	r2, [sp, #32]
 80083d0:	ec41 0b17 	vmov	d7, r0, r1
 80083d4:	443c      	add	r4, r7
 80083d6:	b34a      	cbz	r2, 800842c <_dtoa_r+0x50c>
 80083d8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80083dc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80083e0:	463e      	mov	r6, r7
 80083e2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80083e6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80083ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80083ee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80083f2:	ee14 2a90 	vmov	r2, s9
 80083f6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80083fa:	3230      	adds	r2, #48	@ 0x30
 80083fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008400:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008408:	f806 2b01 	strb.w	r2, [r6], #1
 800840c:	d438      	bmi.n	8008480 <_dtoa_r+0x560>
 800840e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008412:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800841a:	d46e      	bmi.n	80084fa <_dtoa_r+0x5da>
 800841c:	42a6      	cmp	r6, r4
 800841e:	f43f af5a 	beq.w	80082d6 <_dtoa_r+0x3b6>
 8008422:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008426:	ee26 6b03 	vmul.f64	d6, d6, d3
 800842a:	e7e0      	b.n	80083ee <_dtoa_r+0x4ce>
 800842c:	4621      	mov	r1, r4
 800842e:	463e      	mov	r6, r7
 8008430:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008434:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008438:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800843c:	ee14 2a90 	vmov	r2, s9
 8008440:	3230      	adds	r2, #48	@ 0x30
 8008442:	f806 2b01 	strb.w	r2, [r6], #1
 8008446:	42a6      	cmp	r6, r4
 8008448:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800844c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008450:	d119      	bne.n	8008486 <_dtoa_r+0x566>
 8008452:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8008456:	ee37 4b05 	vadd.f64	d4, d7, d5
 800845a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800845e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008462:	dc4a      	bgt.n	80084fa <_dtoa_r+0x5da>
 8008464:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008468:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800846c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008470:	f57f af31 	bpl.w	80082d6 <_dtoa_r+0x3b6>
 8008474:	460e      	mov	r6, r1
 8008476:	3901      	subs	r1, #1
 8008478:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800847c:	2b30      	cmp	r3, #48	@ 0x30
 800847e:	d0f9      	beq.n	8008474 <_dtoa_r+0x554>
 8008480:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008484:	e027      	b.n	80084d6 <_dtoa_r+0x5b6>
 8008486:	ee26 6b03 	vmul.f64	d6, d6, d3
 800848a:	e7d5      	b.n	8008438 <_dtoa_r+0x518>
 800848c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008490:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8008494:	463e      	mov	r6, r7
 8008496:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800849a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800849e:	ee15 3a10 	vmov	r3, s10
 80084a2:	3330      	adds	r3, #48	@ 0x30
 80084a4:	f806 3b01 	strb.w	r3, [r6], #1
 80084a8:	1bf3      	subs	r3, r6, r7
 80084aa:	459a      	cmp	sl, r3
 80084ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80084b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80084b4:	d132      	bne.n	800851c <_dtoa_r+0x5fc>
 80084b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80084ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80084be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c2:	dc18      	bgt.n	80084f6 <_dtoa_r+0x5d6>
 80084c4:	eeb4 7b46 	vcmp.f64	d7, d6
 80084c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084cc:	d103      	bne.n	80084d6 <_dtoa_r+0x5b6>
 80084ce:	ee15 3a10 	vmov	r3, s10
 80084d2:	07db      	lsls	r3, r3, #31
 80084d4:	d40f      	bmi.n	80084f6 <_dtoa_r+0x5d6>
 80084d6:	9901      	ldr	r1, [sp, #4]
 80084d8:	4648      	mov	r0, r9
 80084da:	f000 fbbf 	bl	8008c5c <_Bfree>
 80084de:	2300      	movs	r3, #0
 80084e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084e2:	7033      	strb	r3, [r6, #0]
 80084e4:	f108 0301 	add.w	r3, r8, #1
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 824b 	beq.w	8008988 <_dtoa_r+0xa68>
 80084f2:	601e      	str	r6, [r3, #0]
 80084f4:	e248      	b.n	8008988 <_dtoa_r+0xa68>
 80084f6:	f8cd 8014 	str.w	r8, [sp, #20]
 80084fa:	4633      	mov	r3, r6
 80084fc:	461e      	mov	r6, r3
 80084fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008502:	2a39      	cmp	r2, #57	@ 0x39
 8008504:	d106      	bne.n	8008514 <_dtoa_r+0x5f4>
 8008506:	429f      	cmp	r7, r3
 8008508:	d1f8      	bne.n	80084fc <_dtoa_r+0x5dc>
 800850a:	9a05      	ldr	r2, [sp, #20]
 800850c:	3201      	adds	r2, #1
 800850e:	9205      	str	r2, [sp, #20]
 8008510:	2230      	movs	r2, #48	@ 0x30
 8008512:	703a      	strb	r2, [r7, #0]
 8008514:	781a      	ldrb	r2, [r3, #0]
 8008516:	3201      	adds	r2, #1
 8008518:	701a      	strb	r2, [r3, #0]
 800851a:	e7b1      	b.n	8008480 <_dtoa_r+0x560>
 800851c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008520:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008528:	d1b5      	bne.n	8008496 <_dtoa_r+0x576>
 800852a:	e7d4      	b.n	80084d6 <_dtoa_r+0x5b6>
 800852c:	0800b888 	.word	0x0800b888
 8008530:	0800b860 	.word	0x0800b860
 8008534:	9908      	ldr	r1, [sp, #32]
 8008536:	2900      	cmp	r1, #0
 8008538:	f000 80e9 	beq.w	800870e <_dtoa_r+0x7ee>
 800853c:	9907      	ldr	r1, [sp, #28]
 800853e:	2901      	cmp	r1, #1
 8008540:	f300 80cb 	bgt.w	80086da <_dtoa_r+0x7ba>
 8008544:	2d00      	cmp	r5, #0
 8008546:	f000 80c4 	beq.w	80086d2 <_dtoa_r+0x7b2>
 800854a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800854e:	9e04      	ldr	r6, [sp, #16]
 8008550:	461c      	mov	r4, r3
 8008552:	9305      	str	r3, [sp, #20]
 8008554:	9b04      	ldr	r3, [sp, #16]
 8008556:	4413      	add	r3, r2
 8008558:	9304      	str	r3, [sp, #16]
 800855a:	9b06      	ldr	r3, [sp, #24]
 800855c:	2101      	movs	r1, #1
 800855e:	4413      	add	r3, r2
 8008560:	4648      	mov	r0, r9
 8008562:	9306      	str	r3, [sp, #24]
 8008564:	f000 fc78 	bl	8008e58 <__i2b>
 8008568:	9b05      	ldr	r3, [sp, #20]
 800856a:	4605      	mov	r5, r0
 800856c:	b166      	cbz	r6, 8008588 <_dtoa_r+0x668>
 800856e:	9a06      	ldr	r2, [sp, #24]
 8008570:	2a00      	cmp	r2, #0
 8008572:	dd09      	ble.n	8008588 <_dtoa_r+0x668>
 8008574:	42b2      	cmp	r2, r6
 8008576:	9904      	ldr	r1, [sp, #16]
 8008578:	bfa8      	it	ge
 800857a:	4632      	movge	r2, r6
 800857c:	1a89      	subs	r1, r1, r2
 800857e:	9104      	str	r1, [sp, #16]
 8008580:	9906      	ldr	r1, [sp, #24]
 8008582:	1ab6      	subs	r6, r6, r2
 8008584:	1a8a      	subs	r2, r1, r2
 8008586:	9206      	str	r2, [sp, #24]
 8008588:	b30b      	cbz	r3, 80085ce <_dtoa_r+0x6ae>
 800858a:	9a08      	ldr	r2, [sp, #32]
 800858c:	2a00      	cmp	r2, #0
 800858e:	f000 80c5 	beq.w	800871c <_dtoa_r+0x7fc>
 8008592:	2c00      	cmp	r4, #0
 8008594:	f000 80bf 	beq.w	8008716 <_dtoa_r+0x7f6>
 8008598:	4629      	mov	r1, r5
 800859a:	4622      	mov	r2, r4
 800859c:	4648      	mov	r0, r9
 800859e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085a0:	f000 fd12 	bl	8008fc8 <__pow5mult>
 80085a4:	9a01      	ldr	r2, [sp, #4]
 80085a6:	4601      	mov	r1, r0
 80085a8:	4605      	mov	r5, r0
 80085aa:	4648      	mov	r0, r9
 80085ac:	f000 fc6a 	bl	8008e84 <__multiply>
 80085b0:	9901      	ldr	r1, [sp, #4]
 80085b2:	9005      	str	r0, [sp, #20]
 80085b4:	4648      	mov	r0, r9
 80085b6:	f000 fb51 	bl	8008c5c <_Bfree>
 80085ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085bc:	1b1b      	subs	r3, r3, r4
 80085be:	f000 80b0 	beq.w	8008722 <_dtoa_r+0x802>
 80085c2:	9905      	ldr	r1, [sp, #20]
 80085c4:	461a      	mov	r2, r3
 80085c6:	4648      	mov	r0, r9
 80085c8:	f000 fcfe 	bl	8008fc8 <__pow5mult>
 80085cc:	9001      	str	r0, [sp, #4]
 80085ce:	2101      	movs	r1, #1
 80085d0:	4648      	mov	r0, r9
 80085d2:	f000 fc41 	bl	8008e58 <__i2b>
 80085d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085d8:	4604      	mov	r4, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 81da 	beq.w	8008994 <_dtoa_r+0xa74>
 80085e0:	461a      	mov	r2, r3
 80085e2:	4601      	mov	r1, r0
 80085e4:	4648      	mov	r0, r9
 80085e6:	f000 fcef 	bl	8008fc8 <__pow5mult>
 80085ea:	9b07      	ldr	r3, [sp, #28]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	4604      	mov	r4, r0
 80085f0:	f300 80a0 	bgt.w	8008734 <_dtoa_r+0x814>
 80085f4:	9b02      	ldr	r3, [sp, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f040 8096 	bne.w	8008728 <_dtoa_r+0x808>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008602:	2a00      	cmp	r2, #0
 8008604:	f040 8092 	bne.w	800872c <_dtoa_r+0x80c>
 8008608:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800860c:	0d12      	lsrs	r2, r2, #20
 800860e:	0512      	lsls	r2, r2, #20
 8008610:	2a00      	cmp	r2, #0
 8008612:	f000 808d 	beq.w	8008730 <_dtoa_r+0x810>
 8008616:	9b04      	ldr	r3, [sp, #16]
 8008618:	3301      	adds	r3, #1
 800861a:	9304      	str	r3, [sp, #16]
 800861c:	9b06      	ldr	r3, [sp, #24]
 800861e:	3301      	adds	r3, #1
 8008620:	9306      	str	r3, [sp, #24]
 8008622:	2301      	movs	r3, #1
 8008624:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008626:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 81b9 	beq.w	80089a0 <_dtoa_r+0xa80>
 800862e:	6922      	ldr	r2, [r4, #16]
 8008630:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008634:	6910      	ldr	r0, [r2, #16]
 8008636:	f000 fbc3 	bl	8008dc0 <__hi0bits>
 800863a:	f1c0 0020 	rsb	r0, r0, #32
 800863e:	9b06      	ldr	r3, [sp, #24]
 8008640:	4418      	add	r0, r3
 8008642:	f010 001f 	ands.w	r0, r0, #31
 8008646:	f000 8081 	beq.w	800874c <_dtoa_r+0x82c>
 800864a:	f1c0 0220 	rsb	r2, r0, #32
 800864e:	2a04      	cmp	r2, #4
 8008650:	dd73      	ble.n	800873a <_dtoa_r+0x81a>
 8008652:	9b04      	ldr	r3, [sp, #16]
 8008654:	f1c0 001c 	rsb	r0, r0, #28
 8008658:	4403      	add	r3, r0
 800865a:	9304      	str	r3, [sp, #16]
 800865c:	9b06      	ldr	r3, [sp, #24]
 800865e:	4406      	add	r6, r0
 8008660:	4403      	add	r3, r0
 8008662:	9306      	str	r3, [sp, #24]
 8008664:	9b04      	ldr	r3, [sp, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	dd05      	ble.n	8008676 <_dtoa_r+0x756>
 800866a:	9901      	ldr	r1, [sp, #4]
 800866c:	461a      	mov	r2, r3
 800866e:	4648      	mov	r0, r9
 8008670:	f000 fd04 	bl	800907c <__lshift>
 8008674:	9001      	str	r0, [sp, #4]
 8008676:	9b06      	ldr	r3, [sp, #24]
 8008678:	2b00      	cmp	r3, #0
 800867a:	dd05      	ble.n	8008688 <_dtoa_r+0x768>
 800867c:	4621      	mov	r1, r4
 800867e:	461a      	mov	r2, r3
 8008680:	4648      	mov	r0, r9
 8008682:	f000 fcfb 	bl	800907c <__lshift>
 8008686:	4604      	mov	r4, r0
 8008688:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800868a:	2b00      	cmp	r3, #0
 800868c:	d060      	beq.n	8008750 <_dtoa_r+0x830>
 800868e:	9801      	ldr	r0, [sp, #4]
 8008690:	4621      	mov	r1, r4
 8008692:	f000 fd5f 	bl	8009154 <__mcmp>
 8008696:	2800      	cmp	r0, #0
 8008698:	da5a      	bge.n	8008750 <_dtoa_r+0x830>
 800869a:	f108 33ff 	add.w	r3, r8, #4294967295
 800869e:	9305      	str	r3, [sp, #20]
 80086a0:	9901      	ldr	r1, [sp, #4]
 80086a2:	2300      	movs	r3, #0
 80086a4:	220a      	movs	r2, #10
 80086a6:	4648      	mov	r0, r9
 80086a8:	f000 fafa 	bl	8008ca0 <__multadd>
 80086ac:	9b08      	ldr	r3, [sp, #32]
 80086ae:	9001      	str	r0, [sp, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 8177 	beq.w	80089a4 <_dtoa_r+0xa84>
 80086b6:	4629      	mov	r1, r5
 80086b8:	2300      	movs	r3, #0
 80086ba:	220a      	movs	r2, #10
 80086bc:	4648      	mov	r0, r9
 80086be:	f000 faef 	bl	8008ca0 <__multadd>
 80086c2:	f1bb 0f00 	cmp.w	fp, #0
 80086c6:	4605      	mov	r5, r0
 80086c8:	dc6e      	bgt.n	80087a8 <_dtoa_r+0x888>
 80086ca:	9b07      	ldr	r3, [sp, #28]
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	dc48      	bgt.n	8008762 <_dtoa_r+0x842>
 80086d0:	e06a      	b.n	80087a8 <_dtoa_r+0x888>
 80086d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80086d8:	e739      	b.n	800854e <_dtoa_r+0x62e>
 80086da:	f10a 34ff 	add.w	r4, sl, #4294967295
 80086de:	42a3      	cmp	r3, r4
 80086e0:	db07      	blt.n	80086f2 <_dtoa_r+0x7d2>
 80086e2:	f1ba 0f00 	cmp.w	sl, #0
 80086e6:	eba3 0404 	sub.w	r4, r3, r4
 80086ea:	db0b      	blt.n	8008704 <_dtoa_r+0x7e4>
 80086ec:	9e04      	ldr	r6, [sp, #16]
 80086ee:	4652      	mov	r2, sl
 80086f0:	e72f      	b.n	8008552 <_dtoa_r+0x632>
 80086f2:	1ae2      	subs	r2, r4, r3
 80086f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086f6:	9e04      	ldr	r6, [sp, #16]
 80086f8:	4413      	add	r3, r2
 80086fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80086fc:	4652      	mov	r2, sl
 80086fe:	4623      	mov	r3, r4
 8008700:	2400      	movs	r4, #0
 8008702:	e726      	b.n	8008552 <_dtoa_r+0x632>
 8008704:	9a04      	ldr	r2, [sp, #16]
 8008706:	eba2 060a 	sub.w	r6, r2, sl
 800870a:	2200      	movs	r2, #0
 800870c:	e721      	b.n	8008552 <_dtoa_r+0x632>
 800870e:	9e04      	ldr	r6, [sp, #16]
 8008710:	9d08      	ldr	r5, [sp, #32]
 8008712:	461c      	mov	r4, r3
 8008714:	e72a      	b.n	800856c <_dtoa_r+0x64c>
 8008716:	9a01      	ldr	r2, [sp, #4]
 8008718:	9205      	str	r2, [sp, #20]
 800871a:	e752      	b.n	80085c2 <_dtoa_r+0x6a2>
 800871c:	9901      	ldr	r1, [sp, #4]
 800871e:	461a      	mov	r2, r3
 8008720:	e751      	b.n	80085c6 <_dtoa_r+0x6a6>
 8008722:	9b05      	ldr	r3, [sp, #20]
 8008724:	9301      	str	r3, [sp, #4]
 8008726:	e752      	b.n	80085ce <_dtoa_r+0x6ae>
 8008728:	2300      	movs	r3, #0
 800872a:	e77b      	b.n	8008624 <_dtoa_r+0x704>
 800872c:	9b02      	ldr	r3, [sp, #8]
 800872e:	e779      	b.n	8008624 <_dtoa_r+0x704>
 8008730:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008732:	e778      	b.n	8008626 <_dtoa_r+0x706>
 8008734:	2300      	movs	r3, #0
 8008736:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008738:	e779      	b.n	800862e <_dtoa_r+0x70e>
 800873a:	d093      	beq.n	8008664 <_dtoa_r+0x744>
 800873c:	9b04      	ldr	r3, [sp, #16]
 800873e:	321c      	adds	r2, #28
 8008740:	4413      	add	r3, r2
 8008742:	9304      	str	r3, [sp, #16]
 8008744:	9b06      	ldr	r3, [sp, #24]
 8008746:	4416      	add	r6, r2
 8008748:	4413      	add	r3, r2
 800874a:	e78a      	b.n	8008662 <_dtoa_r+0x742>
 800874c:	4602      	mov	r2, r0
 800874e:	e7f5      	b.n	800873c <_dtoa_r+0x81c>
 8008750:	f1ba 0f00 	cmp.w	sl, #0
 8008754:	f8cd 8014 	str.w	r8, [sp, #20]
 8008758:	46d3      	mov	fp, sl
 800875a:	dc21      	bgt.n	80087a0 <_dtoa_r+0x880>
 800875c:	9b07      	ldr	r3, [sp, #28]
 800875e:	2b02      	cmp	r3, #2
 8008760:	dd1e      	ble.n	80087a0 <_dtoa_r+0x880>
 8008762:	f1bb 0f00 	cmp.w	fp, #0
 8008766:	f47f addc 	bne.w	8008322 <_dtoa_r+0x402>
 800876a:	4621      	mov	r1, r4
 800876c:	465b      	mov	r3, fp
 800876e:	2205      	movs	r2, #5
 8008770:	4648      	mov	r0, r9
 8008772:	f000 fa95 	bl	8008ca0 <__multadd>
 8008776:	4601      	mov	r1, r0
 8008778:	4604      	mov	r4, r0
 800877a:	9801      	ldr	r0, [sp, #4]
 800877c:	f000 fcea 	bl	8009154 <__mcmp>
 8008780:	2800      	cmp	r0, #0
 8008782:	f77f adce 	ble.w	8008322 <_dtoa_r+0x402>
 8008786:	463e      	mov	r6, r7
 8008788:	2331      	movs	r3, #49	@ 0x31
 800878a:	f806 3b01 	strb.w	r3, [r6], #1
 800878e:	9b05      	ldr	r3, [sp, #20]
 8008790:	3301      	adds	r3, #1
 8008792:	9305      	str	r3, [sp, #20]
 8008794:	e5c9      	b.n	800832a <_dtoa_r+0x40a>
 8008796:	f8cd 8014 	str.w	r8, [sp, #20]
 800879a:	4654      	mov	r4, sl
 800879c:	4625      	mov	r5, r4
 800879e:	e7f2      	b.n	8008786 <_dtoa_r+0x866>
 80087a0:	9b08      	ldr	r3, [sp, #32]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 8102 	beq.w	80089ac <_dtoa_r+0xa8c>
 80087a8:	2e00      	cmp	r6, #0
 80087aa:	dd05      	ble.n	80087b8 <_dtoa_r+0x898>
 80087ac:	4629      	mov	r1, r5
 80087ae:	4632      	mov	r2, r6
 80087b0:	4648      	mov	r0, r9
 80087b2:	f000 fc63 	bl	800907c <__lshift>
 80087b6:	4605      	mov	r5, r0
 80087b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d058      	beq.n	8008870 <_dtoa_r+0x950>
 80087be:	6869      	ldr	r1, [r5, #4]
 80087c0:	4648      	mov	r0, r9
 80087c2:	f000 fa0b 	bl	8008bdc <_Balloc>
 80087c6:	4606      	mov	r6, r0
 80087c8:	b928      	cbnz	r0, 80087d6 <_dtoa_r+0x8b6>
 80087ca:	4b82      	ldr	r3, [pc, #520]	@ (80089d4 <_dtoa_r+0xab4>)
 80087cc:	4602      	mov	r2, r0
 80087ce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80087d2:	f7ff bbbe 	b.w	8007f52 <_dtoa_r+0x32>
 80087d6:	692a      	ldr	r2, [r5, #16]
 80087d8:	3202      	adds	r2, #2
 80087da:	0092      	lsls	r2, r2, #2
 80087dc:	f105 010c 	add.w	r1, r5, #12
 80087e0:	300c      	adds	r0, #12
 80087e2:	f001 ff19 	bl	800a618 <memcpy>
 80087e6:	2201      	movs	r2, #1
 80087e8:	4631      	mov	r1, r6
 80087ea:	4648      	mov	r0, r9
 80087ec:	f000 fc46 	bl	800907c <__lshift>
 80087f0:	1c7b      	adds	r3, r7, #1
 80087f2:	9304      	str	r3, [sp, #16]
 80087f4:	eb07 030b 	add.w	r3, r7, fp
 80087f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80087fa:	9b02      	ldr	r3, [sp, #8]
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	46a8      	mov	r8, r5
 8008802:	9308      	str	r3, [sp, #32]
 8008804:	4605      	mov	r5, r0
 8008806:	9b04      	ldr	r3, [sp, #16]
 8008808:	9801      	ldr	r0, [sp, #4]
 800880a:	4621      	mov	r1, r4
 800880c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008810:	f7ff fafc 	bl	8007e0c <quorem>
 8008814:	4641      	mov	r1, r8
 8008816:	9002      	str	r0, [sp, #8]
 8008818:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800881c:	9801      	ldr	r0, [sp, #4]
 800881e:	f000 fc99 	bl	8009154 <__mcmp>
 8008822:	462a      	mov	r2, r5
 8008824:	9006      	str	r0, [sp, #24]
 8008826:	4621      	mov	r1, r4
 8008828:	4648      	mov	r0, r9
 800882a:	f000 fcaf 	bl	800918c <__mdiff>
 800882e:	68c2      	ldr	r2, [r0, #12]
 8008830:	4606      	mov	r6, r0
 8008832:	b9fa      	cbnz	r2, 8008874 <_dtoa_r+0x954>
 8008834:	4601      	mov	r1, r0
 8008836:	9801      	ldr	r0, [sp, #4]
 8008838:	f000 fc8c 	bl	8009154 <__mcmp>
 800883c:	4602      	mov	r2, r0
 800883e:	4631      	mov	r1, r6
 8008840:	4648      	mov	r0, r9
 8008842:	920a      	str	r2, [sp, #40]	@ 0x28
 8008844:	f000 fa0a 	bl	8008c5c <_Bfree>
 8008848:	9b07      	ldr	r3, [sp, #28]
 800884a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800884c:	9e04      	ldr	r6, [sp, #16]
 800884e:	ea42 0103 	orr.w	r1, r2, r3
 8008852:	9b08      	ldr	r3, [sp, #32]
 8008854:	4319      	orrs	r1, r3
 8008856:	d10f      	bne.n	8008878 <_dtoa_r+0x958>
 8008858:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800885c:	d028      	beq.n	80088b0 <_dtoa_r+0x990>
 800885e:	9b06      	ldr	r3, [sp, #24]
 8008860:	2b00      	cmp	r3, #0
 8008862:	dd02      	ble.n	800886a <_dtoa_r+0x94a>
 8008864:	9b02      	ldr	r3, [sp, #8]
 8008866:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800886a:	f88b a000 	strb.w	sl, [fp]
 800886e:	e55e      	b.n	800832e <_dtoa_r+0x40e>
 8008870:	4628      	mov	r0, r5
 8008872:	e7bd      	b.n	80087f0 <_dtoa_r+0x8d0>
 8008874:	2201      	movs	r2, #1
 8008876:	e7e2      	b.n	800883e <_dtoa_r+0x91e>
 8008878:	9b06      	ldr	r3, [sp, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	db04      	blt.n	8008888 <_dtoa_r+0x968>
 800887e:	9907      	ldr	r1, [sp, #28]
 8008880:	430b      	orrs	r3, r1
 8008882:	9908      	ldr	r1, [sp, #32]
 8008884:	430b      	orrs	r3, r1
 8008886:	d120      	bne.n	80088ca <_dtoa_r+0x9aa>
 8008888:	2a00      	cmp	r2, #0
 800888a:	ddee      	ble.n	800886a <_dtoa_r+0x94a>
 800888c:	9901      	ldr	r1, [sp, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	4648      	mov	r0, r9
 8008892:	f000 fbf3 	bl	800907c <__lshift>
 8008896:	4621      	mov	r1, r4
 8008898:	9001      	str	r0, [sp, #4]
 800889a:	f000 fc5b 	bl	8009154 <__mcmp>
 800889e:	2800      	cmp	r0, #0
 80088a0:	dc03      	bgt.n	80088aa <_dtoa_r+0x98a>
 80088a2:	d1e2      	bne.n	800886a <_dtoa_r+0x94a>
 80088a4:	f01a 0f01 	tst.w	sl, #1
 80088a8:	d0df      	beq.n	800886a <_dtoa_r+0x94a>
 80088aa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80088ae:	d1d9      	bne.n	8008864 <_dtoa_r+0x944>
 80088b0:	2339      	movs	r3, #57	@ 0x39
 80088b2:	f88b 3000 	strb.w	r3, [fp]
 80088b6:	4633      	mov	r3, r6
 80088b8:	461e      	mov	r6, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80088c0:	2a39      	cmp	r2, #57	@ 0x39
 80088c2:	d052      	beq.n	800896a <_dtoa_r+0xa4a>
 80088c4:	3201      	adds	r2, #1
 80088c6:	701a      	strb	r2, [r3, #0]
 80088c8:	e531      	b.n	800832e <_dtoa_r+0x40e>
 80088ca:	2a00      	cmp	r2, #0
 80088cc:	dd07      	ble.n	80088de <_dtoa_r+0x9be>
 80088ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80088d2:	d0ed      	beq.n	80088b0 <_dtoa_r+0x990>
 80088d4:	f10a 0301 	add.w	r3, sl, #1
 80088d8:	f88b 3000 	strb.w	r3, [fp]
 80088dc:	e527      	b.n	800832e <_dtoa_r+0x40e>
 80088de:	9b04      	ldr	r3, [sp, #16]
 80088e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088e2:	f803 ac01 	strb.w	sl, [r3, #-1]
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d029      	beq.n	800893e <_dtoa_r+0xa1e>
 80088ea:	9901      	ldr	r1, [sp, #4]
 80088ec:	2300      	movs	r3, #0
 80088ee:	220a      	movs	r2, #10
 80088f0:	4648      	mov	r0, r9
 80088f2:	f000 f9d5 	bl	8008ca0 <__multadd>
 80088f6:	45a8      	cmp	r8, r5
 80088f8:	9001      	str	r0, [sp, #4]
 80088fa:	f04f 0300 	mov.w	r3, #0
 80088fe:	f04f 020a 	mov.w	r2, #10
 8008902:	4641      	mov	r1, r8
 8008904:	4648      	mov	r0, r9
 8008906:	d107      	bne.n	8008918 <_dtoa_r+0x9f8>
 8008908:	f000 f9ca 	bl	8008ca0 <__multadd>
 800890c:	4680      	mov	r8, r0
 800890e:	4605      	mov	r5, r0
 8008910:	9b04      	ldr	r3, [sp, #16]
 8008912:	3301      	adds	r3, #1
 8008914:	9304      	str	r3, [sp, #16]
 8008916:	e776      	b.n	8008806 <_dtoa_r+0x8e6>
 8008918:	f000 f9c2 	bl	8008ca0 <__multadd>
 800891c:	4629      	mov	r1, r5
 800891e:	4680      	mov	r8, r0
 8008920:	2300      	movs	r3, #0
 8008922:	220a      	movs	r2, #10
 8008924:	4648      	mov	r0, r9
 8008926:	f000 f9bb 	bl	8008ca0 <__multadd>
 800892a:	4605      	mov	r5, r0
 800892c:	e7f0      	b.n	8008910 <_dtoa_r+0x9f0>
 800892e:	f1bb 0f00 	cmp.w	fp, #0
 8008932:	bfcc      	ite	gt
 8008934:	465e      	movgt	r6, fp
 8008936:	2601      	movle	r6, #1
 8008938:	443e      	add	r6, r7
 800893a:	f04f 0800 	mov.w	r8, #0
 800893e:	9901      	ldr	r1, [sp, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	4648      	mov	r0, r9
 8008944:	f000 fb9a 	bl	800907c <__lshift>
 8008948:	4621      	mov	r1, r4
 800894a:	9001      	str	r0, [sp, #4]
 800894c:	f000 fc02 	bl	8009154 <__mcmp>
 8008950:	2800      	cmp	r0, #0
 8008952:	dcb0      	bgt.n	80088b6 <_dtoa_r+0x996>
 8008954:	d102      	bne.n	800895c <_dtoa_r+0xa3c>
 8008956:	f01a 0f01 	tst.w	sl, #1
 800895a:	d1ac      	bne.n	80088b6 <_dtoa_r+0x996>
 800895c:	4633      	mov	r3, r6
 800895e:	461e      	mov	r6, r3
 8008960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008964:	2a30      	cmp	r2, #48	@ 0x30
 8008966:	d0fa      	beq.n	800895e <_dtoa_r+0xa3e>
 8008968:	e4e1      	b.n	800832e <_dtoa_r+0x40e>
 800896a:	429f      	cmp	r7, r3
 800896c:	d1a4      	bne.n	80088b8 <_dtoa_r+0x998>
 800896e:	9b05      	ldr	r3, [sp, #20]
 8008970:	3301      	adds	r3, #1
 8008972:	9305      	str	r3, [sp, #20]
 8008974:	2331      	movs	r3, #49	@ 0x31
 8008976:	703b      	strb	r3, [r7, #0]
 8008978:	e4d9      	b.n	800832e <_dtoa_r+0x40e>
 800897a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800897c:	4f16      	ldr	r7, [pc, #88]	@ (80089d8 <_dtoa_r+0xab8>)
 800897e:	b11b      	cbz	r3, 8008988 <_dtoa_r+0xa68>
 8008980:	f107 0308 	add.w	r3, r7, #8
 8008984:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	4638      	mov	r0, r7
 800898a:	b011      	add	sp, #68	@ 0x44
 800898c:	ecbd 8b02 	vpop	{d8}
 8008990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008994:	9b07      	ldr	r3, [sp, #28]
 8008996:	2b01      	cmp	r3, #1
 8008998:	f77f ae2c 	ble.w	80085f4 <_dtoa_r+0x6d4>
 800899c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800899e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089a0:	2001      	movs	r0, #1
 80089a2:	e64c      	b.n	800863e <_dtoa_r+0x71e>
 80089a4:	f1bb 0f00 	cmp.w	fp, #0
 80089a8:	f77f aed8 	ble.w	800875c <_dtoa_r+0x83c>
 80089ac:	463e      	mov	r6, r7
 80089ae:	9801      	ldr	r0, [sp, #4]
 80089b0:	4621      	mov	r1, r4
 80089b2:	f7ff fa2b 	bl	8007e0c <quorem>
 80089b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80089ba:	f806 ab01 	strb.w	sl, [r6], #1
 80089be:	1bf2      	subs	r2, r6, r7
 80089c0:	4593      	cmp	fp, r2
 80089c2:	ddb4      	ble.n	800892e <_dtoa_r+0xa0e>
 80089c4:	9901      	ldr	r1, [sp, #4]
 80089c6:	2300      	movs	r3, #0
 80089c8:	220a      	movs	r2, #10
 80089ca:	4648      	mov	r0, r9
 80089cc:	f000 f968 	bl	8008ca0 <__multadd>
 80089d0:	9001      	str	r0, [sp, #4]
 80089d2:	e7ec      	b.n	80089ae <_dtoa_r+0xa8e>
 80089d4:	0800b72d 	.word	0x0800b72d
 80089d8:	0800b6b1 	.word	0x0800b6b1

080089dc <_free_r>:
 80089dc:	b538      	push	{r3, r4, r5, lr}
 80089de:	4605      	mov	r5, r0
 80089e0:	2900      	cmp	r1, #0
 80089e2:	d041      	beq.n	8008a68 <_free_r+0x8c>
 80089e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089e8:	1f0c      	subs	r4, r1, #4
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	bfb8      	it	lt
 80089ee:	18e4      	addlt	r4, r4, r3
 80089f0:	f000 f8e8 	bl	8008bc4 <__malloc_lock>
 80089f4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a6c <_free_r+0x90>)
 80089f6:	6813      	ldr	r3, [r2, #0]
 80089f8:	b933      	cbnz	r3, 8008a08 <_free_r+0x2c>
 80089fa:	6063      	str	r3, [r4, #4]
 80089fc:	6014      	str	r4, [r2, #0]
 80089fe:	4628      	mov	r0, r5
 8008a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a04:	f000 b8e4 	b.w	8008bd0 <__malloc_unlock>
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	d908      	bls.n	8008a1e <_free_r+0x42>
 8008a0c:	6820      	ldr	r0, [r4, #0]
 8008a0e:	1821      	adds	r1, r4, r0
 8008a10:	428b      	cmp	r3, r1
 8008a12:	bf01      	itttt	eq
 8008a14:	6819      	ldreq	r1, [r3, #0]
 8008a16:	685b      	ldreq	r3, [r3, #4]
 8008a18:	1809      	addeq	r1, r1, r0
 8008a1a:	6021      	streq	r1, [r4, #0]
 8008a1c:	e7ed      	b.n	80089fa <_free_r+0x1e>
 8008a1e:	461a      	mov	r2, r3
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	b10b      	cbz	r3, 8008a28 <_free_r+0x4c>
 8008a24:	42a3      	cmp	r3, r4
 8008a26:	d9fa      	bls.n	8008a1e <_free_r+0x42>
 8008a28:	6811      	ldr	r1, [r2, #0]
 8008a2a:	1850      	adds	r0, r2, r1
 8008a2c:	42a0      	cmp	r0, r4
 8008a2e:	d10b      	bne.n	8008a48 <_free_r+0x6c>
 8008a30:	6820      	ldr	r0, [r4, #0]
 8008a32:	4401      	add	r1, r0
 8008a34:	1850      	adds	r0, r2, r1
 8008a36:	4283      	cmp	r3, r0
 8008a38:	6011      	str	r1, [r2, #0]
 8008a3a:	d1e0      	bne.n	80089fe <_free_r+0x22>
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	6053      	str	r3, [r2, #4]
 8008a42:	4408      	add	r0, r1
 8008a44:	6010      	str	r0, [r2, #0]
 8008a46:	e7da      	b.n	80089fe <_free_r+0x22>
 8008a48:	d902      	bls.n	8008a50 <_free_r+0x74>
 8008a4a:	230c      	movs	r3, #12
 8008a4c:	602b      	str	r3, [r5, #0]
 8008a4e:	e7d6      	b.n	80089fe <_free_r+0x22>
 8008a50:	6820      	ldr	r0, [r4, #0]
 8008a52:	1821      	adds	r1, r4, r0
 8008a54:	428b      	cmp	r3, r1
 8008a56:	bf04      	itt	eq
 8008a58:	6819      	ldreq	r1, [r3, #0]
 8008a5a:	685b      	ldreq	r3, [r3, #4]
 8008a5c:	6063      	str	r3, [r4, #4]
 8008a5e:	bf04      	itt	eq
 8008a60:	1809      	addeq	r1, r1, r0
 8008a62:	6021      	streq	r1, [r4, #0]
 8008a64:	6054      	str	r4, [r2, #4]
 8008a66:	e7ca      	b.n	80089fe <_free_r+0x22>
 8008a68:	bd38      	pop	{r3, r4, r5, pc}
 8008a6a:	bf00      	nop
 8008a6c:	200005d8 	.word	0x200005d8

08008a70 <malloc>:
 8008a70:	4b02      	ldr	r3, [pc, #8]	@ (8008a7c <malloc+0xc>)
 8008a72:	4601      	mov	r1, r0
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	f000 b825 	b.w	8008ac4 <_malloc_r>
 8008a7a:	bf00      	nop
 8008a7c:	20000024 	.word	0x20000024

08008a80 <sbrk_aligned>:
 8008a80:	b570      	push	{r4, r5, r6, lr}
 8008a82:	4e0f      	ldr	r6, [pc, #60]	@ (8008ac0 <sbrk_aligned+0x40>)
 8008a84:	460c      	mov	r4, r1
 8008a86:	6831      	ldr	r1, [r6, #0]
 8008a88:	4605      	mov	r5, r0
 8008a8a:	b911      	cbnz	r1, 8008a92 <sbrk_aligned+0x12>
 8008a8c:	f001 fdb4 	bl	800a5f8 <_sbrk_r>
 8008a90:	6030      	str	r0, [r6, #0]
 8008a92:	4621      	mov	r1, r4
 8008a94:	4628      	mov	r0, r5
 8008a96:	f001 fdaf 	bl	800a5f8 <_sbrk_r>
 8008a9a:	1c43      	adds	r3, r0, #1
 8008a9c:	d103      	bne.n	8008aa6 <sbrk_aligned+0x26>
 8008a9e:	f04f 34ff 	mov.w	r4, #4294967295
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	bd70      	pop	{r4, r5, r6, pc}
 8008aa6:	1cc4      	adds	r4, r0, #3
 8008aa8:	f024 0403 	bic.w	r4, r4, #3
 8008aac:	42a0      	cmp	r0, r4
 8008aae:	d0f8      	beq.n	8008aa2 <sbrk_aligned+0x22>
 8008ab0:	1a21      	subs	r1, r4, r0
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	f001 fda0 	bl	800a5f8 <_sbrk_r>
 8008ab8:	3001      	adds	r0, #1
 8008aba:	d1f2      	bne.n	8008aa2 <sbrk_aligned+0x22>
 8008abc:	e7ef      	b.n	8008a9e <sbrk_aligned+0x1e>
 8008abe:	bf00      	nop
 8008ac0:	200005d4 	.word	0x200005d4

08008ac4 <_malloc_r>:
 8008ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac8:	1ccd      	adds	r5, r1, #3
 8008aca:	f025 0503 	bic.w	r5, r5, #3
 8008ace:	3508      	adds	r5, #8
 8008ad0:	2d0c      	cmp	r5, #12
 8008ad2:	bf38      	it	cc
 8008ad4:	250c      	movcc	r5, #12
 8008ad6:	2d00      	cmp	r5, #0
 8008ad8:	4606      	mov	r6, r0
 8008ada:	db01      	blt.n	8008ae0 <_malloc_r+0x1c>
 8008adc:	42a9      	cmp	r1, r5
 8008ade:	d904      	bls.n	8008aea <_malloc_r+0x26>
 8008ae0:	230c      	movs	r3, #12
 8008ae2:	6033      	str	r3, [r6, #0]
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bc0 <_malloc_r+0xfc>
 8008aee:	f000 f869 	bl	8008bc4 <__malloc_lock>
 8008af2:	f8d8 3000 	ldr.w	r3, [r8]
 8008af6:	461c      	mov	r4, r3
 8008af8:	bb44      	cbnz	r4, 8008b4c <_malloc_r+0x88>
 8008afa:	4629      	mov	r1, r5
 8008afc:	4630      	mov	r0, r6
 8008afe:	f7ff ffbf 	bl	8008a80 <sbrk_aligned>
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	4604      	mov	r4, r0
 8008b06:	d158      	bne.n	8008bba <_malloc_r+0xf6>
 8008b08:	f8d8 4000 	ldr.w	r4, [r8]
 8008b0c:	4627      	mov	r7, r4
 8008b0e:	2f00      	cmp	r7, #0
 8008b10:	d143      	bne.n	8008b9a <_malloc_r+0xd6>
 8008b12:	2c00      	cmp	r4, #0
 8008b14:	d04b      	beq.n	8008bae <_malloc_r+0xea>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	4639      	mov	r1, r7
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	eb04 0903 	add.w	r9, r4, r3
 8008b20:	f001 fd6a 	bl	800a5f8 <_sbrk_r>
 8008b24:	4581      	cmp	r9, r0
 8008b26:	d142      	bne.n	8008bae <_malloc_r+0xea>
 8008b28:	6821      	ldr	r1, [r4, #0]
 8008b2a:	1a6d      	subs	r5, r5, r1
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	4630      	mov	r0, r6
 8008b30:	f7ff ffa6 	bl	8008a80 <sbrk_aligned>
 8008b34:	3001      	adds	r0, #1
 8008b36:	d03a      	beq.n	8008bae <_malloc_r+0xea>
 8008b38:	6823      	ldr	r3, [r4, #0]
 8008b3a:	442b      	add	r3, r5
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	bb62      	cbnz	r2, 8008ba0 <_malloc_r+0xdc>
 8008b46:	f8c8 7000 	str.w	r7, [r8]
 8008b4a:	e00f      	b.n	8008b6c <_malloc_r+0xa8>
 8008b4c:	6822      	ldr	r2, [r4, #0]
 8008b4e:	1b52      	subs	r2, r2, r5
 8008b50:	d420      	bmi.n	8008b94 <_malloc_r+0xd0>
 8008b52:	2a0b      	cmp	r2, #11
 8008b54:	d917      	bls.n	8008b86 <_malloc_r+0xc2>
 8008b56:	1961      	adds	r1, r4, r5
 8008b58:	42a3      	cmp	r3, r4
 8008b5a:	6025      	str	r5, [r4, #0]
 8008b5c:	bf18      	it	ne
 8008b5e:	6059      	strne	r1, [r3, #4]
 8008b60:	6863      	ldr	r3, [r4, #4]
 8008b62:	bf08      	it	eq
 8008b64:	f8c8 1000 	streq.w	r1, [r8]
 8008b68:	5162      	str	r2, [r4, r5]
 8008b6a:	604b      	str	r3, [r1, #4]
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	f000 f82f 	bl	8008bd0 <__malloc_unlock>
 8008b72:	f104 000b 	add.w	r0, r4, #11
 8008b76:	1d23      	adds	r3, r4, #4
 8008b78:	f020 0007 	bic.w	r0, r0, #7
 8008b7c:	1ac2      	subs	r2, r0, r3
 8008b7e:	bf1c      	itt	ne
 8008b80:	1a1b      	subne	r3, r3, r0
 8008b82:	50a3      	strne	r3, [r4, r2]
 8008b84:	e7af      	b.n	8008ae6 <_malloc_r+0x22>
 8008b86:	6862      	ldr	r2, [r4, #4]
 8008b88:	42a3      	cmp	r3, r4
 8008b8a:	bf0c      	ite	eq
 8008b8c:	f8c8 2000 	streq.w	r2, [r8]
 8008b90:	605a      	strne	r2, [r3, #4]
 8008b92:	e7eb      	b.n	8008b6c <_malloc_r+0xa8>
 8008b94:	4623      	mov	r3, r4
 8008b96:	6864      	ldr	r4, [r4, #4]
 8008b98:	e7ae      	b.n	8008af8 <_malloc_r+0x34>
 8008b9a:	463c      	mov	r4, r7
 8008b9c:	687f      	ldr	r7, [r7, #4]
 8008b9e:	e7b6      	b.n	8008b0e <_malloc_r+0x4a>
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	42a3      	cmp	r3, r4
 8008ba6:	d1fb      	bne.n	8008ba0 <_malloc_r+0xdc>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	6053      	str	r3, [r2, #4]
 8008bac:	e7de      	b.n	8008b6c <_malloc_r+0xa8>
 8008bae:	230c      	movs	r3, #12
 8008bb0:	6033      	str	r3, [r6, #0]
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	f000 f80c 	bl	8008bd0 <__malloc_unlock>
 8008bb8:	e794      	b.n	8008ae4 <_malloc_r+0x20>
 8008bba:	6005      	str	r5, [r0, #0]
 8008bbc:	e7d6      	b.n	8008b6c <_malloc_r+0xa8>
 8008bbe:	bf00      	nop
 8008bc0:	200005d8 	.word	0x200005d8

08008bc4 <__malloc_lock>:
 8008bc4:	4801      	ldr	r0, [pc, #4]	@ (8008bcc <__malloc_lock+0x8>)
 8008bc6:	f7ff b918 	b.w	8007dfa <__retarget_lock_acquire_recursive>
 8008bca:	bf00      	nop
 8008bcc:	200005d0 	.word	0x200005d0

08008bd0 <__malloc_unlock>:
 8008bd0:	4801      	ldr	r0, [pc, #4]	@ (8008bd8 <__malloc_unlock+0x8>)
 8008bd2:	f7ff b913 	b.w	8007dfc <__retarget_lock_release_recursive>
 8008bd6:	bf00      	nop
 8008bd8:	200005d0 	.word	0x200005d0

08008bdc <_Balloc>:
 8008bdc:	b570      	push	{r4, r5, r6, lr}
 8008bde:	69c6      	ldr	r6, [r0, #28]
 8008be0:	4604      	mov	r4, r0
 8008be2:	460d      	mov	r5, r1
 8008be4:	b976      	cbnz	r6, 8008c04 <_Balloc+0x28>
 8008be6:	2010      	movs	r0, #16
 8008be8:	f7ff ff42 	bl	8008a70 <malloc>
 8008bec:	4602      	mov	r2, r0
 8008bee:	61e0      	str	r0, [r4, #28]
 8008bf0:	b920      	cbnz	r0, 8008bfc <_Balloc+0x20>
 8008bf2:	4b18      	ldr	r3, [pc, #96]	@ (8008c54 <_Balloc+0x78>)
 8008bf4:	4818      	ldr	r0, [pc, #96]	@ (8008c58 <_Balloc+0x7c>)
 8008bf6:	216b      	movs	r1, #107	@ 0x6b
 8008bf8:	f001 fd26 	bl	800a648 <__assert_func>
 8008bfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c00:	6006      	str	r6, [r0, #0]
 8008c02:	60c6      	str	r6, [r0, #12]
 8008c04:	69e6      	ldr	r6, [r4, #28]
 8008c06:	68f3      	ldr	r3, [r6, #12]
 8008c08:	b183      	cbz	r3, 8008c2c <_Balloc+0x50>
 8008c0a:	69e3      	ldr	r3, [r4, #28]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c12:	b9b8      	cbnz	r0, 8008c44 <_Balloc+0x68>
 8008c14:	2101      	movs	r1, #1
 8008c16:	fa01 f605 	lsl.w	r6, r1, r5
 8008c1a:	1d72      	adds	r2, r6, #5
 8008c1c:	0092      	lsls	r2, r2, #2
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f001 fd30 	bl	800a684 <_calloc_r>
 8008c24:	b160      	cbz	r0, 8008c40 <_Balloc+0x64>
 8008c26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c2a:	e00e      	b.n	8008c4a <_Balloc+0x6e>
 8008c2c:	2221      	movs	r2, #33	@ 0x21
 8008c2e:	2104      	movs	r1, #4
 8008c30:	4620      	mov	r0, r4
 8008c32:	f001 fd27 	bl	800a684 <_calloc_r>
 8008c36:	69e3      	ldr	r3, [r4, #28]
 8008c38:	60f0      	str	r0, [r6, #12]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1e4      	bne.n	8008c0a <_Balloc+0x2e>
 8008c40:	2000      	movs	r0, #0
 8008c42:	bd70      	pop	{r4, r5, r6, pc}
 8008c44:	6802      	ldr	r2, [r0, #0]
 8008c46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c50:	e7f7      	b.n	8008c42 <_Balloc+0x66>
 8008c52:	bf00      	nop
 8008c54:	0800b6be 	.word	0x0800b6be
 8008c58:	0800b73e 	.word	0x0800b73e

08008c5c <_Bfree>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	69c6      	ldr	r6, [r0, #28]
 8008c60:	4605      	mov	r5, r0
 8008c62:	460c      	mov	r4, r1
 8008c64:	b976      	cbnz	r6, 8008c84 <_Bfree+0x28>
 8008c66:	2010      	movs	r0, #16
 8008c68:	f7ff ff02 	bl	8008a70 <malloc>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	61e8      	str	r0, [r5, #28]
 8008c70:	b920      	cbnz	r0, 8008c7c <_Bfree+0x20>
 8008c72:	4b09      	ldr	r3, [pc, #36]	@ (8008c98 <_Bfree+0x3c>)
 8008c74:	4809      	ldr	r0, [pc, #36]	@ (8008c9c <_Bfree+0x40>)
 8008c76:	218f      	movs	r1, #143	@ 0x8f
 8008c78:	f001 fce6 	bl	800a648 <__assert_func>
 8008c7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c80:	6006      	str	r6, [r0, #0]
 8008c82:	60c6      	str	r6, [r0, #12]
 8008c84:	b13c      	cbz	r4, 8008c96 <_Bfree+0x3a>
 8008c86:	69eb      	ldr	r3, [r5, #28]
 8008c88:	6862      	ldr	r2, [r4, #4]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c90:	6021      	str	r1, [r4, #0]
 8008c92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c96:	bd70      	pop	{r4, r5, r6, pc}
 8008c98:	0800b6be 	.word	0x0800b6be
 8008c9c:	0800b73e 	.word	0x0800b73e

08008ca0 <__multadd>:
 8008ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca4:	690d      	ldr	r5, [r1, #16]
 8008ca6:	4607      	mov	r7, r0
 8008ca8:	460c      	mov	r4, r1
 8008caa:	461e      	mov	r6, r3
 8008cac:	f101 0c14 	add.w	ip, r1, #20
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	f8dc 3000 	ldr.w	r3, [ip]
 8008cb6:	b299      	uxth	r1, r3
 8008cb8:	fb02 6101 	mla	r1, r2, r1, r6
 8008cbc:	0c1e      	lsrs	r6, r3, #16
 8008cbe:	0c0b      	lsrs	r3, r1, #16
 8008cc0:	fb02 3306 	mla	r3, r2, r6, r3
 8008cc4:	b289      	uxth	r1, r1
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ccc:	4285      	cmp	r5, r0
 8008cce:	f84c 1b04 	str.w	r1, [ip], #4
 8008cd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cd6:	dcec      	bgt.n	8008cb2 <__multadd+0x12>
 8008cd8:	b30e      	cbz	r6, 8008d1e <__multadd+0x7e>
 8008cda:	68a3      	ldr	r3, [r4, #8]
 8008cdc:	42ab      	cmp	r3, r5
 8008cde:	dc19      	bgt.n	8008d14 <__multadd+0x74>
 8008ce0:	6861      	ldr	r1, [r4, #4]
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	3101      	adds	r1, #1
 8008ce6:	f7ff ff79 	bl	8008bdc <_Balloc>
 8008cea:	4680      	mov	r8, r0
 8008cec:	b928      	cbnz	r0, 8008cfa <__multadd+0x5a>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8008d24 <__multadd+0x84>)
 8008cf2:	480d      	ldr	r0, [pc, #52]	@ (8008d28 <__multadd+0x88>)
 8008cf4:	21ba      	movs	r1, #186	@ 0xba
 8008cf6:	f001 fca7 	bl	800a648 <__assert_func>
 8008cfa:	6922      	ldr	r2, [r4, #16]
 8008cfc:	3202      	adds	r2, #2
 8008cfe:	f104 010c 	add.w	r1, r4, #12
 8008d02:	0092      	lsls	r2, r2, #2
 8008d04:	300c      	adds	r0, #12
 8008d06:	f001 fc87 	bl	800a618 <memcpy>
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	f7ff ffa5 	bl	8008c5c <_Bfree>
 8008d12:	4644      	mov	r4, r8
 8008d14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d18:	3501      	adds	r5, #1
 8008d1a:	615e      	str	r6, [r3, #20]
 8008d1c:	6125      	str	r5, [r4, #16]
 8008d1e:	4620      	mov	r0, r4
 8008d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d24:	0800b72d 	.word	0x0800b72d
 8008d28:	0800b73e 	.word	0x0800b73e

08008d2c <__s2b>:
 8008d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d30:	460c      	mov	r4, r1
 8008d32:	4615      	mov	r5, r2
 8008d34:	461f      	mov	r7, r3
 8008d36:	2209      	movs	r2, #9
 8008d38:	3308      	adds	r3, #8
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d40:	2100      	movs	r1, #0
 8008d42:	2201      	movs	r2, #1
 8008d44:	429a      	cmp	r2, r3
 8008d46:	db09      	blt.n	8008d5c <__s2b+0x30>
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f7ff ff47 	bl	8008bdc <_Balloc>
 8008d4e:	b940      	cbnz	r0, 8008d62 <__s2b+0x36>
 8008d50:	4602      	mov	r2, r0
 8008d52:	4b19      	ldr	r3, [pc, #100]	@ (8008db8 <__s2b+0x8c>)
 8008d54:	4819      	ldr	r0, [pc, #100]	@ (8008dbc <__s2b+0x90>)
 8008d56:	21d3      	movs	r1, #211	@ 0xd3
 8008d58:	f001 fc76 	bl	800a648 <__assert_func>
 8008d5c:	0052      	lsls	r2, r2, #1
 8008d5e:	3101      	adds	r1, #1
 8008d60:	e7f0      	b.n	8008d44 <__s2b+0x18>
 8008d62:	9b08      	ldr	r3, [sp, #32]
 8008d64:	6143      	str	r3, [r0, #20]
 8008d66:	2d09      	cmp	r5, #9
 8008d68:	f04f 0301 	mov.w	r3, #1
 8008d6c:	6103      	str	r3, [r0, #16]
 8008d6e:	dd16      	ble.n	8008d9e <__s2b+0x72>
 8008d70:	f104 0909 	add.w	r9, r4, #9
 8008d74:	46c8      	mov	r8, r9
 8008d76:	442c      	add	r4, r5
 8008d78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d7c:	4601      	mov	r1, r0
 8008d7e:	3b30      	subs	r3, #48	@ 0x30
 8008d80:	220a      	movs	r2, #10
 8008d82:	4630      	mov	r0, r6
 8008d84:	f7ff ff8c 	bl	8008ca0 <__multadd>
 8008d88:	45a0      	cmp	r8, r4
 8008d8a:	d1f5      	bne.n	8008d78 <__s2b+0x4c>
 8008d8c:	f1a5 0408 	sub.w	r4, r5, #8
 8008d90:	444c      	add	r4, r9
 8008d92:	1b2d      	subs	r5, r5, r4
 8008d94:	1963      	adds	r3, r4, r5
 8008d96:	42bb      	cmp	r3, r7
 8008d98:	db04      	blt.n	8008da4 <__s2b+0x78>
 8008d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d9e:	340a      	adds	r4, #10
 8008da0:	2509      	movs	r5, #9
 8008da2:	e7f6      	b.n	8008d92 <__s2b+0x66>
 8008da4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008da8:	4601      	mov	r1, r0
 8008daa:	3b30      	subs	r3, #48	@ 0x30
 8008dac:	220a      	movs	r2, #10
 8008dae:	4630      	mov	r0, r6
 8008db0:	f7ff ff76 	bl	8008ca0 <__multadd>
 8008db4:	e7ee      	b.n	8008d94 <__s2b+0x68>
 8008db6:	bf00      	nop
 8008db8:	0800b72d 	.word	0x0800b72d
 8008dbc:	0800b73e 	.word	0x0800b73e

08008dc0 <__hi0bits>:
 8008dc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	bf36      	itet	cc
 8008dc8:	0403      	lslcc	r3, r0, #16
 8008dca:	2000      	movcs	r0, #0
 8008dcc:	2010      	movcc	r0, #16
 8008dce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dd2:	bf3c      	itt	cc
 8008dd4:	021b      	lslcc	r3, r3, #8
 8008dd6:	3008      	addcc	r0, #8
 8008dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ddc:	bf3c      	itt	cc
 8008dde:	011b      	lslcc	r3, r3, #4
 8008de0:	3004      	addcc	r0, #4
 8008de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008de6:	bf3c      	itt	cc
 8008de8:	009b      	lslcc	r3, r3, #2
 8008dea:	3002      	addcc	r0, #2
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	db05      	blt.n	8008dfc <__hi0bits+0x3c>
 8008df0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008df4:	f100 0001 	add.w	r0, r0, #1
 8008df8:	bf08      	it	eq
 8008dfa:	2020      	moveq	r0, #32
 8008dfc:	4770      	bx	lr

08008dfe <__lo0bits>:
 8008dfe:	6803      	ldr	r3, [r0, #0]
 8008e00:	4602      	mov	r2, r0
 8008e02:	f013 0007 	ands.w	r0, r3, #7
 8008e06:	d00b      	beq.n	8008e20 <__lo0bits+0x22>
 8008e08:	07d9      	lsls	r1, r3, #31
 8008e0a:	d421      	bmi.n	8008e50 <__lo0bits+0x52>
 8008e0c:	0798      	lsls	r0, r3, #30
 8008e0e:	bf49      	itett	mi
 8008e10:	085b      	lsrmi	r3, r3, #1
 8008e12:	089b      	lsrpl	r3, r3, #2
 8008e14:	2001      	movmi	r0, #1
 8008e16:	6013      	strmi	r3, [r2, #0]
 8008e18:	bf5c      	itt	pl
 8008e1a:	6013      	strpl	r3, [r2, #0]
 8008e1c:	2002      	movpl	r0, #2
 8008e1e:	4770      	bx	lr
 8008e20:	b299      	uxth	r1, r3
 8008e22:	b909      	cbnz	r1, 8008e28 <__lo0bits+0x2a>
 8008e24:	0c1b      	lsrs	r3, r3, #16
 8008e26:	2010      	movs	r0, #16
 8008e28:	b2d9      	uxtb	r1, r3
 8008e2a:	b909      	cbnz	r1, 8008e30 <__lo0bits+0x32>
 8008e2c:	3008      	adds	r0, #8
 8008e2e:	0a1b      	lsrs	r3, r3, #8
 8008e30:	0719      	lsls	r1, r3, #28
 8008e32:	bf04      	itt	eq
 8008e34:	091b      	lsreq	r3, r3, #4
 8008e36:	3004      	addeq	r0, #4
 8008e38:	0799      	lsls	r1, r3, #30
 8008e3a:	bf04      	itt	eq
 8008e3c:	089b      	lsreq	r3, r3, #2
 8008e3e:	3002      	addeq	r0, #2
 8008e40:	07d9      	lsls	r1, r3, #31
 8008e42:	d403      	bmi.n	8008e4c <__lo0bits+0x4e>
 8008e44:	085b      	lsrs	r3, r3, #1
 8008e46:	f100 0001 	add.w	r0, r0, #1
 8008e4a:	d003      	beq.n	8008e54 <__lo0bits+0x56>
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	4770      	bx	lr
 8008e50:	2000      	movs	r0, #0
 8008e52:	4770      	bx	lr
 8008e54:	2020      	movs	r0, #32
 8008e56:	4770      	bx	lr

08008e58 <__i2b>:
 8008e58:	b510      	push	{r4, lr}
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	f7ff febd 	bl	8008bdc <_Balloc>
 8008e62:	4602      	mov	r2, r0
 8008e64:	b928      	cbnz	r0, 8008e72 <__i2b+0x1a>
 8008e66:	4b05      	ldr	r3, [pc, #20]	@ (8008e7c <__i2b+0x24>)
 8008e68:	4805      	ldr	r0, [pc, #20]	@ (8008e80 <__i2b+0x28>)
 8008e6a:	f240 1145 	movw	r1, #325	@ 0x145
 8008e6e:	f001 fbeb 	bl	800a648 <__assert_func>
 8008e72:	2301      	movs	r3, #1
 8008e74:	6144      	str	r4, [r0, #20]
 8008e76:	6103      	str	r3, [r0, #16]
 8008e78:	bd10      	pop	{r4, pc}
 8008e7a:	bf00      	nop
 8008e7c:	0800b72d 	.word	0x0800b72d
 8008e80:	0800b73e 	.word	0x0800b73e

08008e84 <__multiply>:
 8008e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e88:	4617      	mov	r7, r2
 8008e8a:	690a      	ldr	r2, [r1, #16]
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	bfa8      	it	ge
 8008e92:	463b      	movge	r3, r7
 8008e94:	4689      	mov	r9, r1
 8008e96:	bfa4      	itt	ge
 8008e98:	460f      	movge	r7, r1
 8008e9a:	4699      	movge	r9, r3
 8008e9c:	693d      	ldr	r5, [r7, #16]
 8008e9e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	eb05 060a 	add.w	r6, r5, sl
 8008eaa:	42b3      	cmp	r3, r6
 8008eac:	b085      	sub	sp, #20
 8008eae:	bfb8      	it	lt
 8008eb0:	3101      	addlt	r1, #1
 8008eb2:	f7ff fe93 	bl	8008bdc <_Balloc>
 8008eb6:	b930      	cbnz	r0, 8008ec6 <__multiply+0x42>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	4b41      	ldr	r3, [pc, #260]	@ (8008fc0 <__multiply+0x13c>)
 8008ebc:	4841      	ldr	r0, [pc, #260]	@ (8008fc4 <__multiply+0x140>)
 8008ebe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ec2:	f001 fbc1 	bl	800a648 <__assert_func>
 8008ec6:	f100 0414 	add.w	r4, r0, #20
 8008eca:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008ece:	4623      	mov	r3, r4
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4573      	cmp	r3, lr
 8008ed4:	d320      	bcc.n	8008f18 <__multiply+0x94>
 8008ed6:	f107 0814 	add.w	r8, r7, #20
 8008eda:	f109 0114 	add.w	r1, r9, #20
 8008ede:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008ee2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008ee6:	9302      	str	r3, [sp, #8]
 8008ee8:	1beb      	subs	r3, r5, r7
 8008eea:	3b15      	subs	r3, #21
 8008eec:	f023 0303 	bic.w	r3, r3, #3
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	3715      	adds	r7, #21
 8008ef4:	42bd      	cmp	r5, r7
 8008ef6:	bf38      	it	cc
 8008ef8:	2304      	movcc	r3, #4
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	9b02      	ldr	r3, [sp, #8]
 8008efe:	9103      	str	r1, [sp, #12]
 8008f00:	428b      	cmp	r3, r1
 8008f02:	d80c      	bhi.n	8008f1e <__multiply+0x9a>
 8008f04:	2e00      	cmp	r6, #0
 8008f06:	dd03      	ble.n	8008f10 <__multiply+0x8c>
 8008f08:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d055      	beq.n	8008fbc <__multiply+0x138>
 8008f10:	6106      	str	r6, [r0, #16]
 8008f12:	b005      	add	sp, #20
 8008f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f18:	f843 2b04 	str.w	r2, [r3], #4
 8008f1c:	e7d9      	b.n	8008ed2 <__multiply+0x4e>
 8008f1e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f22:	f1ba 0f00 	cmp.w	sl, #0
 8008f26:	d01f      	beq.n	8008f68 <__multiply+0xe4>
 8008f28:	46c4      	mov	ip, r8
 8008f2a:	46a1      	mov	r9, r4
 8008f2c:	2700      	movs	r7, #0
 8008f2e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f32:	f8d9 3000 	ldr.w	r3, [r9]
 8008f36:	fa1f fb82 	uxth.w	fp, r2
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f40:	443b      	add	r3, r7
 8008f42:	f8d9 7000 	ldr.w	r7, [r9]
 8008f46:	0c12      	lsrs	r2, r2, #16
 8008f48:	0c3f      	lsrs	r7, r7, #16
 8008f4a:	fb0a 7202 	mla	r2, sl, r2, r7
 8008f4e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f58:	4565      	cmp	r5, ip
 8008f5a:	f849 3b04 	str.w	r3, [r9], #4
 8008f5e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008f62:	d8e4      	bhi.n	8008f2e <__multiply+0xaa>
 8008f64:	9b01      	ldr	r3, [sp, #4]
 8008f66:	50e7      	str	r7, [r4, r3]
 8008f68:	9b03      	ldr	r3, [sp, #12]
 8008f6a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f6e:	3104      	adds	r1, #4
 8008f70:	f1b9 0f00 	cmp.w	r9, #0
 8008f74:	d020      	beq.n	8008fb8 <__multiply+0x134>
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	4647      	mov	r7, r8
 8008f7a:	46a4      	mov	ip, r4
 8008f7c:	f04f 0a00 	mov.w	sl, #0
 8008f80:	f8b7 b000 	ldrh.w	fp, [r7]
 8008f84:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008f88:	fb09 220b 	mla	r2, r9, fp, r2
 8008f8c:	4452      	add	r2, sl
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f94:	f84c 3b04 	str.w	r3, [ip], #4
 8008f98:	f857 3b04 	ldr.w	r3, [r7], #4
 8008f9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fa0:	f8bc 3000 	ldrh.w	r3, [ip]
 8008fa4:	fb09 330a 	mla	r3, r9, sl, r3
 8008fa8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008fac:	42bd      	cmp	r5, r7
 8008fae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fb2:	d8e5      	bhi.n	8008f80 <__multiply+0xfc>
 8008fb4:	9a01      	ldr	r2, [sp, #4]
 8008fb6:	50a3      	str	r3, [r4, r2]
 8008fb8:	3404      	adds	r4, #4
 8008fba:	e79f      	b.n	8008efc <__multiply+0x78>
 8008fbc:	3e01      	subs	r6, #1
 8008fbe:	e7a1      	b.n	8008f04 <__multiply+0x80>
 8008fc0:	0800b72d 	.word	0x0800b72d
 8008fc4:	0800b73e 	.word	0x0800b73e

08008fc8 <__pow5mult>:
 8008fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fcc:	4615      	mov	r5, r2
 8008fce:	f012 0203 	ands.w	r2, r2, #3
 8008fd2:	4607      	mov	r7, r0
 8008fd4:	460e      	mov	r6, r1
 8008fd6:	d007      	beq.n	8008fe8 <__pow5mult+0x20>
 8008fd8:	4c25      	ldr	r4, [pc, #148]	@ (8009070 <__pow5mult+0xa8>)
 8008fda:	3a01      	subs	r2, #1
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fe2:	f7ff fe5d 	bl	8008ca0 <__multadd>
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	10ad      	asrs	r5, r5, #2
 8008fea:	d03d      	beq.n	8009068 <__pow5mult+0xa0>
 8008fec:	69fc      	ldr	r4, [r7, #28]
 8008fee:	b97c      	cbnz	r4, 8009010 <__pow5mult+0x48>
 8008ff0:	2010      	movs	r0, #16
 8008ff2:	f7ff fd3d 	bl	8008a70 <malloc>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	61f8      	str	r0, [r7, #28]
 8008ffa:	b928      	cbnz	r0, 8009008 <__pow5mult+0x40>
 8008ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8009074 <__pow5mult+0xac>)
 8008ffe:	481e      	ldr	r0, [pc, #120]	@ (8009078 <__pow5mult+0xb0>)
 8009000:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009004:	f001 fb20 	bl	800a648 <__assert_func>
 8009008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800900c:	6004      	str	r4, [r0, #0]
 800900e:	60c4      	str	r4, [r0, #12]
 8009010:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009018:	b94c      	cbnz	r4, 800902e <__pow5mult+0x66>
 800901a:	f240 2171 	movw	r1, #625	@ 0x271
 800901e:	4638      	mov	r0, r7
 8009020:	f7ff ff1a 	bl	8008e58 <__i2b>
 8009024:	2300      	movs	r3, #0
 8009026:	f8c8 0008 	str.w	r0, [r8, #8]
 800902a:	4604      	mov	r4, r0
 800902c:	6003      	str	r3, [r0, #0]
 800902e:	f04f 0900 	mov.w	r9, #0
 8009032:	07eb      	lsls	r3, r5, #31
 8009034:	d50a      	bpl.n	800904c <__pow5mult+0x84>
 8009036:	4631      	mov	r1, r6
 8009038:	4622      	mov	r2, r4
 800903a:	4638      	mov	r0, r7
 800903c:	f7ff ff22 	bl	8008e84 <__multiply>
 8009040:	4631      	mov	r1, r6
 8009042:	4680      	mov	r8, r0
 8009044:	4638      	mov	r0, r7
 8009046:	f7ff fe09 	bl	8008c5c <_Bfree>
 800904a:	4646      	mov	r6, r8
 800904c:	106d      	asrs	r5, r5, #1
 800904e:	d00b      	beq.n	8009068 <__pow5mult+0xa0>
 8009050:	6820      	ldr	r0, [r4, #0]
 8009052:	b938      	cbnz	r0, 8009064 <__pow5mult+0x9c>
 8009054:	4622      	mov	r2, r4
 8009056:	4621      	mov	r1, r4
 8009058:	4638      	mov	r0, r7
 800905a:	f7ff ff13 	bl	8008e84 <__multiply>
 800905e:	6020      	str	r0, [r4, #0]
 8009060:	f8c0 9000 	str.w	r9, [r0]
 8009064:	4604      	mov	r4, r0
 8009066:	e7e4      	b.n	8009032 <__pow5mult+0x6a>
 8009068:	4630      	mov	r0, r6
 800906a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800906e:	bf00      	nop
 8009070:	0800b850 	.word	0x0800b850
 8009074:	0800b6be 	.word	0x0800b6be
 8009078:	0800b73e 	.word	0x0800b73e

0800907c <__lshift>:
 800907c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009080:	460c      	mov	r4, r1
 8009082:	6849      	ldr	r1, [r1, #4]
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800908a:	68a3      	ldr	r3, [r4, #8]
 800908c:	4607      	mov	r7, r0
 800908e:	4691      	mov	r9, r2
 8009090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009094:	f108 0601 	add.w	r6, r8, #1
 8009098:	42b3      	cmp	r3, r6
 800909a:	db0b      	blt.n	80090b4 <__lshift+0x38>
 800909c:	4638      	mov	r0, r7
 800909e:	f7ff fd9d 	bl	8008bdc <_Balloc>
 80090a2:	4605      	mov	r5, r0
 80090a4:	b948      	cbnz	r0, 80090ba <__lshift+0x3e>
 80090a6:	4602      	mov	r2, r0
 80090a8:	4b28      	ldr	r3, [pc, #160]	@ (800914c <__lshift+0xd0>)
 80090aa:	4829      	ldr	r0, [pc, #164]	@ (8009150 <__lshift+0xd4>)
 80090ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80090b0:	f001 faca 	bl	800a648 <__assert_func>
 80090b4:	3101      	adds	r1, #1
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	e7ee      	b.n	8009098 <__lshift+0x1c>
 80090ba:	2300      	movs	r3, #0
 80090bc:	f100 0114 	add.w	r1, r0, #20
 80090c0:	f100 0210 	add.w	r2, r0, #16
 80090c4:	4618      	mov	r0, r3
 80090c6:	4553      	cmp	r3, sl
 80090c8:	db33      	blt.n	8009132 <__lshift+0xb6>
 80090ca:	6920      	ldr	r0, [r4, #16]
 80090cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090d0:	f104 0314 	add.w	r3, r4, #20
 80090d4:	f019 091f 	ands.w	r9, r9, #31
 80090d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090e0:	d02b      	beq.n	800913a <__lshift+0xbe>
 80090e2:	f1c9 0e20 	rsb	lr, r9, #32
 80090e6:	468a      	mov	sl, r1
 80090e8:	2200      	movs	r2, #0
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	fa00 f009 	lsl.w	r0, r0, r9
 80090f0:	4310      	orrs	r0, r2
 80090f2:	f84a 0b04 	str.w	r0, [sl], #4
 80090f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fa:	459c      	cmp	ip, r3
 80090fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009100:	d8f3      	bhi.n	80090ea <__lshift+0x6e>
 8009102:	ebac 0304 	sub.w	r3, ip, r4
 8009106:	3b15      	subs	r3, #21
 8009108:	f023 0303 	bic.w	r3, r3, #3
 800910c:	3304      	adds	r3, #4
 800910e:	f104 0015 	add.w	r0, r4, #21
 8009112:	4560      	cmp	r0, ip
 8009114:	bf88      	it	hi
 8009116:	2304      	movhi	r3, #4
 8009118:	50ca      	str	r2, [r1, r3]
 800911a:	b10a      	cbz	r2, 8009120 <__lshift+0xa4>
 800911c:	f108 0602 	add.w	r6, r8, #2
 8009120:	3e01      	subs	r6, #1
 8009122:	4638      	mov	r0, r7
 8009124:	612e      	str	r6, [r5, #16]
 8009126:	4621      	mov	r1, r4
 8009128:	f7ff fd98 	bl	8008c5c <_Bfree>
 800912c:	4628      	mov	r0, r5
 800912e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009132:	f842 0f04 	str.w	r0, [r2, #4]!
 8009136:	3301      	adds	r3, #1
 8009138:	e7c5      	b.n	80090c6 <__lshift+0x4a>
 800913a:	3904      	subs	r1, #4
 800913c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009140:	f841 2f04 	str.w	r2, [r1, #4]!
 8009144:	459c      	cmp	ip, r3
 8009146:	d8f9      	bhi.n	800913c <__lshift+0xc0>
 8009148:	e7ea      	b.n	8009120 <__lshift+0xa4>
 800914a:	bf00      	nop
 800914c:	0800b72d 	.word	0x0800b72d
 8009150:	0800b73e 	.word	0x0800b73e

08009154 <__mcmp>:
 8009154:	690a      	ldr	r2, [r1, #16]
 8009156:	4603      	mov	r3, r0
 8009158:	6900      	ldr	r0, [r0, #16]
 800915a:	1a80      	subs	r0, r0, r2
 800915c:	b530      	push	{r4, r5, lr}
 800915e:	d10e      	bne.n	800917e <__mcmp+0x2a>
 8009160:	3314      	adds	r3, #20
 8009162:	3114      	adds	r1, #20
 8009164:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009168:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800916c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009170:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009174:	4295      	cmp	r5, r2
 8009176:	d003      	beq.n	8009180 <__mcmp+0x2c>
 8009178:	d205      	bcs.n	8009186 <__mcmp+0x32>
 800917a:	f04f 30ff 	mov.w	r0, #4294967295
 800917e:	bd30      	pop	{r4, r5, pc}
 8009180:	42a3      	cmp	r3, r4
 8009182:	d3f3      	bcc.n	800916c <__mcmp+0x18>
 8009184:	e7fb      	b.n	800917e <__mcmp+0x2a>
 8009186:	2001      	movs	r0, #1
 8009188:	e7f9      	b.n	800917e <__mcmp+0x2a>
	...

0800918c <__mdiff>:
 800918c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009190:	4689      	mov	r9, r1
 8009192:	4606      	mov	r6, r0
 8009194:	4611      	mov	r1, r2
 8009196:	4648      	mov	r0, r9
 8009198:	4614      	mov	r4, r2
 800919a:	f7ff ffdb 	bl	8009154 <__mcmp>
 800919e:	1e05      	subs	r5, r0, #0
 80091a0:	d112      	bne.n	80091c8 <__mdiff+0x3c>
 80091a2:	4629      	mov	r1, r5
 80091a4:	4630      	mov	r0, r6
 80091a6:	f7ff fd19 	bl	8008bdc <_Balloc>
 80091aa:	4602      	mov	r2, r0
 80091ac:	b928      	cbnz	r0, 80091ba <__mdiff+0x2e>
 80091ae:	4b3f      	ldr	r3, [pc, #252]	@ (80092ac <__mdiff+0x120>)
 80091b0:	f240 2137 	movw	r1, #567	@ 0x237
 80091b4:	483e      	ldr	r0, [pc, #248]	@ (80092b0 <__mdiff+0x124>)
 80091b6:	f001 fa47 	bl	800a648 <__assert_func>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091c0:	4610      	mov	r0, r2
 80091c2:	b003      	add	sp, #12
 80091c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c8:	bfbc      	itt	lt
 80091ca:	464b      	movlt	r3, r9
 80091cc:	46a1      	movlt	r9, r4
 80091ce:	4630      	mov	r0, r6
 80091d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80091d4:	bfba      	itte	lt
 80091d6:	461c      	movlt	r4, r3
 80091d8:	2501      	movlt	r5, #1
 80091da:	2500      	movge	r5, #0
 80091dc:	f7ff fcfe 	bl	8008bdc <_Balloc>
 80091e0:	4602      	mov	r2, r0
 80091e2:	b918      	cbnz	r0, 80091ec <__mdiff+0x60>
 80091e4:	4b31      	ldr	r3, [pc, #196]	@ (80092ac <__mdiff+0x120>)
 80091e6:	f240 2145 	movw	r1, #581	@ 0x245
 80091ea:	e7e3      	b.n	80091b4 <__mdiff+0x28>
 80091ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091f0:	6926      	ldr	r6, [r4, #16]
 80091f2:	60c5      	str	r5, [r0, #12]
 80091f4:	f109 0310 	add.w	r3, r9, #16
 80091f8:	f109 0514 	add.w	r5, r9, #20
 80091fc:	f104 0e14 	add.w	lr, r4, #20
 8009200:	f100 0b14 	add.w	fp, r0, #20
 8009204:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009208:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800920c:	9301      	str	r3, [sp, #4]
 800920e:	46d9      	mov	r9, fp
 8009210:	f04f 0c00 	mov.w	ip, #0
 8009214:	9b01      	ldr	r3, [sp, #4]
 8009216:	f85e 0b04 	ldr.w	r0, [lr], #4
 800921a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	fa1f f38a 	uxth.w	r3, sl
 8009224:	4619      	mov	r1, r3
 8009226:	b283      	uxth	r3, r0
 8009228:	1acb      	subs	r3, r1, r3
 800922a:	0c00      	lsrs	r0, r0, #16
 800922c:	4463      	add	r3, ip
 800922e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009232:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009236:	b29b      	uxth	r3, r3
 8009238:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800923c:	4576      	cmp	r6, lr
 800923e:	f849 3b04 	str.w	r3, [r9], #4
 8009242:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009246:	d8e5      	bhi.n	8009214 <__mdiff+0x88>
 8009248:	1b33      	subs	r3, r6, r4
 800924a:	3b15      	subs	r3, #21
 800924c:	f023 0303 	bic.w	r3, r3, #3
 8009250:	3415      	adds	r4, #21
 8009252:	3304      	adds	r3, #4
 8009254:	42a6      	cmp	r6, r4
 8009256:	bf38      	it	cc
 8009258:	2304      	movcc	r3, #4
 800925a:	441d      	add	r5, r3
 800925c:	445b      	add	r3, fp
 800925e:	461e      	mov	r6, r3
 8009260:	462c      	mov	r4, r5
 8009262:	4544      	cmp	r4, r8
 8009264:	d30e      	bcc.n	8009284 <__mdiff+0xf8>
 8009266:	f108 0103 	add.w	r1, r8, #3
 800926a:	1b49      	subs	r1, r1, r5
 800926c:	f021 0103 	bic.w	r1, r1, #3
 8009270:	3d03      	subs	r5, #3
 8009272:	45a8      	cmp	r8, r5
 8009274:	bf38      	it	cc
 8009276:	2100      	movcc	r1, #0
 8009278:	440b      	add	r3, r1
 800927a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800927e:	b191      	cbz	r1, 80092a6 <__mdiff+0x11a>
 8009280:	6117      	str	r7, [r2, #16]
 8009282:	e79d      	b.n	80091c0 <__mdiff+0x34>
 8009284:	f854 1b04 	ldr.w	r1, [r4], #4
 8009288:	46e6      	mov	lr, ip
 800928a:	0c08      	lsrs	r0, r1, #16
 800928c:	fa1c fc81 	uxtah	ip, ip, r1
 8009290:	4471      	add	r1, lr
 8009292:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009296:	b289      	uxth	r1, r1
 8009298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800929c:	f846 1b04 	str.w	r1, [r6], #4
 80092a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092a4:	e7dd      	b.n	8009262 <__mdiff+0xd6>
 80092a6:	3f01      	subs	r7, #1
 80092a8:	e7e7      	b.n	800927a <__mdiff+0xee>
 80092aa:	bf00      	nop
 80092ac:	0800b72d 	.word	0x0800b72d
 80092b0:	0800b73e 	.word	0x0800b73e

080092b4 <__ulp>:
 80092b4:	b082      	sub	sp, #8
 80092b6:	ed8d 0b00 	vstr	d0, [sp]
 80092ba:	9a01      	ldr	r2, [sp, #4]
 80092bc:	4b0f      	ldr	r3, [pc, #60]	@ (80092fc <__ulp+0x48>)
 80092be:	4013      	ands	r3, r2
 80092c0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	dc08      	bgt.n	80092da <__ulp+0x26>
 80092c8:	425b      	negs	r3, r3
 80092ca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80092ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 80092d2:	da04      	bge.n	80092de <__ulp+0x2a>
 80092d4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80092d8:	4113      	asrs	r3, r2
 80092da:	2200      	movs	r2, #0
 80092dc:	e008      	b.n	80092f0 <__ulp+0x3c>
 80092de:	f1a2 0314 	sub.w	r3, r2, #20
 80092e2:	2b1e      	cmp	r3, #30
 80092e4:	bfda      	itte	le
 80092e6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80092ea:	40da      	lsrle	r2, r3
 80092ec:	2201      	movgt	r2, #1
 80092ee:	2300      	movs	r3, #0
 80092f0:	4619      	mov	r1, r3
 80092f2:	4610      	mov	r0, r2
 80092f4:	ec41 0b10 	vmov	d0, r0, r1
 80092f8:	b002      	add	sp, #8
 80092fa:	4770      	bx	lr
 80092fc:	7ff00000 	.word	0x7ff00000

08009300 <__b2d>:
 8009300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009304:	6906      	ldr	r6, [r0, #16]
 8009306:	f100 0814 	add.w	r8, r0, #20
 800930a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800930e:	1f37      	subs	r7, r6, #4
 8009310:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009314:	4610      	mov	r0, r2
 8009316:	f7ff fd53 	bl	8008dc0 <__hi0bits>
 800931a:	f1c0 0320 	rsb	r3, r0, #32
 800931e:	280a      	cmp	r0, #10
 8009320:	600b      	str	r3, [r1, #0]
 8009322:	491b      	ldr	r1, [pc, #108]	@ (8009390 <__b2d+0x90>)
 8009324:	dc15      	bgt.n	8009352 <__b2d+0x52>
 8009326:	f1c0 0c0b 	rsb	ip, r0, #11
 800932a:	fa22 f30c 	lsr.w	r3, r2, ip
 800932e:	45b8      	cmp	r8, r7
 8009330:	ea43 0501 	orr.w	r5, r3, r1
 8009334:	bf34      	ite	cc
 8009336:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800933a:	2300      	movcs	r3, #0
 800933c:	3015      	adds	r0, #21
 800933e:	fa02 f000 	lsl.w	r0, r2, r0
 8009342:	fa23 f30c 	lsr.w	r3, r3, ip
 8009346:	4303      	orrs	r3, r0
 8009348:	461c      	mov	r4, r3
 800934a:	ec45 4b10 	vmov	d0, r4, r5
 800934e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009352:	45b8      	cmp	r8, r7
 8009354:	bf3a      	itte	cc
 8009356:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800935a:	f1a6 0708 	subcc.w	r7, r6, #8
 800935e:	2300      	movcs	r3, #0
 8009360:	380b      	subs	r0, #11
 8009362:	d012      	beq.n	800938a <__b2d+0x8a>
 8009364:	f1c0 0120 	rsb	r1, r0, #32
 8009368:	fa23 f401 	lsr.w	r4, r3, r1
 800936c:	4082      	lsls	r2, r0
 800936e:	4322      	orrs	r2, r4
 8009370:	4547      	cmp	r7, r8
 8009372:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009376:	bf8c      	ite	hi
 8009378:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800937c:	2200      	movls	r2, #0
 800937e:	4083      	lsls	r3, r0
 8009380:	40ca      	lsrs	r2, r1
 8009382:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009386:	4313      	orrs	r3, r2
 8009388:	e7de      	b.n	8009348 <__b2d+0x48>
 800938a:	ea42 0501 	orr.w	r5, r2, r1
 800938e:	e7db      	b.n	8009348 <__b2d+0x48>
 8009390:	3ff00000 	.word	0x3ff00000

08009394 <__d2b>:
 8009394:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009398:	460f      	mov	r7, r1
 800939a:	2101      	movs	r1, #1
 800939c:	ec59 8b10 	vmov	r8, r9, d0
 80093a0:	4616      	mov	r6, r2
 80093a2:	f7ff fc1b 	bl	8008bdc <_Balloc>
 80093a6:	4604      	mov	r4, r0
 80093a8:	b930      	cbnz	r0, 80093b8 <__d2b+0x24>
 80093aa:	4602      	mov	r2, r0
 80093ac:	4b23      	ldr	r3, [pc, #140]	@ (800943c <__d2b+0xa8>)
 80093ae:	4824      	ldr	r0, [pc, #144]	@ (8009440 <__d2b+0xac>)
 80093b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80093b4:	f001 f948 	bl	800a648 <__assert_func>
 80093b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093c0:	b10d      	cbz	r5, 80093c6 <__d2b+0x32>
 80093c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	f1b8 0300 	subs.w	r3, r8, #0
 80093cc:	d023      	beq.n	8009416 <__d2b+0x82>
 80093ce:	4668      	mov	r0, sp
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	f7ff fd14 	bl	8008dfe <__lo0bits>
 80093d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093da:	b1d0      	cbz	r0, 8009412 <__d2b+0x7e>
 80093dc:	f1c0 0320 	rsb	r3, r0, #32
 80093e0:	fa02 f303 	lsl.w	r3, r2, r3
 80093e4:	430b      	orrs	r3, r1
 80093e6:	40c2      	lsrs	r2, r0
 80093e8:	6163      	str	r3, [r4, #20]
 80093ea:	9201      	str	r2, [sp, #4]
 80093ec:	9b01      	ldr	r3, [sp, #4]
 80093ee:	61a3      	str	r3, [r4, #24]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	bf0c      	ite	eq
 80093f4:	2201      	moveq	r2, #1
 80093f6:	2202      	movne	r2, #2
 80093f8:	6122      	str	r2, [r4, #16]
 80093fa:	b1a5      	cbz	r5, 8009426 <__d2b+0x92>
 80093fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009400:	4405      	add	r5, r0
 8009402:	603d      	str	r5, [r7, #0]
 8009404:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009408:	6030      	str	r0, [r6, #0]
 800940a:	4620      	mov	r0, r4
 800940c:	b003      	add	sp, #12
 800940e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009412:	6161      	str	r1, [r4, #20]
 8009414:	e7ea      	b.n	80093ec <__d2b+0x58>
 8009416:	a801      	add	r0, sp, #4
 8009418:	f7ff fcf1 	bl	8008dfe <__lo0bits>
 800941c:	9b01      	ldr	r3, [sp, #4]
 800941e:	6163      	str	r3, [r4, #20]
 8009420:	3020      	adds	r0, #32
 8009422:	2201      	movs	r2, #1
 8009424:	e7e8      	b.n	80093f8 <__d2b+0x64>
 8009426:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800942a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800942e:	6038      	str	r0, [r7, #0]
 8009430:	6918      	ldr	r0, [r3, #16]
 8009432:	f7ff fcc5 	bl	8008dc0 <__hi0bits>
 8009436:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800943a:	e7e5      	b.n	8009408 <__d2b+0x74>
 800943c:	0800b72d 	.word	0x0800b72d
 8009440:	0800b73e 	.word	0x0800b73e

08009444 <__ratio>:
 8009444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	4688      	mov	r8, r1
 800944a:	4669      	mov	r1, sp
 800944c:	4681      	mov	r9, r0
 800944e:	f7ff ff57 	bl	8009300 <__b2d>
 8009452:	a901      	add	r1, sp, #4
 8009454:	4640      	mov	r0, r8
 8009456:	ec55 4b10 	vmov	r4, r5, d0
 800945a:	f7ff ff51 	bl	8009300 <__b2d>
 800945e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009462:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8009466:	1ad2      	subs	r2, r2, r3
 8009468:	e9dd 3100 	ldrd	r3, r1, [sp]
 800946c:	1a5b      	subs	r3, r3, r1
 800946e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8009472:	ec57 6b10 	vmov	r6, r7, d0
 8009476:	2b00      	cmp	r3, #0
 8009478:	bfd6      	itet	le
 800947a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800947e:	462a      	movgt	r2, r5
 8009480:	463a      	movle	r2, r7
 8009482:	46ab      	mov	fp, r5
 8009484:	46a2      	mov	sl, r4
 8009486:	bfce      	itee	gt
 8009488:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800948c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8009490:	ee00 3a90 	vmovle	s1, r3
 8009494:	ec4b ab17 	vmov	d7, sl, fp
 8009498:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800949c:	b003      	add	sp, #12
 800949e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094a2 <__copybits>:
 80094a2:	3901      	subs	r1, #1
 80094a4:	b570      	push	{r4, r5, r6, lr}
 80094a6:	1149      	asrs	r1, r1, #5
 80094a8:	6914      	ldr	r4, [r2, #16]
 80094aa:	3101      	adds	r1, #1
 80094ac:	f102 0314 	add.w	r3, r2, #20
 80094b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80094b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80094b8:	1f05      	subs	r5, r0, #4
 80094ba:	42a3      	cmp	r3, r4
 80094bc:	d30c      	bcc.n	80094d8 <__copybits+0x36>
 80094be:	1aa3      	subs	r3, r4, r2
 80094c0:	3b11      	subs	r3, #17
 80094c2:	f023 0303 	bic.w	r3, r3, #3
 80094c6:	3211      	adds	r2, #17
 80094c8:	42a2      	cmp	r2, r4
 80094ca:	bf88      	it	hi
 80094cc:	2300      	movhi	r3, #0
 80094ce:	4418      	add	r0, r3
 80094d0:	2300      	movs	r3, #0
 80094d2:	4288      	cmp	r0, r1
 80094d4:	d305      	bcc.n	80094e2 <__copybits+0x40>
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	f853 6b04 	ldr.w	r6, [r3], #4
 80094dc:	f845 6f04 	str.w	r6, [r5, #4]!
 80094e0:	e7eb      	b.n	80094ba <__copybits+0x18>
 80094e2:	f840 3b04 	str.w	r3, [r0], #4
 80094e6:	e7f4      	b.n	80094d2 <__copybits+0x30>

080094e8 <__any_on>:
 80094e8:	f100 0214 	add.w	r2, r0, #20
 80094ec:	6900      	ldr	r0, [r0, #16]
 80094ee:	114b      	asrs	r3, r1, #5
 80094f0:	4298      	cmp	r0, r3
 80094f2:	b510      	push	{r4, lr}
 80094f4:	db11      	blt.n	800951a <__any_on+0x32>
 80094f6:	dd0a      	ble.n	800950e <__any_on+0x26>
 80094f8:	f011 011f 	ands.w	r1, r1, #31
 80094fc:	d007      	beq.n	800950e <__any_on+0x26>
 80094fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009502:	fa24 f001 	lsr.w	r0, r4, r1
 8009506:	fa00 f101 	lsl.w	r1, r0, r1
 800950a:	428c      	cmp	r4, r1
 800950c:	d10b      	bne.n	8009526 <__any_on+0x3e>
 800950e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009512:	4293      	cmp	r3, r2
 8009514:	d803      	bhi.n	800951e <__any_on+0x36>
 8009516:	2000      	movs	r0, #0
 8009518:	bd10      	pop	{r4, pc}
 800951a:	4603      	mov	r3, r0
 800951c:	e7f7      	b.n	800950e <__any_on+0x26>
 800951e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009522:	2900      	cmp	r1, #0
 8009524:	d0f5      	beq.n	8009512 <__any_on+0x2a>
 8009526:	2001      	movs	r0, #1
 8009528:	e7f6      	b.n	8009518 <__any_on+0x30>

0800952a <sulp>:
 800952a:	b570      	push	{r4, r5, r6, lr}
 800952c:	4604      	mov	r4, r0
 800952e:	460d      	mov	r5, r1
 8009530:	4616      	mov	r6, r2
 8009532:	ec45 4b10 	vmov	d0, r4, r5
 8009536:	f7ff febd 	bl	80092b4 <__ulp>
 800953a:	b17e      	cbz	r6, 800955c <sulp+0x32>
 800953c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009540:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009544:	2b00      	cmp	r3, #0
 8009546:	dd09      	ble.n	800955c <sulp+0x32>
 8009548:	051b      	lsls	r3, r3, #20
 800954a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800954e:	2000      	movs	r0, #0
 8009550:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8009554:	ec41 0b17 	vmov	d7, r0, r1
 8009558:	ee20 0b07 	vmul.f64	d0, d0, d7
 800955c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009560 <_strtod_l>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	ed2d 8b0a 	vpush	{d8-d12}
 8009568:	b097      	sub	sp, #92	@ 0x5c
 800956a:	4688      	mov	r8, r1
 800956c:	920e      	str	r2, [sp, #56]	@ 0x38
 800956e:	2200      	movs	r2, #0
 8009570:	9212      	str	r2, [sp, #72]	@ 0x48
 8009572:	9005      	str	r0, [sp, #20]
 8009574:	f04f 0a00 	mov.w	sl, #0
 8009578:	f04f 0b00 	mov.w	fp, #0
 800957c:	460a      	mov	r2, r1
 800957e:	9211      	str	r2, [sp, #68]	@ 0x44
 8009580:	7811      	ldrb	r1, [r2, #0]
 8009582:	292b      	cmp	r1, #43	@ 0x2b
 8009584:	d04c      	beq.n	8009620 <_strtod_l+0xc0>
 8009586:	d839      	bhi.n	80095fc <_strtod_l+0x9c>
 8009588:	290d      	cmp	r1, #13
 800958a:	d833      	bhi.n	80095f4 <_strtod_l+0x94>
 800958c:	2908      	cmp	r1, #8
 800958e:	d833      	bhi.n	80095f8 <_strtod_l+0x98>
 8009590:	2900      	cmp	r1, #0
 8009592:	d03c      	beq.n	800960e <_strtod_l+0xae>
 8009594:	2200      	movs	r2, #0
 8009596:	9208      	str	r2, [sp, #32]
 8009598:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800959a:	782a      	ldrb	r2, [r5, #0]
 800959c:	2a30      	cmp	r2, #48	@ 0x30
 800959e:	f040 80b7 	bne.w	8009710 <_strtod_l+0x1b0>
 80095a2:	786a      	ldrb	r2, [r5, #1]
 80095a4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80095a8:	2a58      	cmp	r2, #88	@ 0x58
 80095aa:	d170      	bne.n	800968e <_strtod_l+0x12e>
 80095ac:	9302      	str	r3, [sp, #8]
 80095ae:	9b08      	ldr	r3, [sp, #32]
 80095b0:	9301      	str	r3, [sp, #4]
 80095b2:	ab12      	add	r3, sp, #72	@ 0x48
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	4a90      	ldr	r2, [pc, #576]	@ (80097f8 <_strtod_l+0x298>)
 80095b8:	9805      	ldr	r0, [sp, #20]
 80095ba:	ab13      	add	r3, sp, #76	@ 0x4c
 80095bc:	a911      	add	r1, sp, #68	@ 0x44
 80095be:	f001 f8dd 	bl	800a77c <__gethex>
 80095c2:	f010 060f 	ands.w	r6, r0, #15
 80095c6:	4604      	mov	r4, r0
 80095c8:	d005      	beq.n	80095d6 <_strtod_l+0x76>
 80095ca:	2e06      	cmp	r6, #6
 80095cc:	d12a      	bne.n	8009624 <_strtod_l+0xc4>
 80095ce:	3501      	adds	r5, #1
 80095d0:	2300      	movs	r3, #0
 80095d2:	9511      	str	r5, [sp, #68]	@ 0x44
 80095d4:	9308      	str	r3, [sp, #32]
 80095d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f040 8537 	bne.w	800a04c <_strtod_l+0xaec>
 80095de:	9b08      	ldr	r3, [sp, #32]
 80095e0:	ec4b ab10 	vmov	d0, sl, fp
 80095e4:	b1cb      	cbz	r3, 800961a <_strtod_l+0xba>
 80095e6:	eeb1 0b40 	vneg.f64	d0, d0
 80095ea:	b017      	add	sp, #92	@ 0x5c
 80095ec:	ecbd 8b0a 	vpop	{d8-d12}
 80095f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f4:	2920      	cmp	r1, #32
 80095f6:	d1cd      	bne.n	8009594 <_strtod_l+0x34>
 80095f8:	3201      	adds	r2, #1
 80095fa:	e7c0      	b.n	800957e <_strtod_l+0x1e>
 80095fc:	292d      	cmp	r1, #45	@ 0x2d
 80095fe:	d1c9      	bne.n	8009594 <_strtod_l+0x34>
 8009600:	2101      	movs	r1, #1
 8009602:	9108      	str	r1, [sp, #32]
 8009604:	1c51      	adds	r1, r2, #1
 8009606:	9111      	str	r1, [sp, #68]	@ 0x44
 8009608:	7852      	ldrb	r2, [r2, #1]
 800960a:	2a00      	cmp	r2, #0
 800960c:	d1c4      	bne.n	8009598 <_strtod_l+0x38>
 800960e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009610:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8009614:	2b00      	cmp	r3, #0
 8009616:	f040 8517 	bne.w	800a048 <_strtod_l+0xae8>
 800961a:	ec4b ab10 	vmov	d0, sl, fp
 800961e:	e7e4      	b.n	80095ea <_strtod_l+0x8a>
 8009620:	2100      	movs	r1, #0
 8009622:	e7ee      	b.n	8009602 <_strtod_l+0xa2>
 8009624:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009626:	b13a      	cbz	r2, 8009638 <_strtod_l+0xd8>
 8009628:	2135      	movs	r1, #53	@ 0x35
 800962a:	a814      	add	r0, sp, #80	@ 0x50
 800962c:	f7ff ff39 	bl	80094a2 <__copybits>
 8009630:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009632:	9805      	ldr	r0, [sp, #20]
 8009634:	f7ff fb12 	bl	8008c5c <_Bfree>
 8009638:	1e73      	subs	r3, r6, #1
 800963a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800963c:	2b04      	cmp	r3, #4
 800963e:	d806      	bhi.n	800964e <_strtod_l+0xee>
 8009640:	e8df f003 	tbb	[pc, r3]
 8009644:	201d0314 	.word	0x201d0314
 8009648:	14          	.byte	0x14
 8009649:	00          	.byte	0x00
 800964a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800964e:	05e3      	lsls	r3, r4, #23
 8009650:	bf48      	it	mi
 8009652:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009656:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800965a:	0d1b      	lsrs	r3, r3, #20
 800965c:	051b      	lsls	r3, r3, #20
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1b9      	bne.n	80095d6 <_strtod_l+0x76>
 8009662:	f7fe fb9f 	bl	8007da4 <__errno>
 8009666:	2322      	movs	r3, #34	@ 0x22
 8009668:	6003      	str	r3, [r0, #0]
 800966a:	e7b4      	b.n	80095d6 <_strtod_l+0x76>
 800966c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8009670:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009674:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009678:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800967c:	e7e7      	b.n	800964e <_strtod_l+0xee>
 800967e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009800 <_strtod_l+0x2a0>
 8009682:	e7e4      	b.n	800964e <_strtod_l+0xee>
 8009684:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009688:	f04f 3aff 	mov.w	sl, #4294967295
 800968c:	e7df      	b.n	800964e <_strtod_l+0xee>
 800968e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	9211      	str	r2, [sp, #68]	@ 0x44
 8009694:	785b      	ldrb	r3, [r3, #1]
 8009696:	2b30      	cmp	r3, #48	@ 0x30
 8009698:	d0f9      	beq.n	800968e <_strtod_l+0x12e>
 800969a:	2b00      	cmp	r3, #0
 800969c:	d09b      	beq.n	80095d6 <_strtod_l+0x76>
 800969e:	2301      	movs	r3, #1
 80096a0:	9307      	str	r3, [sp, #28]
 80096a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80096a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80096a6:	2300      	movs	r3, #0
 80096a8:	9306      	str	r3, [sp, #24]
 80096aa:	4699      	mov	r9, r3
 80096ac:	461d      	mov	r5, r3
 80096ae:	220a      	movs	r2, #10
 80096b0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80096b2:	7804      	ldrb	r4, [r0, #0]
 80096b4:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80096b8:	b2d9      	uxtb	r1, r3
 80096ba:	2909      	cmp	r1, #9
 80096bc:	d92a      	bls.n	8009714 <_strtod_l+0x1b4>
 80096be:	494f      	ldr	r1, [pc, #316]	@ (80097fc <_strtod_l+0x29c>)
 80096c0:	2201      	movs	r2, #1
 80096c2:	f000 ff87 	bl	800a5d4 <strncmp>
 80096c6:	b398      	cbz	r0, 8009730 <_strtod_l+0x1d0>
 80096c8:	2000      	movs	r0, #0
 80096ca:	4622      	mov	r2, r4
 80096cc:	462b      	mov	r3, r5
 80096ce:	4607      	mov	r7, r0
 80096d0:	4601      	mov	r1, r0
 80096d2:	2a65      	cmp	r2, #101	@ 0x65
 80096d4:	d001      	beq.n	80096da <_strtod_l+0x17a>
 80096d6:	2a45      	cmp	r2, #69	@ 0x45
 80096d8:	d118      	bne.n	800970c <_strtod_l+0x1ac>
 80096da:	b91b      	cbnz	r3, 80096e4 <_strtod_l+0x184>
 80096dc:	9b07      	ldr	r3, [sp, #28]
 80096de:	4303      	orrs	r3, r0
 80096e0:	d095      	beq.n	800960e <_strtod_l+0xae>
 80096e2:	2300      	movs	r3, #0
 80096e4:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80096e8:	f108 0201 	add.w	r2, r8, #1
 80096ec:	9211      	str	r2, [sp, #68]	@ 0x44
 80096ee:	f898 2001 	ldrb.w	r2, [r8, #1]
 80096f2:	2a2b      	cmp	r2, #43	@ 0x2b
 80096f4:	d074      	beq.n	80097e0 <_strtod_l+0x280>
 80096f6:	2a2d      	cmp	r2, #45	@ 0x2d
 80096f8:	d07a      	beq.n	80097f0 <_strtod_l+0x290>
 80096fa:	f04f 0e00 	mov.w	lr, #0
 80096fe:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8009702:	2c09      	cmp	r4, #9
 8009704:	f240 8082 	bls.w	800980c <_strtod_l+0x2ac>
 8009708:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800970c:	2400      	movs	r4, #0
 800970e:	e09d      	b.n	800984c <_strtod_l+0x2ec>
 8009710:	2300      	movs	r3, #0
 8009712:	e7c5      	b.n	80096a0 <_strtod_l+0x140>
 8009714:	2d08      	cmp	r5, #8
 8009716:	bfc8      	it	gt
 8009718:	9906      	ldrgt	r1, [sp, #24]
 800971a:	f100 0001 	add.w	r0, r0, #1
 800971e:	bfca      	itet	gt
 8009720:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009724:	fb02 3909 	mlale	r9, r2, r9, r3
 8009728:	9306      	strgt	r3, [sp, #24]
 800972a:	3501      	adds	r5, #1
 800972c:	9011      	str	r0, [sp, #68]	@ 0x44
 800972e:	e7bf      	b.n	80096b0 <_strtod_l+0x150>
 8009730:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	9211      	str	r2, [sp, #68]	@ 0x44
 8009736:	785a      	ldrb	r2, [r3, #1]
 8009738:	b3bd      	cbz	r5, 80097aa <_strtod_l+0x24a>
 800973a:	4607      	mov	r7, r0
 800973c:	462b      	mov	r3, r5
 800973e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009742:	2909      	cmp	r1, #9
 8009744:	d912      	bls.n	800976c <_strtod_l+0x20c>
 8009746:	2101      	movs	r1, #1
 8009748:	e7c3      	b.n	80096d2 <_strtod_l+0x172>
 800974a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800974c:	1c5a      	adds	r2, r3, #1
 800974e:	9211      	str	r2, [sp, #68]	@ 0x44
 8009750:	785a      	ldrb	r2, [r3, #1]
 8009752:	3001      	adds	r0, #1
 8009754:	2a30      	cmp	r2, #48	@ 0x30
 8009756:	d0f8      	beq.n	800974a <_strtod_l+0x1ea>
 8009758:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800975c:	2b08      	cmp	r3, #8
 800975e:	f200 847a 	bhi.w	800a056 <_strtod_l+0xaf6>
 8009762:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009764:	930a      	str	r3, [sp, #40]	@ 0x28
 8009766:	4607      	mov	r7, r0
 8009768:	2000      	movs	r0, #0
 800976a:	4603      	mov	r3, r0
 800976c:	3a30      	subs	r2, #48	@ 0x30
 800976e:	f100 0101 	add.w	r1, r0, #1
 8009772:	d014      	beq.n	800979e <_strtod_l+0x23e>
 8009774:	440f      	add	r7, r1
 8009776:	469c      	mov	ip, r3
 8009778:	f04f 0e0a 	mov.w	lr, #10
 800977c:	f10c 0401 	add.w	r4, ip, #1
 8009780:	1ae6      	subs	r6, r4, r3
 8009782:	42b1      	cmp	r1, r6
 8009784:	dc13      	bgt.n	80097ae <_strtod_l+0x24e>
 8009786:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800978a:	1819      	adds	r1, r3, r0
 800978c:	2908      	cmp	r1, #8
 800978e:	f103 0301 	add.w	r3, r3, #1
 8009792:	4403      	add	r3, r0
 8009794:	dc19      	bgt.n	80097ca <_strtod_l+0x26a>
 8009796:	210a      	movs	r1, #10
 8009798:	fb01 2909 	mla	r9, r1, r9, r2
 800979c:	2100      	movs	r1, #0
 800979e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80097a0:	1c50      	adds	r0, r2, #1
 80097a2:	9011      	str	r0, [sp, #68]	@ 0x44
 80097a4:	7852      	ldrb	r2, [r2, #1]
 80097a6:	4608      	mov	r0, r1
 80097a8:	e7c9      	b.n	800973e <_strtod_l+0x1de>
 80097aa:	4628      	mov	r0, r5
 80097ac:	e7d2      	b.n	8009754 <_strtod_l+0x1f4>
 80097ae:	f1bc 0f08 	cmp.w	ip, #8
 80097b2:	dc03      	bgt.n	80097bc <_strtod_l+0x25c>
 80097b4:	fb0e f909 	mul.w	r9, lr, r9
 80097b8:	46a4      	mov	ip, r4
 80097ba:	e7df      	b.n	800977c <_strtod_l+0x21c>
 80097bc:	2c10      	cmp	r4, #16
 80097be:	bfde      	ittt	le
 80097c0:	9e06      	ldrle	r6, [sp, #24]
 80097c2:	fb0e f606 	mulle.w	r6, lr, r6
 80097c6:	9606      	strle	r6, [sp, #24]
 80097c8:	e7f6      	b.n	80097b8 <_strtod_l+0x258>
 80097ca:	290f      	cmp	r1, #15
 80097cc:	bfdf      	itttt	le
 80097ce:	9806      	ldrle	r0, [sp, #24]
 80097d0:	210a      	movle	r1, #10
 80097d2:	fb01 2200 	mlale	r2, r1, r0, r2
 80097d6:	9206      	strle	r2, [sp, #24]
 80097d8:	e7e0      	b.n	800979c <_strtod_l+0x23c>
 80097da:	2700      	movs	r7, #0
 80097dc:	2101      	movs	r1, #1
 80097de:	e77d      	b.n	80096dc <_strtod_l+0x17c>
 80097e0:	f04f 0e00 	mov.w	lr, #0
 80097e4:	f108 0202 	add.w	r2, r8, #2
 80097e8:	9211      	str	r2, [sp, #68]	@ 0x44
 80097ea:	f898 2002 	ldrb.w	r2, [r8, #2]
 80097ee:	e786      	b.n	80096fe <_strtod_l+0x19e>
 80097f0:	f04f 0e01 	mov.w	lr, #1
 80097f4:	e7f6      	b.n	80097e4 <_strtod_l+0x284>
 80097f6:	bf00      	nop
 80097f8:	0800b964 	.word	0x0800b964
 80097fc:	0800b797 	.word	0x0800b797
 8009800:	7ff00000 	.word	0x7ff00000
 8009804:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009806:	1c54      	adds	r4, r2, #1
 8009808:	9411      	str	r4, [sp, #68]	@ 0x44
 800980a:	7852      	ldrb	r2, [r2, #1]
 800980c:	2a30      	cmp	r2, #48	@ 0x30
 800980e:	d0f9      	beq.n	8009804 <_strtod_l+0x2a4>
 8009810:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8009814:	2c08      	cmp	r4, #8
 8009816:	f63f af79 	bhi.w	800970c <_strtod_l+0x1ac>
 800981a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800981e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009820:	9209      	str	r2, [sp, #36]	@ 0x24
 8009822:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009824:	1c54      	adds	r4, r2, #1
 8009826:	9411      	str	r4, [sp, #68]	@ 0x44
 8009828:	7852      	ldrb	r2, [r2, #1]
 800982a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800982e:	2e09      	cmp	r6, #9
 8009830:	d937      	bls.n	80098a2 <_strtod_l+0x342>
 8009832:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009834:	1ba4      	subs	r4, r4, r6
 8009836:	2c08      	cmp	r4, #8
 8009838:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800983c:	dc02      	bgt.n	8009844 <_strtod_l+0x2e4>
 800983e:	4564      	cmp	r4, ip
 8009840:	bfa8      	it	ge
 8009842:	4664      	movge	r4, ip
 8009844:	f1be 0f00 	cmp.w	lr, #0
 8009848:	d000      	beq.n	800984c <_strtod_l+0x2ec>
 800984a:	4264      	negs	r4, r4
 800984c:	2b00      	cmp	r3, #0
 800984e:	d14d      	bne.n	80098ec <_strtod_l+0x38c>
 8009850:	9b07      	ldr	r3, [sp, #28]
 8009852:	4318      	orrs	r0, r3
 8009854:	f47f aebf 	bne.w	80095d6 <_strtod_l+0x76>
 8009858:	2900      	cmp	r1, #0
 800985a:	f47f aed8 	bne.w	800960e <_strtod_l+0xae>
 800985e:	2a69      	cmp	r2, #105	@ 0x69
 8009860:	d027      	beq.n	80098b2 <_strtod_l+0x352>
 8009862:	dc24      	bgt.n	80098ae <_strtod_l+0x34e>
 8009864:	2a49      	cmp	r2, #73	@ 0x49
 8009866:	d024      	beq.n	80098b2 <_strtod_l+0x352>
 8009868:	2a4e      	cmp	r2, #78	@ 0x4e
 800986a:	f47f aed0 	bne.w	800960e <_strtod_l+0xae>
 800986e:	4997      	ldr	r1, [pc, #604]	@ (8009acc <_strtod_l+0x56c>)
 8009870:	a811      	add	r0, sp, #68	@ 0x44
 8009872:	f001 f9a5 	bl	800abc0 <__match>
 8009876:	2800      	cmp	r0, #0
 8009878:	f43f aec9 	beq.w	800960e <_strtod_l+0xae>
 800987c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b28      	cmp	r3, #40	@ 0x28
 8009882:	d12d      	bne.n	80098e0 <_strtod_l+0x380>
 8009884:	4992      	ldr	r1, [pc, #584]	@ (8009ad0 <_strtod_l+0x570>)
 8009886:	aa14      	add	r2, sp, #80	@ 0x50
 8009888:	a811      	add	r0, sp, #68	@ 0x44
 800988a:	f001 f9ad 	bl	800abe8 <__hexnan>
 800988e:	2805      	cmp	r0, #5
 8009890:	d126      	bne.n	80098e0 <_strtod_l+0x380>
 8009892:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009894:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8009898:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800989c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80098a0:	e699      	b.n	80095d6 <_strtod_l+0x76>
 80098a2:	240a      	movs	r4, #10
 80098a4:	fb04 2c0c 	mla	ip, r4, ip, r2
 80098a8:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80098ac:	e7b9      	b.n	8009822 <_strtod_l+0x2c2>
 80098ae:	2a6e      	cmp	r2, #110	@ 0x6e
 80098b0:	e7db      	b.n	800986a <_strtod_l+0x30a>
 80098b2:	4988      	ldr	r1, [pc, #544]	@ (8009ad4 <_strtod_l+0x574>)
 80098b4:	a811      	add	r0, sp, #68	@ 0x44
 80098b6:	f001 f983 	bl	800abc0 <__match>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	f43f aea7 	beq.w	800960e <_strtod_l+0xae>
 80098c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80098c2:	4985      	ldr	r1, [pc, #532]	@ (8009ad8 <_strtod_l+0x578>)
 80098c4:	3b01      	subs	r3, #1
 80098c6:	a811      	add	r0, sp, #68	@ 0x44
 80098c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80098ca:	f001 f979 	bl	800abc0 <__match>
 80098ce:	b910      	cbnz	r0, 80098d6 <_strtod_l+0x376>
 80098d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80098d2:	3301      	adds	r3, #1
 80098d4:	9311      	str	r3, [sp, #68]	@ 0x44
 80098d6:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8009aec <_strtod_l+0x58c>
 80098da:	f04f 0a00 	mov.w	sl, #0
 80098de:	e67a      	b.n	80095d6 <_strtod_l+0x76>
 80098e0:	487e      	ldr	r0, [pc, #504]	@ (8009adc <_strtod_l+0x57c>)
 80098e2:	f000 fea9 	bl	800a638 <nan>
 80098e6:	ec5b ab10 	vmov	sl, fp, d0
 80098ea:	e674      	b.n	80095d6 <_strtod_l+0x76>
 80098ec:	ee07 9a90 	vmov	s15, r9
 80098f0:	1be2      	subs	r2, r4, r7
 80098f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80098f6:	2d00      	cmp	r5, #0
 80098f8:	bf08      	it	eq
 80098fa:	461d      	moveq	r5, r3
 80098fc:	2b10      	cmp	r3, #16
 80098fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8009900:	461a      	mov	r2, r3
 8009902:	bfa8      	it	ge
 8009904:	2210      	movge	r2, #16
 8009906:	2b09      	cmp	r3, #9
 8009908:	ec5b ab17 	vmov	sl, fp, d7
 800990c:	dc15      	bgt.n	800993a <_strtod_l+0x3da>
 800990e:	1be1      	subs	r1, r4, r7
 8009910:	2900      	cmp	r1, #0
 8009912:	f43f ae60 	beq.w	80095d6 <_strtod_l+0x76>
 8009916:	eba4 0107 	sub.w	r1, r4, r7
 800991a:	dd72      	ble.n	8009a02 <_strtod_l+0x4a2>
 800991c:	2916      	cmp	r1, #22
 800991e:	dc59      	bgt.n	80099d4 <_strtod_l+0x474>
 8009920:	4b6f      	ldr	r3, [pc, #444]	@ (8009ae0 <_strtod_l+0x580>)
 8009922:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009924:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009928:	ed93 7b00 	vldr	d7, [r3]
 800992c:	ec4b ab16 	vmov	d6, sl, fp
 8009930:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009934:	ec5b ab17 	vmov	sl, fp, d7
 8009938:	e64d      	b.n	80095d6 <_strtod_l+0x76>
 800993a:	4969      	ldr	r1, [pc, #420]	@ (8009ae0 <_strtod_l+0x580>)
 800993c:	eddd 6a06 	vldr	s13, [sp, #24]
 8009940:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009944:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8009948:	2b0f      	cmp	r3, #15
 800994a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800994e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009952:	ec5b ab16 	vmov	sl, fp, d6
 8009956:	ddda      	ble.n	800990e <_strtod_l+0x3ae>
 8009958:	1a9a      	subs	r2, r3, r2
 800995a:	1be1      	subs	r1, r4, r7
 800995c:	440a      	add	r2, r1
 800995e:	2a00      	cmp	r2, #0
 8009960:	f340 8094 	ble.w	8009a8c <_strtod_l+0x52c>
 8009964:	f012 000f 	ands.w	r0, r2, #15
 8009968:	d00a      	beq.n	8009980 <_strtod_l+0x420>
 800996a:	495d      	ldr	r1, [pc, #372]	@ (8009ae0 <_strtod_l+0x580>)
 800996c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009970:	ed91 7b00 	vldr	d7, [r1]
 8009974:	ec4b ab16 	vmov	d6, sl, fp
 8009978:	ee27 7b06 	vmul.f64	d7, d7, d6
 800997c:	ec5b ab17 	vmov	sl, fp, d7
 8009980:	f032 020f 	bics.w	r2, r2, #15
 8009984:	d073      	beq.n	8009a6e <_strtod_l+0x50e>
 8009986:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800998a:	dd47      	ble.n	8009a1c <_strtod_l+0x4bc>
 800998c:	2400      	movs	r4, #0
 800998e:	4625      	mov	r5, r4
 8009990:	9407      	str	r4, [sp, #28]
 8009992:	4626      	mov	r6, r4
 8009994:	9a05      	ldr	r2, [sp, #20]
 8009996:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009aec <_strtod_l+0x58c>
 800999a:	2322      	movs	r3, #34	@ 0x22
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	f04f 0a00 	mov.w	sl, #0
 80099a2:	9b07      	ldr	r3, [sp, #28]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f43f ae16 	beq.w	80095d6 <_strtod_l+0x76>
 80099aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80099ac:	9805      	ldr	r0, [sp, #20]
 80099ae:	f7ff f955 	bl	8008c5c <_Bfree>
 80099b2:	9805      	ldr	r0, [sp, #20]
 80099b4:	4631      	mov	r1, r6
 80099b6:	f7ff f951 	bl	8008c5c <_Bfree>
 80099ba:	9805      	ldr	r0, [sp, #20]
 80099bc:	4629      	mov	r1, r5
 80099be:	f7ff f94d 	bl	8008c5c <_Bfree>
 80099c2:	9907      	ldr	r1, [sp, #28]
 80099c4:	9805      	ldr	r0, [sp, #20]
 80099c6:	f7ff f949 	bl	8008c5c <_Bfree>
 80099ca:	9805      	ldr	r0, [sp, #20]
 80099cc:	4621      	mov	r1, r4
 80099ce:	f7ff f945 	bl	8008c5c <_Bfree>
 80099d2:	e600      	b.n	80095d6 <_strtod_l+0x76>
 80099d4:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80099d8:	1be0      	subs	r0, r4, r7
 80099da:	4281      	cmp	r1, r0
 80099dc:	dbbc      	blt.n	8009958 <_strtod_l+0x3f8>
 80099de:	4a40      	ldr	r2, [pc, #256]	@ (8009ae0 <_strtod_l+0x580>)
 80099e0:	f1c3 030f 	rsb	r3, r3, #15
 80099e4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80099e8:	ed91 7b00 	vldr	d7, [r1]
 80099ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80099ee:	ec4b ab16 	vmov	d6, sl, fp
 80099f2:	1acb      	subs	r3, r1, r3
 80099f4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80099f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80099fc:	ed92 6b00 	vldr	d6, [r2]
 8009a00:	e796      	b.n	8009930 <_strtod_l+0x3d0>
 8009a02:	3116      	adds	r1, #22
 8009a04:	dba8      	blt.n	8009958 <_strtod_l+0x3f8>
 8009a06:	4b36      	ldr	r3, [pc, #216]	@ (8009ae0 <_strtod_l+0x580>)
 8009a08:	1b3c      	subs	r4, r7, r4
 8009a0a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009a0e:	ed94 7b00 	vldr	d7, [r4]
 8009a12:	ec4b ab16 	vmov	d6, sl, fp
 8009a16:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a1a:	e78b      	b.n	8009934 <_strtod_l+0x3d4>
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	ec4b ab17 	vmov	d7, sl, fp
 8009a22:	4e30      	ldr	r6, [pc, #192]	@ (8009ae4 <_strtod_l+0x584>)
 8009a24:	1112      	asrs	r2, r2, #4
 8009a26:	4601      	mov	r1, r0
 8009a28:	2a01      	cmp	r2, #1
 8009a2a:	dc23      	bgt.n	8009a74 <_strtod_l+0x514>
 8009a2c:	b108      	cbz	r0, 8009a32 <_strtod_l+0x4d2>
 8009a2e:	ec5b ab17 	vmov	sl, fp, d7
 8009a32:	4a2c      	ldr	r2, [pc, #176]	@ (8009ae4 <_strtod_l+0x584>)
 8009a34:	482c      	ldr	r0, [pc, #176]	@ (8009ae8 <_strtod_l+0x588>)
 8009a36:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009a3a:	ed92 7b00 	vldr	d7, [r2]
 8009a3e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009a42:	ec4b ab16 	vmov	d6, sl, fp
 8009a46:	4a29      	ldr	r2, [pc, #164]	@ (8009aec <_strtod_l+0x58c>)
 8009a48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a4c:	ee17 1a90 	vmov	r1, s15
 8009a50:	400a      	ands	r2, r1
 8009a52:	4282      	cmp	r2, r0
 8009a54:	ec5b ab17 	vmov	sl, fp, d7
 8009a58:	d898      	bhi.n	800998c <_strtod_l+0x42c>
 8009a5a:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8009a5e:	4282      	cmp	r2, r0
 8009a60:	bf86      	itte	hi
 8009a62:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009af0 <_strtod_l+0x590>
 8009a66:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a6a:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8009a6e:	2200      	movs	r2, #0
 8009a70:	9206      	str	r2, [sp, #24]
 8009a72:	e076      	b.n	8009b62 <_strtod_l+0x602>
 8009a74:	f012 0f01 	tst.w	r2, #1
 8009a78:	d004      	beq.n	8009a84 <_strtod_l+0x524>
 8009a7a:	ed96 6b00 	vldr	d6, [r6]
 8009a7e:	2001      	movs	r0, #1
 8009a80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a84:	3101      	adds	r1, #1
 8009a86:	1052      	asrs	r2, r2, #1
 8009a88:	3608      	adds	r6, #8
 8009a8a:	e7cd      	b.n	8009a28 <_strtod_l+0x4c8>
 8009a8c:	d0ef      	beq.n	8009a6e <_strtod_l+0x50e>
 8009a8e:	4252      	negs	r2, r2
 8009a90:	f012 000f 	ands.w	r0, r2, #15
 8009a94:	d00a      	beq.n	8009aac <_strtod_l+0x54c>
 8009a96:	4912      	ldr	r1, [pc, #72]	@ (8009ae0 <_strtod_l+0x580>)
 8009a98:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009a9c:	ed91 7b00 	vldr	d7, [r1]
 8009aa0:	ec4b ab16 	vmov	d6, sl, fp
 8009aa4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009aa8:	ec5b ab17 	vmov	sl, fp, d7
 8009aac:	1112      	asrs	r2, r2, #4
 8009aae:	d0de      	beq.n	8009a6e <_strtod_l+0x50e>
 8009ab0:	2a1f      	cmp	r2, #31
 8009ab2:	dd1f      	ble.n	8009af4 <_strtod_l+0x594>
 8009ab4:	2400      	movs	r4, #0
 8009ab6:	4625      	mov	r5, r4
 8009ab8:	9407      	str	r4, [sp, #28]
 8009aba:	4626      	mov	r6, r4
 8009abc:	9a05      	ldr	r2, [sp, #20]
 8009abe:	2322      	movs	r3, #34	@ 0x22
 8009ac0:	f04f 0a00 	mov.w	sl, #0
 8009ac4:	f04f 0b00 	mov.w	fp, #0
 8009ac8:	6013      	str	r3, [r2, #0]
 8009aca:	e76a      	b.n	80099a2 <_strtod_l+0x442>
 8009acc:	0800b685 	.word	0x0800b685
 8009ad0:	0800b950 	.word	0x0800b950
 8009ad4:	0800b67d 	.word	0x0800b67d
 8009ad8:	0800b6b4 	.word	0x0800b6b4
 8009adc:	0800b7ed 	.word	0x0800b7ed
 8009ae0:	0800b888 	.word	0x0800b888
 8009ae4:	0800b860 	.word	0x0800b860
 8009ae8:	7ca00000 	.word	0x7ca00000
 8009aec:	7ff00000 	.word	0x7ff00000
 8009af0:	7fefffff 	.word	0x7fefffff
 8009af4:	f012 0110 	ands.w	r1, r2, #16
 8009af8:	bf18      	it	ne
 8009afa:	216a      	movne	r1, #106	@ 0x6a
 8009afc:	9106      	str	r1, [sp, #24]
 8009afe:	ec4b ab17 	vmov	d7, sl, fp
 8009b02:	49af      	ldr	r1, [pc, #700]	@ (8009dc0 <_strtod_l+0x860>)
 8009b04:	2000      	movs	r0, #0
 8009b06:	07d6      	lsls	r6, r2, #31
 8009b08:	d504      	bpl.n	8009b14 <_strtod_l+0x5b4>
 8009b0a:	ed91 6b00 	vldr	d6, [r1]
 8009b0e:	2001      	movs	r0, #1
 8009b10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b14:	1052      	asrs	r2, r2, #1
 8009b16:	f101 0108 	add.w	r1, r1, #8
 8009b1a:	d1f4      	bne.n	8009b06 <_strtod_l+0x5a6>
 8009b1c:	b108      	cbz	r0, 8009b22 <_strtod_l+0x5c2>
 8009b1e:	ec5b ab17 	vmov	sl, fp, d7
 8009b22:	9a06      	ldr	r2, [sp, #24]
 8009b24:	b1b2      	cbz	r2, 8009b54 <_strtod_l+0x5f4>
 8009b26:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8009b2a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8009b2e:	2a00      	cmp	r2, #0
 8009b30:	4658      	mov	r0, fp
 8009b32:	dd0f      	ble.n	8009b54 <_strtod_l+0x5f4>
 8009b34:	2a1f      	cmp	r2, #31
 8009b36:	dd55      	ble.n	8009be4 <_strtod_l+0x684>
 8009b38:	2a34      	cmp	r2, #52	@ 0x34
 8009b3a:	bfde      	ittt	le
 8009b3c:	f04f 32ff 	movle.w	r2, #4294967295
 8009b40:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8009b44:	408a      	lslle	r2, r1
 8009b46:	f04f 0a00 	mov.w	sl, #0
 8009b4a:	bfcc      	ite	gt
 8009b4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009b50:	ea02 0b00 	andle.w	fp, r2, r0
 8009b54:	ec4b ab17 	vmov	d7, sl, fp
 8009b58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b60:	d0a8      	beq.n	8009ab4 <_strtod_l+0x554>
 8009b62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b64:	9805      	ldr	r0, [sp, #20]
 8009b66:	f8cd 9000 	str.w	r9, [sp]
 8009b6a:	462a      	mov	r2, r5
 8009b6c:	f7ff f8de 	bl	8008d2c <__s2b>
 8009b70:	9007      	str	r0, [sp, #28]
 8009b72:	2800      	cmp	r0, #0
 8009b74:	f43f af0a 	beq.w	800998c <_strtod_l+0x42c>
 8009b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b7a:	1b3f      	subs	r7, r7, r4
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	bfb4      	ite	lt
 8009b80:	463b      	movlt	r3, r7
 8009b82:	2300      	movge	r3, #0
 8009b84:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b88:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8009db0 <_strtod_l+0x850>
 8009b8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009b90:	2400      	movs	r4, #0
 8009b92:	930d      	str	r3, [sp, #52]	@ 0x34
 8009b94:	4625      	mov	r5, r4
 8009b96:	9b07      	ldr	r3, [sp, #28]
 8009b98:	9805      	ldr	r0, [sp, #20]
 8009b9a:	6859      	ldr	r1, [r3, #4]
 8009b9c:	f7ff f81e 	bl	8008bdc <_Balloc>
 8009ba0:	4606      	mov	r6, r0
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	f43f aef6 	beq.w	8009994 <_strtod_l+0x434>
 8009ba8:	9b07      	ldr	r3, [sp, #28]
 8009baa:	691a      	ldr	r2, [r3, #16]
 8009bac:	ec4b ab19 	vmov	d9, sl, fp
 8009bb0:	3202      	adds	r2, #2
 8009bb2:	f103 010c 	add.w	r1, r3, #12
 8009bb6:	0092      	lsls	r2, r2, #2
 8009bb8:	300c      	adds	r0, #12
 8009bba:	f000 fd2d 	bl	800a618 <memcpy>
 8009bbe:	eeb0 0b49 	vmov.f64	d0, d9
 8009bc2:	9805      	ldr	r0, [sp, #20]
 8009bc4:	aa14      	add	r2, sp, #80	@ 0x50
 8009bc6:	a913      	add	r1, sp, #76	@ 0x4c
 8009bc8:	f7ff fbe4 	bl	8009394 <__d2b>
 8009bcc:	9012      	str	r0, [sp, #72]	@ 0x48
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	f43f aee0 	beq.w	8009994 <_strtod_l+0x434>
 8009bd4:	9805      	ldr	r0, [sp, #20]
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	f7ff f93e 	bl	8008e58 <__i2b>
 8009bdc:	4605      	mov	r5, r0
 8009bde:	b940      	cbnz	r0, 8009bf2 <_strtod_l+0x692>
 8009be0:	2500      	movs	r5, #0
 8009be2:	e6d7      	b.n	8009994 <_strtod_l+0x434>
 8009be4:	f04f 31ff 	mov.w	r1, #4294967295
 8009be8:	fa01 f202 	lsl.w	r2, r1, r2
 8009bec:	ea02 0a0a 	and.w	sl, r2, sl
 8009bf0:	e7b0      	b.n	8009b54 <_strtod_l+0x5f4>
 8009bf2:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8009bf4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009bf6:	2f00      	cmp	r7, #0
 8009bf8:	bfab      	itete	ge
 8009bfa:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8009bfc:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8009bfe:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8009c02:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8009c06:	bfac      	ite	ge
 8009c08:	eb07 0903 	addge.w	r9, r7, r3
 8009c0c:	eba3 0807 	sublt.w	r8, r3, r7
 8009c10:	9b06      	ldr	r3, [sp, #24]
 8009c12:	1aff      	subs	r7, r7, r3
 8009c14:	4417      	add	r7, r2
 8009c16:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8009c1a:	4a6a      	ldr	r2, [pc, #424]	@ (8009dc4 <_strtod_l+0x864>)
 8009c1c:	3f01      	subs	r7, #1
 8009c1e:	4297      	cmp	r7, r2
 8009c20:	da51      	bge.n	8009cc6 <_strtod_l+0x766>
 8009c22:	1bd1      	subs	r1, r2, r7
 8009c24:	291f      	cmp	r1, #31
 8009c26:	eba3 0301 	sub.w	r3, r3, r1
 8009c2a:	f04f 0201 	mov.w	r2, #1
 8009c2e:	dc3e      	bgt.n	8009cae <_strtod_l+0x74e>
 8009c30:	408a      	lsls	r2, r1
 8009c32:	920c      	str	r2, [sp, #48]	@ 0x30
 8009c34:	2200      	movs	r2, #0
 8009c36:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009c38:	eb09 0703 	add.w	r7, r9, r3
 8009c3c:	4498      	add	r8, r3
 8009c3e:	9b06      	ldr	r3, [sp, #24]
 8009c40:	45b9      	cmp	r9, r7
 8009c42:	4498      	add	r8, r3
 8009c44:	464b      	mov	r3, r9
 8009c46:	bfa8      	it	ge
 8009c48:	463b      	movge	r3, r7
 8009c4a:	4543      	cmp	r3, r8
 8009c4c:	bfa8      	it	ge
 8009c4e:	4643      	movge	r3, r8
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	bfc2      	ittt	gt
 8009c54:	1aff      	subgt	r7, r7, r3
 8009c56:	eba8 0803 	subgt.w	r8, r8, r3
 8009c5a:	eba9 0903 	subgt.w	r9, r9, r3
 8009c5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	dd16      	ble.n	8009c92 <_strtod_l+0x732>
 8009c64:	4629      	mov	r1, r5
 8009c66:	9805      	ldr	r0, [sp, #20]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	f7ff f9ad 	bl	8008fc8 <__pow5mult>
 8009c6e:	4605      	mov	r5, r0
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d0b5      	beq.n	8009be0 <_strtod_l+0x680>
 8009c74:	4601      	mov	r1, r0
 8009c76:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009c78:	9805      	ldr	r0, [sp, #20]
 8009c7a:	f7ff f903 	bl	8008e84 <__multiply>
 8009c7e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009c80:	2800      	cmp	r0, #0
 8009c82:	f43f ae87 	beq.w	8009994 <_strtod_l+0x434>
 8009c86:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009c88:	9805      	ldr	r0, [sp, #20]
 8009c8a:	f7fe ffe7 	bl	8008c5c <_Bfree>
 8009c8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c90:	9312      	str	r3, [sp, #72]	@ 0x48
 8009c92:	2f00      	cmp	r7, #0
 8009c94:	dc1b      	bgt.n	8009cce <_strtod_l+0x76e>
 8009c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	dd21      	ble.n	8009ce0 <_strtod_l+0x780>
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ca0:	9805      	ldr	r0, [sp, #20]
 8009ca2:	f7ff f991 	bl	8008fc8 <__pow5mult>
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	b9d0      	cbnz	r0, 8009ce0 <_strtod_l+0x780>
 8009caa:	2600      	movs	r6, #0
 8009cac:	e672      	b.n	8009994 <_strtod_l+0x434>
 8009cae:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8009cb2:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8009cb6:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8009cba:	37e2      	adds	r7, #226	@ 0xe2
 8009cbc:	fa02 f107 	lsl.w	r1, r2, r7
 8009cc0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009cc2:	920c      	str	r2, [sp, #48]	@ 0x30
 8009cc4:	e7b8      	b.n	8009c38 <_strtod_l+0x6d8>
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009cca:	2201      	movs	r2, #1
 8009ccc:	e7f9      	b.n	8009cc2 <_strtod_l+0x762>
 8009cce:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009cd0:	9805      	ldr	r0, [sp, #20]
 8009cd2:	463a      	mov	r2, r7
 8009cd4:	f7ff f9d2 	bl	800907c <__lshift>
 8009cd8:	9012      	str	r0, [sp, #72]	@ 0x48
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d1db      	bne.n	8009c96 <_strtod_l+0x736>
 8009cde:	e659      	b.n	8009994 <_strtod_l+0x434>
 8009ce0:	f1b8 0f00 	cmp.w	r8, #0
 8009ce4:	dd07      	ble.n	8009cf6 <_strtod_l+0x796>
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	9805      	ldr	r0, [sp, #20]
 8009cea:	4642      	mov	r2, r8
 8009cec:	f7ff f9c6 	bl	800907c <__lshift>
 8009cf0:	4606      	mov	r6, r0
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d0d9      	beq.n	8009caa <_strtod_l+0x74a>
 8009cf6:	f1b9 0f00 	cmp.w	r9, #0
 8009cfa:	dd08      	ble.n	8009d0e <_strtod_l+0x7ae>
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	9805      	ldr	r0, [sp, #20]
 8009d00:	464a      	mov	r2, r9
 8009d02:	f7ff f9bb 	bl	800907c <__lshift>
 8009d06:	4605      	mov	r5, r0
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	f43f ae43 	beq.w	8009994 <_strtod_l+0x434>
 8009d0e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009d10:	9805      	ldr	r0, [sp, #20]
 8009d12:	4632      	mov	r2, r6
 8009d14:	f7ff fa3a 	bl	800918c <__mdiff>
 8009d18:	4604      	mov	r4, r0
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	f43f ae3a 	beq.w	8009994 <_strtod_l+0x434>
 8009d20:	2300      	movs	r3, #0
 8009d22:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8009d26:	60c3      	str	r3, [r0, #12]
 8009d28:	4629      	mov	r1, r5
 8009d2a:	f7ff fa13 	bl	8009154 <__mcmp>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	da4c      	bge.n	8009dcc <_strtod_l+0x86c>
 8009d32:	ea58 080a 	orrs.w	r8, r8, sl
 8009d36:	d172      	bne.n	8009e1e <_strtod_l+0x8be>
 8009d38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d16e      	bne.n	8009e1e <_strtod_l+0x8be>
 8009d40:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d44:	0d1b      	lsrs	r3, r3, #20
 8009d46:	051b      	lsls	r3, r3, #20
 8009d48:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d4c:	d967      	bls.n	8009e1e <_strtod_l+0x8be>
 8009d4e:	6963      	ldr	r3, [r4, #20]
 8009d50:	b913      	cbnz	r3, 8009d58 <_strtod_l+0x7f8>
 8009d52:	6923      	ldr	r3, [r4, #16]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	dd62      	ble.n	8009e1e <_strtod_l+0x8be>
 8009d58:	4621      	mov	r1, r4
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	9805      	ldr	r0, [sp, #20]
 8009d5e:	f7ff f98d 	bl	800907c <__lshift>
 8009d62:	4629      	mov	r1, r5
 8009d64:	4604      	mov	r4, r0
 8009d66:	f7ff f9f5 	bl	8009154 <__mcmp>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	dd57      	ble.n	8009e1e <_strtod_l+0x8be>
 8009d6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d72:	9a06      	ldr	r2, [sp, #24]
 8009d74:	0d1b      	lsrs	r3, r3, #20
 8009d76:	051b      	lsls	r3, r3, #20
 8009d78:	2a00      	cmp	r2, #0
 8009d7a:	d06e      	beq.n	8009e5a <_strtod_l+0x8fa>
 8009d7c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d80:	d86b      	bhi.n	8009e5a <_strtod_l+0x8fa>
 8009d82:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009d86:	f67f ae99 	bls.w	8009abc <_strtod_l+0x55c>
 8009d8a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8009db8 <_strtod_l+0x858>
 8009d8e:	ec4b ab16 	vmov	d6, sl, fp
 8009d92:	4b0d      	ldr	r3, [pc, #52]	@ (8009dc8 <_strtod_l+0x868>)
 8009d94:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009d98:	ee17 2a90 	vmov	r2, s15
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	ec5b ab17 	vmov	sl, fp, d7
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f47f ae01 	bne.w	80099aa <_strtod_l+0x44a>
 8009da8:	9a05      	ldr	r2, [sp, #20]
 8009daa:	2322      	movs	r3, #34	@ 0x22
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	e5fc      	b.n	80099aa <_strtod_l+0x44a>
 8009db0:	ffc00000 	.word	0xffc00000
 8009db4:	41dfffff 	.word	0x41dfffff
 8009db8:	00000000 	.word	0x00000000
 8009dbc:	39500000 	.word	0x39500000
 8009dc0:	0800b978 	.word	0x0800b978
 8009dc4:	fffffc02 	.word	0xfffffc02
 8009dc8:	7ff00000 	.word	0x7ff00000
 8009dcc:	46d9      	mov	r9, fp
 8009dce:	d15d      	bne.n	8009e8c <_strtod_l+0x92c>
 8009dd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dd4:	f1b8 0f00 	cmp.w	r8, #0
 8009dd8:	d02a      	beq.n	8009e30 <_strtod_l+0x8d0>
 8009dda:	4aa9      	ldr	r2, [pc, #676]	@ (800a080 <_strtod_l+0xb20>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d12a      	bne.n	8009e36 <_strtod_l+0x8d6>
 8009de0:	9b06      	ldr	r3, [sp, #24]
 8009de2:	4652      	mov	r2, sl
 8009de4:	b1fb      	cbz	r3, 8009e26 <_strtod_l+0x8c6>
 8009de6:	4ba7      	ldr	r3, [pc, #668]	@ (800a084 <_strtod_l+0xb24>)
 8009de8:	ea0b 0303 	and.w	r3, fp, r3
 8009dec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009df0:	f04f 31ff 	mov.w	r1, #4294967295
 8009df4:	d81a      	bhi.n	8009e2c <_strtod_l+0x8cc>
 8009df6:	0d1b      	lsrs	r3, r3, #20
 8009df8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d118      	bne.n	8009e36 <_strtod_l+0x8d6>
 8009e04:	4ba0      	ldr	r3, [pc, #640]	@ (800a088 <_strtod_l+0xb28>)
 8009e06:	4599      	cmp	r9, r3
 8009e08:	d102      	bne.n	8009e10 <_strtod_l+0x8b0>
 8009e0a:	3201      	adds	r2, #1
 8009e0c:	f43f adc2 	beq.w	8009994 <_strtod_l+0x434>
 8009e10:	4b9c      	ldr	r3, [pc, #624]	@ (800a084 <_strtod_l+0xb24>)
 8009e12:	ea09 0303 	and.w	r3, r9, r3
 8009e16:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8009e1a:	f04f 0a00 	mov.w	sl, #0
 8009e1e:	9b06      	ldr	r3, [sp, #24]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1b2      	bne.n	8009d8a <_strtod_l+0x82a>
 8009e24:	e5c1      	b.n	80099aa <_strtod_l+0x44a>
 8009e26:	f04f 33ff 	mov.w	r3, #4294967295
 8009e2a:	e7e9      	b.n	8009e00 <_strtod_l+0x8a0>
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	e7e7      	b.n	8009e00 <_strtod_l+0x8a0>
 8009e30:	ea53 030a 	orrs.w	r3, r3, sl
 8009e34:	d09b      	beq.n	8009d6e <_strtod_l+0x80e>
 8009e36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e38:	b1c3      	cbz	r3, 8009e6c <_strtod_l+0x90c>
 8009e3a:	ea13 0f09 	tst.w	r3, r9
 8009e3e:	d0ee      	beq.n	8009e1e <_strtod_l+0x8be>
 8009e40:	9a06      	ldr	r2, [sp, #24]
 8009e42:	4650      	mov	r0, sl
 8009e44:	4659      	mov	r1, fp
 8009e46:	f1b8 0f00 	cmp.w	r8, #0
 8009e4a:	d013      	beq.n	8009e74 <_strtod_l+0x914>
 8009e4c:	f7ff fb6d 	bl	800952a <sulp>
 8009e50:	ee39 7b00 	vadd.f64	d7, d9, d0
 8009e54:	ec5b ab17 	vmov	sl, fp, d7
 8009e58:	e7e1      	b.n	8009e1e <_strtod_l+0x8be>
 8009e5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009e5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e66:	f04f 3aff 	mov.w	sl, #4294967295
 8009e6a:	e7d8      	b.n	8009e1e <_strtod_l+0x8be>
 8009e6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e6e:	ea13 0f0a 	tst.w	r3, sl
 8009e72:	e7e4      	b.n	8009e3e <_strtod_l+0x8de>
 8009e74:	f7ff fb59 	bl	800952a <sulp>
 8009e78:	ee39 0b40 	vsub.f64	d0, d9, d0
 8009e7c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e84:	ec5b ab10 	vmov	sl, fp, d0
 8009e88:	d1c9      	bne.n	8009e1e <_strtod_l+0x8be>
 8009e8a:	e617      	b.n	8009abc <_strtod_l+0x55c>
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f7ff fad8 	bl	8009444 <__ratio>
 8009e94:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8009e98:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea0:	d85d      	bhi.n	8009f5e <_strtod_l+0x9fe>
 8009ea2:	f1b8 0f00 	cmp.w	r8, #0
 8009ea6:	d164      	bne.n	8009f72 <_strtod_l+0xa12>
 8009ea8:	f1ba 0f00 	cmp.w	sl, #0
 8009eac:	d14b      	bne.n	8009f46 <_strtod_l+0x9e6>
 8009eae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009eb2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d160      	bne.n	8009f7c <_strtod_l+0xa1c>
 8009eba:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8009ebe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec6:	d401      	bmi.n	8009ecc <_strtod_l+0x96c>
 8009ec8:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009ecc:	eeb1 ab48 	vneg.f64	d10, d8
 8009ed0:	486c      	ldr	r0, [pc, #432]	@ (800a084 <_strtod_l+0xb24>)
 8009ed2:	496e      	ldr	r1, [pc, #440]	@ (800a08c <_strtod_l+0xb2c>)
 8009ed4:	ea09 0700 	and.w	r7, r9, r0
 8009ed8:	428f      	cmp	r7, r1
 8009eda:	ec53 2b1a 	vmov	r2, r3, d10
 8009ede:	d17d      	bne.n	8009fdc <_strtod_l+0xa7c>
 8009ee0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8009ee4:	ec4b ab1c 	vmov	d12, sl, fp
 8009ee8:	eeb0 0b4c 	vmov.f64	d0, d12
 8009eec:	f7ff f9e2 	bl	80092b4 <__ulp>
 8009ef0:	4864      	ldr	r0, [pc, #400]	@ (800a084 <_strtod_l+0xb24>)
 8009ef2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8009ef6:	ee1c 3a90 	vmov	r3, s25
 8009efa:	4a65      	ldr	r2, [pc, #404]	@ (800a090 <_strtod_l+0xb30>)
 8009efc:	ea03 0100 	and.w	r1, r3, r0
 8009f00:	4291      	cmp	r1, r2
 8009f02:	ec5b ab1c 	vmov	sl, fp, d12
 8009f06:	d93c      	bls.n	8009f82 <_strtod_l+0xa22>
 8009f08:	ee19 2a90 	vmov	r2, s19
 8009f0c:	4b5e      	ldr	r3, [pc, #376]	@ (800a088 <_strtod_l+0xb28>)
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d104      	bne.n	8009f1c <_strtod_l+0x9bc>
 8009f12:	ee19 3a10 	vmov	r3, s18
 8009f16:	3301      	adds	r3, #1
 8009f18:	f43f ad3c 	beq.w	8009994 <_strtod_l+0x434>
 8009f1c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800a088 <_strtod_l+0xb28>
 8009f20:	f04f 3aff 	mov.w	sl, #4294967295
 8009f24:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009f26:	9805      	ldr	r0, [sp, #20]
 8009f28:	f7fe fe98 	bl	8008c5c <_Bfree>
 8009f2c:	9805      	ldr	r0, [sp, #20]
 8009f2e:	4631      	mov	r1, r6
 8009f30:	f7fe fe94 	bl	8008c5c <_Bfree>
 8009f34:	9805      	ldr	r0, [sp, #20]
 8009f36:	4629      	mov	r1, r5
 8009f38:	f7fe fe90 	bl	8008c5c <_Bfree>
 8009f3c:	9805      	ldr	r0, [sp, #20]
 8009f3e:	4621      	mov	r1, r4
 8009f40:	f7fe fe8c 	bl	8008c5c <_Bfree>
 8009f44:	e627      	b.n	8009b96 <_strtod_l+0x636>
 8009f46:	f1ba 0f01 	cmp.w	sl, #1
 8009f4a:	d103      	bne.n	8009f54 <_strtod_l+0x9f4>
 8009f4c:	f1bb 0f00 	cmp.w	fp, #0
 8009f50:	f43f adb4 	beq.w	8009abc <_strtod_l+0x55c>
 8009f54:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8009f58:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8009f5c:	e7b8      	b.n	8009ed0 <_strtod_l+0x970>
 8009f5e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009f62:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009f66:	f1b8 0f00 	cmp.w	r8, #0
 8009f6a:	d0af      	beq.n	8009ecc <_strtod_l+0x96c>
 8009f6c:	eeb0 ab48 	vmov.f64	d10, d8
 8009f70:	e7ae      	b.n	8009ed0 <_strtod_l+0x970>
 8009f72:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8009f76:	eeb0 8b4a 	vmov.f64	d8, d10
 8009f7a:	e7a9      	b.n	8009ed0 <_strtod_l+0x970>
 8009f7c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8009f80:	e7a6      	b.n	8009ed0 <_strtod_l+0x970>
 8009f82:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009f86:	9b06      	ldr	r3, [sp, #24]
 8009f88:	46d9      	mov	r9, fp
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1ca      	bne.n	8009f24 <_strtod_l+0x9c4>
 8009f8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f92:	0d1b      	lsrs	r3, r3, #20
 8009f94:	051b      	lsls	r3, r3, #20
 8009f96:	429f      	cmp	r7, r3
 8009f98:	d1c4      	bne.n	8009f24 <_strtod_l+0x9c4>
 8009f9a:	ec51 0b18 	vmov	r0, r1, d8
 8009f9e:	f7f6 fb7b 	bl	8000698 <__aeabi_d2lz>
 8009fa2:	f7f6 fb33 	bl	800060c <__aeabi_l2d>
 8009fa6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8009faa:	ec41 0b17 	vmov	d7, r0, r1
 8009fae:	ea49 090a 	orr.w	r9, r9, sl
 8009fb2:	ea59 0908 	orrs.w	r9, r9, r8
 8009fb6:	ee38 8b47 	vsub.f64	d8, d8, d7
 8009fba:	d03c      	beq.n	800a036 <_strtod_l+0xad6>
 8009fbc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800a068 <_strtod_l+0xb08>
 8009fc0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc8:	f53f acef 	bmi.w	80099aa <_strtod_l+0x44a>
 8009fcc:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800a070 <_strtod_l+0xb10>
 8009fd0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fd8:	dda4      	ble.n	8009f24 <_strtod_l+0x9c4>
 8009fda:	e4e6      	b.n	80099aa <_strtod_l+0x44a>
 8009fdc:	9906      	ldr	r1, [sp, #24]
 8009fde:	b1e1      	cbz	r1, 800a01a <_strtod_l+0xaba>
 8009fe0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8009fe4:	d819      	bhi.n	800a01a <_strtod_l+0xaba>
 8009fe6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8009fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fee:	d811      	bhi.n	800a014 <_strtod_l+0xab4>
 8009ff0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8009ff4:	ee18 3a10 	vmov	r3, s16
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	bf38      	it	cc
 8009ffc:	2301      	movcc	r3, #1
 8009ffe:	ee08 3a10 	vmov	s16, r3
 800a002:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800a006:	f1b8 0f00 	cmp.w	r8, #0
 800a00a:	d111      	bne.n	800a030 <_strtod_l+0xad0>
 800a00c:	eeb1 7b48 	vneg.f64	d7, d8
 800a010:	ec53 2b17 	vmov	r2, r3, d7
 800a014:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800a018:	1bcb      	subs	r3, r1, r7
 800a01a:	eeb0 0b49 	vmov.f64	d0, d9
 800a01e:	ec43 2b1a 	vmov	d10, r2, r3
 800a022:	f7ff f947 	bl	80092b4 <__ulp>
 800a026:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800a02a:	ec5b ab19 	vmov	sl, fp, d9
 800a02e:	e7aa      	b.n	8009f86 <_strtod_l+0xa26>
 800a030:	eeb0 7b48 	vmov.f64	d7, d8
 800a034:	e7ec      	b.n	800a010 <_strtod_l+0xab0>
 800a036:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800a078 <_strtod_l+0xb18>
 800a03a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a042:	f57f af6f 	bpl.w	8009f24 <_strtod_l+0x9c4>
 800a046:	e4b0      	b.n	80099aa <_strtod_l+0x44a>
 800a048:	2300      	movs	r3, #0
 800a04a:	9308      	str	r3, [sp, #32]
 800a04c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a04e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	f7ff bac4 	b.w	80095de <_strtod_l+0x7e>
 800a056:	2a65      	cmp	r2, #101	@ 0x65
 800a058:	f43f abbf 	beq.w	80097da <_strtod_l+0x27a>
 800a05c:	2a45      	cmp	r2, #69	@ 0x45
 800a05e:	f43f abbc 	beq.w	80097da <_strtod_l+0x27a>
 800a062:	2101      	movs	r1, #1
 800a064:	f7ff bbf4 	b.w	8009850 <_strtod_l+0x2f0>
 800a068:	94a03595 	.word	0x94a03595
 800a06c:	3fdfffff 	.word	0x3fdfffff
 800a070:	35afe535 	.word	0x35afe535
 800a074:	3fe00000 	.word	0x3fe00000
 800a078:	94a03595 	.word	0x94a03595
 800a07c:	3fcfffff 	.word	0x3fcfffff
 800a080:	000fffff 	.word	0x000fffff
 800a084:	7ff00000 	.word	0x7ff00000
 800a088:	7fefffff 	.word	0x7fefffff
 800a08c:	7fe00000 	.word	0x7fe00000
 800a090:	7c9fffff 	.word	0x7c9fffff

0800a094 <_strtod_r>:
 800a094:	4b01      	ldr	r3, [pc, #4]	@ (800a09c <_strtod_r+0x8>)
 800a096:	f7ff ba63 	b.w	8009560 <_strtod_l>
 800a09a:	bf00      	nop
 800a09c:	20000074 	.word	0x20000074

0800a0a0 <_strtol_l.isra.0>:
 800a0a0:	2b24      	cmp	r3, #36	@ 0x24
 800a0a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a6:	4686      	mov	lr, r0
 800a0a8:	4690      	mov	r8, r2
 800a0aa:	d801      	bhi.n	800a0b0 <_strtol_l.isra.0+0x10>
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d106      	bne.n	800a0be <_strtol_l.isra.0+0x1e>
 800a0b0:	f7fd fe78 	bl	8007da4 <__errno>
 800a0b4:	2316      	movs	r3, #22
 800a0b6:	6003      	str	r3, [r0, #0]
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0be:	4834      	ldr	r0, [pc, #208]	@ (800a190 <_strtol_l.isra.0+0xf0>)
 800a0c0:	460d      	mov	r5, r1
 800a0c2:	462a      	mov	r2, r5
 800a0c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0c8:	5d06      	ldrb	r6, [r0, r4]
 800a0ca:	f016 0608 	ands.w	r6, r6, #8
 800a0ce:	d1f8      	bne.n	800a0c2 <_strtol_l.isra.0+0x22>
 800a0d0:	2c2d      	cmp	r4, #45	@ 0x2d
 800a0d2:	d110      	bne.n	800a0f6 <_strtol_l.isra.0+0x56>
 800a0d4:	782c      	ldrb	r4, [r5, #0]
 800a0d6:	2601      	movs	r6, #1
 800a0d8:	1c95      	adds	r5, r2, #2
 800a0da:	f033 0210 	bics.w	r2, r3, #16
 800a0de:	d115      	bne.n	800a10c <_strtol_l.isra.0+0x6c>
 800a0e0:	2c30      	cmp	r4, #48	@ 0x30
 800a0e2:	d10d      	bne.n	800a100 <_strtol_l.isra.0+0x60>
 800a0e4:	782a      	ldrb	r2, [r5, #0]
 800a0e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a0ea:	2a58      	cmp	r2, #88	@ 0x58
 800a0ec:	d108      	bne.n	800a100 <_strtol_l.isra.0+0x60>
 800a0ee:	786c      	ldrb	r4, [r5, #1]
 800a0f0:	3502      	adds	r5, #2
 800a0f2:	2310      	movs	r3, #16
 800a0f4:	e00a      	b.n	800a10c <_strtol_l.isra.0+0x6c>
 800a0f6:	2c2b      	cmp	r4, #43	@ 0x2b
 800a0f8:	bf04      	itt	eq
 800a0fa:	782c      	ldrbeq	r4, [r5, #0]
 800a0fc:	1c95      	addeq	r5, r2, #2
 800a0fe:	e7ec      	b.n	800a0da <_strtol_l.isra.0+0x3a>
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1f6      	bne.n	800a0f2 <_strtol_l.isra.0+0x52>
 800a104:	2c30      	cmp	r4, #48	@ 0x30
 800a106:	bf14      	ite	ne
 800a108:	230a      	movne	r3, #10
 800a10a:	2308      	moveq	r3, #8
 800a10c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a110:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a114:	2200      	movs	r2, #0
 800a116:	fbbc f9f3 	udiv	r9, ip, r3
 800a11a:	4610      	mov	r0, r2
 800a11c:	fb03 ca19 	mls	sl, r3, r9, ip
 800a120:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a124:	2f09      	cmp	r7, #9
 800a126:	d80f      	bhi.n	800a148 <_strtol_l.isra.0+0xa8>
 800a128:	463c      	mov	r4, r7
 800a12a:	42a3      	cmp	r3, r4
 800a12c:	dd1b      	ble.n	800a166 <_strtol_l.isra.0+0xc6>
 800a12e:	1c57      	adds	r7, r2, #1
 800a130:	d007      	beq.n	800a142 <_strtol_l.isra.0+0xa2>
 800a132:	4581      	cmp	r9, r0
 800a134:	d314      	bcc.n	800a160 <_strtol_l.isra.0+0xc0>
 800a136:	d101      	bne.n	800a13c <_strtol_l.isra.0+0x9c>
 800a138:	45a2      	cmp	sl, r4
 800a13a:	db11      	blt.n	800a160 <_strtol_l.isra.0+0xc0>
 800a13c:	fb00 4003 	mla	r0, r0, r3, r4
 800a140:	2201      	movs	r2, #1
 800a142:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a146:	e7eb      	b.n	800a120 <_strtol_l.isra.0+0x80>
 800a148:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a14c:	2f19      	cmp	r7, #25
 800a14e:	d801      	bhi.n	800a154 <_strtol_l.isra.0+0xb4>
 800a150:	3c37      	subs	r4, #55	@ 0x37
 800a152:	e7ea      	b.n	800a12a <_strtol_l.isra.0+0x8a>
 800a154:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a158:	2f19      	cmp	r7, #25
 800a15a:	d804      	bhi.n	800a166 <_strtol_l.isra.0+0xc6>
 800a15c:	3c57      	subs	r4, #87	@ 0x57
 800a15e:	e7e4      	b.n	800a12a <_strtol_l.isra.0+0x8a>
 800a160:	f04f 32ff 	mov.w	r2, #4294967295
 800a164:	e7ed      	b.n	800a142 <_strtol_l.isra.0+0xa2>
 800a166:	1c53      	adds	r3, r2, #1
 800a168:	d108      	bne.n	800a17c <_strtol_l.isra.0+0xdc>
 800a16a:	2322      	movs	r3, #34	@ 0x22
 800a16c:	f8ce 3000 	str.w	r3, [lr]
 800a170:	4660      	mov	r0, ip
 800a172:	f1b8 0f00 	cmp.w	r8, #0
 800a176:	d0a0      	beq.n	800a0ba <_strtol_l.isra.0+0x1a>
 800a178:	1e69      	subs	r1, r5, #1
 800a17a:	e006      	b.n	800a18a <_strtol_l.isra.0+0xea>
 800a17c:	b106      	cbz	r6, 800a180 <_strtol_l.isra.0+0xe0>
 800a17e:	4240      	negs	r0, r0
 800a180:	f1b8 0f00 	cmp.w	r8, #0
 800a184:	d099      	beq.n	800a0ba <_strtol_l.isra.0+0x1a>
 800a186:	2a00      	cmp	r2, #0
 800a188:	d1f6      	bne.n	800a178 <_strtol_l.isra.0+0xd8>
 800a18a:	f8c8 1000 	str.w	r1, [r8]
 800a18e:	e794      	b.n	800a0ba <_strtol_l.isra.0+0x1a>
 800a190:	0800b9a1 	.word	0x0800b9a1

0800a194 <_strtol_r>:
 800a194:	f7ff bf84 	b.w	800a0a0 <_strtol_l.isra.0>

0800a198 <__ssputs_r>:
 800a198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a19c:	688e      	ldr	r6, [r1, #8]
 800a19e:	461f      	mov	r7, r3
 800a1a0:	42be      	cmp	r6, r7
 800a1a2:	680b      	ldr	r3, [r1, #0]
 800a1a4:	4682      	mov	sl, r0
 800a1a6:	460c      	mov	r4, r1
 800a1a8:	4690      	mov	r8, r2
 800a1aa:	d82d      	bhi.n	800a208 <__ssputs_r+0x70>
 800a1ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a1b4:	d026      	beq.n	800a204 <__ssputs_r+0x6c>
 800a1b6:	6965      	ldr	r5, [r4, #20]
 800a1b8:	6909      	ldr	r1, [r1, #16]
 800a1ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1be:	eba3 0901 	sub.w	r9, r3, r1
 800a1c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1c6:	1c7b      	adds	r3, r7, #1
 800a1c8:	444b      	add	r3, r9
 800a1ca:	106d      	asrs	r5, r5, #1
 800a1cc:	429d      	cmp	r5, r3
 800a1ce:	bf38      	it	cc
 800a1d0:	461d      	movcc	r5, r3
 800a1d2:	0553      	lsls	r3, r2, #21
 800a1d4:	d527      	bpl.n	800a226 <__ssputs_r+0x8e>
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	f7fe fc74 	bl	8008ac4 <_malloc_r>
 800a1dc:	4606      	mov	r6, r0
 800a1de:	b360      	cbz	r0, 800a23a <__ssputs_r+0xa2>
 800a1e0:	6921      	ldr	r1, [r4, #16]
 800a1e2:	464a      	mov	r2, r9
 800a1e4:	f000 fa18 	bl	800a618 <memcpy>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a1ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1f2:	81a3      	strh	r3, [r4, #12]
 800a1f4:	6126      	str	r6, [r4, #16]
 800a1f6:	6165      	str	r5, [r4, #20]
 800a1f8:	444e      	add	r6, r9
 800a1fa:	eba5 0509 	sub.w	r5, r5, r9
 800a1fe:	6026      	str	r6, [r4, #0]
 800a200:	60a5      	str	r5, [r4, #8]
 800a202:	463e      	mov	r6, r7
 800a204:	42be      	cmp	r6, r7
 800a206:	d900      	bls.n	800a20a <__ssputs_r+0x72>
 800a208:	463e      	mov	r6, r7
 800a20a:	6820      	ldr	r0, [r4, #0]
 800a20c:	4632      	mov	r2, r6
 800a20e:	4641      	mov	r1, r8
 800a210:	f000 f9c6 	bl	800a5a0 <memmove>
 800a214:	68a3      	ldr	r3, [r4, #8]
 800a216:	1b9b      	subs	r3, r3, r6
 800a218:	60a3      	str	r3, [r4, #8]
 800a21a:	6823      	ldr	r3, [r4, #0]
 800a21c:	4433      	add	r3, r6
 800a21e:	6023      	str	r3, [r4, #0]
 800a220:	2000      	movs	r0, #0
 800a222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a226:	462a      	mov	r2, r5
 800a228:	f000 fd8b 	bl	800ad42 <_realloc_r>
 800a22c:	4606      	mov	r6, r0
 800a22e:	2800      	cmp	r0, #0
 800a230:	d1e0      	bne.n	800a1f4 <__ssputs_r+0x5c>
 800a232:	6921      	ldr	r1, [r4, #16]
 800a234:	4650      	mov	r0, sl
 800a236:	f7fe fbd1 	bl	80089dc <_free_r>
 800a23a:	230c      	movs	r3, #12
 800a23c:	f8ca 3000 	str.w	r3, [sl]
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	f04f 30ff 	mov.w	r0, #4294967295
 800a24c:	e7e9      	b.n	800a222 <__ssputs_r+0x8a>
	...

0800a250 <_svfiprintf_r>:
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	4698      	mov	r8, r3
 800a256:	898b      	ldrh	r3, [r1, #12]
 800a258:	061b      	lsls	r3, r3, #24
 800a25a:	b09d      	sub	sp, #116	@ 0x74
 800a25c:	4607      	mov	r7, r0
 800a25e:	460d      	mov	r5, r1
 800a260:	4614      	mov	r4, r2
 800a262:	d510      	bpl.n	800a286 <_svfiprintf_r+0x36>
 800a264:	690b      	ldr	r3, [r1, #16]
 800a266:	b973      	cbnz	r3, 800a286 <_svfiprintf_r+0x36>
 800a268:	2140      	movs	r1, #64	@ 0x40
 800a26a:	f7fe fc2b 	bl	8008ac4 <_malloc_r>
 800a26e:	6028      	str	r0, [r5, #0]
 800a270:	6128      	str	r0, [r5, #16]
 800a272:	b930      	cbnz	r0, 800a282 <_svfiprintf_r+0x32>
 800a274:	230c      	movs	r3, #12
 800a276:	603b      	str	r3, [r7, #0]
 800a278:	f04f 30ff 	mov.w	r0, #4294967295
 800a27c:	b01d      	add	sp, #116	@ 0x74
 800a27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a282:	2340      	movs	r3, #64	@ 0x40
 800a284:	616b      	str	r3, [r5, #20]
 800a286:	2300      	movs	r3, #0
 800a288:	9309      	str	r3, [sp, #36]	@ 0x24
 800a28a:	2320      	movs	r3, #32
 800a28c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a290:	f8cd 800c 	str.w	r8, [sp, #12]
 800a294:	2330      	movs	r3, #48	@ 0x30
 800a296:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a434 <_svfiprintf_r+0x1e4>
 800a29a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a29e:	f04f 0901 	mov.w	r9, #1
 800a2a2:	4623      	mov	r3, r4
 800a2a4:	469a      	mov	sl, r3
 800a2a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2aa:	b10a      	cbz	r2, 800a2b0 <_svfiprintf_r+0x60>
 800a2ac:	2a25      	cmp	r2, #37	@ 0x25
 800a2ae:	d1f9      	bne.n	800a2a4 <_svfiprintf_r+0x54>
 800a2b0:	ebba 0b04 	subs.w	fp, sl, r4
 800a2b4:	d00b      	beq.n	800a2ce <_svfiprintf_r+0x7e>
 800a2b6:	465b      	mov	r3, fp
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	4629      	mov	r1, r5
 800a2bc:	4638      	mov	r0, r7
 800a2be:	f7ff ff6b 	bl	800a198 <__ssputs_r>
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	f000 80a7 	beq.w	800a416 <_svfiprintf_r+0x1c6>
 800a2c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2ca:	445a      	add	r2, fp
 800a2cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f000 809f 	beq.w	800a416 <_svfiprintf_r+0x1c6>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f04f 32ff 	mov.w	r2, #4294967295
 800a2de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2e2:	f10a 0a01 	add.w	sl, sl, #1
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	9307      	str	r3, [sp, #28]
 800a2ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2f0:	4654      	mov	r4, sl
 800a2f2:	2205      	movs	r2, #5
 800a2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f8:	484e      	ldr	r0, [pc, #312]	@ (800a434 <_svfiprintf_r+0x1e4>)
 800a2fa:	f7f5 ffa1 	bl	8000240 <memchr>
 800a2fe:	9a04      	ldr	r2, [sp, #16]
 800a300:	b9d8      	cbnz	r0, 800a33a <_svfiprintf_r+0xea>
 800a302:	06d0      	lsls	r0, r2, #27
 800a304:	bf44      	itt	mi
 800a306:	2320      	movmi	r3, #32
 800a308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a30c:	0711      	lsls	r1, r2, #28
 800a30e:	bf44      	itt	mi
 800a310:	232b      	movmi	r3, #43	@ 0x2b
 800a312:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a316:	f89a 3000 	ldrb.w	r3, [sl]
 800a31a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a31c:	d015      	beq.n	800a34a <_svfiprintf_r+0xfa>
 800a31e:	9a07      	ldr	r2, [sp, #28]
 800a320:	4654      	mov	r4, sl
 800a322:	2000      	movs	r0, #0
 800a324:	f04f 0c0a 	mov.w	ip, #10
 800a328:	4621      	mov	r1, r4
 800a32a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a32e:	3b30      	subs	r3, #48	@ 0x30
 800a330:	2b09      	cmp	r3, #9
 800a332:	d94b      	bls.n	800a3cc <_svfiprintf_r+0x17c>
 800a334:	b1b0      	cbz	r0, 800a364 <_svfiprintf_r+0x114>
 800a336:	9207      	str	r2, [sp, #28]
 800a338:	e014      	b.n	800a364 <_svfiprintf_r+0x114>
 800a33a:	eba0 0308 	sub.w	r3, r0, r8
 800a33e:	fa09 f303 	lsl.w	r3, r9, r3
 800a342:	4313      	orrs	r3, r2
 800a344:	9304      	str	r3, [sp, #16]
 800a346:	46a2      	mov	sl, r4
 800a348:	e7d2      	b.n	800a2f0 <_svfiprintf_r+0xa0>
 800a34a:	9b03      	ldr	r3, [sp, #12]
 800a34c:	1d19      	adds	r1, r3, #4
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	9103      	str	r1, [sp, #12]
 800a352:	2b00      	cmp	r3, #0
 800a354:	bfbb      	ittet	lt
 800a356:	425b      	neglt	r3, r3
 800a358:	f042 0202 	orrlt.w	r2, r2, #2
 800a35c:	9307      	strge	r3, [sp, #28]
 800a35e:	9307      	strlt	r3, [sp, #28]
 800a360:	bfb8      	it	lt
 800a362:	9204      	strlt	r2, [sp, #16]
 800a364:	7823      	ldrb	r3, [r4, #0]
 800a366:	2b2e      	cmp	r3, #46	@ 0x2e
 800a368:	d10a      	bne.n	800a380 <_svfiprintf_r+0x130>
 800a36a:	7863      	ldrb	r3, [r4, #1]
 800a36c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a36e:	d132      	bne.n	800a3d6 <_svfiprintf_r+0x186>
 800a370:	9b03      	ldr	r3, [sp, #12]
 800a372:	1d1a      	adds	r2, r3, #4
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	9203      	str	r2, [sp, #12]
 800a378:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a37c:	3402      	adds	r4, #2
 800a37e:	9305      	str	r3, [sp, #20]
 800a380:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a444 <_svfiprintf_r+0x1f4>
 800a384:	7821      	ldrb	r1, [r4, #0]
 800a386:	2203      	movs	r2, #3
 800a388:	4650      	mov	r0, sl
 800a38a:	f7f5 ff59 	bl	8000240 <memchr>
 800a38e:	b138      	cbz	r0, 800a3a0 <_svfiprintf_r+0x150>
 800a390:	9b04      	ldr	r3, [sp, #16]
 800a392:	eba0 000a 	sub.w	r0, r0, sl
 800a396:	2240      	movs	r2, #64	@ 0x40
 800a398:	4082      	lsls	r2, r0
 800a39a:	4313      	orrs	r3, r2
 800a39c:	3401      	adds	r4, #1
 800a39e:	9304      	str	r3, [sp, #16]
 800a3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a4:	4824      	ldr	r0, [pc, #144]	@ (800a438 <_svfiprintf_r+0x1e8>)
 800a3a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3aa:	2206      	movs	r2, #6
 800a3ac:	f7f5 ff48 	bl	8000240 <memchr>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d036      	beq.n	800a422 <_svfiprintf_r+0x1d2>
 800a3b4:	4b21      	ldr	r3, [pc, #132]	@ (800a43c <_svfiprintf_r+0x1ec>)
 800a3b6:	bb1b      	cbnz	r3, 800a400 <_svfiprintf_r+0x1b0>
 800a3b8:	9b03      	ldr	r3, [sp, #12]
 800a3ba:	3307      	adds	r3, #7
 800a3bc:	f023 0307 	bic.w	r3, r3, #7
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	9303      	str	r3, [sp, #12]
 800a3c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c6:	4433      	add	r3, r6
 800a3c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3ca:	e76a      	b.n	800a2a2 <_svfiprintf_r+0x52>
 800a3cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3d0:	460c      	mov	r4, r1
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	e7a8      	b.n	800a328 <_svfiprintf_r+0xd8>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	3401      	adds	r4, #1
 800a3da:	9305      	str	r3, [sp, #20]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	f04f 0c0a 	mov.w	ip, #10
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3e8:	3a30      	subs	r2, #48	@ 0x30
 800a3ea:	2a09      	cmp	r2, #9
 800a3ec:	d903      	bls.n	800a3f6 <_svfiprintf_r+0x1a6>
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0c6      	beq.n	800a380 <_svfiprintf_r+0x130>
 800a3f2:	9105      	str	r1, [sp, #20]
 800a3f4:	e7c4      	b.n	800a380 <_svfiprintf_r+0x130>
 800a3f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e7f0      	b.n	800a3e2 <_svfiprintf_r+0x192>
 800a400:	ab03      	add	r3, sp, #12
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	462a      	mov	r2, r5
 800a406:	4b0e      	ldr	r3, [pc, #56]	@ (800a440 <_svfiprintf_r+0x1f0>)
 800a408:	a904      	add	r1, sp, #16
 800a40a:	4638      	mov	r0, r7
 800a40c:	f7fc fda4 	bl	8006f58 <_printf_float>
 800a410:	1c42      	adds	r2, r0, #1
 800a412:	4606      	mov	r6, r0
 800a414:	d1d6      	bne.n	800a3c4 <_svfiprintf_r+0x174>
 800a416:	89ab      	ldrh	r3, [r5, #12]
 800a418:	065b      	lsls	r3, r3, #25
 800a41a:	f53f af2d 	bmi.w	800a278 <_svfiprintf_r+0x28>
 800a41e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a420:	e72c      	b.n	800a27c <_svfiprintf_r+0x2c>
 800a422:	ab03      	add	r3, sp, #12
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	462a      	mov	r2, r5
 800a428:	4b05      	ldr	r3, [pc, #20]	@ (800a440 <_svfiprintf_r+0x1f0>)
 800a42a:	a904      	add	r1, sp, #16
 800a42c:	4638      	mov	r0, r7
 800a42e:	f7fd f81b 	bl	8007468 <_printf_i>
 800a432:	e7ed      	b.n	800a410 <_svfiprintf_r+0x1c0>
 800a434:	0800b799 	.word	0x0800b799
 800a438:	0800b7a3 	.word	0x0800b7a3
 800a43c:	08006f59 	.word	0x08006f59
 800a440:	0800a199 	.word	0x0800a199
 800a444:	0800b79f 	.word	0x0800b79f

0800a448 <__sflush_r>:
 800a448:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a450:	0716      	lsls	r6, r2, #28
 800a452:	4605      	mov	r5, r0
 800a454:	460c      	mov	r4, r1
 800a456:	d454      	bmi.n	800a502 <__sflush_r+0xba>
 800a458:	684b      	ldr	r3, [r1, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	dc02      	bgt.n	800a464 <__sflush_r+0x1c>
 800a45e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a460:	2b00      	cmp	r3, #0
 800a462:	dd48      	ble.n	800a4f6 <__sflush_r+0xae>
 800a464:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a466:	2e00      	cmp	r6, #0
 800a468:	d045      	beq.n	800a4f6 <__sflush_r+0xae>
 800a46a:	2300      	movs	r3, #0
 800a46c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a470:	682f      	ldr	r7, [r5, #0]
 800a472:	6a21      	ldr	r1, [r4, #32]
 800a474:	602b      	str	r3, [r5, #0]
 800a476:	d030      	beq.n	800a4da <__sflush_r+0x92>
 800a478:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	0759      	lsls	r1, r3, #29
 800a47e:	d505      	bpl.n	800a48c <__sflush_r+0x44>
 800a480:	6863      	ldr	r3, [r4, #4]
 800a482:	1ad2      	subs	r2, r2, r3
 800a484:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a486:	b10b      	cbz	r3, 800a48c <__sflush_r+0x44>
 800a488:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a48a:	1ad2      	subs	r2, r2, r3
 800a48c:	2300      	movs	r3, #0
 800a48e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a490:	6a21      	ldr	r1, [r4, #32]
 800a492:	4628      	mov	r0, r5
 800a494:	47b0      	blx	r6
 800a496:	1c43      	adds	r3, r0, #1
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	d106      	bne.n	800a4aa <__sflush_r+0x62>
 800a49c:	6829      	ldr	r1, [r5, #0]
 800a49e:	291d      	cmp	r1, #29
 800a4a0:	d82b      	bhi.n	800a4fa <__sflush_r+0xb2>
 800a4a2:	4a2a      	ldr	r2, [pc, #168]	@ (800a54c <__sflush_r+0x104>)
 800a4a4:	40ca      	lsrs	r2, r1
 800a4a6:	07d6      	lsls	r6, r2, #31
 800a4a8:	d527      	bpl.n	800a4fa <__sflush_r+0xb2>
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	6062      	str	r2, [r4, #4]
 800a4ae:	04d9      	lsls	r1, r3, #19
 800a4b0:	6922      	ldr	r2, [r4, #16]
 800a4b2:	6022      	str	r2, [r4, #0]
 800a4b4:	d504      	bpl.n	800a4c0 <__sflush_r+0x78>
 800a4b6:	1c42      	adds	r2, r0, #1
 800a4b8:	d101      	bne.n	800a4be <__sflush_r+0x76>
 800a4ba:	682b      	ldr	r3, [r5, #0]
 800a4bc:	b903      	cbnz	r3, 800a4c0 <__sflush_r+0x78>
 800a4be:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4c2:	602f      	str	r7, [r5, #0]
 800a4c4:	b1b9      	cbz	r1, 800a4f6 <__sflush_r+0xae>
 800a4c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4ca:	4299      	cmp	r1, r3
 800a4cc:	d002      	beq.n	800a4d4 <__sflush_r+0x8c>
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	f7fe fa84 	bl	80089dc <_free_r>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4d8:	e00d      	b.n	800a4f6 <__sflush_r+0xae>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	4628      	mov	r0, r5
 800a4de:	47b0      	blx	r6
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	1c50      	adds	r0, r2, #1
 800a4e4:	d1c9      	bne.n	800a47a <__sflush_r+0x32>
 800a4e6:	682b      	ldr	r3, [r5, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d0c6      	beq.n	800a47a <__sflush_r+0x32>
 800a4ec:	2b1d      	cmp	r3, #29
 800a4ee:	d001      	beq.n	800a4f4 <__sflush_r+0xac>
 800a4f0:	2b16      	cmp	r3, #22
 800a4f2:	d11e      	bne.n	800a532 <__sflush_r+0xea>
 800a4f4:	602f      	str	r7, [r5, #0]
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	e022      	b.n	800a540 <__sflush_r+0xf8>
 800a4fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4fe:	b21b      	sxth	r3, r3
 800a500:	e01b      	b.n	800a53a <__sflush_r+0xf2>
 800a502:	690f      	ldr	r7, [r1, #16]
 800a504:	2f00      	cmp	r7, #0
 800a506:	d0f6      	beq.n	800a4f6 <__sflush_r+0xae>
 800a508:	0793      	lsls	r3, r2, #30
 800a50a:	680e      	ldr	r6, [r1, #0]
 800a50c:	bf08      	it	eq
 800a50e:	694b      	ldreq	r3, [r1, #20]
 800a510:	600f      	str	r7, [r1, #0]
 800a512:	bf18      	it	ne
 800a514:	2300      	movne	r3, #0
 800a516:	eba6 0807 	sub.w	r8, r6, r7
 800a51a:	608b      	str	r3, [r1, #8]
 800a51c:	f1b8 0f00 	cmp.w	r8, #0
 800a520:	dde9      	ble.n	800a4f6 <__sflush_r+0xae>
 800a522:	6a21      	ldr	r1, [r4, #32]
 800a524:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a526:	4643      	mov	r3, r8
 800a528:	463a      	mov	r2, r7
 800a52a:	4628      	mov	r0, r5
 800a52c:	47b0      	blx	r6
 800a52e:	2800      	cmp	r0, #0
 800a530:	dc08      	bgt.n	800a544 <__sflush_r+0xfc>
 800a532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a53a:	81a3      	strh	r3, [r4, #12]
 800a53c:	f04f 30ff 	mov.w	r0, #4294967295
 800a540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a544:	4407      	add	r7, r0
 800a546:	eba8 0800 	sub.w	r8, r8, r0
 800a54a:	e7e7      	b.n	800a51c <__sflush_r+0xd4>
 800a54c:	20400001 	.word	0x20400001

0800a550 <_fflush_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	690b      	ldr	r3, [r1, #16]
 800a554:	4605      	mov	r5, r0
 800a556:	460c      	mov	r4, r1
 800a558:	b913      	cbnz	r3, 800a560 <_fflush_r+0x10>
 800a55a:	2500      	movs	r5, #0
 800a55c:	4628      	mov	r0, r5
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	b118      	cbz	r0, 800a56a <_fflush_r+0x1a>
 800a562:	6a03      	ldr	r3, [r0, #32]
 800a564:	b90b      	cbnz	r3, 800a56a <_fflush_r+0x1a>
 800a566:	f7fd fb2f 	bl	8007bc8 <__sinit>
 800a56a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d0f3      	beq.n	800a55a <_fflush_r+0xa>
 800a572:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a574:	07d0      	lsls	r0, r2, #31
 800a576:	d404      	bmi.n	800a582 <_fflush_r+0x32>
 800a578:	0599      	lsls	r1, r3, #22
 800a57a:	d402      	bmi.n	800a582 <_fflush_r+0x32>
 800a57c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a57e:	f7fd fc3c 	bl	8007dfa <__retarget_lock_acquire_recursive>
 800a582:	4628      	mov	r0, r5
 800a584:	4621      	mov	r1, r4
 800a586:	f7ff ff5f 	bl	800a448 <__sflush_r>
 800a58a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a58c:	07da      	lsls	r2, r3, #31
 800a58e:	4605      	mov	r5, r0
 800a590:	d4e4      	bmi.n	800a55c <_fflush_r+0xc>
 800a592:	89a3      	ldrh	r3, [r4, #12]
 800a594:	059b      	lsls	r3, r3, #22
 800a596:	d4e1      	bmi.n	800a55c <_fflush_r+0xc>
 800a598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a59a:	f7fd fc2f 	bl	8007dfc <__retarget_lock_release_recursive>
 800a59e:	e7dd      	b.n	800a55c <_fflush_r+0xc>

0800a5a0 <memmove>:
 800a5a0:	4288      	cmp	r0, r1
 800a5a2:	b510      	push	{r4, lr}
 800a5a4:	eb01 0402 	add.w	r4, r1, r2
 800a5a8:	d902      	bls.n	800a5b0 <memmove+0x10>
 800a5aa:	4284      	cmp	r4, r0
 800a5ac:	4623      	mov	r3, r4
 800a5ae:	d807      	bhi.n	800a5c0 <memmove+0x20>
 800a5b0:	1e43      	subs	r3, r0, #1
 800a5b2:	42a1      	cmp	r1, r4
 800a5b4:	d008      	beq.n	800a5c8 <memmove+0x28>
 800a5b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5be:	e7f8      	b.n	800a5b2 <memmove+0x12>
 800a5c0:	4402      	add	r2, r0
 800a5c2:	4601      	mov	r1, r0
 800a5c4:	428a      	cmp	r2, r1
 800a5c6:	d100      	bne.n	800a5ca <memmove+0x2a>
 800a5c8:	bd10      	pop	{r4, pc}
 800a5ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5d2:	e7f7      	b.n	800a5c4 <memmove+0x24>

0800a5d4 <strncmp>:
 800a5d4:	b510      	push	{r4, lr}
 800a5d6:	b16a      	cbz	r2, 800a5f4 <strncmp+0x20>
 800a5d8:	3901      	subs	r1, #1
 800a5da:	1884      	adds	r4, r0, r2
 800a5dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d103      	bne.n	800a5f0 <strncmp+0x1c>
 800a5e8:	42a0      	cmp	r0, r4
 800a5ea:	d001      	beq.n	800a5f0 <strncmp+0x1c>
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	d1f5      	bne.n	800a5dc <strncmp+0x8>
 800a5f0:	1ad0      	subs	r0, r2, r3
 800a5f2:	bd10      	pop	{r4, pc}
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	e7fc      	b.n	800a5f2 <strncmp+0x1e>

0800a5f8 <_sbrk_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4d06      	ldr	r5, [pc, #24]	@ (800a614 <_sbrk_r+0x1c>)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4604      	mov	r4, r0
 800a600:	4608      	mov	r0, r1
 800a602:	602b      	str	r3, [r5, #0]
 800a604:	f7f8 f96e 	bl	80028e4 <_sbrk>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_sbrk_r+0x1a>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_sbrk_r+0x1a>
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	200005cc 	.word	0x200005cc

0800a618 <memcpy>:
 800a618:	440a      	add	r2, r1
 800a61a:	4291      	cmp	r1, r2
 800a61c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a620:	d100      	bne.n	800a624 <memcpy+0xc>
 800a622:	4770      	bx	lr
 800a624:	b510      	push	{r4, lr}
 800a626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a62a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a62e:	4291      	cmp	r1, r2
 800a630:	d1f9      	bne.n	800a626 <memcpy+0xe>
 800a632:	bd10      	pop	{r4, pc}
 800a634:	0000      	movs	r0, r0
	...

0800a638 <nan>:
 800a638:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a640 <nan+0x8>
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	00000000 	.word	0x00000000
 800a644:	7ff80000 	.word	0x7ff80000

0800a648 <__assert_func>:
 800a648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a64a:	4614      	mov	r4, r2
 800a64c:	461a      	mov	r2, r3
 800a64e:	4b09      	ldr	r3, [pc, #36]	@ (800a674 <__assert_func+0x2c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4605      	mov	r5, r0
 800a654:	68d8      	ldr	r0, [r3, #12]
 800a656:	b14c      	cbz	r4, 800a66c <__assert_func+0x24>
 800a658:	4b07      	ldr	r3, [pc, #28]	@ (800a678 <__assert_func+0x30>)
 800a65a:	9100      	str	r1, [sp, #0]
 800a65c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a660:	4906      	ldr	r1, [pc, #24]	@ (800a67c <__assert_func+0x34>)
 800a662:	462b      	mov	r3, r5
 800a664:	f000 fba8 	bl	800adb8 <fiprintf>
 800a668:	f000 fbb8 	bl	800addc <abort>
 800a66c:	4b04      	ldr	r3, [pc, #16]	@ (800a680 <__assert_func+0x38>)
 800a66e:	461c      	mov	r4, r3
 800a670:	e7f3      	b.n	800a65a <__assert_func+0x12>
 800a672:	bf00      	nop
 800a674:	20000024 	.word	0x20000024
 800a678:	0800b7b2 	.word	0x0800b7b2
 800a67c:	0800b7bf 	.word	0x0800b7bf
 800a680:	0800b7ed 	.word	0x0800b7ed

0800a684 <_calloc_r>:
 800a684:	b570      	push	{r4, r5, r6, lr}
 800a686:	fba1 5402 	umull	r5, r4, r1, r2
 800a68a:	b934      	cbnz	r4, 800a69a <_calloc_r+0x16>
 800a68c:	4629      	mov	r1, r5
 800a68e:	f7fe fa19 	bl	8008ac4 <_malloc_r>
 800a692:	4606      	mov	r6, r0
 800a694:	b928      	cbnz	r0, 800a6a2 <_calloc_r+0x1e>
 800a696:	4630      	mov	r0, r6
 800a698:	bd70      	pop	{r4, r5, r6, pc}
 800a69a:	220c      	movs	r2, #12
 800a69c:	6002      	str	r2, [r0, #0]
 800a69e:	2600      	movs	r6, #0
 800a6a0:	e7f9      	b.n	800a696 <_calloc_r+0x12>
 800a6a2:	462a      	mov	r2, r5
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	f7fd fb2a 	bl	8007cfe <memset>
 800a6aa:	e7f4      	b.n	800a696 <_calloc_r+0x12>

0800a6ac <rshift>:
 800a6ac:	6903      	ldr	r3, [r0, #16]
 800a6ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a6b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a6ba:	f100 0414 	add.w	r4, r0, #20
 800a6be:	dd45      	ble.n	800a74c <rshift+0xa0>
 800a6c0:	f011 011f 	ands.w	r1, r1, #31
 800a6c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a6c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a6cc:	d10c      	bne.n	800a6e8 <rshift+0x3c>
 800a6ce:	f100 0710 	add.w	r7, r0, #16
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	42b1      	cmp	r1, r6
 800a6d6:	d334      	bcc.n	800a742 <rshift+0x96>
 800a6d8:	1a9b      	subs	r3, r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	1eea      	subs	r2, r5, #3
 800a6de:	4296      	cmp	r6, r2
 800a6e0:	bf38      	it	cc
 800a6e2:	2300      	movcc	r3, #0
 800a6e4:	4423      	add	r3, r4
 800a6e6:	e015      	b.n	800a714 <rshift+0x68>
 800a6e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a6ec:	f1c1 0820 	rsb	r8, r1, #32
 800a6f0:	40cf      	lsrs	r7, r1
 800a6f2:	f105 0e04 	add.w	lr, r5, #4
 800a6f6:	46a1      	mov	r9, r4
 800a6f8:	4576      	cmp	r6, lr
 800a6fa:	46f4      	mov	ip, lr
 800a6fc:	d815      	bhi.n	800a72a <rshift+0x7e>
 800a6fe:	1a9a      	subs	r2, r3, r2
 800a700:	0092      	lsls	r2, r2, #2
 800a702:	3a04      	subs	r2, #4
 800a704:	3501      	adds	r5, #1
 800a706:	42ae      	cmp	r6, r5
 800a708:	bf38      	it	cc
 800a70a:	2200      	movcc	r2, #0
 800a70c:	18a3      	adds	r3, r4, r2
 800a70e:	50a7      	str	r7, [r4, r2]
 800a710:	b107      	cbz	r7, 800a714 <rshift+0x68>
 800a712:	3304      	adds	r3, #4
 800a714:	1b1a      	subs	r2, r3, r4
 800a716:	42a3      	cmp	r3, r4
 800a718:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a71c:	bf08      	it	eq
 800a71e:	2300      	moveq	r3, #0
 800a720:	6102      	str	r2, [r0, #16]
 800a722:	bf08      	it	eq
 800a724:	6143      	streq	r3, [r0, #20]
 800a726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a72a:	f8dc c000 	ldr.w	ip, [ip]
 800a72e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a732:	ea4c 0707 	orr.w	r7, ip, r7
 800a736:	f849 7b04 	str.w	r7, [r9], #4
 800a73a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a73e:	40cf      	lsrs	r7, r1
 800a740:	e7da      	b.n	800a6f8 <rshift+0x4c>
 800a742:	f851 cb04 	ldr.w	ip, [r1], #4
 800a746:	f847 cf04 	str.w	ip, [r7, #4]!
 800a74a:	e7c3      	b.n	800a6d4 <rshift+0x28>
 800a74c:	4623      	mov	r3, r4
 800a74e:	e7e1      	b.n	800a714 <rshift+0x68>

0800a750 <__hexdig_fun>:
 800a750:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a754:	2b09      	cmp	r3, #9
 800a756:	d802      	bhi.n	800a75e <__hexdig_fun+0xe>
 800a758:	3820      	subs	r0, #32
 800a75a:	b2c0      	uxtb	r0, r0
 800a75c:	4770      	bx	lr
 800a75e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a762:	2b05      	cmp	r3, #5
 800a764:	d801      	bhi.n	800a76a <__hexdig_fun+0x1a>
 800a766:	3847      	subs	r0, #71	@ 0x47
 800a768:	e7f7      	b.n	800a75a <__hexdig_fun+0xa>
 800a76a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a76e:	2b05      	cmp	r3, #5
 800a770:	d801      	bhi.n	800a776 <__hexdig_fun+0x26>
 800a772:	3827      	subs	r0, #39	@ 0x27
 800a774:	e7f1      	b.n	800a75a <__hexdig_fun+0xa>
 800a776:	2000      	movs	r0, #0
 800a778:	4770      	bx	lr
	...

0800a77c <__gethex>:
 800a77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a780:	b085      	sub	sp, #20
 800a782:	468a      	mov	sl, r1
 800a784:	9302      	str	r3, [sp, #8]
 800a786:	680b      	ldr	r3, [r1, #0]
 800a788:	9001      	str	r0, [sp, #4]
 800a78a:	4690      	mov	r8, r2
 800a78c:	1c9c      	adds	r4, r3, #2
 800a78e:	46a1      	mov	r9, r4
 800a790:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a794:	2830      	cmp	r0, #48	@ 0x30
 800a796:	d0fa      	beq.n	800a78e <__gethex+0x12>
 800a798:	eba9 0303 	sub.w	r3, r9, r3
 800a79c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a7a0:	f7ff ffd6 	bl	800a750 <__hexdig_fun>
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d168      	bne.n	800a87c <__gethex+0x100>
 800a7aa:	49a0      	ldr	r1, [pc, #640]	@ (800aa2c <__gethex+0x2b0>)
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	4648      	mov	r0, r9
 800a7b0:	f7ff ff10 	bl	800a5d4 <strncmp>
 800a7b4:	4607      	mov	r7, r0
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d167      	bne.n	800a88a <__gethex+0x10e>
 800a7ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a7be:	4626      	mov	r6, r4
 800a7c0:	f7ff ffc6 	bl	800a750 <__hexdig_fun>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d062      	beq.n	800a88e <__gethex+0x112>
 800a7c8:	4623      	mov	r3, r4
 800a7ca:	7818      	ldrb	r0, [r3, #0]
 800a7cc:	2830      	cmp	r0, #48	@ 0x30
 800a7ce:	4699      	mov	r9, r3
 800a7d0:	f103 0301 	add.w	r3, r3, #1
 800a7d4:	d0f9      	beq.n	800a7ca <__gethex+0x4e>
 800a7d6:	f7ff ffbb 	bl	800a750 <__hexdig_fun>
 800a7da:	fab0 f580 	clz	r5, r0
 800a7de:	096d      	lsrs	r5, r5, #5
 800a7e0:	f04f 0b01 	mov.w	fp, #1
 800a7e4:	464a      	mov	r2, r9
 800a7e6:	4616      	mov	r6, r2
 800a7e8:	3201      	adds	r2, #1
 800a7ea:	7830      	ldrb	r0, [r6, #0]
 800a7ec:	f7ff ffb0 	bl	800a750 <__hexdig_fun>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d1f8      	bne.n	800a7e6 <__gethex+0x6a>
 800a7f4:	498d      	ldr	r1, [pc, #564]	@ (800aa2c <__gethex+0x2b0>)
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7ff feeb 	bl	800a5d4 <strncmp>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d13f      	bne.n	800a882 <__gethex+0x106>
 800a802:	b944      	cbnz	r4, 800a816 <__gethex+0x9a>
 800a804:	1c74      	adds	r4, r6, #1
 800a806:	4622      	mov	r2, r4
 800a808:	4616      	mov	r6, r2
 800a80a:	3201      	adds	r2, #1
 800a80c:	7830      	ldrb	r0, [r6, #0]
 800a80e:	f7ff ff9f 	bl	800a750 <__hexdig_fun>
 800a812:	2800      	cmp	r0, #0
 800a814:	d1f8      	bne.n	800a808 <__gethex+0x8c>
 800a816:	1ba4      	subs	r4, r4, r6
 800a818:	00a7      	lsls	r7, r4, #2
 800a81a:	7833      	ldrb	r3, [r6, #0]
 800a81c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a820:	2b50      	cmp	r3, #80	@ 0x50
 800a822:	d13e      	bne.n	800a8a2 <__gethex+0x126>
 800a824:	7873      	ldrb	r3, [r6, #1]
 800a826:	2b2b      	cmp	r3, #43	@ 0x2b
 800a828:	d033      	beq.n	800a892 <__gethex+0x116>
 800a82a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a82c:	d034      	beq.n	800a898 <__gethex+0x11c>
 800a82e:	1c71      	adds	r1, r6, #1
 800a830:	2400      	movs	r4, #0
 800a832:	7808      	ldrb	r0, [r1, #0]
 800a834:	f7ff ff8c 	bl	800a750 <__hexdig_fun>
 800a838:	1e43      	subs	r3, r0, #1
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	2b18      	cmp	r3, #24
 800a83e:	d830      	bhi.n	800a8a2 <__gethex+0x126>
 800a840:	f1a0 0210 	sub.w	r2, r0, #16
 800a844:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a848:	f7ff ff82 	bl	800a750 <__hexdig_fun>
 800a84c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a850:	fa5f fc8c 	uxtb.w	ip, ip
 800a854:	f1bc 0f18 	cmp.w	ip, #24
 800a858:	f04f 030a 	mov.w	r3, #10
 800a85c:	d91e      	bls.n	800a89c <__gethex+0x120>
 800a85e:	b104      	cbz	r4, 800a862 <__gethex+0xe6>
 800a860:	4252      	negs	r2, r2
 800a862:	4417      	add	r7, r2
 800a864:	f8ca 1000 	str.w	r1, [sl]
 800a868:	b1ed      	cbz	r5, 800a8a6 <__gethex+0x12a>
 800a86a:	f1bb 0f00 	cmp.w	fp, #0
 800a86e:	bf0c      	ite	eq
 800a870:	2506      	moveq	r5, #6
 800a872:	2500      	movne	r5, #0
 800a874:	4628      	mov	r0, r5
 800a876:	b005      	add	sp, #20
 800a878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87c:	2500      	movs	r5, #0
 800a87e:	462c      	mov	r4, r5
 800a880:	e7b0      	b.n	800a7e4 <__gethex+0x68>
 800a882:	2c00      	cmp	r4, #0
 800a884:	d1c7      	bne.n	800a816 <__gethex+0x9a>
 800a886:	4627      	mov	r7, r4
 800a888:	e7c7      	b.n	800a81a <__gethex+0x9e>
 800a88a:	464e      	mov	r6, r9
 800a88c:	462f      	mov	r7, r5
 800a88e:	2501      	movs	r5, #1
 800a890:	e7c3      	b.n	800a81a <__gethex+0x9e>
 800a892:	2400      	movs	r4, #0
 800a894:	1cb1      	adds	r1, r6, #2
 800a896:	e7cc      	b.n	800a832 <__gethex+0xb6>
 800a898:	2401      	movs	r4, #1
 800a89a:	e7fb      	b.n	800a894 <__gethex+0x118>
 800a89c:	fb03 0002 	mla	r0, r3, r2, r0
 800a8a0:	e7ce      	b.n	800a840 <__gethex+0xc4>
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	e7de      	b.n	800a864 <__gethex+0xe8>
 800a8a6:	eba6 0309 	sub.w	r3, r6, r9
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	2b07      	cmp	r3, #7
 800a8b0:	dc0a      	bgt.n	800a8c8 <__gethex+0x14c>
 800a8b2:	9801      	ldr	r0, [sp, #4]
 800a8b4:	f7fe f992 	bl	8008bdc <_Balloc>
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	b940      	cbnz	r0, 800a8ce <__gethex+0x152>
 800a8bc:	4b5c      	ldr	r3, [pc, #368]	@ (800aa30 <__gethex+0x2b4>)
 800a8be:	4602      	mov	r2, r0
 800a8c0:	21e4      	movs	r1, #228	@ 0xe4
 800a8c2:	485c      	ldr	r0, [pc, #368]	@ (800aa34 <__gethex+0x2b8>)
 800a8c4:	f7ff fec0 	bl	800a648 <__assert_func>
 800a8c8:	3101      	adds	r1, #1
 800a8ca:	105b      	asrs	r3, r3, #1
 800a8cc:	e7ef      	b.n	800a8ae <__gethex+0x132>
 800a8ce:	f100 0a14 	add.w	sl, r0, #20
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	4655      	mov	r5, sl
 800a8d6:	469b      	mov	fp, r3
 800a8d8:	45b1      	cmp	r9, r6
 800a8da:	d337      	bcc.n	800a94c <__gethex+0x1d0>
 800a8dc:	f845 bb04 	str.w	fp, [r5], #4
 800a8e0:	eba5 050a 	sub.w	r5, r5, sl
 800a8e4:	10ad      	asrs	r5, r5, #2
 800a8e6:	6125      	str	r5, [r4, #16]
 800a8e8:	4658      	mov	r0, fp
 800a8ea:	f7fe fa69 	bl	8008dc0 <__hi0bits>
 800a8ee:	016d      	lsls	r5, r5, #5
 800a8f0:	f8d8 6000 	ldr.w	r6, [r8]
 800a8f4:	1a2d      	subs	r5, r5, r0
 800a8f6:	42b5      	cmp	r5, r6
 800a8f8:	dd54      	ble.n	800a9a4 <__gethex+0x228>
 800a8fa:	1bad      	subs	r5, r5, r6
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	4620      	mov	r0, r4
 800a900:	f7fe fdf2 	bl	80094e8 <__any_on>
 800a904:	4681      	mov	r9, r0
 800a906:	b178      	cbz	r0, 800a928 <__gethex+0x1ac>
 800a908:	1e6b      	subs	r3, r5, #1
 800a90a:	1159      	asrs	r1, r3, #5
 800a90c:	f003 021f 	and.w	r2, r3, #31
 800a910:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a914:	f04f 0901 	mov.w	r9, #1
 800a918:	fa09 f202 	lsl.w	r2, r9, r2
 800a91c:	420a      	tst	r2, r1
 800a91e:	d003      	beq.n	800a928 <__gethex+0x1ac>
 800a920:	454b      	cmp	r3, r9
 800a922:	dc36      	bgt.n	800a992 <__gethex+0x216>
 800a924:	f04f 0902 	mov.w	r9, #2
 800a928:	4629      	mov	r1, r5
 800a92a:	4620      	mov	r0, r4
 800a92c:	f7ff febe 	bl	800a6ac <rshift>
 800a930:	442f      	add	r7, r5
 800a932:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a936:	42bb      	cmp	r3, r7
 800a938:	da42      	bge.n	800a9c0 <__gethex+0x244>
 800a93a:	9801      	ldr	r0, [sp, #4]
 800a93c:	4621      	mov	r1, r4
 800a93e:	f7fe f98d 	bl	8008c5c <_Bfree>
 800a942:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a944:	2300      	movs	r3, #0
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	25a3      	movs	r5, #163	@ 0xa3
 800a94a:	e793      	b.n	800a874 <__gethex+0xf8>
 800a94c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a950:	2a2e      	cmp	r2, #46	@ 0x2e
 800a952:	d012      	beq.n	800a97a <__gethex+0x1fe>
 800a954:	2b20      	cmp	r3, #32
 800a956:	d104      	bne.n	800a962 <__gethex+0x1e6>
 800a958:	f845 bb04 	str.w	fp, [r5], #4
 800a95c:	f04f 0b00 	mov.w	fp, #0
 800a960:	465b      	mov	r3, fp
 800a962:	7830      	ldrb	r0, [r6, #0]
 800a964:	9303      	str	r3, [sp, #12]
 800a966:	f7ff fef3 	bl	800a750 <__hexdig_fun>
 800a96a:	9b03      	ldr	r3, [sp, #12]
 800a96c:	f000 000f 	and.w	r0, r0, #15
 800a970:	4098      	lsls	r0, r3
 800a972:	ea4b 0b00 	orr.w	fp, fp, r0
 800a976:	3304      	adds	r3, #4
 800a978:	e7ae      	b.n	800a8d8 <__gethex+0x15c>
 800a97a:	45b1      	cmp	r9, r6
 800a97c:	d8ea      	bhi.n	800a954 <__gethex+0x1d8>
 800a97e:	492b      	ldr	r1, [pc, #172]	@ (800aa2c <__gethex+0x2b0>)
 800a980:	9303      	str	r3, [sp, #12]
 800a982:	2201      	movs	r2, #1
 800a984:	4630      	mov	r0, r6
 800a986:	f7ff fe25 	bl	800a5d4 <strncmp>
 800a98a:	9b03      	ldr	r3, [sp, #12]
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d1e1      	bne.n	800a954 <__gethex+0x1d8>
 800a990:	e7a2      	b.n	800a8d8 <__gethex+0x15c>
 800a992:	1ea9      	subs	r1, r5, #2
 800a994:	4620      	mov	r0, r4
 800a996:	f7fe fda7 	bl	80094e8 <__any_on>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	d0c2      	beq.n	800a924 <__gethex+0x1a8>
 800a99e:	f04f 0903 	mov.w	r9, #3
 800a9a2:	e7c1      	b.n	800a928 <__gethex+0x1ac>
 800a9a4:	da09      	bge.n	800a9ba <__gethex+0x23e>
 800a9a6:	1b75      	subs	r5, r6, r5
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	9801      	ldr	r0, [sp, #4]
 800a9ac:	462a      	mov	r2, r5
 800a9ae:	f7fe fb65 	bl	800907c <__lshift>
 800a9b2:	1b7f      	subs	r7, r7, r5
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	f100 0a14 	add.w	sl, r0, #20
 800a9ba:	f04f 0900 	mov.w	r9, #0
 800a9be:	e7b8      	b.n	800a932 <__gethex+0x1b6>
 800a9c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a9c4:	42bd      	cmp	r5, r7
 800a9c6:	dd6f      	ble.n	800aaa8 <__gethex+0x32c>
 800a9c8:	1bed      	subs	r5, r5, r7
 800a9ca:	42ae      	cmp	r6, r5
 800a9cc:	dc34      	bgt.n	800aa38 <__gethex+0x2bc>
 800a9ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d022      	beq.n	800aa1c <__gethex+0x2a0>
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d024      	beq.n	800aa24 <__gethex+0x2a8>
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d115      	bne.n	800aa0a <__gethex+0x28e>
 800a9de:	42ae      	cmp	r6, r5
 800a9e0:	d113      	bne.n	800aa0a <__gethex+0x28e>
 800a9e2:	2e01      	cmp	r6, #1
 800a9e4:	d10b      	bne.n	800a9fe <__gethex+0x282>
 800a9e6:	9a02      	ldr	r2, [sp, #8]
 800a9e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	6123      	str	r3, [r4, #16]
 800a9f2:	f8ca 3000 	str.w	r3, [sl]
 800a9f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9f8:	2562      	movs	r5, #98	@ 0x62
 800a9fa:	601c      	str	r4, [r3, #0]
 800a9fc:	e73a      	b.n	800a874 <__gethex+0xf8>
 800a9fe:	1e71      	subs	r1, r6, #1
 800aa00:	4620      	mov	r0, r4
 800aa02:	f7fe fd71 	bl	80094e8 <__any_on>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d1ed      	bne.n	800a9e6 <__gethex+0x26a>
 800aa0a:	9801      	ldr	r0, [sp, #4]
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	f7fe f925 	bl	8008c5c <_Bfree>
 800aa12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa14:	2300      	movs	r3, #0
 800aa16:	6013      	str	r3, [r2, #0]
 800aa18:	2550      	movs	r5, #80	@ 0x50
 800aa1a:	e72b      	b.n	800a874 <__gethex+0xf8>
 800aa1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1f3      	bne.n	800aa0a <__gethex+0x28e>
 800aa22:	e7e0      	b.n	800a9e6 <__gethex+0x26a>
 800aa24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1dd      	bne.n	800a9e6 <__gethex+0x26a>
 800aa2a:	e7ee      	b.n	800aa0a <__gethex+0x28e>
 800aa2c:	0800b797 	.word	0x0800b797
 800aa30:	0800b72d 	.word	0x0800b72d
 800aa34:	0800b7ee 	.word	0x0800b7ee
 800aa38:	1e6f      	subs	r7, r5, #1
 800aa3a:	f1b9 0f00 	cmp.w	r9, #0
 800aa3e:	d130      	bne.n	800aaa2 <__gethex+0x326>
 800aa40:	b127      	cbz	r7, 800aa4c <__gethex+0x2d0>
 800aa42:	4639      	mov	r1, r7
 800aa44:	4620      	mov	r0, r4
 800aa46:	f7fe fd4f 	bl	80094e8 <__any_on>
 800aa4a:	4681      	mov	r9, r0
 800aa4c:	117a      	asrs	r2, r7, #5
 800aa4e:	2301      	movs	r3, #1
 800aa50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aa54:	f007 071f 	and.w	r7, r7, #31
 800aa58:	40bb      	lsls	r3, r7
 800aa5a:	4213      	tst	r3, r2
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	4620      	mov	r0, r4
 800aa60:	bf18      	it	ne
 800aa62:	f049 0902 	orrne.w	r9, r9, #2
 800aa66:	f7ff fe21 	bl	800a6ac <rshift>
 800aa6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800aa6e:	1b76      	subs	r6, r6, r5
 800aa70:	2502      	movs	r5, #2
 800aa72:	f1b9 0f00 	cmp.w	r9, #0
 800aa76:	d047      	beq.n	800ab08 <__gethex+0x38c>
 800aa78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d015      	beq.n	800aaac <__gethex+0x330>
 800aa80:	2b03      	cmp	r3, #3
 800aa82:	d017      	beq.n	800aab4 <__gethex+0x338>
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d109      	bne.n	800aa9c <__gethex+0x320>
 800aa88:	f019 0f02 	tst.w	r9, #2
 800aa8c:	d006      	beq.n	800aa9c <__gethex+0x320>
 800aa8e:	f8da 3000 	ldr.w	r3, [sl]
 800aa92:	ea49 0903 	orr.w	r9, r9, r3
 800aa96:	f019 0f01 	tst.w	r9, #1
 800aa9a:	d10e      	bne.n	800aaba <__gethex+0x33e>
 800aa9c:	f045 0510 	orr.w	r5, r5, #16
 800aaa0:	e032      	b.n	800ab08 <__gethex+0x38c>
 800aaa2:	f04f 0901 	mov.w	r9, #1
 800aaa6:	e7d1      	b.n	800aa4c <__gethex+0x2d0>
 800aaa8:	2501      	movs	r5, #1
 800aaaa:	e7e2      	b.n	800aa72 <__gethex+0x2f6>
 800aaac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaae:	f1c3 0301 	rsb	r3, r3, #1
 800aab2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d0f0      	beq.n	800aa9c <__gethex+0x320>
 800aaba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aabe:	f104 0314 	add.w	r3, r4, #20
 800aac2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aac6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aaca:	f04f 0c00 	mov.w	ip, #0
 800aace:	4618      	mov	r0, r3
 800aad0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aad8:	d01b      	beq.n	800ab12 <__gethex+0x396>
 800aada:	3201      	adds	r2, #1
 800aadc:	6002      	str	r2, [r0, #0]
 800aade:	2d02      	cmp	r5, #2
 800aae0:	f104 0314 	add.w	r3, r4, #20
 800aae4:	d13c      	bne.n	800ab60 <__gethex+0x3e4>
 800aae6:	f8d8 2000 	ldr.w	r2, [r8]
 800aaea:	3a01      	subs	r2, #1
 800aaec:	42b2      	cmp	r2, r6
 800aaee:	d109      	bne.n	800ab04 <__gethex+0x388>
 800aaf0:	1171      	asrs	r1, r6, #5
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aaf8:	f006 061f 	and.w	r6, r6, #31
 800aafc:	fa02 f606 	lsl.w	r6, r2, r6
 800ab00:	421e      	tst	r6, r3
 800ab02:	d13a      	bne.n	800ab7a <__gethex+0x3fe>
 800ab04:	f045 0520 	orr.w	r5, r5, #32
 800ab08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab0a:	601c      	str	r4, [r3, #0]
 800ab0c:	9b02      	ldr	r3, [sp, #8]
 800ab0e:	601f      	str	r7, [r3, #0]
 800ab10:	e6b0      	b.n	800a874 <__gethex+0xf8>
 800ab12:	4299      	cmp	r1, r3
 800ab14:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab18:	d8d9      	bhi.n	800aace <__gethex+0x352>
 800ab1a:	68a3      	ldr	r3, [r4, #8]
 800ab1c:	459b      	cmp	fp, r3
 800ab1e:	db17      	blt.n	800ab50 <__gethex+0x3d4>
 800ab20:	6861      	ldr	r1, [r4, #4]
 800ab22:	9801      	ldr	r0, [sp, #4]
 800ab24:	3101      	adds	r1, #1
 800ab26:	f7fe f859 	bl	8008bdc <_Balloc>
 800ab2a:	4681      	mov	r9, r0
 800ab2c:	b918      	cbnz	r0, 800ab36 <__gethex+0x3ba>
 800ab2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ab98 <__gethex+0x41c>)
 800ab30:	4602      	mov	r2, r0
 800ab32:	2184      	movs	r1, #132	@ 0x84
 800ab34:	e6c5      	b.n	800a8c2 <__gethex+0x146>
 800ab36:	6922      	ldr	r2, [r4, #16]
 800ab38:	3202      	adds	r2, #2
 800ab3a:	f104 010c 	add.w	r1, r4, #12
 800ab3e:	0092      	lsls	r2, r2, #2
 800ab40:	300c      	adds	r0, #12
 800ab42:	f7ff fd69 	bl	800a618 <memcpy>
 800ab46:	4621      	mov	r1, r4
 800ab48:	9801      	ldr	r0, [sp, #4]
 800ab4a:	f7fe f887 	bl	8008c5c <_Bfree>
 800ab4e:	464c      	mov	r4, r9
 800ab50:	6923      	ldr	r3, [r4, #16]
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab58:	6122      	str	r2, [r4, #16]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	615a      	str	r2, [r3, #20]
 800ab5e:	e7be      	b.n	800aade <__gethex+0x362>
 800ab60:	6922      	ldr	r2, [r4, #16]
 800ab62:	455a      	cmp	r2, fp
 800ab64:	dd0b      	ble.n	800ab7e <__gethex+0x402>
 800ab66:	2101      	movs	r1, #1
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f7ff fd9f 	bl	800a6ac <rshift>
 800ab6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab72:	3701      	adds	r7, #1
 800ab74:	42bb      	cmp	r3, r7
 800ab76:	f6ff aee0 	blt.w	800a93a <__gethex+0x1be>
 800ab7a:	2501      	movs	r5, #1
 800ab7c:	e7c2      	b.n	800ab04 <__gethex+0x388>
 800ab7e:	f016 061f 	ands.w	r6, r6, #31
 800ab82:	d0fa      	beq.n	800ab7a <__gethex+0x3fe>
 800ab84:	4453      	add	r3, sl
 800ab86:	f1c6 0620 	rsb	r6, r6, #32
 800ab8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ab8e:	f7fe f917 	bl	8008dc0 <__hi0bits>
 800ab92:	42b0      	cmp	r0, r6
 800ab94:	dbe7      	blt.n	800ab66 <__gethex+0x3ea>
 800ab96:	e7f0      	b.n	800ab7a <__gethex+0x3fe>
 800ab98:	0800b72d 	.word	0x0800b72d

0800ab9c <L_shift>:
 800ab9c:	f1c2 0208 	rsb	r2, r2, #8
 800aba0:	0092      	lsls	r2, r2, #2
 800aba2:	b570      	push	{r4, r5, r6, lr}
 800aba4:	f1c2 0620 	rsb	r6, r2, #32
 800aba8:	6843      	ldr	r3, [r0, #4]
 800abaa:	6804      	ldr	r4, [r0, #0]
 800abac:	fa03 f506 	lsl.w	r5, r3, r6
 800abb0:	432c      	orrs	r4, r5
 800abb2:	40d3      	lsrs	r3, r2
 800abb4:	6004      	str	r4, [r0, #0]
 800abb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800abba:	4288      	cmp	r0, r1
 800abbc:	d3f4      	bcc.n	800aba8 <L_shift+0xc>
 800abbe:	bd70      	pop	{r4, r5, r6, pc}

0800abc0 <__match>:
 800abc0:	b530      	push	{r4, r5, lr}
 800abc2:	6803      	ldr	r3, [r0, #0]
 800abc4:	3301      	adds	r3, #1
 800abc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abca:	b914      	cbnz	r4, 800abd2 <__match+0x12>
 800abcc:	6003      	str	r3, [r0, #0]
 800abce:	2001      	movs	r0, #1
 800abd0:	bd30      	pop	{r4, r5, pc}
 800abd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800abda:	2d19      	cmp	r5, #25
 800abdc:	bf98      	it	ls
 800abde:	3220      	addls	r2, #32
 800abe0:	42a2      	cmp	r2, r4
 800abe2:	d0f0      	beq.n	800abc6 <__match+0x6>
 800abe4:	2000      	movs	r0, #0
 800abe6:	e7f3      	b.n	800abd0 <__match+0x10>

0800abe8 <__hexnan>:
 800abe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	680b      	ldr	r3, [r1, #0]
 800abee:	6801      	ldr	r1, [r0, #0]
 800abf0:	115e      	asrs	r6, r3, #5
 800abf2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800abf6:	f013 031f 	ands.w	r3, r3, #31
 800abfa:	b087      	sub	sp, #28
 800abfc:	bf18      	it	ne
 800abfe:	3604      	addne	r6, #4
 800ac00:	2500      	movs	r5, #0
 800ac02:	1f37      	subs	r7, r6, #4
 800ac04:	4682      	mov	sl, r0
 800ac06:	4690      	mov	r8, r2
 800ac08:	9301      	str	r3, [sp, #4]
 800ac0a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac0e:	46b9      	mov	r9, r7
 800ac10:	463c      	mov	r4, r7
 800ac12:	9502      	str	r5, [sp, #8]
 800ac14:	46ab      	mov	fp, r5
 800ac16:	784a      	ldrb	r2, [r1, #1]
 800ac18:	1c4b      	adds	r3, r1, #1
 800ac1a:	9303      	str	r3, [sp, #12]
 800ac1c:	b342      	cbz	r2, 800ac70 <__hexnan+0x88>
 800ac1e:	4610      	mov	r0, r2
 800ac20:	9105      	str	r1, [sp, #20]
 800ac22:	9204      	str	r2, [sp, #16]
 800ac24:	f7ff fd94 	bl	800a750 <__hexdig_fun>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d151      	bne.n	800acd0 <__hexnan+0xe8>
 800ac2c:	9a04      	ldr	r2, [sp, #16]
 800ac2e:	9905      	ldr	r1, [sp, #20]
 800ac30:	2a20      	cmp	r2, #32
 800ac32:	d818      	bhi.n	800ac66 <__hexnan+0x7e>
 800ac34:	9b02      	ldr	r3, [sp, #8]
 800ac36:	459b      	cmp	fp, r3
 800ac38:	dd13      	ble.n	800ac62 <__hexnan+0x7a>
 800ac3a:	454c      	cmp	r4, r9
 800ac3c:	d206      	bcs.n	800ac4c <__hexnan+0x64>
 800ac3e:	2d07      	cmp	r5, #7
 800ac40:	dc04      	bgt.n	800ac4c <__hexnan+0x64>
 800ac42:	462a      	mov	r2, r5
 800ac44:	4649      	mov	r1, r9
 800ac46:	4620      	mov	r0, r4
 800ac48:	f7ff ffa8 	bl	800ab9c <L_shift>
 800ac4c:	4544      	cmp	r4, r8
 800ac4e:	d952      	bls.n	800acf6 <__hexnan+0x10e>
 800ac50:	2300      	movs	r3, #0
 800ac52:	f1a4 0904 	sub.w	r9, r4, #4
 800ac56:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac5a:	f8cd b008 	str.w	fp, [sp, #8]
 800ac5e:	464c      	mov	r4, r9
 800ac60:	461d      	mov	r5, r3
 800ac62:	9903      	ldr	r1, [sp, #12]
 800ac64:	e7d7      	b.n	800ac16 <__hexnan+0x2e>
 800ac66:	2a29      	cmp	r2, #41	@ 0x29
 800ac68:	d157      	bne.n	800ad1a <__hexnan+0x132>
 800ac6a:	3102      	adds	r1, #2
 800ac6c:	f8ca 1000 	str.w	r1, [sl]
 800ac70:	f1bb 0f00 	cmp.w	fp, #0
 800ac74:	d051      	beq.n	800ad1a <__hexnan+0x132>
 800ac76:	454c      	cmp	r4, r9
 800ac78:	d206      	bcs.n	800ac88 <__hexnan+0xa0>
 800ac7a:	2d07      	cmp	r5, #7
 800ac7c:	dc04      	bgt.n	800ac88 <__hexnan+0xa0>
 800ac7e:	462a      	mov	r2, r5
 800ac80:	4649      	mov	r1, r9
 800ac82:	4620      	mov	r0, r4
 800ac84:	f7ff ff8a 	bl	800ab9c <L_shift>
 800ac88:	4544      	cmp	r4, r8
 800ac8a:	d936      	bls.n	800acfa <__hexnan+0x112>
 800ac8c:	f1a8 0204 	sub.w	r2, r8, #4
 800ac90:	4623      	mov	r3, r4
 800ac92:	f853 1b04 	ldr.w	r1, [r3], #4
 800ac96:	f842 1f04 	str.w	r1, [r2, #4]!
 800ac9a:	429f      	cmp	r7, r3
 800ac9c:	d2f9      	bcs.n	800ac92 <__hexnan+0xaa>
 800ac9e:	1b3b      	subs	r3, r7, r4
 800aca0:	f023 0303 	bic.w	r3, r3, #3
 800aca4:	3304      	adds	r3, #4
 800aca6:	3401      	adds	r4, #1
 800aca8:	3e03      	subs	r6, #3
 800acaa:	42b4      	cmp	r4, r6
 800acac:	bf88      	it	hi
 800acae:	2304      	movhi	r3, #4
 800acb0:	4443      	add	r3, r8
 800acb2:	2200      	movs	r2, #0
 800acb4:	f843 2b04 	str.w	r2, [r3], #4
 800acb8:	429f      	cmp	r7, r3
 800acba:	d2fb      	bcs.n	800acb4 <__hexnan+0xcc>
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	b91b      	cbnz	r3, 800acc8 <__hexnan+0xe0>
 800acc0:	4547      	cmp	r7, r8
 800acc2:	d128      	bne.n	800ad16 <__hexnan+0x12e>
 800acc4:	2301      	movs	r3, #1
 800acc6:	603b      	str	r3, [r7, #0]
 800acc8:	2005      	movs	r0, #5
 800acca:	b007      	add	sp, #28
 800accc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd0:	3501      	adds	r5, #1
 800acd2:	2d08      	cmp	r5, #8
 800acd4:	f10b 0b01 	add.w	fp, fp, #1
 800acd8:	dd06      	ble.n	800ace8 <__hexnan+0x100>
 800acda:	4544      	cmp	r4, r8
 800acdc:	d9c1      	bls.n	800ac62 <__hexnan+0x7a>
 800acde:	2300      	movs	r3, #0
 800ace0:	f844 3c04 	str.w	r3, [r4, #-4]
 800ace4:	2501      	movs	r5, #1
 800ace6:	3c04      	subs	r4, #4
 800ace8:	6822      	ldr	r2, [r4, #0]
 800acea:	f000 000f 	and.w	r0, r0, #15
 800acee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800acf2:	6020      	str	r0, [r4, #0]
 800acf4:	e7b5      	b.n	800ac62 <__hexnan+0x7a>
 800acf6:	2508      	movs	r5, #8
 800acf8:	e7b3      	b.n	800ac62 <__hexnan+0x7a>
 800acfa:	9b01      	ldr	r3, [sp, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d0dd      	beq.n	800acbc <__hexnan+0xd4>
 800ad00:	f1c3 0320 	rsb	r3, r3, #32
 800ad04:	f04f 32ff 	mov.w	r2, #4294967295
 800ad08:	40da      	lsrs	r2, r3
 800ad0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ad0e:	4013      	ands	r3, r2
 800ad10:	f846 3c04 	str.w	r3, [r6, #-4]
 800ad14:	e7d2      	b.n	800acbc <__hexnan+0xd4>
 800ad16:	3f04      	subs	r7, #4
 800ad18:	e7d0      	b.n	800acbc <__hexnan+0xd4>
 800ad1a:	2004      	movs	r0, #4
 800ad1c:	e7d5      	b.n	800acca <__hexnan+0xe2>

0800ad1e <__ascii_mbtowc>:
 800ad1e:	b082      	sub	sp, #8
 800ad20:	b901      	cbnz	r1, 800ad24 <__ascii_mbtowc+0x6>
 800ad22:	a901      	add	r1, sp, #4
 800ad24:	b142      	cbz	r2, 800ad38 <__ascii_mbtowc+0x1a>
 800ad26:	b14b      	cbz	r3, 800ad3c <__ascii_mbtowc+0x1e>
 800ad28:	7813      	ldrb	r3, [r2, #0]
 800ad2a:	600b      	str	r3, [r1, #0]
 800ad2c:	7812      	ldrb	r2, [r2, #0]
 800ad2e:	1e10      	subs	r0, r2, #0
 800ad30:	bf18      	it	ne
 800ad32:	2001      	movne	r0, #1
 800ad34:	b002      	add	sp, #8
 800ad36:	4770      	bx	lr
 800ad38:	4610      	mov	r0, r2
 800ad3a:	e7fb      	b.n	800ad34 <__ascii_mbtowc+0x16>
 800ad3c:	f06f 0001 	mvn.w	r0, #1
 800ad40:	e7f8      	b.n	800ad34 <__ascii_mbtowc+0x16>

0800ad42 <_realloc_r>:
 800ad42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad46:	4607      	mov	r7, r0
 800ad48:	4614      	mov	r4, r2
 800ad4a:	460d      	mov	r5, r1
 800ad4c:	b921      	cbnz	r1, 800ad58 <_realloc_r+0x16>
 800ad4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad52:	4611      	mov	r1, r2
 800ad54:	f7fd beb6 	b.w	8008ac4 <_malloc_r>
 800ad58:	b92a      	cbnz	r2, 800ad66 <_realloc_r+0x24>
 800ad5a:	f7fd fe3f 	bl	80089dc <_free_r>
 800ad5e:	4625      	mov	r5, r4
 800ad60:	4628      	mov	r0, r5
 800ad62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad66:	f000 f840 	bl	800adea <_malloc_usable_size_r>
 800ad6a:	4284      	cmp	r4, r0
 800ad6c:	4606      	mov	r6, r0
 800ad6e:	d802      	bhi.n	800ad76 <_realloc_r+0x34>
 800ad70:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad74:	d8f4      	bhi.n	800ad60 <_realloc_r+0x1e>
 800ad76:	4621      	mov	r1, r4
 800ad78:	4638      	mov	r0, r7
 800ad7a:	f7fd fea3 	bl	8008ac4 <_malloc_r>
 800ad7e:	4680      	mov	r8, r0
 800ad80:	b908      	cbnz	r0, 800ad86 <_realloc_r+0x44>
 800ad82:	4645      	mov	r5, r8
 800ad84:	e7ec      	b.n	800ad60 <_realloc_r+0x1e>
 800ad86:	42b4      	cmp	r4, r6
 800ad88:	4622      	mov	r2, r4
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	bf28      	it	cs
 800ad8e:	4632      	movcs	r2, r6
 800ad90:	f7ff fc42 	bl	800a618 <memcpy>
 800ad94:	4629      	mov	r1, r5
 800ad96:	4638      	mov	r0, r7
 800ad98:	f7fd fe20 	bl	80089dc <_free_r>
 800ad9c:	e7f1      	b.n	800ad82 <_realloc_r+0x40>

0800ad9e <__ascii_wctomb>:
 800ad9e:	4603      	mov	r3, r0
 800ada0:	4608      	mov	r0, r1
 800ada2:	b141      	cbz	r1, 800adb6 <__ascii_wctomb+0x18>
 800ada4:	2aff      	cmp	r2, #255	@ 0xff
 800ada6:	d904      	bls.n	800adb2 <__ascii_wctomb+0x14>
 800ada8:	228a      	movs	r2, #138	@ 0x8a
 800adaa:	601a      	str	r2, [r3, #0]
 800adac:	f04f 30ff 	mov.w	r0, #4294967295
 800adb0:	4770      	bx	lr
 800adb2:	700a      	strb	r2, [r1, #0]
 800adb4:	2001      	movs	r0, #1
 800adb6:	4770      	bx	lr

0800adb8 <fiprintf>:
 800adb8:	b40e      	push	{r1, r2, r3}
 800adba:	b503      	push	{r0, r1, lr}
 800adbc:	4601      	mov	r1, r0
 800adbe:	ab03      	add	r3, sp, #12
 800adc0:	4805      	ldr	r0, [pc, #20]	@ (800add8 <fiprintf+0x20>)
 800adc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800adc6:	6800      	ldr	r0, [r0, #0]
 800adc8:	9301      	str	r3, [sp, #4]
 800adca:	f000 f83f 	bl	800ae4c <_vfiprintf_r>
 800adce:	b002      	add	sp, #8
 800add0:	f85d eb04 	ldr.w	lr, [sp], #4
 800add4:	b003      	add	sp, #12
 800add6:	4770      	bx	lr
 800add8:	20000024 	.word	0x20000024

0800addc <abort>:
 800addc:	b508      	push	{r3, lr}
 800adde:	2006      	movs	r0, #6
 800ade0:	f000 fa08 	bl	800b1f4 <raise>
 800ade4:	2001      	movs	r0, #1
 800ade6:	f7f7 fd05 	bl	80027f4 <_exit>

0800adea <_malloc_usable_size_r>:
 800adea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adee:	1f18      	subs	r0, r3, #4
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	bfbc      	itt	lt
 800adf4:	580b      	ldrlt	r3, [r1, r0]
 800adf6:	18c0      	addlt	r0, r0, r3
 800adf8:	4770      	bx	lr

0800adfa <__sfputc_r>:
 800adfa:	6893      	ldr	r3, [r2, #8]
 800adfc:	3b01      	subs	r3, #1
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	b410      	push	{r4}
 800ae02:	6093      	str	r3, [r2, #8]
 800ae04:	da08      	bge.n	800ae18 <__sfputc_r+0x1e>
 800ae06:	6994      	ldr	r4, [r2, #24]
 800ae08:	42a3      	cmp	r3, r4
 800ae0a:	db01      	blt.n	800ae10 <__sfputc_r+0x16>
 800ae0c:	290a      	cmp	r1, #10
 800ae0e:	d103      	bne.n	800ae18 <__sfputc_r+0x1e>
 800ae10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae14:	f000 b932 	b.w	800b07c <__swbuf_r>
 800ae18:	6813      	ldr	r3, [r2, #0]
 800ae1a:	1c58      	adds	r0, r3, #1
 800ae1c:	6010      	str	r0, [r2, #0]
 800ae1e:	7019      	strb	r1, [r3, #0]
 800ae20:	4608      	mov	r0, r1
 800ae22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <__sfputs_r>:
 800ae28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	460f      	mov	r7, r1
 800ae2e:	4614      	mov	r4, r2
 800ae30:	18d5      	adds	r5, r2, r3
 800ae32:	42ac      	cmp	r4, r5
 800ae34:	d101      	bne.n	800ae3a <__sfputs_r+0x12>
 800ae36:	2000      	movs	r0, #0
 800ae38:	e007      	b.n	800ae4a <__sfputs_r+0x22>
 800ae3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae3e:	463a      	mov	r2, r7
 800ae40:	4630      	mov	r0, r6
 800ae42:	f7ff ffda 	bl	800adfa <__sfputc_r>
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	d1f3      	bne.n	800ae32 <__sfputs_r+0xa>
 800ae4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae4c <_vfiprintf_r>:
 800ae4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae50:	460d      	mov	r5, r1
 800ae52:	b09d      	sub	sp, #116	@ 0x74
 800ae54:	4614      	mov	r4, r2
 800ae56:	4698      	mov	r8, r3
 800ae58:	4606      	mov	r6, r0
 800ae5a:	b118      	cbz	r0, 800ae64 <_vfiprintf_r+0x18>
 800ae5c:	6a03      	ldr	r3, [r0, #32]
 800ae5e:	b90b      	cbnz	r3, 800ae64 <_vfiprintf_r+0x18>
 800ae60:	f7fc feb2 	bl	8007bc8 <__sinit>
 800ae64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae66:	07d9      	lsls	r1, r3, #31
 800ae68:	d405      	bmi.n	800ae76 <_vfiprintf_r+0x2a>
 800ae6a:	89ab      	ldrh	r3, [r5, #12]
 800ae6c:	059a      	lsls	r2, r3, #22
 800ae6e:	d402      	bmi.n	800ae76 <_vfiprintf_r+0x2a>
 800ae70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae72:	f7fc ffc2 	bl	8007dfa <__retarget_lock_acquire_recursive>
 800ae76:	89ab      	ldrh	r3, [r5, #12]
 800ae78:	071b      	lsls	r3, r3, #28
 800ae7a:	d501      	bpl.n	800ae80 <_vfiprintf_r+0x34>
 800ae7c:	692b      	ldr	r3, [r5, #16]
 800ae7e:	b99b      	cbnz	r3, 800aea8 <_vfiprintf_r+0x5c>
 800ae80:	4629      	mov	r1, r5
 800ae82:	4630      	mov	r0, r6
 800ae84:	f000 f938 	bl	800b0f8 <__swsetup_r>
 800ae88:	b170      	cbz	r0, 800aea8 <_vfiprintf_r+0x5c>
 800ae8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae8c:	07dc      	lsls	r4, r3, #31
 800ae8e:	d504      	bpl.n	800ae9a <_vfiprintf_r+0x4e>
 800ae90:	f04f 30ff 	mov.w	r0, #4294967295
 800ae94:	b01d      	add	sp, #116	@ 0x74
 800ae96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9a:	89ab      	ldrh	r3, [r5, #12]
 800ae9c:	0598      	lsls	r0, r3, #22
 800ae9e:	d4f7      	bmi.n	800ae90 <_vfiprintf_r+0x44>
 800aea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aea2:	f7fc ffab 	bl	8007dfc <__retarget_lock_release_recursive>
 800aea6:	e7f3      	b.n	800ae90 <_vfiprintf_r+0x44>
 800aea8:	2300      	movs	r3, #0
 800aeaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeac:	2320      	movs	r3, #32
 800aeae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aeb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeb6:	2330      	movs	r3, #48	@ 0x30
 800aeb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b068 <_vfiprintf_r+0x21c>
 800aebc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aec0:	f04f 0901 	mov.w	r9, #1
 800aec4:	4623      	mov	r3, r4
 800aec6:	469a      	mov	sl, r3
 800aec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aecc:	b10a      	cbz	r2, 800aed2 <_vfiprintf_r+0x86>
 800aece:	2a25      	cmp	r2, #37	@ 0x25
 800aed0:	d1f9      	bne.n	800aec6 <_vfiprintf_r+0x7a>
 800aed2:	ebba 0b04 	subs.w	fp, sl, r4
 800aed6:	d00b      	beq.n	800aef0 <_vfiprintf_r+0xa4>
 800aed8:	465b      	mov	r3, fp
 800aeda:	4622      	mov	r2, r4
 800aedc:	4629      	mov	r1, r5
 800aede:	4630      	mov	r0, r6
 800aee0:	f7ff ffa2 	bl	800ae28 <__sfputs_r>
 800aee4:	3001      	adds	r0, #1
 800aee6:	f000 80a7 	beq.w	800b038 <_vfiprintf_r+0x1ec>
 800aeea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aeec:	445a      	add	r2, fp
 800aeee:	9209      	str	r2, [sp, #36]	@ 0x24
 800aef0:	f89a 3000 	ldrb.w	r3, [sl]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f000 809f 	beq.w	800b038 <_vfiprintf_r+0x1ec>
 800aefa:	2300      	movs	r3, #0
 800aefc:	f04f 32ff 	mov.w	r2, #4294967295
 800af00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af04:	f10a 0a01 	add.w	sl, sl, #1
 800af08:	9304      	str	r3, [sp, #16]
 800af0a:	9307      	str	r3, [sp, #28]
 800af0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af10:	931a      	str	r3, [sp, #104]	@ 0x68
 800af12:	4654      	mov	r4, sl
 800af14:	2205      	movs	r2, #5
 800af16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af1a:	4853      	ldr	r0, [pc, #332]	@ (800b068 <_vfiprintf_r+0x21c>)
 800af1c:	f7f5 f990 	bl	8000240 <memchr>
 800af20:	9a04      	ldr	r2, [sp, #16]
 800af22:	b9d8      	cbnz	r0, 800af5c <_vfiprintf_r+0x110>
 800af24:	06d1      	lsls	r1, r2, #27
 800af26:	bf44      	itt	mi
 800af28:	2320      	movmi	r3, #32
 800af2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af2e:	0713      	lsls	r3, r2, #28
 800af30:	bf44      	itt	mi
 800af32:	232b      	movmi	r3, #43	@ 0x2b
 800af34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af38:	f89a 3000 	ldrb.w	r3, [sl]
 800af3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800af3e:	d015      	beq.n	800af6c <_vfiprintf_r+0x120>
 800af40:	9a07      	ldr	r2, [sp, #28]
 800af42:	4654      	mov	r4, sl
 800af44:	2000      	movs	r0, #0
 800af46:	f04f 0c0a 	mov.w	ip, #10
 800af4a:	4621      	mov	r1, r4
 800af4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af50:	3b30      	subs	r3, #48	@ 0x30
 800af52:	2b09      	cmp	r3, #9
 800af54:	d94b      	bls.n	800afee <_vfiprintf_r+0x1a2>
 800af56:	b1b0      	cbz	r0, 800af86 <_vfiprintf_r+0x13a>
 800af58:	9207      	str	r2, [sp, #28]
 800af5a:	e014      	b.n	800af86 <_vfiprintf_r+0x13a>
 800af5c:	eba0 0308 	sub.w	r3, r0, r8
 800af60:	fa09 f303 	lsl.w	r3, r9, r3
 800af64:	4313      	orrs	r3, r2
 800af66:	9304      	str	r3, [sp, #16]
 800af68:	46a2      	mov	sl, r4
 800af6a:	e7d2      	b.n	800af12 <_vfiprintf_r+0xc6>
 800af6c:	9b03      	ldr	r3, [sp, #12]
 800af6e:	1d19      	adds	r1, r3, #4
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	9103      	str	r1, [sp, #12]
 800af74:	2b00      	cmp	r3, #0
 800af76:	bfbb      	ittet	lt
 800af78:	425b      	neglt	r3, r3
 800af7a:	f042 0202 	orrlt.w	r2, r2, #2
 800af7e:	9307      	strge	r3, [sp, #28]
 800af80:	9307      	strlt	r3, [sp, #28]
 800af82:	bfb8      	it	lt
 800af84:	9204      	strlt	r2, [sp, #16]
 800af86:	7823      	ldrb	r3, [r4, #0]
 800af88:	2b2e      	cmp	r3, #46	@ 0x2e
 800af8a:	d10a      	bne.n	800afa2 <_vfiprintf_r+0x156>
 800af8c:	7863      	ldrb	r3, [r4, #1]
 800af8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800af90:	d132      	bne.n	800aff8 <_vfiprintf_r+0x1ac>
 800af92:	9b03      	ldr	r3, [sp, #12]
 800af94:	1d1a      	adds	r2, r3, #4
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	9203      	str	r2, [sp, #12]
 800af9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af9e:	3402      	adds	r4, #2
 800afa0:	9305      	str	r3, [sp, #20]
 800afa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b078 <_vfiprintf_r+0x22c>
 800afa6:	7821      	ldrb	r1, [r4, #0]
 800afa8:	2203      	movs	r2, #3
 800afaa:	4650      	mov	r0, sl
 800afac:	f7f5 f948 	bl	8000240 <memchr>
 800afb0:	b138      	cbz	r0, 800afc2 <_vfiprintf_r+0x176>
 800afb2:	9b04      	ldr	r3, [sp, #16]
 800afb4:	eba0 000a 	sub.w	r0, r0, sl
 800afb8:	2240      	movs	r2, #64	@ 0x40
 800afba:	4082      	lsls	r2, r0
 800afbc:	4313      	orrs	r3, r2
 800afbe:	3401      	adds	r4, #1
 800afc0:	9304      	str	r3, [sp, #16]
 800afc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc6:	4829      	ldr	r0, [pc, #164]	@ (800b06c <_vfiprintf_r+0x220>)
 800afc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afcc:	2206      	movs	r2, #6
 800afce:	f7f5 f937 	bl	8000240 <memchr>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d03f      	beq.n	800b056 <_vfiprintf_r+0x20a>
 800afd6:	4b26      	ldr	r3, [pc, #152]	@ (800b070 <_vfiprintf_r+0x224>)
 800afd8:	bb1b      	cbnz	r3, 800b022 <_vfiprintf_r+0x1d6>
 800afda:	9b03      	ldr	r3, [sp, #12]
 800afdc:	3307      	adds	r3, #7
 800afde:	f023 0307 	bic.w	r3, r3, #7
 800afe2:	3308      	adds	r3, #8
 800afe4:	9303      	str	r3, [sp, #12]
 800afe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe8:	443b      	add	r3, r7
 800afea:	9309      	str	r3, [sp, #36]	@ 0x24
 800afec:	e76a      	b.n	800aec4 <_vfiprintf_r+0x78>
 800afee:	fb0c 3202 	mla	r2, ip, r2, r3
 800aff2:	460c      	mov	r4, r1
 800aff4:	2001      	movs	r0, #1
 800aff6:	e7a8      	b.n	800af4a <_vfiprintf_r+0xfe>
 800aff8:	2300      	movs	r3, #0
 800affa:	3401      	adds	r4, #1
 800affc:	9305      	str	r3, [sp, #20]
 800affe:	4619      	mov	r1, r3
 800b000:	f04f 0c0a 	mov.w	ip, #10
 800b004:	4620      	mov	r0, r4
 800b006:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b00a:	3a30      	subs	r2, #48	@ 0x30
 800b00c:	2a09      	cmp	r2, #9
 800b00e:	d903      	bls.n	800b018 <_vfiprintf_r+0x1cc>
 800b010:	2b00      	cmp	r3, #0
 800b012:	d0c6      	beq.n	800afa2 <_vfiprintf_r+0x156>
 800b014:	9105      	str	r1, [sp, #20]
 800b016:	e7c4      	b.n	800afa2 <_vfiprintf_r+0x156>
 800b018:	fb0c 2101 	mla	r1, ip, r1, r2
 800b01c:	4604      	mov	r4, r0
 800b01e:	2301      	movs	r3, #1
 800b020:	e7f0      	b.n	800b004 <_vfiprintf_r+0x1b8>
 800b022:	ab03      	add	r3, sp, #12
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	462a      	mov	r2, r5
 800b028:	4b12      	ldr	r3, [pc, #72]	@ (800b074 <_vfiprintf_r+0x228>)
 800b02a:	a904      	add	r1, sp, #16
 800b02c:	4630      	mov	r0, r6
 800b02e:	f7fb ff93 	bl	8006f58 <_printf_float>
 800b032:	4607      	mov	r7, r0
 800b034:	1c78      	adds	r0, r7, #1
 800b036:	d1d6      	bne.n	800afe6 <_vfiprintf_r+0x19a>
 800b038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b03a:	07d9      	lsls	r1, r3, #31
 800b03c:	d405      	bmi.n	800b04a <_vfiprintf_r+0x1fe>
 800b03e:	89ab      	ldrh	r3, [r5, #12]
 800b040:	059a      	lsls	r2, r3, #22
 800b042:	d402      	bmi.n	800b04a <_vfiprintf_r+0x1fe>
 800b044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b046:	f7fc fed9 	bl	8007dfc <__retarget_lock_release_recursive>
 800b04a:	89ab      	ldrh	r3, [r5, #12]
 800b04c:	065b      	lsls	r3, r3, #25
 800b04e:	f53f af1f 	bmi.w	800ae90 <_vfiprintf_r+0x44>
 800b052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b054:	e71e      	b.n	800ae94 <_vfiprintf_r+0x48>
 800b056:	ab03      	add	r3, sp, #12
 800b058:	9300      	str	r3, [sp, #0]
 800b05a:	462a      	mov	r2, r5
 800b05c:	4b05      	ldr	r3, [pc, #20]	@ (800b074 <_vfiprintf_r+0x228>)
 800b05e:	a904      	add	r1, sp, #16
 800b060:	4630      	mov	r0, r6
 800b062:	f7fc fa01 	bl	8007468 <_printf_i>
 800b066:	e7e4      	b.n	800b032 <_vfiprintf_r+0x1e6>
 800b068:	0800b799 	.word	0x0800b799
 800b06c:	0800b7a3 	.word	0x0800b7a3
 800b070:	08006f59 	.word	0x08006f59
 800b074:	0800ae29 	.word	0x0800ae29
 800b078:	0800b79f 	.word	0x0800b79f

0800b07c <__swbuf_r>:
 800b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07e:	460e      	mov	r6, r1
 800b080:	4614      	mov	r4, r2
 800b082:	4605      	mov	r5, r0
 800b084:	b118      	cbz	r0, 800b08e <__swbuf_r+0x12>
 800b086:	6a03      	ldr	r3, [r0, #32]
 800b088:	b90b      	cbnz	r3, 800b08e <__swbuf_r+0x12>
 800b08a:	f7fc fd9d 	bl	8007bc8 <__sinit>
 800b08e:	69a3      	ldr	r3, [r4, #24]
 800b090:	60a3      	str	r3, [r4, #8]
 800b092:	89a3      	ldrh	r3, [r4, #12]
 800b094:	071a      	lsls	r2, r3, #28
 800b096:	d501      	bpl.n	800b09c <__swbuf_r+0x20>
 800b098:	6923      	ldr	r3, [r4, #16]
 800b09a:	b943      	cbnz	r3, 800b0ae <__swbuf_r+0x32>
 800b09c:	4621      	mov	r1, r4
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f000 f82a 	bl	800b0f8 <__swsetup_r>
 800b0a4:	b118      	cbz	r0, 800b0ae <__swbuf_r+0x32>
 800b0a6:	f04f 37ff 	mov.w	r7, #4294967295
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	6922      	ldr	r2, [r4, #16]
 800b0b2:	1a98      	subs	r0, r3, r2
 800b0b4:	6963      	ldr	r3, [r4, #20]
 800b0b6:	b2f6      	uxtb	r6, r6
 800b0b8:	4283      	cmp	r3, r0
 800b0ba:	4637      	mov	r7, r6
 800b0bc:	dc05      	bgt.n	800b0ca <__swbuf_r+0x4e>
 800b0be:	4621      	mov	r1, r4
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	f7ff fa45 	bl	800a550 <_fflush_r>
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d1ed      	bne.n	800b0a6 <__swbuf_r+0x2a>
 800b0ca:	68a3      	ldr	r3, [r4, #8]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	60a3      	str	r3, [r4, #8]
 800b0d0:	6823      	ldr	r3, [r4, #0]
 800b0d2:	1c5a      	adds	r2, r3, #1
 800b0d4:	6022      	str	r2, [r4, #0]
 800b0d6:	701e      	strb	r6, [r3, #0]
 800b0d8:	6962      	ldr	r2, [r4, #20]
 800b0da:	1c43      	adds	r3, r0, #1
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d004      	beq.n	800b0ea <__swbuf_r+0x6e>
 800b0e0:	89a3      	ldrh	r3, [r4, #12]
 800b0e2:	07db      	lsls	r3, r3, #31
 800b0e4:	d5e1      	bpl.n	800b0aa <__swbuf_r+0x2e>
 800b0e6:	2e0a      	cmp	r6, #10
 800b0e8:	d1df      	bne.n	800b0aa <__swbuf_r+0x2e>
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	f7ff fa2f 	bl	800a550 <_fflush_r>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d0d9      	beq.n	800b0aa <__swbuf_r+0x2e>
 800b0f6:	e7d6      	b.n	800b0a6 <__swbuf_r+0x2a>

0800b0f8 <__swsetup_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	4b29      	ldr	r3, [pc, #164]	@ (800b1a0 <__swsetup_r+0xa8>)
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	6818      	ldr	r0, [r3, #0]
 800b100:	460c      	mov	r4, r1
 800b102:	b118      	cbz	r0, 800b10c <__swsetup_r+0x14>
 800b104:	6a03      	ldr	r3, [r0, #32]
 800b106:	b90b      	cbnz	r3, 800b10c <__swsetup_r+0x14>
 800b108:	f7fc fd5e 	bl	8007bc8 <__sinit>
 800b10c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b110:	0719      	lsls	r1, r3, #28
 800b112:	d422      	bmi.n	800b15a <__swsetup_r+0x62>
 800b114:	06da      	lsls	r2, r3, #27
 800b116:	d407      	bmi.n	800b128 <__swsetup_r+0x30>
 800b118:	2209      	movs	r2, #9
 800b11a:	602a      	str	r2, [r5, #0]
 800b11c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b120:	81a3      	strh	r3, [r4, #12]
 800b122:	f04f 30ff 	mov.w	r0, #4294967295
 800b126:	e033      	b.n	800b190 <__swsetup_r+0x98>
 800b128:	0758      	lsls	r0, r3, #29
 800b12a:	d512      	bpl.n	800b152 <__swsetup_r+0x5a>
 800b12c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b12e:	b141      	cbz	r1, 800b142 <__swsetup_r+0x4a>
 800b130:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b134:	4299      	cmp	r1, r3
 800b136:	d002      	beq.n	800b13e <__swsetup_r+0x46>
 800b138:	4628      	mov	r0, r5
 800b13a:	f7fd fc4f 	bl	80089dc <_free_r>
 800b13e:	2300      	movs	r3, #0
 800b140:	6363      	str	r3, [r4, #52]	@ 0x34
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b148:	81a3      	strh	r3, [r4, #12]
 800b14a:	2300      	movs	r3, #0
 800b14c:	6063      	str	r3, [r4, #4]
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	f043 0308 	orr.w	r3, r3, #8
 800b158:	81a3      	strh	r3, [r4, #12]
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	b94b      	cbnz	r3, 800b172 <__swsetup_r+0x7a>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b168:	d003      	beq.n	800b172 <__swsetup_r+0x7a>
 800b16a:	4621      	mov	r1, r4
 800b16c:	4628      	mov	r0, r5
 800b16e:	f000 f883 	bl	800b278 <__smakebuf_r>
 800b172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b176:	f013 0201 	ands.w	r2, r3, #1
 800b17a:	d00a      	beq.n	800b192 <__swsetup_r+0x9a>
 800b17c:	2200      	movs	r2, #0
 800b17e:	60a2      	str	r2, [r4, #8]
 800b180:	6962      	ldr	r2, [r4, #20]
 800b182:	4252      	negs	r2, r2
 800b184:	61a2      	str	r2, [r4, #24]
 800b186:	6922      	ldr	r2, [r4, #16]
 800b188:	b942      	cbnz	r2, 800b19c <__swsetup_r+0xa4>
 800b18a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b18e:	d1c5      	bne.n	800b11c <__swsetup_r+0x24>
 800b190:	bd38      	pop	{r3, r4, r5, pc}
 800b192:	0799      	lsls	r1, r3, #30
 800b194:	bf58      	it	pl
 800b196:	6962      	ldrpl	r2, [r4, #20]
 800b198:	60a2      	str	r2, [r4, #8]
 800b19a:	e7f4      	b.n	800b186 <__swsetup_r+0x8e>
 800b19c:	2000      	movs	r0, #0
 800b19e:	e7f7      	b.n	800b190 <__swsetup_r+0x98>
 800b1a0:	20000024 	.word	0x20000024

0800b1a4 <_raise_r>:
 800b1a4:	291f      	cmp	r1, #31
 800b1a6:	b538      	push	{r3, r4, r5, lr}
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	460c      	mov	r4, r1
 800b1ac:	d904      	bls.n	800b1b8 <_raise_r+0x14>
 800b1ae:	2316      	movs	r3, #22
 800b1b0:	6003      	str	r3, [r0, #0]
 800b1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1ba:	b112      	cbz	r2, 800b1c2 <_raise_r+0x1e>
 800b1bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1c0:	b94b      	cbnz	r3, 800b1d6 <_raise_r+0x32>
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	f000 f830 	bl	800b228 <_getpid_r>
 800b1c8:	4622      	mov	r2, r4
 800b1ca:	4601      	mov	r1, r0
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1d2:	f000 b817 	b.w	800b204 <_kill_r>
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d00a      	beq.n	800b1f0 <_raise_r+0x4c>
 800b1da:	1c59      	adds	r1, r3, #1
 800b1dc:	d103      	bne.n	800b1e6 <_raise_r+0x42>
 800b1de:	2316      	movs	r3, #22
 800b1e0:	6003      	str	r3, [r0, #0]
 800b1e2:	2001      	movs	r0, #1
 800b1e4:	e7e7      	b.n	800b1b6 <_raise_r+0x12>
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	4798      	blx	r3
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	e7e0      	b.n	800b1b6 <_raise_r+0x12>

0800b1f4 <raise>:
 800b1f4:	4b02      	ldr	r3, [pc, #8]	@ (800b200 <raise+0xc>)
 800b1f6:	4601      	mov	r1, r0
 800b1f8:	6818      	ldr	r0, [r3, #0]
 800b1fa:	f7ff bfd3 	b.w	800b1a4 <_raise_r>
 800b1fe:	bf00      	nop
 800b200:	20000024 	.word	0x20000024

0800b204 <_kill_r>:
 800b204:	b538      	push	{r3, r4, r5, lr}
 800b206:	4d07      	ldr	r5, [pc, #28]	@ (800b224 <_kill_r+0x20>)
 800b208:	2300      	movs	r3, #0
 800b20a:	4604      	mov	r4, r0
 800b20c:	4608      	mov	r0, r1
 800b20e:	4611      	mov	r1, r2
 800b210:	602b      	str	r3, [r5, #0]
 800b212:	f7f7 fadf 	bl	80027d4 <_kill>
 800b216:	1c43      	adds	r3, r0, #1
 800b218:	d102      	bne.n	800b220 <_kill_r+0x1c>
 800b21a:	682b      	ldr	r3, [r5, #0]
 800b21c:	b103      	cbz	r3, 800b220 <_kill_r+0x1c>
 800b21e:	6023      	str	r3, [r4, #0]
 800b220:	bd38      	pop	{r3, r4, r5, pc}
 800b222:	bf00      	nop
 800b224:	200005cc 	.word	0x200005cc

0800b228 <_getpid_r>:
 800b228:	f7f7 bacc 	b.w	80027c4 <_getpid>

0800b22c <__swhatbuf_r>:
 800b22c:	b570      	push	{r4, r5, r6, lr}
 800b22e:	460c      	mov	r4, r1
 800b230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b234:	2900      	cmp	r1, #0
 800b236:	b096      	sub	sp, #88	@ 0x58
 800b238:	4615      	mov	r5, r2
 800b23a:	461e      	mov	r6, r3
 800b23c:	da0d      	bge.n	800b25a <__swhatbuf_r+0x2e>
 800b23e:	89a3      	ldrh	r3, [r4, #12]
 800b240:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b244:	f04f 0100 	mov.w	r1, #0
 800b248:	bf14      	ite	ne
 800b24a:	2340      	movne	r3, #64	@ 0x40
 800b24c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b250:	2000      	movs	r0, #0
 800b252:	6031      	str	r1, [r6, #0]
 800b254:	602b      	str	r3, [r5, #0]
 800b256:	b016      	add	sp, #88	@ 0x58
 800b258:	bd70      	pop	{r4, r5, r6, pc}
 800b25a:	466a      	mov	r2, sp
 800b25c:	f000 f848 	bl	800b2f0 <_fstat_r>
 800b260:	2800      	cmp	r0, #0
 800b262:	dbec      	blt.n	800b23e <__swhatbuf_r+0x12>
 800b264:	9901      	ldr	r1, [sp, #4]
 800b266:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b26a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b26e:	4259      	negs	r1, r3
 800b270:	4159      	adcs	r1, r3
 800b272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b276:	e7eb      	b.n	800b250 <__swhatbuf_r+0x24>

0800b278 <__smakebuf_r>:
 800b278:	898b      	ldrh	r3, [r1, #12]
 800b27a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b27c:	079d      	lsls	r5, r3, #30
 800b27e:	4606      	mov	r6, r0
 800b280:	460c      	mov	r4, r1
 800b282:	d507      	bpl.n	800b294 <__smakebuf_r+0x1c>
 800b284:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b288:	6023      	str	r3, [r4, #0]
 800b28a:	6123      	str	r3, [r4, #16]
 800b28c:	2301      	movs	r3, #1
 800b28e:	6163      	str	r3, [r4, #20]
 800b290:	b003      	add	sp, #12
 800b292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b294:	ab01      	add	r3, sp, #4
 800b296:	466a      	mov	r2, sp
 800b298:	f7ff ffc8 	bl	800b22c <__swhatbuf_r>
 800b29c:	9f00      	ldr	r7, [sp, #0]
 800b29e:	4605      	mov	r5, r0
 800b2a0:	4639      	mov	r1, r7
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	f7fd fc0e 	bl	8008ac4 <_malloc_r>
 800b2a8:	b948      	cbnz	r0, 800b2be <__smakebuf_r+0x46>
 800b2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ae:	059a      	lsls	r2, r3, #22
 800b2b0:	d4ee      	bmi.n	800b290 <__smakebuf_r+0x18>
 800b2b2:	f023 0303 	bic.w	r3, r3, #3
 800b2b6:	f043 0302 	orr.w	r3, r3, #2
 800b2ba:	81a3      	strh	r3, [r4, #12]
 800b2bc:	e7e2      	b.n	800b284 <__smakebuf_r+0xc>
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	6020      	str	r0, [r4, #0]
 800b2c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2c6:	81a3      	strh	r3, [r4, #12]
 800b2c8:	9b01      	ldr	r3, [sp, #4]
 800b2ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b2ce:	b15b      	cbz	r3, 800b2e8 <__smakebuf_r+0x70>
 800b2d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	f000 f81d 	bl	800b314 <_isatty_r>
 800b2da:	b128      	cbz	r0, 800b2e8 <__smakebuf_r+0x70>
 800b2dc:	89a3      	ldrh	r3, [r4, #12]
 800b2de:	f023 0303 	bic.w	r3, r3, #3
 800b2e2:	f043 0301 	orr.w	r3, r3, #1
 800b2e6:	81a3      	strh	r3, [r4, #12]
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	431d      	orrs	r5, r3
 800b2ec:	81a5      	strh	r5, [r4, #12]
 800b2ee:	e7cf      	b.n	800b290 <__smakebuf_r+0x18>

0800b2f0 <_fstat_r>:
 800b2f0:	b538      	push	{r3, r4, r5, lr}
 800b2f2:	4d07      	ldr	r5, [pc, #28]	@ (800b310 <_fstat_r+0x20>)
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	4608      	mov	r0, r1
 800b2fa:	4611      	mov	r1, r2
 800b2fc:	602b      	str	r3, [r5, #0]
 800b2fe:	f7f7 fac9 	bl	8002894 <_fstat>
 800b302:	1c43      	adds	r3, r0, #1
 800b304:	d102      	bne.n	800b30c <_fstat_r+0x1c>
 800b306:	682b      	ldr	r3, [r5, #0]
 800b308:	b103      	cbz	r3, 800b30c <_fstat_r+0x1c>
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	bd38      	pop	{r3, r4, r5, pc}
 800b30e:	bf00      	nop
 800b310:	200005cc 	.word	0x200005cc

0800b314 <_isatty_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4d06      	ldr	r5, [pc, #24]	@ (800b330 <_isatty_r+0x1c>)
 800b318:	2300      	movs	r3, #0
 800b31a:	4604      	mov	r4, r0
 800b31c:	4608      	mov	r0, r1
 800b31e:	602b      	str	r3, [r5, #0]
 800b320:	f7f7 fac8 	bl	80028b4 <_isatty>
 800b324:	1c43      	adds	r3, r0, #1
 800b326:	d102      	bne.n	800b32e <_isatty_r+0x1a>
 800b328:	682b      	ldr	r3, [r5, #0]
 800b32a:	b103      	cbz	r3, 800b32e <_isatty_r+0x1a>
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	bd38      	pop	{r3, r4, r5, pc}
 800b330:	200005cc 	.word	0x200005cc

0800b334 <_init>:
 800b334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b336:	bf00      	nop
 800b338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b33a:	bc08      	pop	{r3}
 800b33c:	469e      	mov	lr, r3
 800b33e:	4770      	bx	lr

0800b340 <_fini>:
 800b340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b342:	bf00      	nop
 800b344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b346:	bc08      	pop	{r3}
 800b348:	469e      	mov	lr, r3
 800b34a:	4770      	bx	lr
